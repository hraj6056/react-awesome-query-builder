{"version":3,"file":"440.bundle.js","mappings":"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","sources":["webpack://@react-awesome-query-builder/examples/./demo_switch/select.tsx","webpack://@react-awesome-query-builder/examples/./demo_switch/index.tsx","webpack://@react-awesome-query-builder/examples/./demo_switch/config.tsx"],"sourcesContent":["import React, { FC, memo } from \"react\";\nimport Creatable from \"react-select/creatable\";\nimport { MultiValue } from \"react-select\";\nimport { SpelConcatPart } from \"@react-awesome-query-builder/ui\";\n\ninterface OptionItem {\n  id: string\n  label: string\n  properties?: any\n  type?: any\n  __isNew__?: boolean\n}\n\nconst options: OptionItem[] = [\n  {\n    id: \"foo\",\n    label: \"Foo\",\n    properties: [\"REQUIRED\", \"CREATE\", \"UPDATE\"],\n    type: { format: \"INTEGER\" },\n  },\n  {\n    id: \"bar\",\n    label: \"Bar\",\n    properties: [\"REQUIRED\", \"CREATE\", \"UPDATE\"],\n    type: { format: \"INTEGER\" },\n  },\n];\n\n\ninterface Iprops {\n  k: string\n  value?: SpelConcatPart[]\n  setValue(value: SpelConcatPart[]): void\n}\n\nconst MltSelector: FC<Iprops> = ({\n  k,\n  value,\n  setValue,\n}) => {\n  function initMltSelectValueHandler(list: OptionItem[], val: SpelConcatPart[]) {\n    if (val) {\n      return val.map((item: SpelConcatPart) => {\n        let res = item.type != \"const\" && list && list.find((obj) => obj.id === item.value);\n        if (!res) {\n          res = { id: item.value, label: item.value, __isNew__: true };\n        }\n        return res;\n      });\n    }\n    return [];\n  }\n\n  function changeHandler(values: MultiValue<OptionItem>, actionMeta: any, setValue: (value: SpelConcatPart[]) => void): any[] {\n    const res = values.map((val) => ({\n      value: val.id || val.label,\n      type: val.__isNew__ ? \"const\" : \"property\"\n    }));\n    setValue(res as SpelConcatPart[]);\n    return res;\n  }\n\n  return (\n    <Creatable\n      menuPortalTarget={document.body}\n      key={k}\n      isMulti\n      options={options}\n      value={initMltSelectValueHandler(options, value!)}\n      getOptionValue={(option: OptionItem) => option.id}\n      getOptionLabel={(option: OptionItem) => option.label}\n      onChange={(values, actionMeta) => {\n        changeHandler(values, actionMeta, setValue);\n      }}\n    />\n  );\n};\n\nexport default memo(MltSelector);\n","import React, { useState, useCallback } from \"react\";\nimport {\n  Query, Builder, BuilderProps,\n  Utils as QbUtils,\n  JsonSwitchGroup,\n  Config,\n  ImmutableTree\n} from \"@react-awesome-query-builder/ui\";\nimport { LazyStyleModule } from \"../utils\";\n// @ts-ignore\nimport styles from \"@react-awesome-query-builder/material/css/styles.scss\";\nimport getConfig from \"./config\";\n\n(styles as LazyStyleModule).use();\n\nconst config: Config = getConfig();\n\nconst preStyle = { backgroundColor: \"darkgrey\", margin: \"10px\", padding: \"10px\" };\nconst preErrorStyle = { backgroundColor: \"lightpink\", margin: \"10px\", padding: \"10px\" };\n\nconst emptyJsonTree: JsonSwitchGroup = {\n  id: QbUtils.uuid(),\n  type: \"switch_group\",\n};\nconst emptyTree: ImmutableTree = QbUtils.checkTree(QbUtils.loadTree(emptyJsonTree), config);\n\n\nconst Demo: React.FC = () => {\n  const [state, setState] = useState({\n    tree: emptyTree,\n    config: config,\n    spelStr: \"\",\n    spelErrors: [] as string[],\n  });\n\n  const onChange = useCallback((tree: ImmutableTree, config: Config) => {\n    setState(prevState => ({ ...prevState, tree, config }));\n  }, []);\n\n  const renderBuilder = useCallback((props: BuilderProps) => (\n    <div className=\"query-builder-container\" style={{ padding: \"10px\" }}>\n      <div className=\"query-builder qb-lite\">\n        <Builder {...props} />\n      </div>\n    </div>\n  ), []);\n\n  const onChangeSpelStr = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const spelStr = e.target.value;\n    setState({\n      ...state, \n      spelStr\n    });\n  };\n\n  const importFromSpel = () => {\n    const [tree, spelErrors] = QbUtils.loadFromSpel(state.spelStr, state.config);\n    setState({\n      ...state, \n      tree: tree ? QbUtils.checkTree(tree, state.config) : state.tree,\n      spelErrors\n    });\n  };\n\n  const renderQueryBuilder = () => (\n    <Query\n      {...config}\n      value={state.tree}\n      onChange={onChange}\n      renderBuilder={renderBuilder}\n    />\n  );\n\n  const renderSpelOutput = () => (\n    <div className=\"query-builder-result\">\n      Output SpEL:\n      <pre>\n        {QbUtils.spelFormat(state.tree, state.config)}\n      </pre>\n      Values:\n      <pre>\n        {JSON.stringify(QbUtils.getSwitchValues(state.tree), undefined, 2)}\n      </pre>\n      <br/>\n      <hr/>\n      <br/>\n      Tree:\n      <pre>\n        {JSON.stringify(QbUtils.getTree(state.tree), undefined, 2)}\n      </pre>\n    </div>\n  );\n\n  const renderSpelInput = () => (\n    <div className=\"query-import-spel\">\n      Input SpEL:\n      <input type=\"text\" size={150} value={state.spelStr} onChange={onChangeSpelStr} />\n      <button onClick={importFromSpel}>import</button>\n      <br />\n      { state.spelErrors.length > 0 \n          && <pre style={preErrorStyle}>\n            {JSON.stringify(state.spelErrors, undefined, 2)}\n          </pre> \n      }\n    </div>\n  );\n\n  return (\n    <div>\n      {renderSpelInput()}\n      {renderQueryBuilder()}\n      {renderSpelOutput()}\n    </div>\n  );\n};\n\nexport default Demo;\n","import React from \"react\";\nimport {\n  Utils as QbUtils, \n  Widgets, Fields, Config, Settings, SpelConcatPart, WidgetProps\n} from \"@react-awesome-query-builder/ui\";\nimport { MaterialConfig } from \"@react-awesome-query-builder/material\";\nimport ReactSelect from \"./select\";\n\nexport default (): Config => {\n  const InitialConfig = MaterialConfig;\n\n  const widgets: Widgets = {\n    ...InitialConfig.widgets,\n    case_value: {\n      ...InitialConfig.widgets.case_value,\n      spelFormatValue: QbUtils.ExportUtils.spelFormatConcat,\n      spelImportValue: QbUtils.ExportUtils.spelImportConcat,\n      factory: ({value, setValue, id}: WidgetProps) => \n        <ReactSelect \n          value={value as Array<SpelConcatPart>}\n          setValue={setValue}\n          k={id!}\n        />\n    }\n  };\n\n  const fields: Fields = {\n    text: {\n      label: \"Text\",\n      type: \"text\",\n      valueSources: [\"value\", \"field\"],\n      excludeOperators: [\"proximity\"]\n    },\n    qty: {\n      label: \"Qty\",\n      type: \"number\",\n      fieldSettings: {\n        min: 0\n      },\n      valueSources: [\"value\", \"field\"],\n      preferWidgets: [\"number\"]\n    },\n    price: {\n      label: \"Price\",\n      type: \"number\",\n      valueSources: [\"value\"],\n      fieldSettings: {\n        min: 10,\n        max: 100\n      },\n      preferWidgets: [\"slider\", \"rangeslider\"],\n      isSpelVariable: true\n    },\n    color: {\n      label: \"Color\",\n      type: \"select\",\n      valueSources: [\"value\"],\n      fieldSettings: {\n        listValues: [\n          { value: \"yellow\", title: \"Yellow\" },\n          { value: \"green\", title: \"Green\" },\n          { value: \"orange\", title: \"Orange\" }\n        ]\n      }\n    },\n    is_promotion: {\n      label: \"Promo?\",\n      type: \"boolean\",\n      operators: [\"equal\"],\n      valueSources: [\"value\"]\n    }\n  };\n\n  const settings: Settings = {\n    ...InitialConfig.settings,\n    maxNumberOfCases: 3,\n    canRegroupCases: true,\n    maxNesting: 3,\n    canLeaveEmptyCase: false,\n  };\n\n  const config: Config = {\n    ...InitialConfig,\n    widgets,\n    fields,\n    settings\n  };\n\n  return config;\n};\n\n\n"],"names":["options","id","label","properties","type","format","MltSelector","_ref","list","val","k","value","setValue","React","Creatable","menuPortalTarget","document","body","key","isMulti","map","item","res","find","obj","__isNew__","getOptionValue","option","getOptionLabel","onChange","values","actionMeta","changeHandler","memo","styles","use","InitialConfig","widgets","settings","config","_objectSpread","MaterialConfig","case_value","spelFormatValue","QbUtils","ExportUtils","spelFormatConcat","spelImportValue","spelImportConcat","factory","ReactSelect","maxNumberOfCases","canRegroupCases","maxNesting","canLeaveEmptyCase","fields","text","valueSources","excludeOperators","qty","fieldSettings","min","preferWidgets","price","max","isSpelVariable","color","listValues","title","is_promotion","operators","preErrorStyle","backgroundColor","margin","padding","emptyJsonTree","uuid","emptyTree","checkTree","loadTree","_useState","useState","tree","spelStr","spelErrors","_useState2","_slicedToArray","state","setState","useCallback","prevState","renderBuilder","props","className","style","Builder","size","e","target","onClick","_QbUtils$loadFromSpel","loadFromSpel","_QbUtils$loadFromSpel2","length","JSON","stringify","undefined","Query","_extends","spelFormat","getSwitchValues","getTree"],"sourceRoot":""}