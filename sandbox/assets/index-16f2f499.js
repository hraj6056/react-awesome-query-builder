var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var require_index_001 = __commonJS({
  "assets/index-16f2f499.js"(exports, module) {
    function _mergeNamespaces(n2, m2) {
      for (var i = 0; i < m2.length; i++) {
        const e2 = m2[i];
        if (typeof e2 !== "string" && !Array.isArray(e2)) {
          for (const k2 in e2) {
            if (k2 !== "default" && !(k2 in n2)) {
              const d2 = Object.getOwnPropertyDescriptor(e2, k2);
              if (d2) {
                Object.defineProperty(n2, k2, d2.get ? d2 : {
                  enumerable: true,
                  get: () => e2[k2]
                });
              }
            }
          }
        }
      }
      return Object.freeze(Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }));
    }
    const BasicFuncs = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      get LINEAR_REGRESSION() {
        return LINEAR_REGRESSION;
      },
      get LOWER() {
        return LOWER;
      },
      get NOW() {
        return NOW;
      },
      get RELATIVE_DATETIME() {
        return RELATIVE_DATETIME;
      },
      get UPPER() {
        return UPPER;
      }
    }, Symbol.toStringTag, { value: "Module" }));
    (function polyfill() {
      const relList = document.createElement("link").relList;
      if (relList && relList.supports && relList.supports("modulepreload")) {
        return;
      }
      for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
        processPreload(link);
      }
      new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          if (mutation.type !== "childList") {
            continue;
          }
          for (const node2 of mutation.addedNodes) {
            if (node2.tagName === "LINK" && node2.rel === "modulepreload")
              processPreload(node2);
          }
        }
      }).observe(document, { childList: true, subtree: true });
      function getFetchOpts(link) {
        const fetchOpts = {};
        if (link.integrity)
          fetchOpts.integrity = link.integrity;
        if (link.referrerPolicy)
          fetchOpts.referrerPolicy = link.referrerPolicy;
        if (link.crossOrigin === "use-credentials")
          fetchOpts.credentials = "include";
        else if (link.crossOrigin === "anonymous")
          fetchOpts.credentials = "omit";
        else
          fetchOpts.credentials = "same-origin";
        return fetchOpts;
      }
      function processPreload(link) {
        if (link.ep)
          return;
        link.ep = true;
        const fetchOpts = getFetchOpts(link);
        fetch(link.href, fetchOpts);
      }
    })();
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function getDefaultExportFromCjs(x2) {
      return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
    }
    function getAugmentedNamespace(n2) {
      if (n2.__esModule)
        return n2;
      var f2 = n2.default;
      if (typeof f2 == "function") {
        var a = function a2() {
          if (this instanceof a2) {
            return Reflect.construct(f2, arguments, this.constructor);
          }
          return f2.apply(this, arguments);
        };
        a.prototype = f2.prototype;
      } else
        a = {};
      Object.defineProperty(a, "__esModule", { value: true });
      Object.keys(n2).forEach(function(k2) {
        var d2 = Object.getOwnPropertyDescriptor(n2, k2);
        Object.defineProperty(a, k2, d2.get ? d2 : {
          enumerable: true,
          get: function() {
            return n2[k2];
          }
        });
      });
      return a;
    }
    var jsxRuntime = { exports: {} };
    var reactJsxRuntime_production_min = {};
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
    var hasOwnProperty$d = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject$1(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    var objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
      var from2;
      var to2 = toObject$1(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from2 = Object(arguments[s]);
        for (var key in from2) {
          if (hasOwnProperty$d.call(from2, key)) {
            to2[key] = from2[key];
          }
        }
        if (getOwnPropertySymbols$1) {
          symbols = getOwnPropertySymbols$1(from2);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from2, symbols[i])) {
              to2[symbols[i]] = from2[symbols[i]];
            }
          }
        }
      }
      return to2;
    };
    var react = { exports: {} };
    var react_production_min = {};
    /** @license React v17.0.2
     * react.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var l$3 = objectAssign, n$4 = 60103, p$4 = 60106;
    react_production_min.Fragment = 60107;
    react_production_min.StrictMode = 60108;
    react_production_min.Profiler = 60114;
    var q$4 = 60109, r$4 = 60110, t$2 = 60112;
    react_production_min.Suspense = 60113;
    var u$2 = 60115, v$3 = 60116;
    if ("function" === typeof Symbol && Symbol.for) {
      var w$2 = Symbol.for;
      n$4 = w$2("react.element");
      p$4 = w$2("react.portal");
      react_production_min.Fragment = w$2("react.fragment");
      react_production_min.StrictMode = w$2("react.strict_mode");
      react_production_min.Profiler = w$2("react.profiler");
      q$4 = w$2("react.provider");
      r$4 = w$2("react.context");
      t$2 = w$2("react.forward_ref");
      react_production_min.Suspense = w$2("react.suspense");
      u$2 = w$2("react.memo");
      v$3 = w$2("react.lazy");
    }
    var x$2 = "function" === typeof Symbol && Symbol.iterator;
    function y$3(a) {
      if (null === a || "object" !== typeof a)
        return null;
      a = x$2 && a[x$2] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    function z$2(a) {
      for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c2 = 1; c2 < arguments.length; c2++)
        b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
      return "Minified React error #" + a + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var A$2 = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } }, B$2 = {};
    function C$1(a, b2, c2) {
      this.props = a;
      this.context = b2;
      this.refs = B$2;
      this.updater = c2 || A$2;
    }
    C$1.prototype.isReactComponent = {};
    C$1.prototype.setState = function(a, b2) {
      if ("object" !== typeof a && "function" !== typeof a && null != a)
        throw Error(z$2(85));
      this.updater.enqueueSetState(this, a, b2, "setState");
    };
    C$1.prototype.forceUpdate = function(a) {
      this.updater.enqueueForceUpdate(this, a, "forceUpdate");
    };
    function D$2() {
    }
    D$2.prototype = C$1.prototype;
    function E$2(a, b2, c2) {
      this.props = a;
      this.context = b2;
      this.refs = B$2;
      this.updater = c2 || A$2;
    }
    var F$2 = E$2.prototype = new D$2();
    F$2.constructor = E$2;
    l$3(F$2, C$1.prototype);
    F$2.isPureReactComponent = true;
    var G$2 = { current: null }, H$2 = Object.prototype.hasOwnProperty, I$2 = { key: true, ref: true, __self: true, __source: true };
    function J(a, b2, c2) {
      var e2, d2 = {}, k2 = null, h2 = null;
      if (null != b2)
        for (e2 in void 0 !== b2.ref && (h2 = b2.ref), void 0 !== b2.key && (k2 = "" + b2.key), b2)
          H$2.call(b2, e2) && !I$2.hasOwnProperty(e2) && (d2[e2] = b2[e2]);
      var g2 = arguments.length - 2;
      if (1 === g2)
        d2.children = c2;
      else if (1 < g2) {
        for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++)
          f2[m2] = arguments[m2 + 2];
        d2.children = f2;
      }
      if (a && a.defaultProps)
        for (e2 in g2 = a.defaultProps, g2)
          void 0 === d2[e2] && (d2[e2] = g2[e2]);
      return { $$typeof: n$4, type: a, key: k2, ref: h2, props: d2, _owner: G$2.current };
    }
    function K(a, b2) {
      return { $$typeof: n$4, type: a.type, key: b2, ref: a.ref, props: a.props, _owner: a._owner };
    }
    function L(a) {
      return "object" === typeof a && null !== a && a.$$typeof === n$4;
    }
    function escape(a) {
      var b2 = { "=": "=0", ":": "=2" };
      return "$" + a.replace(/[=:]/g, function(a2) {
        return b2[a2];
      });
    }
    var M$1 = /\/+/g;
    function N$1(a, b2) {
      return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b2.toString(36);
    }
    function O$1(a, b2, c2, e2, d2) {
      var k2 = typeof a;
      if ("undefined" === k2 || "boolean" === k2)
        a = null;
      var h2 = false;
      if (null === a)
        h2 = true;
      else
        switch (k2) {
          case "string":
          case "number":
            h2 = true;
            break;
          case "object":
            switch (a.$$typeof) {
              case n$4:
              case p$4:
                h2 = true;
            }
        }
      if (h2)
        return h2 = a, d2 = d2(h2), a = "" === e2 ? "." + N$1(h2, 0) : e2, Array.isArray(d2) ? (c2 = "", null != a && (c2 = a.replace(M$1, "$&/") + "/"), O$1(d2, b2, c2, "", function(a2) {
          return a2;
        })) : null != d2 && (L(d2) && (d2 = K(d2, c2 + (!d2.key || h2 && h2.key === d2.key ? "" : ("" + d2.key).replace(M$1, "$&/") + "/") + a)), b2.push(d2)), 1;
      h2 = 0;
      e2 = "" === e2 ? "." : e2 + ":";
      if (Array.isArray(a))
        for (var g2 = 0; g2 < a.length; g2++) {
          k2 = a[g2];
          var f2 = e2 + N$1(k2, g2);
          h2 += O$1(k2, b2, c2, f2, d2);
        }
      else if (f2 = y$3(a), "function" === typeof f2)
        for (a = f2.call(a), g2 = 0; !(k2 = a.next()).done; )
          k2 = k2.value, f2 = e2 + N$1(k2, g2++), h2 += O$1(k2, b2, c2, f2, d2);
      else if ("object" === k2)
        throw b2 = "" + a, Error(z$2(31, "[object Object]" === b2 ? "object with keys {" + Object.keys(a).join(", ") + "}" : b2));
      return h2;
    }
    function P$1(a, b2, c2) {
      if (null == a)
        return a;
      var e2 = [], d2 = 0;
      O$1(a, e2, "", "", function(a2) {
        return b2.call(c2, a2, d2++);
      });
      return e2;
    }
    function Q(a) {
      if (-1 === a._status) {
        var b2 = a._result;
        b2 = b2();
        a._status = 0;
        a._result = b2;
        b2.then(function(b3) {
          0 === a._status && (b3 = b3.default, a._status = 1, a._result = b3);
        }, function(b3) {
          0 === a._status && (a._status = 2, a._result = b3);
        });
      }
      if (1 === a._status)
        return a._result;
      throw a._result;
    }
    var R$1 = { current: null };
    function S$1() {
      var a = R$1.current;
      if (null === a)
        throw Error(z$2(321));
      return a;
    }
    var T$1 = { ReactCurrentDispatcher: R$1, ReactCurrentBatchConfig: { transition: 0 }, ReactCurrentOwner: G$2, IsSomeRendererActing: { current: false }, assign: l$3 };
    react_production_min.Children = { map: P$1, forEach: function(a, b2, c2) {
      P$1(a, function() {
        b2.apply(this, arguments);
      }, c2);
    }, count: function(a) {
      var b2 = 0;
      P$1(a, function() {
        b2++;
      });
      return b2;
    }, toArray: function(a) {
      return P$1(a, function(a2) {
        return a2;
      }) || [];
    }, only: function(a) {
      if (!L(a))
        throw Error(z$2(143));
      return a;
    } };
    react_production_min.Component = C$1;
    react_production_min.PureComponent = E$2;
    react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T$1;
    react_production_min.cloneElement = function(a, b2, c2) {
      if (null === a || void 0 === a)
        throw Error(z$2(267, a));
      var e2 = l$3({}, a.props), d2 = a.key, k2 = a.ref, h2 = a._owner;
      if (null != b2) {
        void 0 !== b2.ref && (k2 = b2.ref, h2 = G$2.current);
        void 0 !== b2.key && (d2 = "" + b2.key);
        if (a.type && a.type.defaultProps)
          var g2 = a.type.defaultProps;
        for (f2 in b2)
          H$2.call(b2, f2) && !I$2.hasOwnProperty(f2) && (e2[f2] = void 0 === b2[f2] && void 0 !== g2 ? g2[f2] : b2[f2]);
      }
      var f2 = arguments.length - 2;
      if (1 === f2)
        e2.children = c2;
      else if (1 < f2) {
        g2 = Array(f2);
        for (var m2 = 0; m2 < f2; m2++)
          g2[m2] = arguments[m2 + 2];
        e2.children = g2;
      }
      return {
        $$typeof: n$4,
        type: a.type,
        key: d2,
        ref: k2,
        props: e2,
        _owner: h2
      };
    };
    react_production_min.createContext = function(a, b2) {
      void 0 === b2 && (b2 = null);
      a = { $$typeof: r$4, _calculateChangedBits: b2, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null };
      a.Provider = { $$typeof: q$4, _context: a };
      return a.Consumer = a;
    };
    react_production_min.createElement = J;
    react_production_min.createFactory = function(a) {
      var b2 = J.bind(null, a);
      b2.type = a;
      return b2;
    };
    react_production_min.createRef = function() {
      return { current: null };
    };
    react_production_min.forwardRef = function(a) {
      return { $$typeof: t$2, render: a };
    };
    react_production_min.isValidElement = L;
    react_production_min.lazy = function(a) {
      return { $$typeof: v$3, _payload: { _status: -1, _result: a }, _init: Q };
    };
    react_production_min.memo = function(a, b2) {
      return { $$typeof: u$2, type: a, compare: void 0 === b2 ? null : b2 };
    };
    react_production_min.useCallback = function(a, b2) {
      return S$1().useCallback(a, b2);
    };
    react_production_min.useContext = function(a, b2) {
      return S$1().useContext(a, b2);
    };
    react_production_min.useDebugValue = function() {
    };
    react_production_min.useEffect = function(a, b2) {
      return S$1().useEffect(a, b2);
    };
    react_production_min.useImperativeHandle = function(a, b2, c2) {
      return S$1().useImperativeHandle(a, b2, c2);
    };
    react_production_min.useLayoutEffect = function(a, b2) {
      return S$1().useLayoutEffect(a, b2);
    };
    react_production_min.useMemo = function(a, b2) {
      return S$1().useMemo(a, b2);
    };
    react_production_min.useReducer = function(a, b2, c2) {
      return S$1().useReducer(a, b2, c2);
    };
    react_production_min.useRef = function(a) {
      return S$1().useRef(a);
    };
    react_production_min.useState = function(a) {
      return S$1().useState(a);
    };
    react_production_min.version = "17.0.2";
    {
      react.exports = react_production_min;
    }
    var reactExports = react.exports;
    const React$4 = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
    const React$5 = /* @__PURE__ */ _mergeNamespaces({
      __proto__: null,
      default: React$4
    }, [reactExports]);
    /** @license React v17.0.2
     * react-jsx-runtime.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var f$3 = reactExports, g$3 = 60103;
    reactJsxRuntime_production_min.Fragment = 60107;
    if ("function" === typeof Symbol && Symbol.for) {
      var h$3 = Symbol.for;
      g$3 = h$3("react.element");
      reactJsxRuntime_production_min.Fragment = h$3("react.fragment");
    }
    var m$4 = f$3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, n$3 = Object.prototype.hasOwnProperty, p$3 = { key: true, ref: true, __self: true, __source: true };
    function q$3(c2, a, k2) {
      var b2, d2 = {}, e2 = null, l2 = null;
      void 0 !== k2 && (e2 = "" + k2);
      void 0 !== a.key && (e2 = "" + a.key);
      void 0 !== a.ref && (l2 = a.ref);
      for (b2 in a)
        n$3.call(a, b2) && !p$3.hasOwnProperty(b2) && (d2[b2] = a[b2]);
      if (c2 && c2.defaultProps)
        for (b2 in a = c2.defaultProps, a)
          void 0 === d2[b2] && (d2[b2] = a[b2]);
      return { $$typeof: g$3, type: c2, key: e2, ref: l2, props: d2, _owner: m$4.current };
    }
    reactJsxRuntime_production_min.jsx = q$3;
    reactJsxRuntime_production_min.jsxs = q$3;
    {
      jsxRuntime.exports = reactJsxRuntime_production_min;
    }
    var jsxRuntimeExports = jsxRuntime.exports;
    var reactDom = { exports: {} };
    var reactDom_production_min = {};
    var scheduler = { exports: {} };
    var scheduler_production_min = {};
    /** @license React v0.20.2
     * scheduler.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function(exports2) {
      var f2, g2, h2, k2;
      if ("object" === typeof performance && "function" === typeof performance.now) {
        var l2 = performance;
        exports2.unstable_now = function() {
          return l2.now();
        };
      } else {
        var p2 = Date, q2 = p2.now();
        exports2.unstable_now = function() {
          return p2.now() - q2;
        };
      }
      if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
        var t2 = null, u2 = null, w2 = function() {
          if (null !== t2)
            try {
              var a = exports2.unstable_now();
              t2(true, a);
              t2 = null;
            } catch (b2) {
              throw setTimeout(w2, 0), b2;
            }
        };
        f2 = function(a) {
          null !== t2 ? setTimeout(f2, 0, a) : (t2 = a, setTimeout(w2, 0));
        };
        g2 = function(a, b2) {
          u2 = setTimeout(a, b2);
        };
        h2 = function() {
          clearTimeout(u2);
        };
        exports2.unstable_shouldYield = function() {
          return false;
        };
        k2 = exports2.unstable_forceFrameRate = function() {
        };
      } else {
        var x2 = window.setTimeout, y2 = window.clearTimeout;
        if ("undefined" !== typeof console) {
          var z2 = window.cancelAnimationFrame;
          "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          "function" !== typeof z2 && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
        var A2 = false, B2 = null, C2 = -1, D2 = 5, E2 = 0;
        exports2.unstable_shouldYield = function() {
          return exports2.unstable_now() >= E2;
        };
        k2 = function() {
        };
        exports2.unstable_forceFrameRate = function(a) {
          0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D2 = 0 < a ? Math.floor(1e3 / a) : 5;
        };
        var F2 = new MessageChannel(), G2 = F2.port2;
        F2.port1.onmessage = function() {
          if (null !== B2) {
            var a = exports2.unstable_now();
            E2 = a + D2;
            try {
              B2(true, a) ? G2.postMessage(null) : (A2 = false, B2 = null);
            } catch (b2) {
              throw G2.postMessage(null), b2;
            }
          } else
            A2 = false;
        };
        f2 = function(a) {
          B2 = a;
          A2 || (A2 = true, G2.postMessage(null));
        };
        g2 = function(a, b2) {
          C2 = x2(function() {
            a(exports2.unstable_now());
          }, b2);
        };
        h2 = function() {
          y2(C2);
          C2 = -1;
        };
      }
      function H2(a, b2) {
        var c2 = a.length;
        a.push(b2);
        a:
          for (; ; ) {
            var d2 = c2 - 1 >>> 1, e2 = a[d2];
            if (void 0 !== e2 && 0 < I2(e2, b2))
              a[d2] = b2, a[c2] = e2, c2 = d2;
            else
              break a;
          }
      }
      function J2(a) {
        a = a[0];
        return void 0 === a ? null : a;
      }
      function K2(a) {
        var b2 = a[0];
        if (void 0 !== b2) {
          var c2 = a.pop();
          if (c2 !== b2) {
            a[0] = c2;
            a:
              for (var d2 = 0, e2 = a.length; d2 < e2; ) {
                var m2 = 2 * (d2 + 1) - 1, n2 = a[m2], v2 = m2 + 1, r2 = a[v2];
                if (void 0 !== n2 && 0 > I2(n2, c2))
                  void 0 !== r2 && 0 > I2(r2, n2) ? (a[d2] = r2, a[v2] = c2, d2 = v2) : (a[d2] = n2, a[m2] = c2, d2 = m2);
                else if (void 0 !== r2 && 0 > I2(r2, c2))
                  a[d2] = r2, a[v2] = c2, d2 = v2;
                else
                  break a;
              }
          }
          return b2;
        }
        return null;
      }
      function I2(a, b2) {
        var c2 = a.sortIndex - b2.sortIndex;
        return 0 !== c2 ? c2 : a.id - b2.id;
      }
      var L2 = [], M2 = [], N2 = 1, O2 = null, P2 = 3, Q2 = false, R2 = false, S2 = false;
      function T2(a) {
        for (var b2 = J2(M2); null !== b2; ) {
          if (null === b2.callback)
            K2(M2);
          else if (b2.startTime <= a)
            K2(M2), b2.sortIndex = b2.expirationTime, H2(L2, b2);
          else
            break;
          b2 = J2(M2);
        }
      }
      function U2(a) {
        S2 = false;
        T2(a);
        if (!R2)
          if (null !== J2(L2))
            R2 = true, f2(V2);
          else {
            var b2 = J2(M2);
            null !== b2 && g2(U2, b2.startTime - a);
          }
      }
      function V2(a, b2) {
        R2 = false;
        S2 && (S2 = false, h2());
        Q2 = true;
        var c2 = P2;
        try {
          T2(b2);
          for (O2 = J2(L2); null !== O2 && (!(O2.expirationTime > b2) || a && !exports2.unstable_shouldYield()); ) {
            var d2 = O2.callback;
            if ("function" === typeof d2) {
              O2.callback = null;
              P2 = O2.priorityLevel;
              var e2 = d2(O2.expirationTime <= b2);
              b2 = exports2.unstable_now();
              "function" === typeof e2 ? O2.callback = e2 : O2 === J2(L2) && K2(L2);
              T2(b2);
            } else
              K2(L2);
            O2 = J2(L2);
          }
          if (null !== O2)
            var m2 = true;
          else {
            var n2 = J2(M2);
            null !== n2 && g2(U2, n2.startTime - b2);
            m2 = false;
          }
          return m2;
        } finally {
          O2 = null, P2 = c2, Q2 = false;
        }
      }
      var W2 = k2;
      exports2.unstable_IdlePriority = 5;
      exports2.unstable_ImmediatePriority = 1;
      exports2.unstable_LowPriority = 4;
      exports2.unstable_NormalPriority = 3;
      exports2.unstable_Profiling = null;
      exports2.unstable_UserBlockingPriority = 2;
      exports2.unstable_cancelCallback = function(a) {
        a.callback = null;
      };
      exports2.unstable_continueExecution = function() {
        R2 || Q2 || (R2 = true, f2(V2));
      };
      exports2.unstable_getCurrentPriorityLevel = function() {
        return P2;
      };
      exports2.unstable_getFirstCallbackNode = function() {
        return J2(L2);
      };
      exports2.unstable_next = function(a) {
        switch (P2) {
          case 1:
          case 2:
          case 3:
            var b2 = 3;
            break;
          default:
            b2 = P2;
        }
        var c2 = P2;
        P2 = b2;
        try {
          return a();
        } finally {
          P2 = c2;
        }
      };
      exports2.unstable_pauseExecution = function() {
      };
      exports2.unstable_requestPaint = W2;
      exports2.unstable_runWithPriority = function(a, b2) {
        switch (a) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            a = 3;
        }
        var c2 = P2;
        P2 = a;
        try {
          return b2();
        } finally {
          P2 = c2;
        }
      };
      exports2.unstable_scheduleCallback = function(a, b2, c2) {
        var d2 = exports2.unstable_now();
        "object" === typeof c2 && null !== c2 ? (c2 = c2.delay, c2 = "number" === typeof c2 && 0 < c2 ? d2 + c2 : d2) : c2 = d2;
        switch (a) {
          case 1:
            var e2 = -1;
            break;
          case 2:
            e2 = 250;
            break;
          case 5:
            e2 = 1073741823;
            break;
          case 4:
            e2 = 1e4;
            break;
          default:
            e2 = 5e3;
        }
        e2 = c2 + e2;
        a = { id: N2++, callback: b2, priorityLevel: a, startTime: c2, expirationTime: e2, sortIndex: -1 };
        c2 > d2 ? (a.sortIndex = c2, H2(M2, a), null === J2(L2) && a === J2(M2) && (S2 ? h2() : S2 = true, g2(U2, c2 - d2))) : (a.sortIndex = e2, H2(L2, a), R2 || Q2 || (R2 = true, f2(V2)));
        return a;
      };
      exports2.unstable_wrapCallback = function(a) {
        var b2 = P2;
        return function() {
          var c2 = P2;
          P2 = b2;
          try {
            return a.apply(this, arguments);
          } finally {
            P2 = c2;
          }
        };
      };
    })(scheduler_production_min);
    {
      scheduler.exports = scheduler_production_min;
    }
    var schedulerExports = scheduler.exports;
    /** @license React v17.0.2
     * react-dom.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var aa = reactExports, m$3 = objectAssign, r$3 = schedulerExports;
    function y$2(a) {
      for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c2 = 1; c2 < arguments.length; c2++)
        b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
      return "Minified React error #" + a + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    if (!aa)
      throw Error(y$2(227));
    var ba = /* @__PURE__ */ new Set(), ca = {};
    function da(a, b2) {
      ea(a, b2);
      ea(a + "Capture", b2);
    }
    function ea(a, b2) {
      ca[a] = b2;
      for (a = 0; a < b2.length; a++)
        ba.add(b2[a]);
    }
    var fa = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ha = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, ia = Object.prototype.hasOwnProperty, ja = {}, ka = {};
    function la(a) {
      if (ia.call(ka, a))
        return true;
      if (ia.call(ja, a))
        return false;
      if (ha.test(a))
        return ka[a] = true;
      ja[a] = true;
      return false;
    }
    function ma(a, b2, c2, d2) {
      if (null !== c2 && 0 === c2.type)
        return false;
      switch (typeof b2) {
        case "function":
        case "symbol":
          return true;
        case "boolean":
          if (d2)
            return false;
          if (null !== c2)
            return !c2.acceptsBooleans;
          a = a.toLowerCase().slice(0, 5);
          return "data-" !== a && "aria-" !== a;
        default:
          return false;
      }
    }
    function na(a, b2, c2, d2) {
      if (null === b2 || "undefined" === typeof b2 || ma(a, b2, c2, d2))
        return true;
      if (d2)
        return false;
      if (null !== c2)
        switch (c2.type) {
          case 3:
            return !b2;
          case 4:
            return false === b2;
          case 5:
            return isNaN(b2);
          case 6:
            return isNaN(b2) || 1 > b2;
        }
      return false;
    }
    function B$1(a, b2, c2, d2, e2, f2, g2) {
      this.acceptsBooleans = 2 === b2 || 3 === b2 || 4 === b2;
      this.attributeName = d2;
      this.attributeNamespace = e2;
      this.mustUseProperty = c2;
      this.propertyName = a;
      this.type = b2;
      this.sanitizeURL = f2;
      this.removeEmptyString = g2;
    }
    var D$1 = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
      D$1[a] = new B$1(a, 0, false, a, null, false, false);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
      var b2 = a[0];
      D$1[b2] = new B$1(b2, 1, false, a[1], null, false, false);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
      D$1[a] = new B$1(a, 2, false, a.toLowerCase(), null, false, false);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
      D$1[a] = new B$1(a, 2, false, a, null, false, false);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
      D$1[a] = new B$1(a, 3, false, a.toLowerCase(), null, false, false);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(a) {
      D$1[a] = new B$1(a, 3, true, a, null, false, false);
    });
    ["capture", "download"].forEach(function(a) {
      D$1[a] = new B$1(a, 4, false, a, null, false, false);
    });
    ["cols", "rows", "size", "span"].forEach(function(a) {
      D$1[a] = new B$1(a, 6, false, a, null, false, false);
    });
    ["rowSpan", "start"].forEach(function(a) {
      D$1[a] = new B$1(a, 5, false, a.toLowerCase(), null, false, false);
    });
    var oa = /[\-:]([a-z])/g;
    function pa(a) {
      return a[1].toUpperCase();
    }
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
      var b2 = a.replace(
        oa,
        pa
      );
      D$1[b2] = new B$1(b2, 1, false, a, null, false, false);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
      var b2 = a.replace(oa, pa);
      D$1[b2] = new B$1(b2, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
      var b2 = a.replace(oa, pa);
      D$1[b2] = new B$1(b2, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
    });
    ["tabIndex", "crossOrigin"].forEach(function(a) {
      D$1[a] = new B$1(a, 1, false, a.toLowerCase(), null, false, false);
    });
    D$1.xlinkHref = new B$1("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    ["src", "href", "action", "formAction"].forEach(function(a) {
      D$1[a] = new B$1(a, 1, false, a.toLowerCase(), null, true, true);
    });
    function qa(a, b2, c2, d2) {
      var e2 = D$1.hasOwnProperty(b2) ? D$1[b2] : null;
      var f2 = null !== e2 ? 0 === e2.type : d2 ? false : !(2 < b2.length) || "o" !== b2[0] && "O" !== b2[0] || "n" !== b2[1] && "N" !== b2[1] ? false : true;
      f2 || (na(b2, c2, e2, d2) && (c2 = null), d2 || null === e2 ? la(b2) && (null === c2 ? a.removeAttribute(b2) : a.setAttribute(b2, "" + c2)) : e2.mustUseProperty ? a[e2.propertyName] = null === c2 ? 3 === e2.type ? false : "" : c2 : (b2 = e2.attributeName, d2 = e2.attributeNamespace, null === c2 ? a.removeAttribute(b2) : (e2 = e2.type, c2 = 3 === e2 || 4 === e2 && true === c2 ? "" : "" + c2, d2 ? a.setAttributeNS(d2, b2, c2) : a.setAttribute(b2, c2))));
    }
    var ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, sa = 60103, ta = 60106, ua = 60107, wa = 60108, xa = 60114, ya = 60109, za = 60110, Aa = 60112, Ba = 60113, Ca = 60120, Da = 60115, Ea = 60116, Fa = 60121, Ga = 60128, Ha = 60129, Ia = 60130, Ja = 60131;
    if ("function" === typeof Symbol && Symbol.for) {
      var E$1 = Symbol.for;
      sa = E$1("react.element");
      ta = E$1("react.portal");
      ua = E$1("react.fragment");
      wa = E$1("react.strict_mode");
      xa = E$1("react.profiler");
      ya = E$1("react.provider");
      za = E$1("react.context");
      Aa = E$1("react.forward_ref");
      Ba = E$1("react.suspense");
      Ca = E$1("react.suspense_list");
      Da = E$1("react.memo");
      Ea = E$1("react.lazy");
      Fa = E$1("react.block");
      E$1("react.scope");
      Ga = E$1("react.opaque.id");
      Ha = E$1("react.debug_trace_mode");
      Ia = E$1("react.offscreen");
      Ja = E$1("react.legacy_hidden");
    }
    var Ka = "function" === typeof Symbol && Symbol.iterator;
    function La(a) {
      if (null === a || "object" !== typeof a)
        return null;
      a = Ka && a[Ka] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    var Ma;
    function Na(a) {
      if (void 0 === Ma)
        try {
          throw Error();
        } catch (c2) {
          var b2 = c2.stack.trim().match(/\n( *(at )?)/);
          Ma = b2 && b2[1] || "";
        }
      return "\n" + Ma + a;
    }
    var Oa = false;
    function Pa(a, b2) {
      if (!a || Oa)
        return "";
      Oa = true;
      var c2 = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (b2)
          if (b2 = function() {
            throw Error();
          }, Object.defineProperty(b2.prototype, "props", { set: function() {
            throw Error();
          } }), "object" === typeof Reflect && Reflect.construct) {
            try {
              Reflect.construct(b2, []);
            } catch (k2) {
              var d2 = k2;
            }
            Reflect.construct(a, [], b2);
          } else {
            try {
              b2.call();
            } catch (k2) {
              d2 = k2;
            }
            a.call(b2.prototype);
          }
        else {
          try {
            throw Error();
          } catch (k2) {
            d2 = k2;
          }
          a();
        }
      } catch (k2) {
        if (k2 && d2 && "string" === typeof k2.stack) {
          for (var e2 = k2.stack.split("\n"), f2 = d2.stack.split("\n"), g2 = e2.length - 1, h2 = f2.length - 1; 1 <= g2 && 0 <= h2 && e2[g2] !== f2[h2]; )
            h2--;
          for (; 1 <= g2 && 0 <= h2; g2--, h2--)
            if (e2[g2] !== f2[h2]) {
              if (1 !== g2 || 1 !== h2) {
                do
                  if (g2--, h2--, 0 > h2 || e2[g2] !== f2[h2])
                    return "\n" + e2[g2].replace(" at new ", " at ");
                while (1 <= g2 && 0 <= h2);
              }
              break;
            }
        }
      } finally {
        Oa = false, Error.prepareStackTrace = c2;
      }
      return (a = a ? a.displayName || a.name : "") ? Na(a) : "";
    }
    function Qa(a) {
      switch (a.tag) {
        case 5:
          return Na(a.type);
        case 16:
          return Na("Lazy");
        case 13:
          return Na("Suspense");
        case 19:
          return Na("SuspenseList");
        case 0:
        case 2:
        case 15:
          return a = Pa(a.type, false), a;
        case 11:
          return a = Pa(a.type.render, false), a;
        case 22:
          return a = Pa(a.type._render, false), a;
        case 1:
          return a = Pa(a.type, true), a;
        default:
          return "";
      }
    }
    function Ra(a) {
      if (null == a)
        return null;
      if ("function" === typeof a)
        return a.displayName || a.name || null;
      if ("string" === typeof a)
        return a;
      switch (a) {
        case ua:
          return "Fragment";
        case ta:
          return "Portal";
        case xa:
          return "Profiler";
        case wa:
          return "StrictMode";
        case Ba:
          return "Suspense";
        case Ca:
          return "SuspenseList";
      }
      if ("object" === typeof a)
        switch (a.$$typeof) {
          case za:
            return (a.displayName || "Context") + ".Consumer";
          case ya:
            return (a._context.displayName || "Context") + ".Provider";
          case Aa:
            var b2 = a.render;
            b2 = b2.displayName || b2.name || "";
            return a.displayName || ("" !== b2 ? "ForwardRef(" + b2 + ")" : "ForwardRef");
          case Da:
            return Ra(a.type);
          case Fa:
            return Ra(a._render);
          case Ea:
            b2 = a._payload;
            a = a._init;
            try {
              return Ra(a(b2));
            } catch (c2) {
            }
        }
      return null;
    }
    function Sa(a) {
      switch (typeof a) {
        case "boolean":
        case "number":
        case "object":
        case "string":
        case "undefined":
          return a;
        default:
          return "";
      }
    }
    function Ta(a) {
      var b2 = a.type;
      return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b2 || "radio" === b2);
    }
    function Ua(a) {
      var b2 = Ta(a) ? "checked" : "value", c2 = Object.getOwnPropertyDescriptor(a.constructor.prototype, b2), d2 = "" + a[b2];
      if (!a.hasOwnProperty(b2) && "undefined" !== typeof c2 && "function" === typeof c2.get && "function" === typeof c2.set) {
        var e2 = c2.get, f2 = c2.set;
        Object.defineProperty(a, b2, { configurable: true, get: function() {
          return e2.call(this);
        }, set: function(a2) {
          d2 = "" + a2;
          f2.call(this, a2);
        } });
        Object.defineProperty(a, b2, { enumerable: c2.enumerable });
        return { getValue: function() {
          return d2;
        }, setValue: function(a2) {
          d2 = "" + a2;
        }, stopTracking: function() {
          a._valueTracker = null;
          delete a[b2];
        } };
      }
    }
    function Va(a) {
      a._valueTracker || (a._valueTracker = Ua(a));
    }
    function Wa(a) {
      if (!a)
        return false;
      var b2 = a._valueTracker;
      if (!b2)
        return true;
      var c2 = b2.getValue();
      var d2 = "";
      a && (d2 = Ta(a) ? a.checked ? "true" : "false" : a.value);
      a = d2;
      return a !== c2 ? (b2.setValue(a), true) : false;
    }
    function Xa(a) {
      a = a || ("undefined" !== typeof document ? document : void 0);
      if ("undefined" === typeof a)
        return null;
      try {
        return a.activeElement || a.body;
      } catch (b2) {
        return a.body;
      }
    }
    function Ya(a, b2) {
      var c2 = b2.checked;
      return m$3({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c2 ? c2 : a._wrapperState.initialChecked });
    }
    function Za(a, b2) {
      var c2 = null == b2.defaultValue ? "" : b2.defaultValue, d2 = null != b2.checked ? b2.checked : b2.defaultChecked;
      c2 = Sa(null != b2.value ? b2.value : c2);
      a._wrapperState = { initialChecked: d2, initialValue: c2, controlled: "checkbox" === b2.type || "radio" === b2.type ? null != b2.checked : null != b2.value };
    }
    function $a(a, b2) {
      b2 = b2.checked;
      null != b2 && qa(a, "checked", b2, false);
    }
    function ab(a, b2) {
      $a(a, b2);
      var c2 = Sa(b2.value), d2 = b2.type;
      if (null != c2)
        if ("number" === d2) {
          if (0 === c2 && "" === a.value || a.value != c2)
            a.value = "" + c2;
        } else
          a.value !== "" + c2 && (a.value = "" + c2);
      else if ("submit" === d2 || "reset" === d2) {
        a.removeAttribute("value");
        return;
      }
      b2.hasOwnProperty("value") ? bb(a, b2.type, c2) : b2.hasOwnProperty("defaultValue") && bb(a, b2.type, Sa(b2.defaultValue));
      null == b2.checked && null != b2.defaultChecked && (a.defaultChecked = !!b2.defaultChecked);
    }
    function cb(a, b2, c2) {
      if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
        var d2 = b2.type;
        if (!("submit" !== d2 && "reset" !== d2 || void 0 !== b2.value && null !== b2.value))
          return;
        b2 = "" + a._wrapperState.initialValue;
        c2 || b2 === a.value || (a.value = b2);
        a.defaultValue = b2;
      }
      c2 = a.name;
      "" !== c2 && (a.name = "");
      a.defaultChecked = !!a._wrapperState.initialChecked;
      "" !== c2 && (a.name = c2);
    }
    function bb(a, b2, c2) {
      if ("number" !== b2 || Xa(a.ownerDocument) !== a)
        null == c2 ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c2 && (a.defaultValue = "" + c2);
    }
    function db(a) {
      var b2 = "";
      aa.Children.forEach(a, function(a2) {
        null != a2 && (b2 += a2);
      });
      return b2;
    }
    function eb(a, b2) {
      a = m$3({ children: void 0 }, b2);
      if (b2 = db(b2.children))
        a.children = b2;
      return a;
    }
    function fb(a, b2, c2, d2) {
      a = a.options;
      if (b2) {
        b2 = {};
        for (var e2 = 0; e2 < c2.length; e2++)
          b2["$" + c2[e2]] = true;
        for (c2 = 0; c2 < a.length; c2++)
          e2 = b2.hasOwnProperty("$" + a[c2].value), a[c2].selected !== e2 && (a[c2].selected = e2), e2 && d2 && (a[c2].defaultSelected = true);
      } else {
        c2 = "" + Sa(c2);
        b2 = null;
        for (e2 = 0; e2 < a.length; e2++) {
          if (a[e2].value === c2) {
            a[e2].selected = true;
            d2 && (a[e2].defaultSelected = true);
            return;
          }
          null !== b2 || a[e2].disabled || (b2 = a[e2]);
        }
        null !== b2 && (b2.selected = true);
      }
    }
    function gb(a, b2) {
      if (null != b2.dangerouslySetInnerHTML)
        throw Error(y$2(91));
      return m$3({}, b2, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
    }
    function hb(a, b2) {
      var c2 = b2.value;
      if (null == c2) {
        c2 = b2.children;
        b2 = b2.defaultValue;
        if (null != c2) {
          if (null != b2)
            throw Error(y$2(92));
          if (Array.isArray(c2)) {
            if (!(1 >= c2.length))
              throw Error(y$2(93));
            c2 = c2[0];
          }
          b2 = c2;
        }
        null == b2 && (b2 = "");
        c2 = b2;
      }
      a._wrapperState = { initialValue: Sa(c2) };
    }
    function ib(a, b2) {
      var c2 = Sa(b2.value), d2 = Sa(b2.defaultValue);
      null != c2 && (c2 = "" + c2, c2 !== a.value && (a.value = c2), null == b2.defaultValue && a.defaultValue !== c2 && (a.defaultValue = c2));
      null != d2 && (a.defaultValue = "" + d2);
    }
    function jb(a) {
      var b2 = a.textContent;
      b2 === a._wrapperState.initialValue && "" !== b2 && null !== b2 && (a.value = b2);
    }
    var kb = { html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg" };
    function lb(a) {
      switch (a) {
        case "svg":
          return "http://www.w3.org/2000/svg";
        case "math":
          return "http://www.w3.org/1998/Math/MathML";
        default:
          return "http://www.w3.org/1999/xhtml";
      }
    }
    function mb(a, b2) {
      return null == a || "http://www.w3.org/1999/xhtml" === a ? lb(b2) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : a;
    }
    var nb, ob = function(a) {
      return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b2, c2, d2, e2) {
        MSApp.execUnsafeLocalFunction(function() {
          return a(b2, c2, d2, e2);
        });
      } : a;
    }(function(a, b2) {
      if (a.namespaceURI !== kb.svg || "innerHTML" in a)
        a.innerHTML = b2;
      else {
        nb = nb || document.createElement("div");
        nb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
        for (b2 = nb.firstChild; a.firstChild; )
          a.removeChild(a.firstChild);
        for (; b2.firstChild; )
          a.appendChild(b2.firstChild);
      }
    });
    function pb(a, b2) {
      if (b2) {
        var c2 = a.firstChild;
        if (c2 && c2 === a.lastChild && 3 === c2.nodeType) {
          c2.nodeValue = b2;
          return;
        }
      }
      a.textContent = b2;
    }
    var qb = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    }, rb = ["Webkit", "ms", "Moz", "O"];
    Object.keys(qb).forEach(function(a) {
      rb.forEach(function(b2) {
        b2 = b2 + a.charAt(0).toUpperCase() + a.substring(1);
        qb[b2] = qb[a];
      });
    });
    function sb(a, b2, c2) {
      return null == b2 || "boolean" === typeof b2 || "" === b2 ? "" : c2 || "number" !== typeof b2 || 0 === b2 || qb.hasOwnProperty(a) && qb[a] ? ("" + b2).trim() : b2 + "px";
    }
    function tb(a, b2) {
      a = a.style;
      for (var c2 in b2)
        if (b2.hasOwnProperty(c2)) {
          var d2 = 0 === c2.indexOf("--"), e2 = sb(c2, b2[c2], d2);
          "float" === c2 && (c2 = "cssFloat");
          d2 ? a.setProperty(c2, e2) : a[c2] = e2;
        }
    }
    var ub = m$3({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
    function vb(a, b2) {
      if (b2) {
        if (ub[a] && (null != b2.children || null != b2.dangerouslySetInnerHTML))
          throw Error(y$2(137, a));
        if (null != b2.dangerouslySetInnerHTML) {
          if (null != b2.children)
            throw Error(y$2(60));
          if (!("object" === typeof b2.dangerouslySetInnerHTML && "__html" in b2.dangerouslySetInnerHTML))
            throw Error(y$2(61));
        }
        if (null != b2.style && "object" !== typeof b2.style)
          throw Error(y$2(62));
      }
    }
    function wb(a, b2) {
      if (-1 === a.indexOf("-"))
        return "string" === typeof b2.is;
      switch (a) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    function xb(a) {
      a = a.target || a.srcElement || window;
      a.correspondingUseElement && (a = a.correspondingUseElement);
      return 3 === a.nodeType ? a.parentNode : a;
    }
    var yb = null, zb = null, Ab = null;
    function Bb(a) {
      if (a = Cb(a)) {
        if ("function" !== typeof yb)
          throw Error(y$2(280));
        var b2 = a.stateNode;
        b2 && (b2 = Db(b2), yb(a.stateNode, a.type, b2));
      }
    }
    function Eb(a) {
      zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
    }
    function Fb() {
      if (zb) {
        var a = zb, b2 = Ab;
        Ab = zb = null;
        Bb(a);
        if (b2)
          for (a = 0; a < b2.length; a++)
            Bb(b2[a]);
      }
    }
    function Gb(a, b2) {
      return a(b2);
    }
    function Hb(a, b2, c2, d2, e2) {
      return a(b2, c2, d2, e2);
    }
    function Ib() {
    }
    var Jb = Gb, Kb = false, Lb = false;
    function Mb() {
      if (null !== zb || null !== Ab)
        Ib(), Fb();
    }
    function Nb(a, b2, c2) {
      if (Lb)
        return a(b2, c2);
      Lb = true;
      try {
        return Jb(a, b2, c2);
      } finally {
        Lb = false, Mb();
      }
    }
    function Ob(a, b2) {
      var c2 = a.stateNode;
      if (null === c2)
        return null;
      var d2 = Db(c2);
      if (null === d2)
        return null;
      c2 = d2[b2];
      a:
        switch (b2) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (d2 = !d2.disabled) || (a = a.type, d2 = !("button" === a || "input" === a || "select" === a || "textarea" === a));
            a = !d2;
            break a;
          default:
            a = false;
        }
      if (a)
        return null;
      if (c2 && "function" !== typeof c2)
        throw Error(y$2(231, b2, typeof c2));
      return c2;
    }
    var Pb = false;
    if (fa)
      try {
        var Qb = {};
        Object.defineProperty(Qb, "passive", { get: function() {
          Pb = true;
        } });
        window.addEventListener("test", Qb, Qb);
        window.removeEventListener("test", Qb, Qb);
      } catch (a) {
        Pb = false;
      }
    function Rb(a, b2, c2, d2, e2, f2, g2, h2, k2) {
      var l2 = Array.prototype.slice.call(arguments, 3);
      try {
        b2.apply(c2, l2);
      } catch (n2) {
        this.onError(n2);
      }
    }
    var Sb = false, Tb = null, Ub = false, Vb = null, Wb = { onError: function(a) {
      Sb = true;
      Tb = a;
    } };
    function Xb(a, b2, c2, d2, e2, f2, g2, h2, k2) {
      Sb = false;
      Tb = null;
      Rb.apply(Wb, arguments);
    }
    function Yb(a, b2, c2, d2, e2, f2, g2, h2, k2) {
      Xb.apply(this, arguments);
      if (Sb) {
        if (Sb) {
          var l2 = Tb;
          Sb = false;
          Tb = null;
        } else
          throw Error(y$2(198));
        Ub || (Ub = true, Vb = l2);
      }
    }
    function Zb(a) {
      var b2 = a, c2 = a;
      if (a.alternate)
        for (; b2.return; )
          b2 = b2.return;
      else {
        a = b2;
        do
          b2 = a, 0 !== (b2.flags & 1026) && (c2 = b2.return), a = b2.return;
        while (a);
      }
      return 3 === b2.tag ? c2 : null;
    }
    function $b(a) {
      if (13 === a.tag) {
        var b2 = a.memoizedState;
        null === b2 && (a = a.alternate, null !== a && (b2 = a.memoizedState));
        if (null !== b2)
          return b2.dehydrated;
      }
      return null;
    }
    function ac(a) {
      if (Zb(a) !== a)
        throw Error(y$2(188));
    }
    function bc(a) {
      var b2 = a.alternate;
      if (!b2) {
        b2 = Zb(a);
        if (null === b2)
          throw Error(y$2(188));
        return b2 !== a ? null : a;
      }
      for (var c2 = a, d2 = b2; ; ) {
        var e2 = c2.return;
        if (null === e2)
          break;
        var f2 = e2.alternate;
        if (null === f2) {
          d2 = e2.return;
          if (null !== d2) {
            c2 = d2;
            continue;
          }
          break;
        }
        if (e2.child === f2.child) {
          for (f2 = e2.child; f2; ) {
            if (f2 === c2)
              return ac(e2), a;
            if (f2 === d2)
              return ac(e2), b2;
            f2 = f2.sibling;
          }
          throw Error(y$2(188));
        }
        if (c2.return !== d2.return)
          c2 = e2, d2 = f2;
        else {
          for (var g2 = false, h2 = e2.child; h2; ) {
            if (h2 === c2) {
              g2 = true;
              c2 = e2;
              d2 = f2;
              break;
            }
            if (h2 === d2) {
              g2 = true;
              d2 = e2;
              c2 = f2;
              break;
            }
            h2 = h2.sibling;
          }
          if (!g2) {
            for (h2 = f2.child; h2; ) {
              if (h2 === c2) {
                g2 = true;
                c2 = f2;
                d2 = e2;
                break;
              }
              if (h2 === d2) {
                g2 = true;
                d2 = f2;
                c2 = e2;
                break;
              }
              h2 = h2.sibling;
            }
            if (!g2)
              throw Error(y$2(189));
          }
        }
        if (c2.alternate !== d2)
          throw Error(y$2(190));
      }
      if (3 !== c2.tag)
        throw Error(y$2(188));
      return c2.stateNode.current === c2 ? a : b2;
    }
    function cc(a) {
      a = bc(a);
      if (!a)
        return null;
      for (var b2 = a; ; ) {
        if (5 === b2.tag || 6 === b2.tag)
          return b2;
        if (b2.child)
          b2.child.return = b2, b2 = b2.child;
        else {
          if (b2 === a)
            break;
          for (; !b2.sibling; ) {
            if (!b2.return || b2.return === a)
              return null;
            b2 = b2.return;
          }
          b2.sibling.return = b2.return;
          b2 = b2.sibling;
        }
      }
      return null;
    }
    function dc(a, b2) {
      for (var c2 = a.alternate; null !== b2; ) {
        if (b2 === a || b2 === c2)
          return true;
        b2 = b2.return;
      }
      return false;
    }
    var ec, fc, gc, hc, ic = false, jc = [], kc = null, lc = null, mc = null, nc = /* @__PURE__ */ new Map(), oc = /* @__PURE__ */ new Map(), pc = [], qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
    function rc(a, b2, c2, d2, e2) {
      return { blockedOn: a, domEventName: b2, eventSystemFlags: c2 | 16, nativeEvent: e2, targetContainers: [d2] };
    }
    function sc(a, b2) {
      switch (a) {
        case "focusin":
        case "focusout":
          kc = null;
          break;
        case "dragenter":
        case "dragleave":
          lc = null;
          break;
        case "mouseover":
        case "mouseout":
          mc = null;
          break;
        case "pointerover":
        case "pointerout":
          nc.delete(b2.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          oc.delete(b2.pointerId);
      }
    }
    function tc(a, b2, c2, d2, e2, f2) {
      if (null === a || a.nativeEvent !== f2)
        return a = rc(b2, c2, d2, e2, f2), null !== b2 && (b2 = Cb(b2), null !== b2 && fc(b2)), a;
      a.eventSystemFlags |= d2;
      b2 = a.targetContainers;
      null !== e2 && -1 === b2.indexOf(e2) && b2.push(e2);
      return a;
    }
    function uc(a, b2, c2, d2, e2) {
      switch (b2) {
        case "focusin":
          return kc = tc(kc, a, b2, c2, d2, e2), true;
        case "dragenter":
          return lc = tc(lc, a, b2, c2, d2, e2), true;
        case "mouseover":
          return mc = tc(mc, a, b2, c2, d2, e2), true;
        case "pointerover":
          var f2 = e2.pointerId;
          nc.set(f2, tc(nc.get(f2) || null, a, b2, c2, d2, e2));
          return true;
        case "gotpointercapture":
          return f2 = e2.pointerId, oc.set(f2, tc(oc.get(f2) || null, a, b2, c2, d2, e2)), true;
      }
      return false;
    }
    function vc(a) {
      var b2 = wc(a.target);
      if (null !== b2) {
        var c2 = Zb(b2);
        if (null !== c2) {
          if (b2 = c2.tag, 13 === b2) {
            if (b2 = $b(c2), null !== b2) {
              a.blockedOn = b2;
              hc(a.lanePriority, function() {
                r$3.unstable_runWithPriority(a.priority, function() {
                  gc(c2);
                });
              });
              return;
            }
          } else if (3 === b2 && c2.stateNode.hydrate) {
            a.blockedOn = 3 === c2.tag ? c2.stateNode.containerInfo : null;
            return;
          }
        }
      }
      a.blockedOn = null;
    }
    function xc(a) {
      if (null !== a.blockedOn)
        return false;
      for (var b2 = a.targetContainers; 0 < b2.length; ) {
        var c2 = yc(a.domEventName, a.eventSystemFlags, b2[0], a.nativeEvent);
        if (null !== c2)
          return b2 = Cb(c2), null !== b2 && fc(b2), a.blockedOn = c2, false;
        b2.shift();
      }
      return true;
    }
    function zc(a, b2, c2) {
      xc(a) && c2.delete(b2);
    }
    function Ac() {
      for (ic = false; 0 < jc.length; ) {
        var a = jc[0];
        if (null !== a.blockedOn) {
          a = Cb(a.blockedOn);
          null !== a && ec(a);
          break;
        }
        for (var b2 = a.targetContainers; 0 < b2.length; ) {
          var c2 = yc(a.domEventName, a.eventSystemFlags, b2[0], a.nativeEvent);
          if (null !== c2) {
            a.blockedOn = c2;
            break;
          }
          b2.shift();
        }
        null === a.blockedOn && jc.shift();
      }
      null !== kc && xc(kc) && (kc = null);
      null !== lc && xc(lc) && (lc = null);
      null !== mc && xc(mc) && (mc = null);
      nc.forEach(zc);
      oc.forEach(zc);
    }
    function Bc(a, b2) {
      a.blockedOn === b2 && (a.blockedOn = null, ic || (ic = true, r$3.unstable_scheduleCallback(r$3.unstable_NormalPriority, Ac)));
    }
    function Cc(a) {
      function b2(b3) {
        return Bc(b3, a);
      }
      if (0 < jc.length) {
        Bc(jc[0], a);
        for (var c2 = 1; c2 < jc.length; c2++) {
          var d2 = jc[c2];
          d2.blockedOn === a && (d2.blockedOn = null);
        }
      }
      null !== kc && Bc(kc, a);
      null !== lc && Bc(lc, a);
      null !== mc && Bc(mc, a);
      nc.forEach(b2);
      oc.forEach(b2);
      for (c2 = 0; c2 < pc.length; c2++)
        d2 = pc[c2], d2.blockedOn === a && (d2.blockedOn = null);
      for (; 0 < pc.length && (c2 = pc[0], null === c2.blockedOn); )
        vc(c2), null === c2.blockedOn && pc.shift();
    }
    function Dc(a, b2) {
      var c2 = {};
      c2[a.toLowerCase()] = b2.toLowerCase();
      c2["Webkit" + a] = "webkit" + b2;
      c2["Moz" + a] = "moz" + b2;
      return c2;
    }
    var Ec = { animationend: Dc("Animation", "AnimationEnd"), animationiteration: Dc("Animation", "AnimationIteration"), animationstart: Dc("Animation", "AnimationStart"), transitionend: Dc("Transition", "TransitionEnd") }, Fc = {}, Gc = {};
    fa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);
    function Hc(a) {
      if (Fc[a])
        return Fc[a];
      if (!Ec[a])
        return a;
      var b2 = Ec[a], c2;
      for (c2 in b2)
        if (b2.hasOwnProperty(c2) && c2 in Gc)
          return Fc[a] = b2[c2];
      return a;
    }
    var Ic = Hc("animationend"), Jc = Hc("animationiteration"), Kc = Hc("animationstart"), Lc = Hc("transitionend"), Mc = /* @__PURE__ */ new Map(), Nc = /* @__PURE__ */ new Map(), Oc = [
      "abort",
      "abort",
      Ic,
      "animationEnd",
      Jc,
      "animationIteration",
      Kc,
      "animationStart",
      "canplay",
      "canPlay",
      "canplaythrough",
      "canPlayThrough",
      "durationchange",
      "durationChange",
      "emptied",
      "emptied",
      "encrypted",
      "encrypted",
      "ended",
      "ended",
      "error",
      "error",
      "gotpointercapture",
      "gotPointerCapture",
      "load",
      "load",
      "loadeddata",
      "loadedData",
      "loadedmetadata",
      "loadedMetadata",
      "loadstart",
      "loadStart",
      "lostpointercapture",
      "lostPointerCapture",
      "playing",
      "playing",
      "progress",
      "progress",
      "seeking",
      "seeking",
      "stalled",
      "stalled",
      "suspend",
      "suspend",
      "timeupdate",
      "timeUpdate",
      Lc,
      "transitionEnd",
      "waiting",
      "waiting"
    ];
    function Pc(a, b2) {
      for (var c2 = 0; c2 < a.length; c2 += 2) {
        var d2 = a[c2], e2 = a[c2 + 1];
        e2 = "on" + (e2[0].toUpperCase() + e2.slice(1));
        Nc.set(d2, b2);
        Mc.set(d2, e2);
        da(e2, [d2]);
      }
    }
    var Qc = r$3.unstable_now;
    Qc();
    var F$1 = 8;
    function Rc(a) {
      if (0 !== (1 & a))
        return F$1 = 15, 1;
      if (0 !== (2 & a))
        return F$1 = 14, 2;
      if (0 !== (4 & a))
        return F$1 = 13, 4;
      var b2 = 24 & a;
      if (0 !== b2)
        return F$1 = 12, b2;
      if (0 !== (a & 32))
        return F$1 = 11, 32;
      b2 = 192 & a;
      if (0 !== b2)
        return F$1 = 10, b2;
      if (0 !== (a & 256))
        return F$1 = 9, 256;
      b2 = 3584 & a;
      if (0 !== b2)
        return F$1 = 8, b2;
      if (0 !== (a & 4096))
        return F$1 = 7, 4096;
      b2 = 4186112 & a;
      if (0 !== b2)
        return F$1 = 6, b2;
      b2 = 62914560 & a;
      if (0 !== b2)
        return F$1 = 5, b2;
      if (a & 67108864)
        return F$1 = 4, 67108864;
      if (0 !== (a & 134217728))
        return F$1 = 3, 134217728;
      b2 = 805306368 & a;
      if (0 !== b2)
        return F$1 = 2, b2;
      if (0 !== (1073741824 & a))
        return F$1 = 1, 1073741824;
      F$1 = 8;
      return a;
    }
    function Sc(a) {
      switch (a) {
        case 99:
          return 15;
        case 98:
          return 10;
        case 97:
        case 96:
          return 8;
        case 95:
          return 2;
        default:
          return 0;
      }
    }
    function Tc(a) {
      switch (a) {
        case 15:
        case 14:
          return 99;
        case 13:
        case 12:
        case 11:
        case 10:
          return 98;
        case 9:
        case 8:
        case 7:
        case 6:
        case 4:
        case 5:
          return 97;
        case 3:
        case 2:
        case 1:
          return 95;
        case 0:
          return 90;
        default:
          throw Error(y$2(358, a));
      }
    }
    function Uc(a, b2) {
      var c2 = a.pendingLanes;
      if (0 === c2)
        return F$1 = 0;
      var d2 = 0, e2 = 0, f2 = a.expiredLanes, g2 = a.suspendedLanes, h2 = a.pingedLanes;
      if (0 !== f2)
        d2 = f2, e2 = F$1 = 15;
      else if (f2 = c2 & 134217727, 0 !== f2) {
        var k2 = f2 & ~g2;
        0 !== k2 ? (d2 = Rc(k2), e2 = F$1) : (h2 &= f2, 0 !== h2 && (d2 = Rc(h2), e2 = F$1));
      } else
        f2 = c2 & ~g2, 0 !== f2 ? (d2 = Rc(f2), e2 = F$1) : 0 !== h2 && (d2 = Rc(h2), e2 = F$1);
      if (0 === d2)
        return 0;
      d2 = 31 - Vc(d2);
      d2 = c2 & ((0 > d2 ? 0 : 1 << d2) << 1) - 1;
      if (0 !== b2 && b2 !== d2 && 0 === (b2 & g2)) {
        Rc(b2);
        if (e2 <= F$1)
          return b2;
        F$1 = e2;
      }
      b2 = a.entangledLanes;
      if (0 !== b2)
        for (a = a.entanglements, b2 &= d2; 0 < b2; )
          c2 = 31 - Vc(b2), e2 = 1 << c2, d2 |= a[c2], b2 &= ~e2;
      return d2;
    }
    function Wc(a) {
      a = a.pendingLanes & -1073741825;
      return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
    }
    function Xc(a, b2) {
      switch (a) {
        case 15:
          return 1;
        case 14:
          return 2;
        case 12:
          return a = Yc(24 & ~b2), 0 === a ? Xc(10, b2) : a;
        case 10:
          return a = Yc(192 & ~b2), 0 === a ? Xc(8, b2) : a;
        case 8:
          return a = Yc(3584 & ~b2), 0 === a && (a = Yc(4186112 & ~b2), 0 === a && (a = 512)), a;
        case 2:
          return b2 = Yc(805306368 & ~b2), 0 === b2 && (b2 = 268435456), b2;
      }
      throw Error(y$2(358, a));
    }
    function Yc(a) {
      return a & -a;
    }
    function Zc(a) {
      for (var b2 = [], c2 = 0; 31 > c2; c2++)
        b2.push(a);
      return b2;
    }
    function $c(a, b2, c2) {
      a.pendingLanes |= b2;
      var d2 = b2 - 1;
      a.suspendedLanes &= d2;
      a.pingedLanes &= d2;
      a = a.eventTimes;
      b2 = 31 - Vc(b2);
      a[b2] = c2;
    }
    var Vc = Math.clz32 ? Math.clz32 : ad, bd = Math.log, cd = Math.LN2;
    function ad(a) {
      return 0 === a ? 32 : 31 - (bd(a) / cd | 0) | 0;
    }
    var dd = r$3.unstable_UserBlockingPriority, ed = r$3.unstable_runWithPriority, fd = true;
    function gd(a, b2, c2, d2) {
      Kb || Ib();
      var e2 = hd, f2 = Kb;
      Kb = true;
      try {
        Hb(e2, a, b2, c2, d2);
      } finally {
        (Kb = f2) || Mb();
      }
    }
    function id(a, b2, c2, d2) {
      ed(dd, hd.bind(null, a, b2, c2, d2));
    }
    function hd(a, b2, c2, d2) {
      if (fd) {
        var e2;
        if ((e2 = 0 === (b2 & 4)) && 0 < jc.length && -1 < qc.indexOf(a))
          a = rc(null, a, b2, c2, d2), jc.push(a);
        else {
          var f2 = yc(a, b2, c2, d2);
          if (null === f2)
            e2 && sc(a, d2);
          else {
            if (e2) {
              if (-1 < qc.indexOf(a)) {
                a = rc(f2, a, b2, c2, d2);
                jc.push(a);
                return;
              }
              if (uc(f2, a, b2, c2, d2))
                return;
              sc(a, d2);
            }
            jd(a, b2, d2, null, c2);
          }
        }
      }
    }
    function yc(a, b2, c2, d2) {
      var e2 = xb(d2);
      e2 = wc(e2);
      if (null !== e2) {
        var f2 = Zb(e2);
        if (null === f2)
          e2 = null;
        else {
          var g2 = f2.tag;
          if (13 === g2) {
            e2 = $b(f2);
            if (null !== e2)
              return e2;
            e2 = null;
          } else if (3 === g2) {
            if (f2.stateNode.hydrate)
              return 3 === f2.tag ? f2.stateNode.containerInfo : null;
            e2 = null;
          } else
            f2 !== e2 && (e2 = null);
        }
      }
      jd(a, b2, d2, e2, c2);
      return null;
    }
    var kd = null, ld = null, md = null;
    function nd() {
      if (md)
        return md;
      var a, b2 = ld, c2 = b2.length, d2, e2 = "value" in kd ? kd.value : kd.textContent, f2 = e2.length;
      for (a = 0; a < c2 && b2[a] === e2[a]; a++)
        ;
      var g2 = c2 - a;
      for (d2 = 1; d2 <= g2 && b2[c2 - d2] === e2[f2 - d2]; d2++)
        ;
      return md = e2.slice(a, 1 < d2 ? 1 - d2 : void 0);
    }
    function od(a) {
      var b2 = a.keyCode;
      "charCode" in a ? (a = a.charCode, 0 === a && 13 === b2 && (a = 13)) : a = b2;
      10 === a && (a = 13);
      return 32 <= a || 13 === a ? a : 0;
    }
    function pd() {
      return true;
    }
    function qd() {
      return false;
    }
    function rd(a) {
      function b2(b3, d2, e2, f2, g2) {
        this._reactName = b3;
        this._targetInst = e2;
        this.type = d2;
        this.nativeEvent = f2;
        this.target = g2;
        this.currentTarget = null;
        for (var c2 in a)
          a.hasOwnProperty(c2) && (b3 = a[c2], this[c2] = b3 ? b3(f2) : f2[c2]);
        this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
        this.isPropagationStopped = qd;
        return this;
      }
      m$3(b2.prototype, { preventDefault: function() {
        this.defaultPrevented = true;
        var a2 = this.nativeEvent;
        a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = pd);
      }, stopPropagation: function() {
        var a2 = this.nativeEvent;
        a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = pd);
      }, persist: function() {
      }, isPersistent: pd });
      return b2;
    }
    var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
      return a.timeStamp || Date.now();
    }, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = m$3({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = m$3({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
      return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    }, movementX: function(a) {
      if ("movementX" in a)
        return a.movementX;
      a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
      return wd;
    }, movementY: function(a) {
      return "movementY" in a ? a.movementY : xd;
    } }), Bd = rd(Ad), Cd = m$3({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = m$3({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = m$3({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = m$3({}, sd, { clipboardData: function(a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    } }), Jd = rd(Id), Kd = m$3({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    }, Nd = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    }, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
    function Pd(a) {
      var b2 = this.nativeEvent;
      return b2.getModifierState ? b2.getModifierState(a) : (a = Od[a]) ? !!b2[a] : false;
    }
    function zd() {
      return Pd;
    }
    var Qd = m$3({}, ud, { key: function(a) {
      if (a.key) {
        var b2 = Md[a.key] || a.key;
        if ("Unidentified" !== b2)
          return b2;
      }
      return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
    }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
      return "keypress" === a.type ? od(a) : 0;
    }, keyCode: function(a) {
      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }, which: function(a) {
      return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    } }), Rd = rd(Qd), Sd = m$3({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = m$3({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = m$3({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = m$3({}, Ad, {
      deltaX: function(a) {
        return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
      },
      deltaY: function(a) {
        return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    }), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = fa && "CompositionEvent" in window, be = null;
    fa && "documentMode" in document && (be = document.documentMode);
    var ce = fa && "TextEvent" in window && !be, de = fa && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
    function ge(a, b2) {
      switch (a) {
        case "keyup":
          return -1 !== $d.indexOf(b2.keyCode);
        case "keydown":
          return 229 !== b2.keyCode;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function he(a) {
      a = a.detail;
      return "object" === typeof a && "data" in a ? a.data : null;
    }
    var ie = false;
    function je(a, b2) {
      switch (a) {
        case "compositionend":
          return he(b2);
        case "keypress":
          if (32 !== b2.which)
            return null;
          fe = true;
          return ee;
        case "textInput":
          return a = b2.data, a === ee && fe ? null : a;
        default:
          return null;
      }
    }
    function ke(a, b2) {
      if (ie)
        return "compositionend" === a || !ae && ge(a, b2) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
      switch (a) {
        case "paste":
          return null;
        case "keypress":
          if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
            if (b2.char && 1 < b2.char.length)
              return b2.char;
            if (b2.which)
              return String.fromCharCode(b2.which);
          }
          return null;
        case "compositionend":
          return de && "ko" !== b2.locale ? null : b2.data;
        default:
          return null;
      }
    }
    var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
    function me(a) {
      var b2 = a && a.nodeName && a.nodeName.toLowerCase();
      return "input" === b2 ? !!le[a.type] : "textarea" === b2 ? true : false;
    }
    function ne(a, b2, c2, d2) {
      Eb(d2);
      b2 = oe(b2, "onChange");
      0 < b2.length && (c2 = new td("onChange", "change", null, c2, d2), a.push({ event: c2, listeners: b2 }));
    }
    var pe = null, qe = null;
    function re(a) {
      se(a, 0);
    }
    function te(a) {
      var b2 = ue(a);
      if (Wa(b2))
        return a;
    }
    function ve(a, b2) {
      if ("change" === a)
        return b2;
    }
    var we = false;
    if (fa) {
      var xe;
      if (fa) {
        var ye = "oninput" in document;
        if (!ye) {
          var ze = document.createElement("div");
          ze.setAttribute("oninput", "return;");
          ye = "function" === typeof ze.oninput;
        }
        xe = ye;
      } else
        xe = false;
      we = xe && (!document.documentMode || 9 < document.documentMode);
    }
    function Ae() {
      pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
    }
    function Be(a) {
      if ("value" === a.propertyName && te(qe)) {
        var b2 = [];
        ne(b2, qe, a, xb(a));
        a = re;
        if (Kb)
          a(b2);
        else {
          Kb = true;
          try {
            Gb(a, b2);
          } finally {
            Kb = false, Mb();
          }
        }
      }
    }
    function Ce(a, b2, c2) {
      "focusin" === a ? (Ae(), pe = b2, qe = c2, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
    }
    function De(a) {
      if ("selectionchange" === a || "keyup" === a || "keydown" === a)
        return te(qe);
    }
    function Ee(a, b2) {
      if ("click" === a)
        return te(b2);
    }
    function Fe(a, b2) {
      if ("input" === a || "change" === a)
        return te(b2);
    }
    function Ge(a, b2) {
      return a === b2 && (0 !== a || 1 / a === 1 / b2) || a !== a && b2 !== b2;
    }
    var He = "function" === typeof Object.is ? Object.is : Ge, Ie = Object.prototype.hasOwnProperty;
    function Je(a, b2) {
      if (He(a, b2))
        return true;
      if ("object" !== typeof a || null === a || "object" !== typeof b2 || null === b2)
        return false;
      var c2 = Object.keys(a), d2 = Object.keys(b2);
      if (c2.length !== d2.length)
        return false;
      for (d2 = 0; d2 < c2.length; d2++)
        if (!Ie.call(b2, c2[d2]) || !He(a[c2[d2]], b2[c2[d2]]))
          return false;
      return true;
    }
    function Ke(a) {
      for (; a && a.firstChild; )
        a = a.firstChild;
      return a;
    }
    function Le(a, b2) {
      var c2 = Ke(a);
      a = 0;
      for (var d2; c2; ) {
        if (3 === c2.nodeType) {
          d2 = a + c2.textContent.length;
          if (a <= b2 && d2 >= b2)
            return { node: c2, offset: b2 - a };
          a = d2;
        }
        a: {
          for (; c2; ) {
            if (c2.nextSibling) {
              c2 = c2.nextSibling;
              break a;
            }
            c2 = c2.parentNode;
          }
          c2 = void 0;
        }
        c2 = Ke(c2);
      }
    }
    function Me(a, b2) {
      return a && b2 ? a === b2 ? true : a && 3 === a.nodeType ? false : b2 && 3 === b2.nodeType ? Me(a, b2.parentNode) : "contains" in a ? a.contains(b2) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b2) & 16) : false : false;
    }
    function Ne() {
      for (var a = window, b2 = Xa(); b2 instanceof a.HTMLIFrameElement; ) {
        try {
          var c2 = "string" === typeof b2.contentWindow.location.href;
        } catch (d2) {
          c2 = false;
        }
        if (c2)
          a = b2.contentWindow;
        else
          break;
        b2 = Xa(a.document);
      }
      return b2;
    }
    function Oe(a) {
      var b2 = a && a.nodeName && a.nodeName.toLowerCase();
      return b2 && ("input" === b2 && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b2 || "true" === a.contentEditable);
    }
    var Pe = fa && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
    function Ue(a, b2, c2) {
      var d2 = c2.window === c2 ? c2.document : 9 === c2.nodeType ? c2 : c2.ownerDocument;
      Te || null == Qe || Qe !== Xa(d2) || (d2 = Qe, "selectionStart" in d2 && Oe(d2) ? d2 = { start: d2.selectionStart, end: d2.selectionEnd } : (d2 = (d2.ownerDocument && d2.ownerDocument.defaultView || window).getSelection(), d2 = { anchorNode: d2.anchorNode, anchorOffset: d2.anchorOffset, focusNode: d2.focusNode, focusOffset: d2.focusOffset }), Se && Je(Se, d2) || (Se = d2, d2 = oe(Re, "onSelect"), 0 < d2.length && (b2 = new td("onSelect", "select", null, b2, c2), a.push({ event: b2, listeners: d2 }), b2.target = Qe)));
    }
    Pc(
      "cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),
      0
    );
    Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
    Pc(Oc, 2);
    for (var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++)
      Nc.set(Ve[We], 0);
    ea("onMouseEnter", ["mouseout", "mouseover"]);
    ea("onMouseLeave", ["mouseout", "mouseover"]);
    ea("onPointerEnter", ["pointerout", "pointerover"]);
    ea("onPointerLeave", ["pointerout", "pointerover"]);
    da("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    da("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    da("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
    da("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    da("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    da("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));
    function Ze(a, b2, c2) {
      var d2 = a.type || "unknown-event";
      a.currentTarget = c2;
      Yb(d2, b2, void 0, a);
      a.currentTarget = null;
    }
    function se(a, b2) {
      b2 = 0 !== (b2 & 4);
      for (var c2 = 0; c2 < a.length; c2++) {
        var d2 = a[c2], e2 = d2.event;
        d2 = d2.listeners;
        a: {
          var f2 = void 0;
          if (b2)
            for (var g2 = d2.length - 1; 0 <= g2; g2--) {
              var h2 = d2[g2], k2 = h2.instance, l2 = h2.currentTarget;
              h2 = h2.listener;
              if (k2 !== f2 && e2.isPropagationStopped())
                break a;
              Ze(e2, h2, l2);
              f2 = k2;
            }
          else
            for (g2 = 0; g2 < d2.length; g2++) {
              h2 = d2[g2];
              k2 = h2.instance;
              l2 = h2.currentTarget;
              h2 = h2.listener;
              if (k2 !== f2 && e2.isPropagationStopped())
                break a;
              Ze(e2, h2, l2);
              f2 = k2;
            }
        }
      }
      if (Ub)
        throw a = Vb, Ub = false, Vb = null, a;
    }
    function G$1(a, b2) {
      var c2 = $e(b2), d2 = a + "__bubble";
      c2.has(d2) || (af(b2, a, 2, false), c2.add(d2));
    }
    var bf = "_reactListening" + Math.random().toString(36).slice(2);
    function cf(a) {
      a[bf] || (a[bf] = true, ba.forEach(function(b2) {
        Ye.has(b2) || df(b2, false, a, null);
        df(b2, true, a, null);
      }));
    }
    function df(a, b2, c2, d2) {
      var e2 = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0, f2 = c2;
      "selectionchange" === a && 9 !== c2.nodeType && (f2 = c2.ownerDocument);
      if (null !== d2 && !b2 && Ye.has(a)) {
        if ("scroll" !== a)
          return;
        e2 |= 2;
        f2 = d2;
      }
      var g2 = $e(f2), h2 = a + "__" + (b2 ? "capture" : "bubble");
      g2.has(h2) || (b2 && (e2 |= 4), af(f2, a, e2, b2), g2.add(h2));
    }
    function af(a, b2, c2, d2) {
      var e2 = Nc.get(b2);
      switch (void 0 === e2 ? 2 : e2) {
        case 0:
          e2 = gd;
          break;
        case 1:
          e2 = id;
          break;
        default:
          e2 = hd;
      }
      c2 = e2.bind(null, b2, c2, a);
      e2 = void 0;
      !Pb || "touchstart" !== b2 && "touchmove" !== b2 && "wheel" !== b2 || (e2 = true);
      d2 ? void 0 !== e2 ? a.addEventListener(b2, c2, { capture: true, passive: e2 }) : a.addEventListener(b2, c2, true) : void 0 !== e2 ? a.addEventListener(b2, c2, { passive: e2 }) : a.addEventListener(b2, c2, false);
    }
    function jd(a, b2, c2, d2, e2) {
      var f2 = d2;
      if (0 === (b2 & 1) && 0 === (b2 & 2) && null !== d2)
        a:
          for (; ; ) {
            if (null === d2)
              return;
            var g2 = d2.tag;
            if (3 === g2 || 4 === g2) {
              var h2 = d2.stateNode.containerInfo;
              if (h2 === e2 || 8 === h2.nodeType && h2.parentNode === e2)
                break;
              if (4 === g2)
                for (g2 = d2.return; null !== g2; ) {
                  var k2 = g2.tag;
                  if (3 === k2 || 4 === k2) {
                    if (k2 = g2.stateNode.containerInfo, k2 === e2 || 8 === k2.nodeType && k2.parentNode === e2)
                      return;
                  }
                  g2 = g2.return;
                }
              for (; null !== h2; ) {
                g2 = wc(h2);
                if (null === g2)
                  return;
                k2 = g2.tag;
                if (5 === k2 || 6 === k2) {
                  d2 = f2 = g2;
                  continue a;
                }
                h2 = h2.parentNode;
              }
            }
            d2 = d2.return;
          }
      Nb(function() {
        var d3 = f2, e3 = xb(c2), g3 = [];
        a: {
          var h3 = Mc.get(a);
          if (void 0 !== h3) {
            var k3 = td, x2 = a;
            switch (a) {
              case "keypress":
                if (0 === od(c2))
                  break a;
              case "keydown":
              case "keyup":
                k3 = Rd;
                break;
              case "focusin":
                x2 = "focus";
                k3 = Fd;
                break;
              case "focusout":
                x2 = "blur";
                k3 = Fd;
                break;
              case "beforeblur":
              case "afterblur":
                k3 = Fd;
                break;
              case "click":
                if (2 === c2.button)
                  break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                k3 = Bd;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                k3 = Dd;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                k3 = Vd;
                break;
              case Ic:
              case Jc:
              case Kc:
                k3 = Hd;
                break;
              case Lc:
                k3 = Xd;
                break;
              case "scroll":
                k3 = vd;
                break;
              case "wheel":
                k3 = Zd;
                break;
              case "copy":
              case "cut":
              case "paste":
                k3 = Jd;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                k3 = Td;
            }
            var w2 = 0 !== (b2 & 4), z2 = !w2 && "scroll" === a, u2 = w2 ? null !== h3 ? h3 + "Capture" : null : h3;
            w2 = [];
            for (var t2 = d3, q2; null !== t2; ) {
              q2 = t2;
              var v2 = q2.stateNode;
              5 === q2.tag && null !== v2 && (q2 = v2, null !== u2 && (v2 = Ob(t2, u2), null != v2 && w2.push(ef(t2, v2, q2))));
              if (z2)
                break;
              t2 = t2.return;
            }
            0 < w2.length && (h3 = new k3(h3, x2, null, c2, e3), g3.push({ event: h3, listeners: w2 }));
          }
        }
        if (0 === (b2 & 7)) {
          a: {
            h3 = "mouseover" === a || "pointerover" === a;
            k3 = "mouseout" === a || "pointerout" === a;
            if (h3 && 0 === (b2 & 16) && (x2 = c2.relatedTarget || c2.fromElement) && (wc(x2) || x2[ff]))
              break a;
            if (k3 || h3) {
              h3 = e3.window === e3 ? e3 : (h3 = e3.ownerDocument) ? h3.defaultView || h3.parentWindow : window;
              if (k3) {
                if (x2 = c2.relatedTarget || c2.toElement, k3 = d3, x2 = x2 ? wc(x2) : null, null !== x2 && (z2 = Zb(x2), x2 !== z2 || 5 !== x2.tag && 6 !== x2.tag))
                  x2 = null;
              } else
                k3 = null, x2 = d3;
              if (k3 !== x2) {
                w2 = Bd;
                v2 = "onMouseLeave";
                u2 = "onMouseEnter";
                t2 = "mouse";
                if ("pointerout" === a || "pointerover" === a)
                  w2 = Td, v2 = "onPointerLeave", u2 = "onPointerEnter", t2 = "pointer";
                z2 = null == k3 ? h3 : ue(k3);
                q2 = null == x2 ? h3 : ue(x2);
                h3 = new w2(v2, t2 + "leave", k3, c2, e3);
                h3.target = z2;
                h3.relatedTarget = q2;
                v2 = null;
                wc(e3) === d3 && (w2 = new w2(u2, t2 + "enter", x2, c2, e3), w2.target = q2, w2.relatedTarget = z2, v2 = w2);
                z2 = v2;
                if (k3 && x2)
                  b: {
                    w2 = k3;
                    u2 = x2;
                    t2 = 0;
                    for (q2 = w2; q2; q2 = gf(q2))
                      t2++;
                    q2 = 0;
                    for (v2 = u2; v2; v2 = gf(v2))
                      q2++;
                    for (; 0 < t2 - q2; )
                      w2 = gf(w2), t2--;
                    for (; 0 < q2 - t2; )
                      u2 = gf(u2), q2--;
                    for (; t2--; ) {
                      if (w2 === u2 || null !== u2 && w2 === u2.alternate)
                        break b;
                      w2 = gf(w2);
                      u2 = gf(u2);
                    }
                    w2 = null;
                  }
                else
                  w2 = null;
                null !== k3 && hf(g3, h3, k3, w2, false);
                null !== x2 && null !== z2 && hf(g3, z2, x2, w2, true);
              }
            }
          }
          a: {
            h3 = d3 ? ue(d3) : window;
            k3 = h3.nodeName && h3.nodeName.toLowerCase();
            if ("select" === k3 || "input" === k3 && "file" === h3.type)
              var J2 = ve;
            else if (me(h3))
              if (we)
                J2 = Fe;
              else {
                J2 = De;
                var K2 = Ce;
              }
            else
              (k3 = h3.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h3.type || "radio" === h3.type) && (J2 = Ee);
            if (J2 && (J2 = J2(a, d3))) {
              ne(g3, J2, c2, e3);
              break a;
            }
            K2 && K2(a, h3, d3);
            "focusout" === a && (K2 = h3._wrapperState) && K2.controlled && "number" === h3.type && bb(h3, "number", h3.value);
          }
          K2 = d3 ? ue(d3) : window;
          switch (a) {
            case "focusin":
              if (me(K2) || "true" === K2.contentEditable)
                Qe = K2, Re = d3, Se = null;
              break;
            case "focusout":
              Se = Re = Qe = null;
              break;
            case "mousedown":
              Te = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              Te = false;
              Ue(g3, c2, e3);
              break;
            case "selectionchange":
              if (Pe)
                break;
            case "keydown":
            case "keyup":
              Ue(g3, c2, e3);
          }
          var Q2;
          if (ae)
            b: {
              switch (a) {
                case "compositionstart":
                  var L2 = "onCompositionStart";
                  break b;
                case "compositionend":
                  L2 = "onCompositionEnd";
                  break b;
                case "compositionupdate":
                  L2 = "onCompositionUpdate";
                  break b;
              }
              L2 = void 0;
            }
          else
            ie ? ge(a, c2) && (L2 = "onCompositionEnd") : "keydown" === a && 229 === c2.keyCode && (L2 = "onCompositionStart");
          L2 && (de && "ko" !== c2.locale && (ie || "onCompositionStart" !== L2 ? "onCompositionEnd" === L2 && ie && (Q2 = nd()) : (kd = e3, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), K2 = oe(d3, L2), 0 < K2.length && (L2 = new Ld(L2, a, null, c2, e3), g3.push({ event: L2, listeners: K2 }), Q2 ? L2.data = Q2 : (Q2 = he(c2), null !== Q2 && (L2.data = Q2))));
          if (Q2 = ce ? je(a, c2) : ke(a, c2))
            d3 = oe(d3, "onBeforeInput"), 0 < d3.length && (e3 = new Ld(
              "onBeforeInput",
              "beforeinput",
              null,
              c2,
              e3
            ), g3.push({ event: e3, listeners: d3 }), e3.data = Q2);
        }
        se(g3, b2);
      });
    }
    function ef(a, b2, c2) {
      return { instance: a, listener: b2, currentTarget: c2 };
    }
    function oe(a, b2) {
      for (var c2 = b2 + "Capture", d2 = []; null !== a; ) {
        var e2 = a, f2 = e2.stateNode;
        5 === e2.tag && null !== f2 && (e2 = f2, f2 = Ob(a, c2), null != f2 && d2.unshift(ef(a, f2, e2)), f2 = Ob(a, b2), null != f2 && d2.push(ef(a, f2, e2)));
        a = a.return;
      }
      return d2;
    }
    function gf(a) {
      if (null === a)
        return null;
      do
        a = a.return;
      while (a && 5 !== a.tag);
      return a ? a : null;
    }
    function hf(a, b2, c2, d2, e2) {
      for (var f2 = b2._reactName, g2 = []; null !== c2 && c2 !== d2; ) {
        var h2 = c2, k2 = h2.alternate, l2 = h2.stateNode;
        if (null !== k2 && k2 === d2)
          break;
        5 === h2.tag && null !== l2 && (h2 = l2, e2 ? (k2 = Ob(c2, f2), null != k2 && g2.unshift(ef(c2, k2, h2))) : e2 || (k2 = Ob(c2, f2), null != k2 && g2.push(ef(c2, k2, h2))));
        c2 = c2.return;
      }
      0 !== g2.length && a.push({ event: b2, listeners: g2 });
    }
    function jf() {
    }
    var kf = null, lf = null;
    function mf(a, b2) {
      switch (a) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          return !!b2.autoFocus;
      }
      return false;
    }
    function nf(a, b2) {
      return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b2.children || "number" === typeof b2.children || "object" === typeof b2.dangerouslySetInnerHTML && null !== b2.dangerouslySetInnerHTML && null != b2.dangerouslySetInnerHTML.__html;
    }
    var of = "function" === typeof setTimeout ? setTimeout : void 0, pf = "function" === typeof clearTimeout ? clearTimeout : void 0;
    function qf(a) {
      1 === a.nodeType ? a.textContent = "" : 9 === a.nodeType && (a = a.body, null != a && (a.textContent = ""));
    }
    function rf(a) {
      for (; null != a; a = a.nextSibling) {
        var b2 = a.nodeType;
        if (1 === b2 || 3 === b2)
          break;
      }
      return a;
    }
    function sf(a) {
      a = a.previousSibling;
      for (var b2 = 0; a; ) {
        if (8 === a.nodeType) {
          var c2 = a.data;
          if ("$" === c2 || "$!" === c2 || "$?" === c2) {
            if (0 === b2)
              return a;
            b2--;
          } else
            "/$" === c2 && b2++;
        }
        a = a.previousSibling;
      }
      return null;
    }
    var tf = 0;
    function uf(a) {
      return { $$typeof: Ga, toString: a, valueOf: a };
    }
    var vf = Math.random().toString(36).slice(2), wf = "__reactFiber$" + vf, xf = "__reactProps$" + vf, ff = "__reactContainer$" + vf, yf = "__reactEvents$" + vf;
    function wc(a) {
      var b2 = a[wf];
      if (b2)
        return b2;
      for (var c2 = a.parentNode; c2; ) {
        if (b2 = c2[ff] || c2[wf]) {
          c2 = b2.alternate;
          if (null !== b2.child || null !== c2 && null !== c2.child)
            for (a = sf(a); null !== a; ) {
              if (c2 = a[wf])
                return c2;
              a = sf(a);
            }
          return b2;
        }
        a = c2;
        c2 = a.parentNode;
      }
      return null;
    }
    function Cb(a) {
      a = a[wf] || a[ff];
      return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
    }
    function ue(a) {
      if (5 === a.tag || 6 === a.tag)
        return a.stateNode;
      throw Error(y$2(33));
    }
    function Db(a) {
      return a[xf] || null;
    }
    function $e(a) {
      var b2 = a[yf];
      void 0 === b2 && (b2 = a[yf] = /* @__PURE__ */ new Set());
      return b2;
    }
    var zf = [], Af = -1;
    function Bf(a) {
      return { current: a };
    }
    function H$1(a) {
      0 > Af || (a.current = zf[Af], zf[Af] = null, Af--);
    }
    function I$1(a, b2) {
      Af++;
      zf[Af] = a.current;
      a.current = b2;
    }
    var Cf = {}, M = Bf(Cf), N = Bf(false), Df = Cf;
    function Ef(a, b2) {
      var c2 = a.type.contextTypes;
      if (!c2)
        return Cf;
      var d2 = a.stateNode;
      if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b2)
        return d2.__reactInternalMemoizedMaskedChildContext;
      var e2 = {}, f2;
      for (f2 in c2)
        e2[f2] = b2[f2];
      d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b2, a.__reactInternalMemoizedMaskedChildContext = e2);
      return e2;
    }
    function Ff(a) {
      a = a.childContextTypes;
      return null !== a && void 0 !== a;
    }
    function Gf() {
      H$1(N);
      H$1(M);
    }
    function Hf(a, b2, c2) {
      if (M.current !== Cf)
        throw Error(y$2(168));
      I$1(M, b2);
      I$1(N, c2);
    }
    function If(a, b2, c2) {
      var d2 = a.stateNode;
      a = b2.childContextTypes;
      if ("function" !== typeof d2.getChildContext)
        return c2;
      d2 = d2.getChildContext();
      for (var e2 in d2)
        if (!(e2 in a))
          throw Error(y$2(108, Ra(b2) || "Unknown", e2));
      return m$3({}, c2, d2);
    }
    function Jf(a) {
      a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Cf;
      Df = M.current;
      I$1(M, a);
      I$1(N, N.current);
      return true;
    }
    function Kf(a, b2, c2) {
      var d2 = a.stateNode;
      if (!d2)
        throw Error(y$2(169));
      c2 ? (a = If(a, b2, Df), d2.__reactInternalMemoizedMergedChildContext = a, H$1(N), H$1(M), I$1(M, a)) : H$1(N);
      I$1(N, c2);
    }
    var Lf = null, Mf = null, Nf = r$3.unstable_runWithPriority, Of = r$3.unstable_scheduleCallback, Pf = r$3.unstable_cancelCallback, Qf = r$3.unstable_shouldYield, Rf = r$3.unstable_requestPaint, Sf = r$3.unstable_now, Tf = r$3.unstable_getCurrentPriorityLevel, Uf = r$3.unstable_ImmediatePriority, Vf = r$3.unstable_UserBlockingPriority, Wf = r$3.unstable_NormalPriority, Xf = r$3.unstable_LowPriority, Yf = r$3.unstable_IdlePriority, Zf = {}, $f = void 0 !== Rf ? Rf : function() {
    }, ag = null, bg = null, cg = false, dg = Sf(), O = 1e4 > dg ? Sf : function() {
      return Sf() - dg;
    };
    function eg() {
      switch (Tf()) {
        case Uf:
          return 99;
        case Vf:
          return 98;
        case Wf:
          return 97;
        case Xf:
          return 96;
        case Yf:
          return 95;
        default:
          throw Error(y$2(332));
      }
    }
    function fg(a) {
      switch (a) {
        case 99:
          return Uf;
        case 98:
          return Vf;
        case 97:
          return Wf;
        case 96:
          return Xf;
        case 95:
          return Yf;
        default:
          throw Error(y$2(332));
      }
    }
    function gg(a, b2) {
      a = fg(a);
      return Nf(a, b2);
    }
    function hg(a, b2, c2) {
      a = fg(a);
      return Of(a, b2, c2);
    }
    function ig() {
      if (null !== bg) {
        var a = bg;
        bg = null;
        Pf(a);
      }
      jg();
    }
    function jg() {
      if (!cg && null !== ag) {
        cg = true;
        var a = 0;
        try {
          var b2 = ag;
          gg(99, function() {
            for (; a < b2.length; a++) {
              var c2 = b2[a];
              do
                c2 = c2(true);
              while (null !== c2);
            }
          });
          ag = null;
        } catch (c2) {
          throw null !== ag && (ag = ag.slice(a + 1)), Of(Uf, ig), c2;
        } finally {
          cg = false;
        }
      }
    }
    var kg = ra.ReactCurrentBatchConfig;
    function lg(a, b2) {
      if (a && a.defaultProps) {
        b2 = m$3({}, b2);
        a = a.defaultProps;
        for (var c2 in a)
          void 0 === b2[c2] && (b2[c2] = a[c2]);
        return b2;
      }
      return b2;
    }
    var mg = Bf(null), ng = null, og = null, pg = null;
    function qg() {
      pg = og = ng = null;
    }
    function rg(a) {
      var b2 = mg.current;
      H$1(mg);
      a.type._context._currentValue = b2;
    }
    function sg(a, b2) {
      for (; null !== a; ) {
        var c2 = a.alternate;
        if ((a.childLanes & b2) === b2)
          if (null === c2 || (c2.childLanes & b2) === b2)
            break;
          else
            c2.childLanes |= b2;
        else
          a.childLanes |= b2, null !== c2 && (c2.childLanes |= b2);
        a = a.return;
      }
    }
    function tg(a, b2) {
      ng = a;
      pg = og = null;
      a = a.dependencies;
      null !== a && null !== a.firstContext && (0 !== (a.lanes & b2) && (ug = true), a.firstContext = null);
    }
    function vg(a, b2) {
      if (pg !== a && false !== b2 && 0 !== b2) {
        if ("number" !== typeof b2 || 1073741823 === b2)
          pg = a, b2 = 1073741823;
        b2 = { context: a, observedBits: b2, next: null };
        if (null === og) {
          if (null === ng)
            throw Error(y$2(308));
          og = b2;
          ng.dependencies = { lanes: 0, firstContext: b2, responders: null };
        } else
          og = og.next = b2;
      }
      return a._currentValue;
    }
    var wg = false;
    function xg(a) {
      a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null }, effects: null };
    }
    function yg(a, b2) {
      a = a.updateQueue;
      b2.updateQueue === a && (b2.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
    }
    function zg(a, b2) {
      return { eventTime: a, lane: b2, tag: 0, payload: null, callback: null, next: null };
    }
    function Ag(a, b2) {
      a = a.updateQueue;
      if (null !== a) {
        a = a.shared;
        var c2 = a.pending;
        null === c2 ? b2.next = b2 : (b2.next = c2.next, c2.next = b2);
        a.pending = b2;
      }
    }
    function Bg(a, b2) {
      var c2 = a.updateQueue, d2 = a.alternate;
      if (null !== d2 && (d2 = d2.updateQueue, c2 === d2)) {
        var e2 = null, f2 = null;
        c2 = c2.firstBaseUpdate;
        if (null !== c2) {
          do {
            var g2 = { eventTime: c2.eventTime, lane: c2.lane, tag: c2.tag, payload: c2.payload, callback: c2.callback, next: null };
            null === f2 ? e2 = f2 = g2 : f2 = f2.next = g2;
            c2 = c2.next;
          } while (null !== c2);
          null === f2 ? e2 = f2 = b2 : f2 = f2.next = b2;
        } else
          e2 = f2 = b2;
        c2 = { baseState: d2.baseState, firstBaseUpdate: e2, lastBaseUpdate: f2, shared: d2.shared, effects: d2.effects };
        a.updateQueue = c2;
        return;
      }
      a = c2.lastBaseUpdate;
      null === a ? c2.firstBaseUpdate = b2 : a.next = b2;
      c2.lastBaseUpdate = b2;
    }
    function Cg(a, b2, c2, d2) {
      var e2 = a.updateQueue;
      wg = false;
      var f2 = e2.firstBaseUpdate, g2 = e2.lastBaseUpdate, h2 = e2.shared.pending;
      if (null !== h2) {
        e2.shared.pending = null;
        var k2 = h2, l2 = k2.next;
        k2.next = null;
        null === g2 ? f2 = l2 : g2.next = l2;
        g2 = k2;
        var n2 = a.alternate;
        if (null !== n2) {
          n2 = n2.updateQueue;
          var A2 = n2.lastBaseUpdate;
          A2 !== g2 && (null === A2 ? n2.firstBaseUpdate = l2 : A2.next = l2, n2.lastBaseUpdate = k2);
        }
      }
      if (null !== f2) {
        A2 = e2.baseState;
        g2 = 0;
        n2 = l2 = k2 = null;
        do {
          h2 = f2.lane;
          var p2 = f2.eventTime;
          if ((d2 & h2) === h2) {
            null !== n2 && (n2 = n2.next = {
              eventTime: p2,
              lane: 0,
              tag: f2.tag,
              payload: f2.payload,
              callback: f2.callback,
              next: null
            });
            a: {
              var C2 = a, x2 = f2;
              h2 = b2;
              p2 = c2;
              switch (x2.tag) {
                case 1:
                  C2 = x2.payload;
                  if ("function" === typeof C2) {
                    A2 = C2.call(p2, A2, h2);
                    break a;
                  }
                  A2 = C2;
                  break a;
                case 3:
                  C2.flags = C2.flags & -4097 | 64;
                case 0:
                  C2 = x2.payload;
                  h2 = "function" === typeof C2 ? C2.call(p2, A2, h2) : C2;
                  if (null === h2 || void 0 === h2)
                    break a;
                  A2 = m$3({}, A2, h2);
                  break a;
                case 2:
                  wg = true;
              }
            }
            null !== f2.callback && (a.flags |= 32, h2 = e2.effects, null === h2 ? e2.effects = [f2] : h2.push(f2));
          } else
            p2 = { eventTime: p2, lane: h2, tag: f2.tag, payload: f2.payload, callback: f2.callback, next: null }, null === n2 ? (l2 = n2 = p2, k2 = A2) : n2 = n2.next = p2, g2 |= h2;
          f2 = f2.next;
          if (null === f2)
            if (h2 = e2.shared.pending, null === h2)
              break;
            else
              f2 = h2.next, h2.next = null, e2.lastBaseUpdate = h2, e2.shared.pending = null;
        } while (1);
        null === n2 && (k2 = A2);
        e2.baseState = k2;
        e2.firstBaseUpdate = l2;
        e2.lastBaseUpdate = n2;
        Dg |= g2;
        a.lanes = g2;
        a.memoizedState = A2;
      }
    }
    function Eg(a, b2, c2) {
      a = b2.effects;
      b2.effects = null;
      if (null !== a)
        for (b2 = 0; b2 < a.length; b2++) {
          var d2 = a[b2], e2 = d2.callback;
          if (null !== e2) {
            d2.callback = null;
            d2 = c2;
            if ("function" !== typeof e2)
              throw Error(y$2(191, e2));
            e2.call(d2);
          }
        }
    }
    var Fg = new aa.Component().refs;
    function Gg(a, b2, c2, d2) {
      b2 = a.memoizedState;
      c2 = c2(d2, b2);
      c2 = null === c2 || void 0 === c2 ? b2 : m$3({}, b2, c2);
      a.memoizedState = c2;
      0 === a.lanes && (a.updateQueue.baseState = c2);
    }
    var Kg = { isMounted: function(a) {
      return (a = a._reactInternals) ? Zb(a) === a : false;
    }, enqueueSetState: function(a, b2, c2) {
      a = a._reactInternals;
      var d2 = Hg(), e2 = Ig(a), f2 = zg(d2, e2);
      f2.payload = b2;
      void 0 !== c2 && null !== c2 && (f2.callback = c2);
      Ag(a, f2);
      Jg(a, e2, d2);
    }, enqueueReplaceState: function(a, b2, c2) {
      a = a._reactInternals;
      var d2 = Hg(), e2 = Ig(a), f2 = zg(d2, e2);
      f2.tag = 1;
      f2.payload = b2;
      void 0 !== c2 && null !== c2 && (f2.callback = c2);
      Ag(a, f2);
      Jg(a, e2, d2);
    }, enqueueForceUpdate: function(a, b2) {
      a = a._reactInternals;
      var c2 = Hg(), d2 = Ig(a), e2 = zg(c2, d2);
      e2.tag = 2;
      void 0 !== b2 && null !== b2 && (e2.callback = b2);
      Ag(a, e2);
      Jg(a, d2, c2);
    } };
    function Lg(a, b2, c2, d2, e2, f2, g2) {
      a = a.stateNode;
      return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d2, f2, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !Je(c2, d2) || !Je(e2, f2) : true;
    }
    function Mg(a, b2, c2) {
      var d2 = false, e2 = Cf;
      var f2 = b2.contextType;
      "object" === typeof f2 && null !== f2 ? f2 = vg(f2) : (e2 = Ff(b2) ? Df : M.current, d2 = b2.contextTypes, f2 = (d2 = null !== d2 && void 0 !== d2) ? Ef(a, e2) : Cf);
      b2 = new b2(c2, f2);
      a.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
      b2.updater = Kg;
      a.stateNode = b2;
      b2._reactInternals = a;
      d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e2, a.__reactInternalMemoizedMaskedChildContext = f2);
      return b2;
    }
    function Ng(a, b2, c2, d2) {
      a = b2.state;
      "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c2, d2);
      "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c2, d2);
      b2.state !== a && Kg.enqueueReplaceState(b2, b2.state, null);
    }
    function Og(a, b2, c2, d2) {
      var e2 = a.stateNode;
      e2.props = c2;
      e2.state = a.memoizedState;
      e2.refs = Fg;
      xg(a);
      var f2 = b2.contextType;
      "object" === typeof f2 && null !== f2 ? e2.context = vg(f2) : (f2 = Ff(b2) ? Df : M.current, e2.context = Ef(a, f2));
      Cg(a, c2, e2, d2);
      e2.state = a.memoizedState;
      f2 = b2.getDerivedStateFromProps;
      "function" === typeof f2 && (Gg(a, b2, f2, c2), e2.state = a.memoizedState);
      "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e2.getSnapshotBeforeUpdate || "function" !== typeof e2.UNSAFE_componentWillMount && "function" !== typeof e2.componentWillMount || (b2 = e2.state, "function" === typeof e2.componentWillMount && e2.componentWillMount(), "function" === typeof e2.UNSAFE_componentWillMount && e2.UNSAFE_componentWillMount(), b2 !== e2.state && Kg.enqueueReplaceState(e2, e2.state, null), Cg(a, c2, e2, d2), e2.state = a.memoizedState);
      "function" === typeof e2.componentDidMount && (a.flags |= 4);
    }
    var Pg = Array.isArray;
    function Qg(a, b2, c2) {
      a = c2.ref;
      if (null !== a && "function" !== typeof a && "object" !== typeof a) {
        if (c2._owner) {
          c2 = c2._owner;
          if (c2) {
            if (1 !== c2.tag)
              throw Error(y$2(309));
            var d2 = c2.stateNode;
          }
          if (!d2)
            throw Error(y$2(147, a));
          var e2 = "" + a;
          if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === e2)
            return b2.ref;
          b2 = function(a2) {
            var b3 = d2.refs;
            b3 === Fg && (b3 = d2.refs = {});
            null === a2 ? delete b3[e2] : b3[e2] = a2;
          };
          b2._stringRef = e2;
          return b2;
        }
        if ("string" !== typeof a)
          throw Error(y$2(284));
        if (!c2._owner)
          throw Error(y$2(290, a));
      }
      return a;
    }
    function Rg(a, b2) {
      if ("textarea" !== a.type)
        throw Error(y$2(31, "[object Object]" === Object.prototype.toString.call(b2) ? "object with keys {" + Object.keys(b2).join(", ") + "}" : b2));
    }
    function Sg(a) {
      function b2(b3, c3) {
        if (a) {
          var d3 = b3.lastEffect;
          null !== d3 ? (d3.nextEffect = c3, b3.lastEffect = c3) : b3.firstEffect = b3.lastEffect = c3;
          c3.nextEffect = null;
          c3.flags = 8;
        }
      }
      function c2(c3, d3) {
        if (!a)
          return null;
        for (; null !== d3; )
          b2(c3, d3), d3 = d3.sibling;
        return null;
      }
      function d2(a2, b3) {
        for (a2 = /* @__PURE__ */ new Map(); null !== b3; )
          null !== b3.key ? a2.set(b3.key, b3) : a2.set(b3.index, b3), b3 = b3.sibling;
        return a2;
      }
      function e2(a2, b3) {
        a2 = Tg(a2, b3);
        a2.index = 0;
        a2.sibling = null;
        return a2;
      }
      function f2(b3, c3, d3) {
        b3.index = d3;
        if (!a)
          return c3;
        d3 = b3.alternate;
        if (null !== d3)
          return d3 = d3.index, d3 < c3 ? (b3.flags = 2, c3) : d3;
        b3.flags = 2;
        return c3;
      }
      function g2(b3) {
        a && null === b3.alternate && (b3.flags = 2);
        return b3;
      }
      function h2(a2, b3, c3, d3) {
        if (null === b3 || 6 !== b3.tag)
          return b3 = Ug(c3, a2.mode, d3), b3.return = a2, b3;
        b3 = e2(b3, c3);
        b3.return = a2;
        return b3;
      }
      function k2(a2, b3, c3, d3) {
        if (null !== b3 && b3.elementType === c3.type)
          return d3 = e2(b3, c3.props), d3.ref = Qg(a2, b3, c3), d3.return = a2, d3;
        d3 = Vg(c3.type, c3.key, c3.props, null, a2.mode, d3);
        d3.ref = Qg(a2, b3, c3);
        d3.return = a2;
        return d3;
      }
      function l2(a2, b3, c3, d3) {
        if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c3.containerInfo || b3.stateNode.implementation !== c3.implementation)
          return b3 = Wg(c3, a2.mode, d3), b3.return = a2, b3;
        b3 = e2(b3, c3.children || []);
        b3.return = a2;
        return b3;
      }
      function n2(a2, b3, c3, d3, f3) {
        if (null === b3 || 7 !== b3.tag)
          return b3 = Xg(c3, a2.mode, d3, f3), b3.return = a2, b3;
        b3 = e2(b3, c3);
        b3.return = a2;
        return b3;
      }
      function A2(a2, b3, c3) {
        if ("string" === typeof b3 || "number" === typeof b3)
          return b3 = Ug("" + b3, a2.mode, c3), b3.return = a2, b3;
        if ("object" === typeof b3 && null !== b3) {
          switch (b3.$$typeof) {
            case sa:
              return c3 = Vg(b3.type, b3.key, b3.props, null, a2.mode, c3), c3.ref = Qg(a2, null, b3), c3.return = a2, c3;
            case ta:
              return b3 = Wg(b3, a2.mode, c3), b3.return = a2, b3;
          }
          if (Pg(b3) || La(b3))
            return b3 = Xg(
              b3,
              a2.mode,
              c3,
              null
            ), b3.return = a2, b3;
          Rg(a2, b3);
        }
        return null;
      }
      function p2(a2, b3, c3, d3) {
        var e3 = null !== b3 ? b3.key : null;
        if ("string" === typeof c3 || "number" === typeof c3)
          return null !== e3 ? null : h2(a2, b3, "" + c3, d3);
        if ("object" === typeof c3 && null !== c3) {
          switch (c3.$$typeof) {
            case sa:
              return c3.key === e3 ? c3.type === ua ? n2(a2, b3, c3.props.children, d3, e3) : k2(a2, b3, c3, d3) : null;
            case ta:
              return c3.key === e3 ? l2(a2, b3, c3, d3) : null;
          }
          if (Pg(c3) || La(c3))
            return null !== e3 ? null : n2(a2, b3, c3, d3, null);
          Rg(a2, c3);
        }
        return null;
      }
      function C2(a2, b3, c3, d3, e3) {
        if ("string" === typeof d3 || "number" === typeof d3)
          return a2 = a2.get(c3) || null, h2(b3, a2, "" + d3, e3);
        if ("object" === typeof d3 && null !== d3) {
          switch (d3.$$typeof) {
            case sa:
              return a2 = a2.get(null === d3.key ? c3 : d3.key) || null, d3.type === ua ? n2(b3, a2, d3.props.children, e3, d3.key) : k2(b3, a2, d3, e3);
            case ta:
              return a2 = a2.get(null === d3.key ? c3 : d3.key) || null, l2(b3, a2, d3, e3);
          }
          if (Pg(d3) || La(d3))
            return a2 = a2.get(c3) || null, n2(b3, a2, d3, e3, null);
          Rg(b3, d3);
        }
        return null;
      }
      function x2(e3, g3, h3, k3) {
        for (var l3 = null, t2 = null, u2 = g3, z2 = g3 = 0, q2 = null; null !== u2 && z2 < h3.length; z2++) {
          u2.index > z2 ? (q2 = u2, u2 = null) : q2 = u2.sibling;
          var n3 = p2(e3, u2, h3[z2], k3);
          if (null === n3) {
            null === u2 && (u2 = q2);
            break;
          }
          a && u2 && null === n3.alternate && b2(e3, u2);
          g3 = f2(n3, g3, z2);
          null === t2 ? l3 = n3 : t2.sibling = n3;
          t2 = n3;
          u2 = q2;
        }
        if (z2 === h3.length)
          return c2(e3, u2), l3;
        if (null === u2) {
          for (; z2 < h3.length; z2++)
            u2 = A2(e3, h3[z2], k3), null !== u2 && (g3 = f2(u2, g3, z2), null === t2 ? l3 = u2 : t2.sibling = u2, t2 = u2);
          return l3;
        }
        for (u2 = d2(e3, u2); z2 < h3.length; z2++)
          q2 = C2(u2, e3, z2, h3[z2], k3), null !== q2 && (a && null !== q2.alternate && u2.delete(null === q2.key ? z2 : q2.key), g3 = f2(q2, g3, z2), null === t2 ? l3 = q2 : t2.sibling = q2, t2 = q2);
        a && u2.forEach(function(a2) {
          return b2(e3, a2);
        });
        return l3;
      }
      function w2(e3, g3, h3, k3) {
        var l3 = La(h3);
        if ("function" !== typeof l3)
          throw Error(y$2(150));
        h3 = l3.call(h3);
        if (null == h3)
          throw Error(y$2(151));
        for (var t2 = l3 = null, u2 = g3, z2 = g3 = 0, q2 = null, n3 = h3.next(); null !== u2 && !n3.done; z2++, n3 = h3.next()) {
          u2.index > z2 ? (q2 = u2, u2 = null) : q2 = u2.sibling;
          var w3 = p2(e3, u2, n3.value, k3);
          if (null === w3) {
            null === u2 && (u2 = q2);
            break;
          }
          a && u2 && null === w3.alternate && b2(e3, u2);
          g3 = f2(w3, g3, z2);
          null === t2 ? l3 = w3 : t2.sibling = w3;
          t2 = w3;
          u2 = q2;
        }
        if (n3.done)
          return c2(e3, u2), l3;
        if (null === u2) {
          for (; !n3.done; z2++, n3 = h3.next())
            n3 = A2(e3, n3.value, k3), null !== n3 && (g3 = f2(n3, g3, z2), null === t2 ? l3 = n3 : t2.sibling = n3, t2 = n3);
          return l3;
        }
        for (u2 = d2(e3, u2); !n3.done; z2++, n3 = h3.next())
          n3 = C2(u2, e3, z2, n3.value, k3), null !== n3 && (a && null !== n3.alternate && u2.delete(null === n3.key ? z2 : n3.key), g3 = f2(n3, g3, z2), null === t2 ? l3 = n3 : t2.sibling = n3, t2 = n3);
        a && u2.forEach(function(a2) {
          return b2(e3, a2);
        });
        return l3;
      }
      return function(a2, d3, f3, h3) {
        var k3 = "object" === typeof f3 && null !== f3 && f3.type === ua && null === f3.key;
        k3 && (f3 = f3.props.children);
        var l3 = "object" === typeof f3 && null !== f3;
        if (l3)
          switch (f3.$$typeof) {
            case sa:
              a: {
                l3 = f3.key;
                for (k3 = d3; null !== k3; ) {
                  if (k3.key === l3) {
                    switch (k3.tag) {
                      case 7:
                        if (f3.type === ua) {
                          c2(a2, k3.sibling);
                          d3 = e2(k3, f3.props.children);
                          d3.return = a2;
                          a2 = d3;
                          break a;
                        }
                        break;
                      default:
                        if (k3.elementType === f3.type) {
                          c2(a2, k3.sibling);
                          d3 = e2(k3, f3.props);
                          d3.ref = Qg(a2, k3, f3);
                          d3.return = a2;
                          a2 = d3;
                          break a;
                        }
                    }
                    c2(a2, k3);
                    break;
                  } else
                    b2(a2, k3);
                  k3 = k3.sibling;
                }
                f3.type === ua ? (d3 = Xg(f3.props.children, a2.mode, h3, f3.key), d3.return = a2, a2 = d3) : (h3 = Vg(f3.type, f3.key, f3.props, null, a2.mode, h3), h3.ref = Qg(a2, d3, f3), h3.return = a2, a2 = h3);
              }
              return g2(a2);
            case ta:
              a: {
                for (k3 = f3.key; null !== d3; ) {
                  if (d3.key === k3)
                    if (4 === d3.tag && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                      c2(a2, d3.sibling);
                      d3 = e2(d3, f3.children || []);
                      d3.return = a2;
                      a2 = d3;
                      break a;
                    } else {
                      c2(a2, d3);
                      break;
                    }
                  else
                    b2(a2, d3);
                  d3 = d3.sibling;
                }
                d3 = Wg(f3, a2.mode, h3);
                d3.return = a2;
                a2 = d3;
              }
              return g2(a2);
          }
        if ("string" === typeof f3 || "number" === typeof f3)
          return f3 = "" + f3, null !== d3 && 6 === d3.tag ? (c2(a2, d3.sibling), d3 = e2(d3, f3), d3.return = a2, a2 = d3) : (c2(a2, d3), d3 = Ug(f3, a2.mode, h3), d3.return = a2, a2 = d3), g2(a2);
        if (Pg(f3))
          return x2(a2, d3, f3, h3);
        if (La(f3))
          return w2(a2, d3, f3, h3);
        l3 && Rg(a2, f3);
        if ("undefined" === typeof f3 && !k3)
          switch (a2.tag) {
            case 1:
            case 22:
            case 0:
            case 11:
            case 15:
              throw Error(y$2(152, Ra(a2.type) || "Component"));
          }
        return c2(a2, d3);
      };
    }
    var Yg = Sg(true), Zg = Sg(false), $g = {}, ah = Bf($g), bh = Bf($g), ch = Bf($g);
    function dh(a) {
      if (a === $g)
        throw Error(y$2(174));
      return a;
    }
    function eh(a, b2) {
      I$1(ch, b2);
      I$1(bh, a);
      I$1(ah, $g);
      a = b2.nodeType;
      switch (a) {
        case 9:
        case 11:
          b2 = (b2 = b2.documentElement) ? b2.namespaceURI : mb(null, "");
          break;
        default:
          a = 8 === a ? b2.parentNode : b2, b2 = a.namespaceURI || null, a = a.tagName, b2 = mb(b2, a);
      }
      H$1(ah);
      I$1(ah, b2);
    }
    function fh() {
      H$1(ah);
      H$1(bh);
      H$1(ch);
    }
    function gh(a) {
      dh(ch.current);
      var b2 = dh(ah.current);
      var c2 = mb(b2, a.type);
      b2 !== c2 && (I$1(bh, a), I$1(ah, c2));
    }
    function hh(a) {
      bh.current === a && (H$1(ah), H$1(bh));
    }
    var P = Bf(0);
    function ih(a) {
      for (var b2 = a; null !== b2; ) {
        if (13 === b2.tag) {
          var c2 = b2.memoizedState;
          if (null !== c2 && (c2 = c2.dehydrated, null === c2 || "$?" === c2.data || "$!" === c2.data))
            return b2;
        } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
          if (0 !== (b2.flags & 64))
            return b2;
        } else if (null !== b2.child) {
          b2.child.return = b2;
          b2 = b2.child;
          continue;
        }
        if (b2 === a)
          break;
        for (; null === b2.sibling; ) {
          if (null === b2.return || b2.return === a)
            return null;
          b2 = b2.return;
        }
        b2.sibling.return = b2.return;
        b2 = b2.sibling;
      }
      return null;
    }
    var jh = null, kh = null, lh = false;
    function mh(a, b2) {
      var c2 = nh(5, null, null, 0);
      c2.elementType = "DELETED";
      c2.type = "DELETED";
      c2.stateNode = b2;
      c2.return = a;
      c2.flags = 8;
      null !== a.lastEffect ? (a.lastEffect.nextEffect = c2, a.lastEffect = c2) : a.firstEffect = a.lastEffect = c2;
    }
    function oh(a, b2) {
      switch (a.tag) {
        case 5:
          var c2 = a.type;
          b2 = 1 !== b2.nodeType || c2.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
          return null !== b2 ? (a.stateNode = b2, true) : false;
        case 6:
          return b2 = "" === a.pendingProps || 3 !== b2.nodeType ? null : b2, null !== b2 ? (a.stateNode = b2, true) : false;
        case 13:
          return false;
        default:
          return false;
      }
    }
    function ph(a) {
      if (lh) {
        var b2 = kh;
        if (b2) {
          var c2 = b2;
          if (!oh(a, b2)) {
            b2 = rf(c2.nextSibling);
            if (!b2 || !oh(a, b2)) {
              a.flags = a.flags & -1025 | 2;
              lh = false;
              jh = a;
              return;
            }
            mh(jh, c2);
          }
          jh = a;
          kh = rf(b2.firstChild);
        } else
          a.flags = a.flags & -1025 | 2, lh = false, jh = a;
      }
    }
    function qh(a) {
      for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; )
        a = a.return;
      jh = a;
    }
    function rh(a) {
      if (a !== jh)
        return false;
      if (!lh)
        return qh(a), lh = true, false;
      var b2 = a.type;
      if (5 !== a.tag || "head" !== b2 && "body" !== b2 && !nf(b2, a.memoizedProps))
        for (b2 = kh; b2; )
          mh(a, b2), b2 = rf(b2.nextSibling);
      qh(a);
      if (13 === a.tag) {
        a = a.memoizedState;
        a = null !== a ? a.dehydrated : null;
        if (!a)
          throw Error(y$2(317));
        a: {
          a = a.nextSibling;
          for (b2 = 0; a; ) {
            if (8 === a.nodeType) {
              var c2 = a.data;
              if ("/$" === c2) {
                if (0 === b2) {
                  kh = rf(a.nextSibling);
                  break a;
                }
                b2--;
              } else
                "$" !== c2 && "$!" !== c2 && "$?" !== c2 || b2++;
            }
            a = a.nextSibling;
          }
          kh = null;
        }
      } else
        kh = jh ? rf(a.stateNode.nextSibling) : null;
      return true;
    }
    function sh() {
      kh = jh = null;
      lh = false;
    }
    var th = [];
    function uh() {
      for (var a = 0; a < th.length; a++)
        th[a]._workInProgressVersionPrimary = null;
      th.length = 0;
    }
    var vh = ra.ReactCurrentDispatcher, wh = ra.ReactCurrentBatchConfig, xh = 0, R = null, S = null, T = null, yh = false, zh = false;
    function Ah() {
      throw Error(y$2(321));
    }
    function Bh(a, b2) {
      if (null === b2)
        return false;
      for (var c2 = 0; c2 < b2.length && c2 < a.length; c2++)
        if (!He(a[c2], b2[c2]))
          return false;
      return true;
    }
    function Ch(a, b2, c2, d2, e2, f2) {
      xh = f2;
      R = b2;
      b2.memoizedState = null;
      b2.updateQueue = null;
      b2.lanes = 0;
      vh.current = null === a || null === a.memoizedState ? Dh : Eh;
      a = c2(d2, e2);
      if (zh) {
        f2 = 0;
        do {
          zh = false;
          if (!(25 > f2))
            throw Error(y$2(301));
          f2 += 1;
          T = S = null;
          b2.updateQueue = null;
          vh.current = Fh;
          a = c2(d2, e2);
        } while (zh);
      }
      vh.current = Gh;
      b2 = null !== S && null !== S.next;
      xh = 0;
      T = S = R = null;
      yh = false;
      if (b2)
        throw Error(y$2(300));
      return a;
    }
    function Hh() {
      var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      null === T ? R.memoizedState = T = a : T = T.next = a;
      return T;
    }
    function Ih() {
      if (null === S) {
        var a = R.alternate;
        a = null !== a ? a.memoizedState : null;
      } else
        a = S.next;
      var b2 = null === T ? R.memoizedState : T.next;
      if (null !== b2)
        T = b2, S = a;
      else {
        if (null === a)
          throw Error(y$2(310));
        S = a;
        a = { memoizedState: S.memoizedState, baseState: S.baseState, baseQueue: S.baseQueue, queue: S.queue, next: null };
        null === T ? R.memoizedState = T = a : T = T.next = a;
      }
      return T;
    }
    function Jh(a, b2) {
      return "function" === typeof b2 ? b2(a) : b2;
    }
    function Kh(a) {
      var b2 = Ih(), c2 = b2.queue;
      if (null === c2)
        throw Error(y$2(311));
      c2.lastRenderedReducer = a;
      var d2 = S, e2 = d2.baseQueue, f2 = c2.pending;
      if (null !== f2) {
        if (null !== e2) {
          var g2 = e2.next;
          e2.next = f2.next;
          f2.next = g2;
        }
        d2.baseQueue = e2 = f2;
        c2.pending = null;
      }
      if (null !== e2) {
        e2 = e2.next;
        d2 = d2.baseState;
        var h2 = g2 = f2 = null, k2 = e2;
        do {
          var l2 = k2.lane;
          if ((xh & l2) === l2)
            null !== h2 && (h2 = h2.next = { lane: 0, action: k2.action, eagerReducer: k2.eagerReducer, eagerState: k2.eagerState, next: null }), d2 = k2.eagerReducer === a ? k2.eagerState : a(d2, k2.action);
          else {
            var n2 = {
              lane: l2,
              action: k2.action,
              eagerReducer: k2.eagerReducer,
              eagerState: k2.eagerState,
              next: null
            };
            null === h2 ? (g2 = h2 = n2, f2 = d2) : h2 = h2.next = n2;
            R.lanes |= l2;
            Dg |= l2;
          }
          k2 = k2.next;
        } while (null !== k2 && k2 !== e2);
        null === h2 ? f2 = d2 : h2.next = g2;
        He(d2, b2.memoizedState) || (ug = true);
        b2.memoizedState = d2;
        b2.baseState = f2;
        b2.baseQueue = h2;
        c2.lastRenderedState = d2;
      }
      return [b2.memoizedState, c2.dispatch];
    }
    function Lh(a) {
      var b2 = Ih(), c2 = b2.queue;
      if (null === c2)
        throw Error(y$2(311));
      c2.lastRenderedReducer = a;
      var d2 = c2.dispatch, e2 = c2.pending, f2 = b2.memoizedState;
      if (null !== e2) {
        c2.pending = null;
        var g2 = e2 = e2.next;
        do
          f2 = a(f2, g2.action), g2 = g2.next;
        while (g2 !== e2);
        He(f2, b2.memoizedState) || (ug = true);
        b2.memoizedState = f2;
        null === b2.baseQueue && (b2.baseState = f2);
        c2.lastRenderedState = f2;
      }
      return [f2, d2];
    }
    function Mh(a, b2, c2) {
      var d2 = b2._getVersion;
      d2 = d2(b2._source);
      var e2 = b2._workInProgressVersionPrimary;
      if (null !== e2)
        a = e2 === d2;
      else if (a = a.mutableReadLanes, a = (xh & a) === a)
        b2._workInProgressVersionPrimary = d2, th.push(b2);
      if (a)
        return c2(b2._source);
      th.push(b2);
      throw Error(y$2(350));
    }
    function Nh(a, b2, c2, d2) {
      var e2 = U;
      if (null === e2)
        throw Error(y$2(349));
      var f2 = b2._getVersion, g2 = f2(b2._source), h2 = vh.current, k2 = h2.useState(function() {
        return Mh(e2, b2, c2);
      }), l2 = k2[1], n2 = k2[0];
      k2 = T;
      var A2 = a.memoizedState, p2 = A2.refs, C2 = p2.getSnapshot, x2 = A2.source;
      A2 = A2.subscribe;
      var w2 = R;
      a.memoizedState = { refs: p2, source: b2, subscribe: d2 };
      h2.useEffect(function() {
        p2.getSnapshot = c2;
        p2.setSnapshot = l2;
        var a2 = f2(b2._source);
        if (!He(g2, a2)) {
          a2 = c2(b2._source);
          He(n2, a2) || (l2(a2), a2 = Ig(w2), e2.mutableReadLanes |= a2 & e2.pendingLanes);
          a2 = e2.mutableReadLanes;
          e2.entangledLanes |= a2;
          for (var d3 = e2.entanglements, h3 = a2; 0 < h3; ) {
            var k3 = 31 - Vc(h3), v2 = 1 << k3;
            d3[k3] |= a2;
            h3 &= ~v2;
          }
        }
      }, [c2, b2, d2]);
      h2.useEffect(function() {
        return d2(b2._source, function() {
          var a2 = p2.getSnapshot, c3 = p2.setSnapshot;
          try {
            c3(a2(b2._source));
            var d3 = Ig(w2);
            e2.mutableReadLanes |= d3 & e2.pendingLanes;
          } catch (q2) {
            c3(function() {
              throw q2;
            });
          }
        });
      }, [b2, d2]);
      He(C2, c2) && He(x2, b2) && He(A2, d2) || (a = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: n2 }, a.dispatch = l2 = Oh.bind(null, R, a), k2.queue = a, k2.baseQueue = null, n2 = Mh(e2, b2, c2), k2.memoizedState = k2.baseState = n2);
      return n2;
    }
    function Ph(a, b2, c2) {
      var d2 = Ih();
      return Nh(d2, a, b2, c2);
    }
    function Qh(a) {
      var b2 = Hh();
      "function" === typeof a && (a = a());
      b2.memoizedState = b2.baseState = a;
      a = b2.queue = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: a };
      a = a.dispatch = Oh.bind(null, R, a);
      return [b2.memoizedState, a];
    }
    function Rh(a, b2, c2, d2) {
      a = { tag: a, create: b2, destroy: c2, deps: d2, next: null };
      b2 = R.updateQueue;
      null === b2 ? (b2 = { lastEffect: null }, R.updateQueue = b2, b2.lastEffect = a.next = a) : (c2 = b2.lastEffect, null === c2 ? b2.lastEffect = a.next = a : (d2 = c2.next, c2.next = a, a.next = d2, b2.lastEffect = a));
      return a;
    }
    function Sh(a) {
      var b2 = Hh();
      a = { current: a };
      return b2.memoizedState = a;
    }
    function Th() {
      return Ih().memoizedState;
    }
    function Uh(a, b2, c2, d2) {
      var e2 = Hh();
      R.flags |= a;
      e2.memoizedState = Rh(1 | b2, c2, void 0, void 0 === d2 ? null : d2);
    }
    function Vh(a, b2, c2, d2) {
      var e2 = Ih();
      d2 = void 0 === d2 ? null : d2;
      var f2 = void 0;
      if (null !== S) {
        var g2 = S.memoizedState;
        f2 = g2.destroy;
        if (null !== d2 && Bh(d2, g2.deps)) {
          Rh(b2, c2, f2, d2);
          return;
        }
      }
      R.flags |= a;
      e2.memoizedState = Rh(1 | b2, c2, f2, d2);
    }
    function Wh(a, b2) {
      return Uh(516, 4, a, b2);
    }
    function Xh(a, b2) {
      return Vh(516, 4, a, b2);
    }
    function Yh(a, b2) {
      return Vh(4, 2, a, b2);
    }
    function Zh(a, b2) {
      if ("function" === typeof b2)
        return a = a(), b2(a), function() {
          b2(null);
        };
      if (null !== b2 && void 0 !== b2)
        return a = a(), b2.current = a, function() {
          b2.current = null;
        };
    }
    function $h(a, b2, c2) {
      c2 = null !== c2 && void 0 !== c2 ? c2.concat([a]) : null;
      return Vh(4, 2, Zh.bind(null, b2, a), c2);
    }
    function ai() {
    }
    function bi(a, b2) {
      var c2 = Ih();
      b2 = void 0 === b2 ? null : b2;
      var d2 = c2.memoizedState;
      if (null !== d2 && null !== b2 && Bh(b2, d2[1]))
        return d2[0];
      c2.memoizedState = [a, b2];
      return a;
    }
    function ci(a, b2) {
      var c2 = Ih();
      b2 = void 0 === b2 ? null : b2;
      var d2 = c2.memoizedState;
      if (null !== d2 && null !== b2 && Bh(b2, d2[1]))
        return d2[0];
      a = a();
      c2.memoizedState = [a, b2];
      return a;
    }
    function di(a, b2) {
      var c2 = eg();
      gg(98 > c2 ? 98 : c2, function() {
        a(true);
      });
      gg(97 < c2 ? 97 : c2, function() {
        var c3 = wh.transition;
        wh.transition = 1;
        try {
          a(false), b2();
        } finally {
          wh.transition = c3;
        }
      });
    }
    function Oh(a, b2, c2) {
      var d2 = Hg(), e2 = Ig(a), f2 = { lane: e2, action: c2, eagerReducer: null, eagerState: null, next: null }, g2 = b2.pending;
      null === g2 ? f2.next = f2 : (f2.next = g2.next, g2.next = f2);
      b2.pending = f2;
      g2 = a.alternate;
      if (a === R || null !== g2 && g2 === R)
        zh = yh = true;
      else {
        if (0 === a.lanes && (null === g2 || 0 === g2.lanes) && (g2 = b2.lastRenderedReducer, null !== g2))
          try {
            var h2 = b2.lastRenderedState, k2 = g2(h2, c2);
            f2.eagerReducer = g2;
            f2.eagerState = k2;
            if (He(k2, h2))
              return;
          } catch (l2) {
          } finally {
          }
        Jg(a, e2, d2);
      }
    }
    var Gh = { readContext: vg, useCallback: Ah, useContext: Ah, useEffect: Ah, useImperativeHandle: Ah, useLayoutEffect: Ah, useMemo: Ah, useReducer: Ah, useRef: Ah, useState: Ah, useDebugValue: Ah, useDeferredValue: Ah, useTransition: Ah, useMutableSource: Ah, useOpaqueIdentifier: Ah, unstable_isNewReconciler: false }, Dh = { readContext: vg, useCallback: function(a, b2) {
      Hh().memoizedState = [a, void 0 === b2 ? null : b2];
      return a;
    }, useContext: vg, useEffect: Wh, useImperativeHandle: function(a, b2, c2) {
      c2 = null !== c2 && void 0 !== c2 ? c2.concat([a]) : null;
      return Uh(4, 2, Zh.bind(
        null,
        b2,
        a
      ), c2);
    }, useLayoutEffect: function(a, b2) {
      return Uh(4, 2, a, b2);
    }, useMemo: function(a, b2) {
      var c2 = Hh();
      b2 = void 0 === b2 ? null : b2;
      a = a();
      c2.memoizedState = [a, b2];
      return a;
    }, useReducer: function(a, b2, c2) {
      var d2 = Hh();
      b2 = void 0 !== c2 ? c2(b2) : b2;
      d2.memoizedState = d2.baseState = b2;
      a = d2.queue = { pending: null, dispatch: null, lastRenderedReducer: a, lastRenderedState: b2 };
      a = a.dispatch = Oh.bind(null, R, a);
      return [d2.memoizedState, a];
    }, useRef: Sh, useState: Qh, useDebugValue: ai, useDeferredValue: function(a) {
      var b2 = Qh(a), c2 = b2[0], d2 = b2[1];
      Wh(function() {
        var b3 = wh.transition;
        wh.transition = 1;
        try {
          d2(a);
        } finally {
          wh.transition = b3;
        }
      }, [a]);
      return c2;
    }, useTransition: function() {
      var a = Qh(false), b2 = a[0];
      a = di.bind(null, a[1]);
      Sh(a);
      return [a, b2];
    }, useMutableSource: function(a, b2, c2) {
      var d2 = Hh();
      d2.memoizedState = { refs: { getSnapshot: b2, setSnapshot: null }, source: a, subscribe: c2 };
      return Nh(d2, a, b2, c2);
    }, useOpaqueIdentifier: function() {
      if (lh) {
        var a = false, b2 = uf(function() {
          a || (a = true, c2("r:" + (tf++).toString(36)));
          throw Error(y$2(355));
        }), c2 = Qh(b2)[1];
        0 === (R.mode & 2) && (R.flags |= 516, Rh(
          5,
          function() {
            c2("r:" + (tf++).toString(36));
          },
          void 0,
          null
        ));
        return b2;
      }
      b2 = "r:" + (tf++).toString(36);
      Qh(b2);
      return b2;
    }, unstable_isNewReconciler: false }, Eh = { readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Kh, useRef: Th, useState: function() {
      return Kh(Jh);
    }, useDebugValue: ai, useDeferredValue: function(a) {
      var b2 = Kh(Jh), c2 = b2[0], d2 = b2[1];
      Xh(function() {
        var b3 = wh.transition;
        wh.transition = 1;
        try {
          d2(a);
        } finally {
          wh.transition = b3;
        }
      }, [a]);
      return c2;
    }, useTransition: function() {
      var a = Kh(Jh)[0];
      return [
        Th().current,
        a
      ];
    }, useMutableSource: Ph, useOpaqueIdentifier: function() {
      return Kh(Jh)[0];
    }, unstable_isNewReconciler: false }, Fh = { readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Lh, useRef: Th, useState: function() {
      return Lh(Jh);
    }, useDebugValue: ai, useDeferredValue: function(a) {
      var b2 = Lh(Jh), c2 = b2[0], d2 = b2[1];
      Xh(function() {
        var b3 = wh.transition;
        wh.transition = 1;
        try {
          d2(a);
        } finally {
          wh.transition = b3;
        }
      }, [a]);
      return c2;
    }, useTransition: function() {
      var a = Lh(Jh)[0];
      return [
        Th().current,
        a
      ];
    }, useMutableSource: Ph, useOpaqueIdentifier: function() {
      return Lh(Jh)[0];
    }, unstable_isNewReconciler: false }, ei = ra.ReactCurrentOwner, ug = false;
    function fi(a, b2, c2, d2) {
      b2.child = null === a ? Zg(b2, null, c2, d2) : Yg(b2, a.child, c2, d2);
    }
    function gi(a, b2, c2, d2, e2) {
      c2 = c2.render;
      var f2 = b2.ref;
      tg(b2, e2);
      d2 = Ch(a, b2, c2, d2, f2, e2);
      if (null !== a && !ug)
        return b2.updateQueue = a.updateQueue, b2.flags &= -517, a.lanes &= ~e2, hi(a, b2, e2);
      b2.flags |= 1;
      fi(a, b2, d2, e2);
      return b2.child;
    }
    function ii(a, b2, c2, d2, e2, f2) {
      if (null === a) {
        var g2 = c2.type;
        if ("function" === typeof g2 && !ji(g2) && void 0 === g2.defaultProps && null === c2.compare && void 0 === c2.defaultProps)
          return b2.tag = 15, b2.type = g2, ki(a, b2, g2, d2, e2, f2);
        a = Vg(c2.type, null, d2, b2, b2.mode, f2);
        a.ref = b2.ref;
        a.return = b2;
        return b2.child = a;
      }
      g2 = a.child;
      if (0 === (e2 & f2) && (e2 = g2.memoizedProps, c2 = c2.compare, c2 = null !== c2 ? c2 : Je, c2(e2, d2) && a.ref === b2.ref))
        return hi(a, b2, f2);
      b2.flags |= 1;
      a = Tg(g2, d2);
      a.ref = b2.ref;
      a.return = b2;
      return b2.child = a;
    }
    function ki(a, b2, c2, d2, e2, f2) {
      if (null !== a && Je(a.memoizedProps, d2) && a.ref === b2.ref)
        if (ug = false, 0 !== (f2 & e2))
          0 !== (a.flags & 16384) && (ug = true);
        else
          return b2.lanes = a.lanes, hi(a, b2, f2);
      return li(a, b2, c2, d2, f2);
    }
    function mi(a, b2, c2) {
      var d2 = b2.pendingProps, e2 = d2.children, f2 = null !== a ? a.memoizedState : null;
      if ("hidden" === d2.mode || "unstable-defer-without-hiding" === d2.mode)
        if (0 === (b2.mode & 4))
          b2.memoizedState = { baseLanes: 0 }, ni(b2, c2);
        else if (0 !== (c2 & 1073741824))
          b2.memoizedState = { baseLanes: 0 }, ni(b2, null !== f2 ? f2.baseLanes : c2);
        else
          return a = null !== f2 ? f2.baseLanes | c2 : c2, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a }, ni(b2, a), null;
      else
        null !== f2 ? (d2 = f2.baseLanes | c2, b2.memoizedState = null) : d2 = c2, ni(b2, d2);
      fi(a, b2, e2, c2);
      return b2.child;
    }
    function oi(a, b2) {
      var c2 = b2.ref;
      if (null === a && null !== c2 || null !== a && a.ref !== c2)
        b2.flags |= 128;
    }
    function li(a, b2, c2, d2, e2) {
      var f2 = Ff(c2) ? Df : M.current;
      f2 = Ef(b2, f2);
      tg(b2, e2);
      c2 = Ch(a, b2, c2, d2, f2, e2);
      if (null !== a && !ug)
        return b2.updateQueue = a.updateQueue, b2.flags &= -517, a.lanes &= ~e2, hi(a, b2, e2);
      b2.flags |= 1;
      fi(a, b2, c2, e2);
      return b2.child;
    }
    function pi(a, b2, c2, d2, e2) {
      if (Ff(c2)) {
        var f2 = true;
        Jf(b2);
      } else
        f2 = false;
      tg(b2, e2);
      if (null === b2.stateNode)
        null !== a && (a.alternate = null, b2.alternate = null, b2.flags |= 2), Mg(b2, c2, d2), Og(b2, c2, d2, e2), d2 = true;
      else if (null === a) {
        var g2 = b2.stateNode, h2 = b2.memoizedProps;
        g2.props = h2;
        var k2 = g2.context, l2 = c2.contextType;
        "object" === typeof l2 && null !== l2 ? l2 = vg(l2) : (l2 = Ff(c2) ? Df : M.current, l2 = Ef(b2, l2));
        var n2 = c2.getDerivedStateFromProps, A2 = "function" === typeof n2 || "function" === typeof g2.getSnapshotBeforeUpdate;
        A2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== d2 || k2 !== l2) && Ng(b2, g2, d2, l2);
        wg = false;
        var p2 = b2.memoizedState;
        g2.state = p2;
        Cg(b2, d2, g2, e2);
        k2 = b2.memoizedState;
        h2 !== d2 || p2 !== k2 || N.current || wg ? ("function" === typeof n2 && (Gg(b2, c2, n2, d2), k2 = b2.memoizedState), (h2 = wg || Lg(b2, c2, h2, d2, p2, k2, l2)) ? (A2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b2.flags |= 4)) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4), b2.memoizedProps = d2, b2.memoizedState = k2), g2.props = d2, g2.state = k2, g2.context = l2, d2 = h2) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4), d2 = false);
      } else {
        g2 = b2.stateNode;
        yg(a, b2);
        h2 = b2.memoizedProps;
        l2 = b2.type === b2.elementType ? h2 : lg(b2.type, h2);
        g2.props = l2;
        A2 = b2.pendingProps;
        p2 = g2.context;
        k2 = c2.contextType;
        "object" === typeof k2 && null !== k2 ? k2 = vg(k2) : (k2 = Ff(c2) ? Df : M.current, k2 = Ef(b2, k2));
        var C2 = c2.getDerivedStateFromProps;
        (n2 = "function" === typeof C2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== A2 || p2 !== k2) && Ng(b2, g2, d2, k2);
        wg = false;
        p2 = b2.memoizedState;
        g2.state = p2;
        Cg(b2, d2, g2, e2);
        var x2 = b2.memoizedState;
        h2 !== A2 || p2 !== x2 || N.current || wg ? ("function" === typeof C2 && (Gg(b2, c2, C2, d2), x2 = b2.memoizedState), (l2 = wg || Lg(b2, c2, l2, d2, p2, x2, k2)) ? (n2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(
          d2,
          x2,
          k2
        ), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d2, x2, k2)), "function" === typeof g2.componentDidUpdate && (b2.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b2.flags |= 256)) : ("function" !== typeof g2.componentDidUpdate || h2 === a.memoizedProps && p2 === a.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a.memoizedProps && p2 === a.memoizedState || (b2.flags |= 256), b2.memoizedProps = d2, b2.memoizedState = x2), g2.props = d2, g2.state = x2, g2.context = k2, d2 = l2) : ("function" !== typeof g2.componentDidUpdate || h2 === a.memoizedProps && p2 === a.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a.memoizedProps && p2 === a.memoizedState || (b2.flags |= 256), d2 = false);
      }
      return qi(a, b2, c2, d2, f2, e2);
    }
    function qi(a, b2, c2, d2, e2, f2) {
      oi(a, b2);
      var g2 = 0 !== (b2.flags & 64);
      if (!d2 && !g2)
        return e2 && Kf(b2, c2, false), hi(a, b2, f2);
      d2 = b2.stateNode;
      ei.current = b2;
      var h2 = g2 && "function" !== typeof c2.getDerivedStateFromError ? null : d2.render();
      b2.flags |= 1;
      null !== a && g2 ? (b2.child = Yg(b2, a.child, null, f2), b2.child = Yg(b2, null, h2, f2)) : fi(a, b2, h2, f2);
      b2.memoizedState = d2.state;
      e2 && Kf(b2, c2, true);
      return b2.child;
    }
    function ri(a) {
      var b2 = a.stateNode;
      b2.pendingContext ? Hf(a, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && Hf(a, b2.context, false);
      eh(a, b2.containerInfo);
    }
    var si = { dehydrated: null, retryLane: 0 };
    function ti(a, b2, c2) {
      var d2 = b2.pendingProps, e2 = P.current, f2 = false, g2;
      (g2 = 0 !== (b2.flags & 64)) || (g2 = null !== a && null === a.memoizedState ? false : 0 !== (e2 & 2));
      g2 ? (f2 = true, b2.flags &= -65) : null !== a && null === a.memoizedState || void 0 === d2.fallback || true === d2.unstable_avoidThisFallback || (e2 |= 1);
      I$1(P, e2 & 1);
      if (null === a) {
        void 0 !== d2.fallback && ph(b2);
        a = d2.children;
        e2 = d2.fallback;
        if (f2)
          return a = ui(b2, a, e2, c2), b2.child.memoizedState = { baseLanes: c2 }, b2.memoizedState = si, a;
        if ("number" === typeof d2.unstable_expectedLoadTime)
          return a = ui(b2, a, e2, c2), b2.child.memoizedState = { baseLanes: c2 }, b2.memoizedState = si, b2.lanes = 33554432, a;
        c2 = vi({ mode: "visible", children: a }, b2.mode, c2, null);
        c2.return = b2;
        return b2.child = c2;
      }
      if (null !== a.memoizedState) {
        if (f2)
          return d2 = wi(a, b2, d2.children, d2.fallback, c2), f2 = b2.child, e2 = a.child.memoizedState, f2.memoizedState = null === e2 ? { baseLanes: c2 } : { baseLanes: e2.baseLanes | c2 }, f2.childLanes = a.childLanes & ~c2, b2.memoizedState = si, d2;
        c2 = xi(a, b2, d2.children, c2);
        b2.memoizedState = null;
        return c2;
      }
      if (f2)
        return d2 = wi(a, b2, d2.children, d2.fallback, c2), f2 = b2.child, e2 = a.child.memoizedState, f2.memoizedState = null === e2 ? { baseLanes: c2 } : { baseLanes: e2.baseLanes | c2 }, f2.childLanes = a.childLanes & ~c2, b2.memoizedState = si, d2;
      c2 = xi(a, b2, d2.children, c2);
      b2.memoizedState = null;
      return c2;
    }
    function ui(a, b2, c2, d2) {
      var e2 = a.mode, f2 = a.child;
      b2 = { mode: "hidden", children: b2 };
      0 === (e2 & 2) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = b2) : f2 = vi(b2, e2, 0, null);
      c2 = Xg(c2, e2, d2, null);
      f2.return = a;
      c2.return = a;
      f2.sibling = c2;
      a.child = f2;
      return c2;
    }
    function xi(a, b2, c2, d2) {
      var e2 = a.child;
      a = e2.sibling;
      c2 = Tg(e2, { mode: "visible", children: c2 });
      0 === (b2.mode & 2) && (c2.lanes = d2);
      c2.return = b2;
      c2.sibling = null;
      null !== a && (a.nextEffect = null, a.flags = 8, b2.firstEffect = b2.lastEffect = a);
      return b2.child = c2;
    }
    function wi(a, b2, c2, d2, e2) {
      var f2 = b2.mode, g2 = a.child;
      a = g2.sibling;
      var h2 = { mode: "hidden", children: c2 };
      0 === (f2 & 2) && b2.child !== g2 ? (c2 = b2.child, c2.childLanes = 0, c2.pendingProps = h2, g2 = c2.lastEffect, null !== g2 ? (b2.firstEffect = c2.firstEffect, b2.lastEffect = g2, g2.nextEffect = null) : b2.firstEffect = b2.lastEffect = null) : c2 = Tg(g2, h2);
      null !== a ? d2 = Tg(a, d2) : (d2 = Xg(d2, f2, e2, null), d2.flags |= 2);
      d2.return = b2;
      c2.return = b2;
      c2.sibling = d2;
      b2.child = c2;
      return d2;
    }
    function yi(a, b2) {
      a.lanes |= b2;
      var c2 = a.alternate;
      null !== c2 && (c2.lanes |= b2);
      sg(a.return, b2);
    }
    function zi(a, b2, c2, d2, e2, f2) {
      var g2 = a.memoizedState;
      null === g2 ? a.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d2, tail: c2, tailMode: e2, lastEffect: f2 } : (g2.isBackwards = b2, g2.rendering = null, g2.renderingStartTime = 0, g2.last = d2, g2.tail = c2, g2.tailMode = e2, g2.lastEffect = f2);
    }
    function Ai(a, b2, c2) {
      var d2 = b2.pendingProps, e2 = d2.revealOrder, f2 = d2.tail;
      fi(a, b2, d2.children, c2);
      d2 = P.current;
      if (0 !== (d2 & 2))
        d2 = d2 & 1 | 2, b2.flags |= 64;
      else {
        if (null !== a && 0 !== (a.flags & 64))
          a:
            for (a = b2.child; null !== a; ) {
              if (13 === a.tag)
                null !== a.memoizedState && yi(a, c2);
              else if (19 === a.tag)
                yi(a, c2);
              else if (null !== a.child) {
                a.child.return = a;
                a = a.child;
                continue;
              }
              if (a === b2)
                break a;
              for (; null === a.sibling; ) {
                if (null === a.return || a.return === b2)
                  break a;
                a = a.return;
              }
              a.sibling.return = a.return;
              a = a.sibling;
            }
        d2 &= 1;
      }
      I$1(P, d2);
      if (0 === (b2.mode & 2))
        b2.memoizedState = null;
      else
        switch (e2) {
          case "forwards":
            c2 = b2.child;
            for (e2 = null; null !== c2; )
              a = c2.alternate, null !== a && null === ih(a) && (e2 = c2), c2 = c2.sibling;
            c2 = e2;
            null === c2 ? (e2 = b2.child, b2.child = null) : (e2 = c2.sibling, c2.sibling = null);
            zi(b2, false, e2, c2, f2, b2.lastEffect);
            break;
          case "backwards":
            c2 = null;
            e2 = b2.child;
            for (b2.child = null; null !== e2; ) {
              a = e2.alternate;
              if (null !== a && null === ih(a)) {
                b2.child = e2;
                break;
              }
              a = e2.sibling;
              e2.sibling = c2;
              c2 = e2;
              e2 = a;
            }
            zi(b2, true, c2, null, f2, b2.lastEffect);
            break;
          case "together":
            zi(b2, false, null, null, void 0, b2.lastEffect);
            break;
          default:
            b2.memoizedState = null;
        }
      return b2.child;
    }
    function hi(a, b2, c2) {
      null !== a && (b2.dependencies = a.dependencies);
      Dg |= b2.lanes;
      if (0 !== (c2 & b2.childLanes)) {
        if (null !== a && b2.child !== a.child)
          throw Error(y$2(153));
        if (null !== b2.child) {
          a = b2.child;
          c2 = Tg(a, a.pendingProps);
          b2.child = c2;
          for (c2.return = b2; null !== a.sibling; )
            a = a.sibling, c2 = c2.sibling = Tg(a, a.pendingProps), c2.return = b2;
          c2.sibling = null;
        }
        return b2.child;
      }
      return null;
    }
    var Bi, Ci, Di, Ei;
    Bi = function(a, b2) {
      for (var c2 = b2.child; null !== c2; ) {
        if (5 === c2.tag || 6 === c2.tag)
          a.appendChild(c2.stateNode);
        else if (4 !== c2.tag && null !== c2.child) {
          c2.child.return = c2;
          c2 = c2.child;
          continue;
        }
        if (c2 === b2)
          break;
        for (; null === c2.sibling; ) {
          if (null === c2.return || c2.return === b2)
            return;
          c2 = c2.return;
        }
        c2.sibling.return = c2.return;
        c2 = c2.sibling;
      }
    };
    Ci = function() {
    };
    Di = function(a, b2, c2, d2) {
      var e2 = a.memoizedProps;
      if (e2 !== d2) {
        a = b2.stateNode;
        dh(ah.current);
        var f2 = null;
        switch (c2) {
          case "input":
            e2 = Ya(a, e2);
            d2 = Ya(a, d2);
            f2 = [];
            break;
          case "option":
            e2 = eb(a, e2);
            d2 = eb(a, d2);
            f2 = [];
            break;
          case "select":
            e2 = m$3({}, e2, { value: void 0 });
            d2 = m$3({}, d2, { value: void 0 });
            f2 = [];
            break;
          case "textarea":
            e2 = gb(a, e2);
            d2 = gb(a, d2);
            f2 = [];
            break;
          default:
            "function" !== typeof e2.onClick && "function" === typeof d2.onClick && (a.onclick = jf);
        }
        vb(c2, d2);
        var g2;
        c2 = null;
        for (l2 in e2)
          if (!d2.hasOwnProperty(l2) && e2.hasOwnProperty(l2) && null != e2[l2])
            if ("style" === l2) {
              var h2 = e2[l2];
              for (g2 in h2)
                h2.hasOwnProperty(g2) && (c2 || (c2 = {}), c2[g2] = "");
            } else
              "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ca.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
        for (l2 in d2) {
          var k2 = d2[l2];
          h2 = null != e2 ? e2[l2] : void 0;
          if (d2.hasOwnProperty(l2) && k2 !== h2 && (null != k2 || null != h2))
            if ("style" === l2)
              if (h2) {
                for (g2 in h2)
                  !h2.hasOwnProperty(g2) || k2 && k2.hasOwnProperty(g2) || (c2 || (c2 = {}), c2[g2] = "");
                for (g2 in k2)
                  k2.hasOwnProperty(g2) && h2[g2] !== k2[g2] && (c2 || (c2 = {}), c2[g2] = k2[g2]);
              } else
                c2 || (f2 || (f2 = []), f2.push(l2, c2)), c2 = k2;
            else
              "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h2 = h2 ? h2.__html : void 0, null != k2 && h2 !== k2 && (f2 = f2 || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f2 = f2 || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ca.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && G$1("scroll", a), f2 || h2 === k2 || (f2 = [])) : "object" === typeof k2 && null !== k2 && k2.$$typeof === Ga ? k2.toString() : (f2 = f2 || []).push(l2, k2));
        }
        c2 && (f2 = f2 || []).push(
          "style",
          c2
        );
        var l2 = f2;
        if (b2.updateQueue = l2)
          b2.flags |= 4;
      }
    };
    Ei = function(a, b2, c2, d2) {
      c2 !== d2 && (b2.flags |= 4);
    };
    function Fi(a, b2) {
      if (!lh)
        switch (a.tailMode) {
          case "hidden":
            b2 = a.tail;
            for (var c2 = null; null !== b2; )
              null !== b2.alternate && (c2 = b2), b2 = b2.sibling;
            null === c2 ? a.tail = null : c2.sibling = null;
            break;
          case "collapsed":
            c2 = a.tail;
            for (var d2 = null; null !== c2; )
              null !== c2.alternate && (d2 = c2), c2 = c2.sibling;
            null === d2 ? b2 || null === a.tail ? a.tail = null : a.tail.sibling = null : d2.sibling = null;
        }
    }
    function Gi(a, b2, c2) {
      var d2 = b2.pendingProps;
      switch (b2.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return null;
        case 1:
          return Ff(b2.type) && Gf(), null;
        case 3:
          fh();
          H$1(N);
          H$1(M);
          uh();
          d2 = b2.stateNode;
          d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
          if (null === a || null === a.child)
            rh(b2) ? b2.flags |= 4 : d2.hydrate || (b2.flags |= 256);
          Ci(b2);
          return null;
        case 5:
          hh(b2);
          var e2 = dh(ch.current);
          c2 = b2.type;
          if (null !== a && null != b2.stateNode)
            Di(a, b2, c2, d2, e2), a.ref !== b2.ref && (b2.flags |= 128);
          else {
            if (!d2) {
              if (null === b2.stateNode)
                throw Error(y$2(166));
              return null;
            }
            a = dh(ah.current);
            if (rh(b2)) {
              d2 = b2.stateNode;
              c2 = b2.type;
              var f2 = b2.memoizedProps;
              d2[wf] = b2;
              d2[xf] = f2;
              switch (c2) {
                case "dialog":
                  G$1("cancel", d2);
                  G$1("close", d2);
                  break;
                case "iframe":
                case "object":
                case "embed":
                  G$1("load", d2);
                  break;
                case "video":
                case "audio":
                  for (a = 0; a < Xe.length; a++)
                    G$1(Xe[a], d2);
                  break;
                case "source":
                  G$1("error", d2);
                  break;
                case "img":
                case "image":
                case "link":
                  G$1("error", d2);
                  G$1("load", d2);
                  break;
                case "details":
                  G$1("toggle", d2);
                  break;
                case "input":
                  Za(d2, f2);
                  G$1("invalid", d2);
                  break;
                case "select":
                  d2._wrapperState = { wasMultiple: !!f2.multiple };
                  G$1("invalid", d2);
                  break;
                case "textarea":
                  hb(d2, f2), G$1("invalid", d2);
              }
              vb(c2, f2);
              a = null;
              for (var g2 in f2)
                f2.hasOwnProperty(g2) && (e2 = f2[g2], "children" === g2 ? "string" === typeof e2 ? d2.textContent !== e2 && (a = ["children", e2]) : "number" === typeof e2 && d2.textContent !== "" + e2 && (a = ["children", "" + e2]) : ca.hasOwnProperty(g2) && null != e2 && "onScroll" === g2 && G$1("scroll", d2));
              switch (c2) {
                case "input":
                  Va(d2);
                  cb(d2, f2, true);
                  break;
                case "textarea":
                  Va(d2);
                  jb(d2);
                  break;
                case "select":
                case "option":
                  break;
                default:
                  "function" === typeof f2.onClick && (d2.onclick = jf);
              }
              d2 = a;
              b2.updateQueue = d2;
              null !== d2 && (b2.flags |= 4);
            } else {
              g2 = 9 === e2.nodeType ? e2 : e2.ownerDocument;
              a === kb.html && (a = lb(c2));
              a === kb.html ? "script" === c2 ? (a = g2.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d2.is ? a = g2.createElement(c2, { is: d2.is }) : (a = g2.createElement(c2), "select" === c2 && (g2 = a, d2.multiple ? g2.multiple = true : d2.size && (g2.size = d2.size))) : a = g2.createElementNS(a, c2);
              a[wf] = b2;
              a[xf] = d2;
              Bi(a, b2, false, false);
              b2.stateNode = a;
              g2 = wb(c2, d2);
              switch (c2) {
                case "dialog":
                  G$1("cancel", a);
                  G$1("close", a);
                  e2 = d2;
                  break;
                case "iframe":
                case "object":
                case "embed":
                  G$1("load", a);
                  e2 = d2;
                  break;
                case "video":
                case "audio":
                  for (e2 = 0; e2 < Xe.length; e2++)
                    G$1(Xe[e2], a);
                  e2 = d2;
                  break;
                case "source":
                  G$1("error", a);
                  e2 = d2;
                  break;
                case "img":
                case "image":
                case "link":
                  G$1("error", a);
                  G$1("load", a);
                  e2 = d2;
                  break;
                case "details":
                  G$1("toggle", a);
                  e2 = d2;
                  break;
                case "input":
                  Za(a, d2);
                  e2 = Ya(a, d2);
                  G$1("invalid", a);
                  break;
                case "option":
                  e2 = eb(a, d2);
                  break;
                case "select":
                  a._wrapperState = { wasMultiple: !!d2.multiple };
                  e2 = m$3({}, d2, { value: void 0 });
                  G$1("invalid", a);
                  break;
                case "textarea":
                  hb(a, d2);
                  e2 = gb(a, d2);
                  G$1("invalid", a);
                  break;
                default:
                  e2 = d2;
              }
              vb(c2, e2);
              var h2 = e2;
              for (f2 in h2)
                if (h2.hasOwnProperty(f2)) {
                  var k2 = h2[f2];
                  "style" === f2 ? tb(a, k2) : "dangerouslySetInnerHTML" === f2 ? (k2 = k2 ? k2.__html : void 0, null != k2 && ob(a, k2)) : "children" === f2 ? "string" === typeof k2 ? ("textarea" !== c2 || "" !== k2) && pb(a, k2) : "number" === typeof k2 && pb(a, "" + k2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ca.hasOwnProperty(f2) ? null != k2 && "onScroll" === f2 && G$1("scroll", a) : null != k2 && qa(a, f2, k2, g2));
                }
              switch (c2) {
                case "input":
                  Va(a);
                  cb(a, d2, false);
                  break;
                case "textarea":
                  Va(a);
                  jb(a);
                  break;
                case "option":
                  null != d2.value && a.setAttribute("value", "" + Sa(d2.value));
                  break;
                case "select":
                  a.multiple = !!d2.multiple;
                  f2 = d2.value;
                  null != f2 ? fb(a, !!d2.multiple, f2, false) : null != d2.defaultValue && fb(a, !!d2.multiple, d2.defaultValue, true);
                  break;
                default:
                  "function" === typeof e2.onClick && (a.onclick = jf);
              }
              mf(c2, d2) && (b2.flags |= 4);
            }
            null !== b2.ref && (b2.flags |= 128);
          }
          return null;
        case 6:
          if (a && null != b2.stateNode)
            Ei(a, b2, a.memoizedProps, d2);
          else {
            if ("string" !== typeof d2 && null === b2.stateNode)
              throw Error(y$2(166));
            c2 = dh(ch.current);
            dh(ah.current);
            rh(b2) ? (d2 = b2.stateNode, c2 = b2.memoizedProps, d2[wf] = b2, d2.nodeValue !== c2 && (b2.flags |= 4)) : (d2 = (9 === c2.nodeType ? c2 : c2.ownerDocument).createTextNode(d2), d2[wf] = b2, b2.stateNode = d2);
          }
          return null;
        case 13:
          H$1(P);
          d2 = b2.memoizedState;
          if (0 !== (b2.flags & 64))
            return b2.lanes = c2, b2;
          d2 = null !== d2;
          c2 = false;
          null === a ? void 0 !== b2.memoizedProps.fallback && rh(b2) : c2 = null !== a.memoizedState;
          if (d2 && !c2 && 0 !== (b2.mode & 2))
            if (null === a && true !== b2.memoizedProps.unstable_avoidThisFallback || 0 !== (P.current & 1))
              0 === V && (V = 3);
            else {
              if (0 === V || 3 === V)
                V = 4;
              null === U || 0 === (Dg & 134217727) && 0 === (Hi & 134217727) || Ii(U, W);
            }
          if (d2 || c2)
            b2.flags |= 4;
          return null;
        case 4:
          return fh(), Ci(b2), null === a && cf(b2.stateNode.containerInfo), null;
        case 10:
          return rg(b2), null;
        case 17:
          return Ff(b2.type) && Gf(), null;
        case 19:
          H$1(P);
          d2 = b2.memoizedState;
          if (null === d2)
            return null;
          f2 = 0 !== (b2.flags & 64);
          g2 = d2.rendering;
          if (null === g2)
            if (f2)
              Fi(d2, false);
            else {
              if (0 !== V || null !== a && 0 !== (a.flags & 64))
                for (a = b2.child; null !== a; ) {
                  g2 = ih(a);
                  if (null !== g2) {
                    b2.flags |= 64;
                    Fi(d2, false);
                    f2 = g2.updateQueue;
                    null !== f2 && (b2.updateQueue = f2, b2.flags |= 4);
                    null === d2.lastEffect && (b2.firstEffect = null);
                    b2.lastEffect = d2.lastEffect;
                    d2 = c2;
                    for (c2 = b2.child; null !== c2; )
                      f2 = c2, a = d2, f2.flags &= 2, f2.nextEffect = null, f2.firstEffect = null, f2.lastEffect = null, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a, f2.child = null, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a = g2.dependencies, f2.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c2 = c2.sibling;
                    I$1(P, P.current & 1 | 2);
                    return b2.child;
                  }
                  a = a.sibling;
                }
              null !== d2.tail && O() > Ji && (b2.flags |= 64, f2 = true, Fi(d2, false), b2.lanes = 33554432);
            }
          else {
            if (!f2)
              if (a = ih(g2), null !== a) {
                if (b2.flags |= 64, f2 = true, c2 = a.updateQueue, null !== c2 && (b2.updateQueue = c2, b2.flags |= 4), Fi(d2, true), null === d2.tail && "hidden" === d2.tailMode && !g2.alternate && !lh)
                  return b2 = b2.lastEffect = d2.lastEffect, null !== b2 && (b2.nextEffect = null), null;
              } else
                2 * O() - d2.renderingStartTime > Ji && 1073741824 !== c2 && (b2.flags |= 64, f2 = true, Fi(d2, false), b2.lanes = 33554432);
            d2.isBackwards ? (g2.sibling = b2.child, b2.child = g2) : (c2 = d2.last, null !== c2 ? c2.sibling = g2 : b2.child = g2, d2.last = g2);
          }
          return null !== d2.tail ? (c2 = d2.tail, d2.rendering = c2, d2.tail = c2.sibling, d2.lastEffect = b2.lastEffect, d2.renderingStartTime = O(), c2.sibling = null, b2 = P.current, I$1(P, f2 ? b2 & 1 | 2 : b2 & 1), c2) : null;
        case 23:
        case 24:
          return Ki(), null !== a && null !== a.memoizedState !== (null !== b2.memoizedState) && "unstable-defer-without-hiding" !== d2.mode && (b2.flags |= 4), null;
      }
      throw Error(y$2(156, b2.tag));
    }
    function Li(a) {
      switch (a.tag) {
        case 1:
          Ff(a.type) && Gf();
          var b2 = a.flags;
          return b2 & 4096 ? (a.flags = b2 & -4097 | 64, a) : null;
        case 3:
          fh();
          H$1(N);
          H$1(M);
          uh();
          b2 = a.flags;
          if (0 !== (b2 & 64))
            throw Error(y$2(285));
          a.flags = b2 & -4097 | 64;
          return a;
        case 5:
          return hh(a), null;
        case 13:
          return H$1(P), b2 = a.flags, b2 & 4096 ? (a.flags = b2 & -4097 | 64, a) : null;
        case 19:
          return H$1(P), null;
        case 4:
          return fh(), null;
        case 10:
          return rg(a), null;
        case 23:
        case 24:
          return Ki(), null;
        default:
          return null;
      }
    }
    function Mi(a, b2) {
      try {
        var c2 = "", d2 = b2;
        do
          c2 += Qa(d2), d2 = d2.return;
        while (d2);
        var e2 = c2;
      } catch (f2) {
        e2 = "\nError generating stack: " + f2.message + "\n" + f2.stack;
      }
      return { value: a, source: b2, stack: e2 };
    }
    function Ni(a, b2) {
      try {
        console.error(b2.value);
      } catch (c2) {
        setTimeout(function() {
          throw c2;
        });
      }
    }
    var Oi = "function" === typeof WeakMap ? WeakMap : Map;
    function Pi(a, b2, c2) {
      c2 = zg(-1, c2);
      c2.tag = 3;
      c2.payload = { element: null };
      var d2 = b2.value;
      c2.callback = function() {
        Qi || (Qi = true, Ri = d2);
        Ni(a, b2);
      };
      return c2;
    }
    function Si(a, b2, c2) {
      c2 = zg(-1, c2);
      c2.tag = 3;
      var d2 = a.type.getDerivedStateFromError;
      if ("function" === typeof d2) {
        var e2 = b2.value;
        c2.payload = function() {
          Ni(a, b2);
          return d2(e2);
        };
      }
      var f2 = a.stateNode;
      null !== f2 && "function" === typeof f2.componentDidCatch && (c2.callback = function() {
        "function" !== typeof d2 && (null === Ti ? Ti = /* @__PURE__ */ new Set([this]) : Ti.add(this), Ni(a, b2));
        var c3 = b2.stack;
        this.componentDidCatch(b2.value, { componentStack: null !== c3 ? c3 : "" });
      });
      return c2;
    }
    var Ui = "function" === typeof WeakSet ? WeakSet : Set;
    function Vi(a) {
      var b2 = a.ref;
      if (null !== b2)
        if ("function" === typeof b2)
          try {
            b2(null);
          } catch (c2) {
            Wi(a, c2);
          }
        else
          b2.current = null;
    }
    function Xi(a, b2) {
      switch (b2.tag) {
        case 0:
        case 11:
        case 15:
        case 22:
          return;
        case 1:
          if (b2.flags & 256 && null !== a) {
            var c2 = a.memoizedProps, d2 = a.memoizedState;
            a = b2.stateNode;
            b2 = a.getSnapshotBeforeUpdate(b2.elementType === b2.type ? c2 : lg(b2.type, c2), d2);
            a.__reactInternalSnapshotBeforeUpdate = b2;
          }
          return;
        case 3:
          b2.flags & 256 && qf(b2.stateNode.containerInfo);
          return;
        case 5:
        case 6:
        case 4:
        case 17:
          return;
      }
      throw Error(y$2(163));
    }
    function Yi(a, b2, c2) {
      switch (c2.tag) {
        case 0:
        case 11:
        case 15:
        case 22:
          b2 = c2.updateQueue;
          b2 = null !== b2 ? b2.lastEffect : null;
          if (null !== b2) {
            a = b2 = b2.next;
            do {
              if (3 === (a.tag & 3)) {
                var d2 = a.create;
                a.destroy = d2();
              }
              a = a.next;
            } while (a !== b2);
          }
          b2 = c2.updateQueue;
          b2 = null !== b2 ? b2.lastEffect : null;
          if (null !== b2) {
            a = b2 = b2.next;
            do {
              var e2 = a;
              d2 = e2.next;
              e2 = e2.tag;
              0 !== (e2 & 4) && 0 !== (e2 & 1) && (Zi(c2, a), $i(c2, a));
              a = d2;
            } while (a !== b2);
          }
          return;
        case 1:
          a = c2.stateNode;
          c2.flags & 4 && (null === b2 ? a.componentDidMount() : (d2 = c2.elementType === c2.type ? b2.memoizedProps : lg(c2.type, b2.memoizedProps), a.componentDidUpdate(
            d2,
            b2.memoizedState,
            a.__reactInternalSnapshotBeforeUpdate
          )));
          b2 = c2.updateQueue;
          null !== b2 && Eg(c2, b2, a);
          return;
        case 3:
          b2 = c2.updateQueue;
          if (null !== b2) {
            a = null;
            if (null !== c2.child)
              switch (c2.child.tag) {
                case 5:
                  a = c2.child.stateNode;
                  break;
                case 1:
                  a = c2.child.stateNode;
              }
            Eg(c2, b2, a);
          }
          return;
        case 5:
          a = c2.stateNode;
          null === b2 && c2.flags & 4 && mf(c2.type, c2.memoizedProps) && a.focus();
          return;
        case 6:
          return;
        case 4:
          return;
        case 12:
          return;
        case 13:
          null === c2.memoizedState && (c2 = c2.alternate, null !== c2 && (c2 = c2.memoizedState, null !== c2 && (c2 = c2.dehydrated, null !== c2 && Cc(c2))));
          return;
        case 19:
        case 17:
        case 20:
        case 21:
        case 23:
        case 24:
          return;
      }
      throw Error(y$2(163));
    }
    function aj(a, b2) {
      for (var c2 = a; ; ) {
        if (5 === c2.tag) {
          var d2 = c2.stateNode;
          if (b2)
            d2 = d2.style, "function" === typeof d2.setProperty ? d2.setProperty("display", "none", "important") : d2.display = "none";
          else {
            d2 = c2.stateNode;
            var e2 = c2.memoizedProps.style;
            e2 = void 0 !== e2 && null !== e2 && e2.hasOwnProperty("display") ? e2.display : null;
            d2.style.display = sb("display", e2);
          }
        } else if (6 === c2.tag)
          c2.stateNode.nodeValue = b2 ? "" : c2.memoizedProps;
        else if ((23 !== c2.tag && 24 !== c2.tag || null === c2.memoizedState || c2 === a) && null !== c2.child) {
          c2.child.return = c2;
          c2 = c2.child;
          continue;
        }
        if (c2 === a)
          break;
        for (; null === c2.sibling; ) {
          if (null === c2.return || c2.return === a)
            return;
          c2 = c2.return;
        }
        c2.sibling.return = c2.return;
        c2 = c2.sibling;
      }
    }
    function bj(a, b2) {
      if (Mf && "function" === typeof Mf.onCommitFiberUnmount)
        try {
          Mf.onCommitFiberUnmount(Lf, b2);
        } catch (f2) {
        }
      switch (b2.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
        case 22:
          a = b2.updateQueue;
          if (null !== a && (a = a.lastEffect, null !== a)) {
            var c2 = a = a.next;
            do {
              var d2 = c2, e2 = d2.destroy;
              d2 = d2.tag;
              if (void 0 !== e2)
                if (0 !== (d2 & 4))
                  Zi(b2, c2);
                else {
                  d2 = b2;
                  try {
                    e2();
                  } catch (f2) {
                    Wi(d2, f2);
                  }
                }
              c2 = c2.next;
            } while (c2 !== a);
          }
          break;
        case 1:
          Vi(b2);
          a = b2.stateNode;
          if ("function" === typeof a.componentWillUnmount)
            try {
              a.props = b2.memoizedProps, a.state = b2.memoizedState, a.componentWillUnmount();
            } catch (f2) {
              Wi(
                b2,
                f2
              );
            }
          break;
        case 5:
          Vi(b2);
          break;
        case 4:
          cj(a, b2);
      }
    }
    function dj(a) {
      a.alternate = null;
      a.child = null;
      a.dependencies = null;
      a.firstEffect = null;
      a.lastEffect = null;
      a.memoizedProps = null;
      a.memoizedState = null;
      a.pendingProps = null;
      a.return = null;
      a.updateQueue = null;
    }
    function ej(a) {
      return 5 === a.tag || 3 === a.tag || 4 === a.tag;
    }
    function fj(a) {
      a: {
        for (var b2 = a.return; null !== b2; ) {
          if (ej(b2))
            break a;
          b2 = b2.return;
        }
        throw Error(y$2(160));
      }
      var c2 = b2;
      b2 = c2.stateNode;
      switch (c2.tag) {
        case 5:
          var d2 = false;
          break;
        case 3:
          b2 = b2.containerInfo;
          d2 = true;
          break;
        case 4:
          b2 = b2.containerInfo;
          d2 = true;
          break;
        default:
          throw Error(y$2(161));
      }
      c2.flags & 16 && (pb(b2, ""), c2.flags &= -17);
      a:
        b:
          for (c2 = a; ; ) {
            for (; null === c2.sibling; ) {
              if (null === c2.return || ej(c2.return)) {
                c2 = null;
                break a;
              }
              c2 = c2.return;
            }
            c2.sibling.return = c2.return;
            for (c2 = c2.sibling; 5 !== c2.tag && 6 !== c2.tag && 18 !== c2.tag; ) {
              if (c2.flags & 2)
                continue b;
              if (null === c2.child || 4 === c2.tag)
                continue b;
              else
                c2.child.return = c2, c2 = c2.child;
            }
            if (!(c2.flags & 2)) {
              c2 = c2.stateNode;
              break a;
            }
          }
      d2 ? gj(a, c2, b2) : hj(a, c2, b2);
    }
    function gj(a, b2, c2) {
      var d2 = a.tag, e2 = 5 === d2 || 6 === d2;
      if (e2)
        a = e2 ? a.stateNode : a.stateNode.instance, b2 ? 8 === c2.nodeType ? c2.parentNode.insertBefore(a, b2) : c2.insertBefore(a, b2) : (8 === c2.nodeType ? (b2 = c2.parentNode, b2.insertBefore(a, c2)) : (b2 = c2, b2.appendChild(a)), c2 = c2._reactRootContainer, null !== c2 && void 0 !== c2 || null !== b2.onclick || (b2.onclick = jf));
      else if (4 !== d2 && (a = a.child, null !== a))
        for (gj(a, b2, c2), a = a.sibling; null !== a; )
          gj(a, b2, c2), a = a.sibling;
    }
    function hj(a, b2, c2) {
      var d2 = a.tag, e2 = 5 === d2 || 6 === d2;
      if (e2)
        a = e2 ? a.stateNode : a.stateNode.instance, b2 ? c2.insertBefore(a, b2) : c2.appendChild(a);
      else if (4 !== d2 && (a = a.child, null !== a))
        for (hj(a, b2, c2), a = a.sibling; null !== a; )
          hj(a, b2, c2), a = a.sibling;
    }
    function cj(a, b2) {
      for (var c2 = b2, d2 = false, e2, f2; ; ) {
        if (!d2) {
          d2 = c2.return;
          a:
            for (; ; ) {
              if (null === d2)
                throw Error(y$2(160));
              e2 = d2.stateNode;
              switch (d2.tag) {
                case 5:
                  f2 = false;
                  break a;
                case 3:
                  e2 = e2.containerInfo;
                  f2 = true;
                  break a;
                case 4:
                  e2 = e2.containerInfo;
                  f2 = true;
                  break a;
              }
              d2 = d2.return;
            }
          d2 = true;
        }
        if (5 === c2.tag || 6 === c2.tag) {
          a:
            for (var g2 = a, h2 = c2, k2 = h2; ; )
              if (bj(g2, k2), null !== k2.child && 4 !== k2.tag)
                k2.child.return = k2, k2 = k2.child;
              else {
                if (k2 === h2)
                  break a;
                for (; null === k2.sibling; ) {
                  if (null === k2.return || k2.return === h2)
                    break a;
                  k2 = k2.return;
                }
                k2.sibling.return = k2.return;
                k2 = k2.sibling;
              }
          f2 ? (g2 = e2, h2 = c2.stateNode, 8 === g2.nodeType ? g2.parentNode.removeChild(h2) : g2.removeChild(h2)) : e2.removeChild(c2.stateNode);
        } else if (4 === c2.tag) {
          if (null !== c2.child) {
            e2 = c2.stateNode.containerInfo;
            f2 = true;
            c2.child.return = c2;
            c2 = c2.child;
            continue;
          }
        } else if (bj(a, c2), null !== c2.child) {
          c2.child.return = c2;
          c2 = c2.child;
          continue;
        }
        if (c2 === b2)
          break;
        for (; null === c2.sibling; ) {
          if (null === c2.return || c2.return === b2)
            return;
          c2 = c2.return;
          4 === c2.tag && (d2 = false);
        }
        c2.sibling.return = c2.return;
        c2 = c2.sibling;
      }
    }
    function ij(a, b2) {
      switch (b2.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
        case 22:
          var c2 = b2.updateQueue;
          c2 = null !== c2 ? c2.lastEffect : null;
          if (null !== c2) {
            var d2 = c2 = c2.next;
            do
              3 === (d2.tag & 3) && (a = d2.destroy, d2.destroy = void 0, void 0 !== a && a()), d2 = d2.next;
            while (d2 !== c2);
          }
          return;
        case 1:
          return;
        case 5:
          c2 = b2.stateNode;
          if (null != c2) {
            d2 = b2.memoizedProps;
            var e2 = null !== a ? a.memoizedProps : d2;
            a = b2.type;
            var f2 = b2.updateQueue;
            b2.updateQueue = null;
            if (null !== f2) {
              c2[xf] = d2;
              "input" === a && "radio" === d2.type && null != d2.name && $a(c2, d2);
              wb(a, e2);
              b2 = wb(a, d2);
              for (e2 = 0; e2 < f2.length; e2 += 2) {
                var g2 = f2[e2], h2 = f2[e2 + 1];
                "style" === g2 ? tb(c2, h2) : "dangerouslySetInnerHTML" === g2 ? ob(c2, h2) : "children" === g2 ? pb(c2, h2) : qa(c2, g2, h2, b2);
              }
              switch (a) {
                case "input":
                  ab(c2, d2);
                  break;
                case "textarea":
                  ib(c2, d2);
                  break;
                case "select":
                  a = c2._wrapperState.wasMultiple, c2._wrapperState.wasMultiple = !!d2.multiple, f2 = d2.value, null != f2 ? fb(c2, !!d2.multiple, f2, false) : a !== !!d2.multiple && (null != d2.defaultValue ? fb(c2, !!d2.multiple, d2.defaultValue, true) : fb(c2, !!d2.multiple, d2.multiple ? [] : "", false));
              }
            }
          }
          return;
        case 6:
          if (null === b2.stateNode)
            throw Error(y$2(162));
          b2.stateNode.nodeValue = b2.memoizedProps;
          return;
        case 3:
          c2 = b2.stateNode;
          c2.hydrate && (c2.hydrate = false, Cc(c2.containerInfo));
          return;
        case 12:
          return;
        case 13:
          null !== b2.memoizedState && (jj = O(), aj(b2.child, true));
          kj(b2);
          return;
        case 19:
          kj(b2);
          return;
        case 17:
          return;
        case 23:
        case 24:
          aj(b2, null !== b2.memoizedState);
          return;
      }
      throw Error(y$2(163));
    }
    function kj(a) {
      var b2 = a.updateQueue;
      if (null !== b2) {
        a.updateQueue = null;
        var c2 = a.stateNode;
        null === c2 && (c2 = a.stateNode = new Ui());
        b2.forEach(function(b3) {
          var d2 = lj.bind(null, a, b3);
          c2.has(b3) || (c2.add(b3), b3.then(d2, d2));
        });
      }
    }
    function mj(a, b2) {
      return null !== a && (a = a.memoizedState, null === a || null !== a.dehydrated) ? (b2 = b2.memoizedState, null !== b2 && null === b2.dehydrated) : false;
    }
    var nj = Math.ceil, oj = ra.ReactCurrentDispatcher, pj = ra.ReactCurrentOwner, X = 0, U = null, Y = null, W = 0, qj = 0, rj = Bf(0), V = 0, sj = null, tj = 0, Dg = 0, Hi = 0, uj = 0, vj = null, jj = 0, Ji = Infinity;
    function wj() {
      Ji = O() + 500;
    }
    var Z = null, Qi = false, Ri = null, Ti = null, xj = false, yj = null, zj = 90, Aj = [], Bj = [], Cj = null, Dj = 0, Ej = null, Fj = -1, Gj = 0, Hj = 0, Ij = null, Jj = false;
    function Hg() {
      return 0 !== (X & 48) ? O() : -1 !== Fj ? Fj : Fj = O();
    }
    function Ig(a) {
      a = a.mode;
      if (0 === (a & 2))
        return 1;
      if (0 === (a & 4))
        return 99 === eg() ? 1 : 2;
      0 === Gj && (Gj = tj);
      if (0 !== kg.transition) {
        0 !== Hj && (Hj = null !== vj ? vj.pendingLanes : 0);
        a = Gj;
        var b2 = 4186112 & ~Hj;
        b2 &= -b2;
        0 === b2 && (a = 4186112 & ~a, b2 = a & -a, 0 === b2 && (b2 = 8192));
        return b2;
      }
      a = eg();
      0 !== (X & 4) && 98 === a ? a = Xc(12, Gj) : (a = Sc(a), a = Xc(a, Gj));
      return a;
    }
    function Jg(a, b2, c2) {
      if (50 < Dj)
        throw Dj = 0, Ej = null, Error(y$2(185));
      a = Kj(a, b2);
      if (null === a)
        return null;
      $c(a, b2, c2);
      a === U && (Hi |= b2, 4 === V && Ii(a, W));
      var d2 = eg();
      1 === b2 ? 0 !== (X & 8) && 0 === (X & 48) ? Lj(a) : (Mj(a, c2), 0 === X && (wj(), ig())) : (0 === (X & 4) || 98 !== d2 && 99 !== d2 || (null === Cj ? Cj = /* @__PURE__ */ new Set([a]) : Cj.add(a)), Mj(a, c2));
      vj = a;
    }
    function Kj(a, b2) {
      a.lanes |= b2;
      var c2 = a.alternate;
      null !== c2 && (c2.lanes |= b2);
      c2 = a;
      for (a = a.return; null !== a; )
        a.childLanes |= b2, c2 = a.alternate, null !== c2 && (c2.childLanes |= b2), c2 = a, a = a.return;
      return 3 === c2.tag ? c2.stateNode : null;
    }
    function Mj(a, b2) {
      for (var c2 = a.callbackNode, d2 = a.suspendedLanes, e2 = a.pingedLanes, f2 = a.expirationTimes, g2 = a.pendingLanes; 0 < g2; ) {
        var h2 = 31 - Vc(g2), k2 = 1 << h2, l2 = f2[h2];
        if (-1 === l2) {
          if (0 === (k2 & d2) || 0 !== (k2 & e2)) {
            l2 = b2;
            Rc(k2);
            var n2 = F$1;
            f2[h2] = 10 <= n2 ? l2 + 250 : 6 <= n2 ? l2 + 5e3 : -1;
          }
        } else
          l2 <= b2 && (a.expiredLanes |= k2);
        g2 &= ~k2;
      }
      d2 = Uc(a, a === U ? W : 0);
      b2 = F$1;
      if (0 === d2)
        null !== c2 && (c2 !== Zf && Pf(c2), a.callbackNode = null, a.callbackPriority = 0);
      else {
        if (null !== c2) {
          if (a.callbackPriority === b2)
            return;
          c2 !== Zf && Pf(c2);
        }
        15 === b2 ? (c2 = Lj.bind(null, a), null === ag ? (ag = [c2], bg = Of(Uf, jg)) : ag.push(c2), c2 = Zf) : 14 === b2 ? c2 = hg(99, Lj.bind(null, a)) : (c2 = Tc(b2), c2 = hg(c2, Nj.bind(null, a)));
        a.callbackPriority = b2;
        a.callbackNode = c2;
      }
    }
    function Nj(a) {
      Fj = -1;
      Hj = Gj = 0;
      if (0 !== (X & 48))
        throw Error(y$2(327));
      var b2 = a.callbackNode;
      if (Oj() && a.callbackNode !== b2)
        return null;
      var c2 = Uc(a, a === U ? W : 0);
      if (0 === c2)
        return null;
      var d2 = c2;
      var e2 = X;
      X |= 16;
      var f2 = Pj();
      if (U !== a || W !== d2)
        wj(), Qj(a, d2);
      do
        try {
          Rj();
          break;
        } catch (h2) {
          Sj(a, h2);
        }
      while (1);
      qg();
      oj.current = f2;
      X = e2;
      null !== Y ? d2 = 0 : (U = null, W = 0, d2 = V);
      if (0 !== (tj & Hi))
        Qj(a, 0);
      else if (0 !== d2) {
        2 === d2 && (X |= 64, a.hydrate && (a.hydrate = false, qf(a.containerInfo)), c2 = Wc(a), 0 !== c2 && (d2 = Tj(a, c2)));
        if (1 === d2)
          throw b2 = sj, Qj(a, 0), Ii(a, c2), Mj(a, O()), b2;
        a.finishedWork = a.current.alternate;
        a.finishedLanes = c2;
        switch (d2) {
          case 0:
          case 1:
            throw Error(y$2(345));
          case 2:
            Uj(a);
            break;
          case 3:
            Ii(a, c2);
            if ((c2 & 62914560) === c2 && (d2 = jj + 500 - O(), 10 < d2)) {
              if (0 !== Uc(a, 0))
                break;
              e2 = a.suspendedLanes;
              if ((e2 & c2) !== c2) {
                Hg();
                a.pingedLanes |= a.suspendedLanes & e2;
                break;
              }
              a.timeoutHandle = of(Uj.bind(null, a), d2);
              break;
            }
            Uj(a);
            break;
          case 4:
            Ii(a, c2);
            if ((c2 & 4186112) === c2)
              break;
            d2 = a.eventTimes;
            for (e2 = -1; 0 < c2; ) {
              var g2 = 31 - Vc(c2);
              f2 = 1 << g2;
              g2 = d2[g2];
              g2 > e2 && (e2 = g2);
              c2 &= ~f2;
            }
            c2 = e2;
            c2 = O() - c2;
            c2 = (120 > c2 ? 120 : 480 > c2 ? 480 : 1080 > c2 ? 1080 : 1920 > c2 ? 1920 : 3e3 > c2 ? 3e3 : 4320 > c2 ? 4320 : 1960 * nj(c2 / 1960)) - c2;
            if (10 < c2) {
              a.timeoutHandle = of(Uj.bind(null, a), c2);
              break;
            }
            Uj(a);
            break;
          case 5:
            Uj(a);
            break;
          default:
            throw Error(y$2(329));
        }
      }
      Mj(a, O());
      return a.callbackNode === b2 ? Nj.bind(null, a) : null;
    }
    function Ii(a, b2) {
      b2 &= ~uj;
      b2 &= ~Hi;
      a.suspendedLanes |= b2;
      a.pingedLanes &= ~b2;
      for (a = a.expirationTimes; 0 < b2; ) {
        var c2 = 31 - Vc(b2), d2 = 1 << c2;
        a[c2] = -1;
        b2 &= ~d2;
      }
    }
    function Lj(a) {
      if (0 !== (X & 48))
        throw Error(y$2(327));
      Oj();
      if (a === U && 0 !== (a.expiredLanes & W)) {
        var b2 = W;
        var c2 = Tj(a, b2);
        0 !== (tj & Hi) && (b2 = Uc(a, b2), c2 = Tj(a, b2));
      } else
        b2 = Uc(a, 0), c2 = Tj(a, b2);
      0 !== a.tag && 2 === c2 && (X |= 64, a.hydrate && (a.hydrate = false, qf(a.containerInfo)), b2 = Wc(a), 0 !== b2 && (c2 = Tj(a, b2)));
      if (1 === c2)
        throw c2 = sj, Qj(a, 0), Ii(a, b2), Mj(a, O()), c2;
      a.finishedWork = a.current.alternate;
      a.finishedLanes = b2;
      Uj(a);
      Mj(a, O());
      return null;
    }
    function Vj() {
      if (null !== Cj) {
        var a = Cj;
        Cj = null;
        a.forEach(function(a2) {
          a2.expiredLanes |= 24 & a2.pendingLanes;
          Mj(a2, O());
        });
      }
      ig();
    }
    function Wj(a, b2) {
      var c2 = X;
      X |= 1;
      try {
        return a(b2);
      } finally {
        X = c2, 0 === X && (wj(), ig());
      }
    }
    function Xj(a, b2) {
      var c2 = X;
      X &= -2;
      X |= 8;
      try {
        return a(b2);
      } finally {
        X = c2, 0 === X && (wj(), ig());
      }
    }
    function ni(a, b2) {
      I$1(rj, qj);
      qj |= b2;
      tj |= b2;
    }
    function Ki() {
      qj = rj.current;
      H$1(rj);
    }
    function Qj(a, b2) {
      a.finishedWork = null;
      a.finishedLanes = 0;
      var c2 = a.timeoutHandle;
      -1 !== c2 && (a.timeoutHandle = -1, pf(c2));
      if (null !== Y)
        for (c2 = Y.return; null !== c2; ) {
          var d2 = c2;
          switch (d2.tag) {
            case 1:
              d2 = d2.type.childContextTypes;
              null !== d2 && void 0 !== d2 && Gf();
              break;
            case 3:
              fh();
              H$1(N);
              H$1(M);
              uh();
              break;
            case 5:
              hh(d2);
              break;
            case 4:
              fh();
              break;
            case 13:
              H$1(P);
              break;
            case 19:
              H$1(P);
              break;
            case 10:
              rg(d2);
              break;
            case 23:
            case 24:
              Ki();
          }
          c2 = c2.return;
        }
      U = a;
      Y = Tg(a.current, null);
      W = qj = tj = b2;
      V = 0;
      sj = null;
      uj = Hi = Dg = 0;
    }
    function Sj(a, b2) {
      do {
        var c2 = Y;
        try {
          qg();
          vh.current = Gh;
          if (yh) {
            for (var d2 = R.memoizedState; null !== d2; ) {
              var e2 = d2.queue;
              null !== e2 && (e2.pending = null);
              d2 = d2.next;
            }
            yh = false;
          }
          xh = 0;
          T = S = R = null;
          zh = false;
          pj.current = null;
          if (null === c2 || null === c2.return) {
            V = 1;
            sj = b2;
            Y = null;
            break;
          }
          a: {
            var f2 = a, g2 = c2.return, h2 = c2, k2 = b2;
            b2 = W;
            h2.flags |= 2048;
            h2.firstEffect = h2.lastEffect = null;
            if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
              var l2 = k2;
              if (0 === (h2.mode & 2)) {
                var n2 = h2.alternate;
                n2 ? (h2.updateQueue = n2.updateQueue, h2.memoizedState = n2.memoizedState, h2.lanes = n2.lanes) : (h2.updateQueue = null, h2.memoizedState = null);
              }
              var A2 = 0 !== (P.current & 1), p2 = g2;
              do {
                var C2;
                if (C2 = 13 === p2.tag) {
                  var x2 = p2.memoizedState;
                  if (null !== x2)
                    C2 = null !== x2.dehydrated ? true : false;
                  else {
                    var w2 = p2.memoizedProps;
                    C2 = void 0 === w2.fallback ? false : true !== w2.unstable_avoidThisFallback ? true : A2 ? false : true;
                  }
                }
                if (C2) {
                  var z2 = p2.updateQueue;
                  if (null === z2) {
                    var u2 = /* @__PURE__ */ new Set();
                    u2.add(l2);
                    p2.updateQueue = u2;
                  } else
                    z2.add(l2);
                  if (0 === (p2.mode & 2)) {
                    p2.flags |= 64;
                    h2.flags |= 16384;
                    h2.flags &= -2981;
                    if (1 === h2.tag)
                      if (null === h2.alternate)
                        h2.tag = 17;
                      else {
                        var t2 = zg(-1, 1);
                        t2.tag = 2;
                        Ag(h2, t2);
                      }
                    h2.lanes |= 1;
                    break a;
                  }
                  k2 = void 0;
                  h2 = b2;
                  var q2 = f2.pingCache;
                  null === q2 ? (q2 = f2.pingCache = new Oi(), k2 = /* @__PURE__ */ new Set(), q2.set(l2, k2)) : (k2 = q2.get(l2), void 0 === k2 && (k2 = /* @__PURE__ */ new Set(), q2.set(l2, k2)));
                  if (!k2.has(h2)) {
                    k2.add(h2);
                    var v2 = Yj.bind(null, f2, l2, h2);
                    l2.then(v2, v2);
                  }
                  p2.flags |= 4096;
                  p2.lanes = b2;
                  break a;
                }
                p2 = p2.return;
              } while (null !== p2);
              k2 = Error((Ra(h2.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            5 !== V && (V = 2);
            k2 = Mi(k2, h2);
            p2 = g2;
            do {
              switch (p2.tag) {
                case 3:
                  f2 = k2;
                  p2.flags |= 4096;
                  b2 &= -b2;
                  p2.lanes |= b2;
                  var J2 = Pi(p2, f2, b2);
                  Bg(p2, J2);
                  break a;
                case 1:
                  f2 = k2;
                  var K2 = p2.type, Q2 = p2.stateNode;
                  if (0 === (p2.flags & 64) && ("function" === typeof K2.getDerivedStateFromError || null !== Q2 && "function" === typeof Q2.componentDidCatch && (null === Ti || !Ti.has(Q2)))) {
                    p2.flags |= 4096;
                    b2 &= -b2;
                    p2.lanes |= b2;
                    var L2 = Si(p2, f2, b2);
                    Bg(p2, L2);
                    break a;
                  }
              }
              p2 = p2.return;
            } while (null !== p2);
          }
          Zj(c2);
        } catch (va) {
          b2 = va;
          Y === c2 && null !== c2 && (Y = c2 = c2.return);
          continue;
        }
        break;
      } while (1);
    }
    function Pj() {
      var a = oj.current;
      oj.current = Gh;
      return null === a ? Gh : a;
    }
    function Tj(a, b2) {
      var c2 = X;
      X |= 16;
      var d2 = Pj();
      U === a && W === b2 || Qj(a, b2);
      do
        try {
          ak();
          break;
        } catch (e2) {
          Sj(a, e2);
        }
      while (1);
      qg();
      X = c2;
      oj.current = d2;
      if (null !== Y)
        throw Error(y$2(261));
      U = null;
      W = 0;
      return V;
    }
    function ak() {
      for (; null !== Y; )
        bk(Y);
    }
    function Rj() {
      for (; null !== Y && !Qf(); )
        bk(Y);
    }
    function bk(a) {
      var b2 = ck(a.alternate, a, qj);
      a.memoizedProps = a.pendingProps;
      null === b2 ? Zj(a) : Y = b2;
      pj.current = null;
    }
    function Zj(a) {
      var b2 = a;
      do {
        var c2 = b2.alternate;
        a = b2.return;
        if (0 === (b2.flags & 2048)) {
          c2 = Gi(c2, b2, qj);
          if (null !== c2) {
            Y = c2;
            return;
          }
          c2 = b2;
          if (24 !== c2.tag && 23 !== c2.tag || null === c2.memoizedState || 0 !== (qj & 1073741824) || 0 === (c2.mode & 4)) {
            for (var d2 = 0, e2 = c2.child; null !== e2; )
              d2 |= e2.lanes | e2.childLanes, e2 = e2.sibling;
            c2.childLanes = d2;
          }
          null !== a && 0 === (a.flags & 2048) && (null === a.firstEffect && (a.firstEffect = b2.firstEffect), null !== b2.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = b2.firstEffect), a.lastEffect = b2.lastEffect), 1 < b2.flags && (null !== a.lastEffect ? a.lastEffect.nextEffect = b2 : a.firstEffect = b2, a.lastEffect = b2));
        } else {
          c2 = Li(b2);
          if (null !== c2) {
            c2.flags &= 2047;
            Y = c2;
            return;
          }
          null !== a && (a.firstEffect = a.lastEffect = null, a.flags |= 2048);
        }
        b2 = b2.sibling;
        if (null !== b2) {
          Y = b2;
          return;
        }
        Y = b2 = a;
      } while (null !== b2);
      0 === V && (V = 5);
    }
    function Uj(a) {
      var b2 = eg();
      gg(99, dk.bind(null, a, b2));
      return null;
    }
    function dk(a, b2) {
      do
        Oj();
      while (null !== yj);
      if (0 !== (X & 48))
        throw Error(y$2(327));
      var c2 = a.finishedWork;
      if (null === c2)
        return null;
      a.finishedWork = null;
      a.finishedLanes = 0;
      if (c2 === a.current)
        throw Error(y$2(177));
      a.callbackNode = null;
      var d2 = c2.lanes | c2.childLanes, e2 = d2, f2 = a.pendingLanes & ~e2;
      a.pendingLanes = e2;
      a.suspendedLanes = 0;
      a.pingedLanes = 0;
      a.expiredLanes &= e2;
      a.mutableReadLanes &= e2;
      a.entangledLanes &= e2;
      e2 = a.entanglements;
      for (var g2 = a.eventTimes, h2 = a.expirationTimes; 0 < f2; ) {
        var k2 = 31 - Vc(f2), l2 = 1 << k2;
        e2[k2] = 0;
        g2[k2] = -1;
        h2[k2] = -1;
        f2 &= ~l2;
      }
      null !== Cj && 0 === (d2 & 24) && Cj.has(a) && Cj.delete(a);
      a === U && (Y = U = null, W = 0);
      1 < c2.flags ? null !== c2.lastEffect ? (c2.lastEffect.nextEffect = c2, d2 = c2.firstEffect) : d2 = c2 : d2 = c2.firstEffect;
      if (null !== d2) {
        e2 = X;
        X |= 32;
        pj.current = null;
        kf = fd;
        g2 = Ne();
        if (Oe(g2)) {
          if ("selectionStart" in g2)
            h2 = { start: g2.selectionStart, end: g2.selectionEnd };
          else
            a:
              if (h2 = (h2 = g2.ownerDocument) && h2.defaultView || window, (l2 = h2.getSelection && h2.getSelection()) && 0 !== l2.rangeCount) {
                h2 = l2.anchorNode;
                f2 = l2.anchorOffset;
                k2 = l2.focusNode;
                l2 = l2.focusOffset;
                try {
                  h2.nodeType, k2.nodeType;
                } catch (va) {
                  h2 = null;
                  break a;
                }
                var n2 = 0, A2 = -1, p2 = -1, C2 = 0, x2 = 0, w2 = g2, z2 = null;
                b:
                  for (; ; ) {
                    for (var u2; ; ) {
                      w2 !== h2 || 0 !== f2 && 3 !== w2.nodeType || (A2 = n2 + f2);
                      w2 !== k2 || 0 !== l2 && 3 !== w2.nodeType || (p2 = n2 + l2);
                      3 === w2.nodeType && (n2 += w2.nodeValue.length);
                      if (null === (u2 = w2.firstChild))
                        break;
                      z2 = w2;
                      w2 = u2;
                    }
                    for (; ; ) {
                      if (w2 === g2)
                        break b;
                      z2 === h2 && ++C2 === f2 && (A2 = n2);
                      z2 === k2 && ++x2 === l2 && (p2 = n2);
                      if (null !== (u2 = w2.nextSibling))
                        break;
                      w2 = z2;
                      z2 = w2.parentNode;
                    }
                    w2 = u2;
                  }
                h2 = -1 === A2 || -1 === p2 ? null : { start: A2, end: p2 };
              } else
                h2 = null;
          h2 = h2 || { start: 0, end: 0 };
        } else
          h2 = null;
        lf = { focusedElem: g2, selectionRange: h2 };
        fd = false;
        Ij = null;
        Jj = false;
        Z = d2;
        do
          try {
            ek();
          } catch (va) {
            if (null === Z)
              throw Error(y$2(330));
            Wi(Z, va);
            Z = Z.nextEffect;
          }
        while (null !== Z);
        Ij = null;
        Z = d2;
        do
          try {
            for (g2 = a; null !== Z; ) {
              var t2 = Z.flags;
              t2 & 16 && pb(Z.stateNode, "");
              if (t2 & 128) {
                var q2 = Z.alternate;
                if (null !== q2) {
                  var v2 = q2.ref;
                  null !== v2 && ("function" === typeof v2 ? v2(null) : v2.current = null);
                }
              }
              switch (t2 & 1038) {
                case 2:
                  fj(Z);
                  Z.flags &= -3;
                  break;
                case 6:
                  fj(Z);
                  Z.flags &= -3;
                  ij(Z.alternate, Z);
                  break;
                case 1024:
                  Z.flags &= -1025;
                  break;
                case 1028:
                  Z.flags &= -1025;
                  ij(Z.alternate, Z);
                  break;
                case 4:
                  ij(Z.alternate, Z);
                  break;
                case 8:
                  h2 = Z;
                  cj(g2, h2);
                  var J2 = h2.alternate;
                  dj(h2);
                  null !== J2 && dj(J2);
              }
              Z = Z.nextEffect;
            }
          } catch (va) {
            if (null === Z)
              throw Error(y$2(330));
            Wi(Z, va);
            Z = Z.nextEffect;
          }
        while (null !== Z);
        v2 = lf;
        q2 = Ne();
        t2 = v2.focusedElem;
        g2 = v2.selectionRange;
        if (q2 !== t2 && t2 && t2.ownerDocument && Me(t2.ownerDocument.documentElement, t2)) {
          null !== g2 && Oe(t2) && (q2 = g2.start, v2 = g2.end, void 0 === v2 && (v2 = q2), "selectionStart" in t2 ? (t2.selectionStart = q2, t2.selectionEnd = Math.min(v2, t2.value.length)) : (v2 = (q2 = t2.ownerDocument || document) && q2.defaultView || window, v2.getSelection && (v2 = v2.getSelection(), h2 = t2.textContent.length, J2 = Math.min(g2.start, h2), g2 = void 0 === g2.end ? J2 : Math.min(g2.end, h2), !v2.extend && J2 > g2 && (h2 = g2, g2 = J2, J2 = h2), h2 = Le(t2, J2), f2 = Le(t2, g2), h2 && f2 && (1 !== v2.rangeCount || v2.anchorNode !== h2.node || v2.anchorOffset !== h2.offset || v2.focusNode !== f2.node || v2.focusOffset !== f2.offset) && (q2 = q2.createRange(), q2.setStart(h2.node, h2.offset), v2.removeAllRanges(), J2 > g2 ? (v2.addRange(q2), v2.extend(f2.node, f2.offset)) : (q2.setEnd(f2.node, f2.offset), v2.addRange(q2))))));
          q2 = [];
          for (v2 = t2; v2 = v2.parentNode; )
            1 === v2.nodeType && q2.push({ element: v2, left: v2.scrollLeft, top: v2.scrollTop });
          "function" === typeof t2.focus && t2.focus();
          for (t2 = 0; t2 < q2.length; t2++)
            v2 = q2[t2], v2.element.scrollLeft = v2.left, v2.element.scrollTop = v2.top;
        }
        fd = !!kf;
        lf = kf = null;
        a.current = c2;
        Z = d2;
        do
          try {
            for (t2 = a; null !== Z; ) {
              var K2 = Z.flags;
              K2 & 36 && Yi(t2, Z.alternate, Z);
              if (K2 & 128) {
                q2 = void 0;
                var Q2 = Z.ref;
                if (null !== Q2) {
                  var L2 = Z.stateNode;
                  switch (Z.tag) {
                    case 5:
                      q2 = L2;
                      break;
                    default:
                      q2 = L2;
                  }
                  "function" === typeof Q2 ? Q2(q2) : Q2.current = q2;
                }
              }
              Z = Z.nextEffect;
            }
          } catch (va) {
            if (null === Z)
              throw Error(y$2(330));
            Wi(Z, va);
            Z = Z.nextEffect;
          }
        while (null !== Z);
        Z = null;
        $f();
        X = e2;
      } else
        a.current = c2;
      if (xj)
        xj = false, yj = a, zj = b2;
      else
        for (Z = d2; null !== Z; )
          b2 = Z.nextEffect, Z.nextEffect = null, Z.flags & 8 && (K2 = Z, K2.sibling = null, K2.stateNode = null), Z = b2;
      d2 = a.pendingLanes;
      0 === d2 && (Ti = null);
      1 === d2 ? a === Ej ? Dj++ : (Dj = 0, Ej = a) : Dj = 0;
      c2 = c2.stateNode;
      if (Mf && "function" === typeof Mf.onCommitFiberRoot)
        try {
          Mf.onCommitFiberRoot(Lf, c2, void 0, 64 === (c2.current.flags & 64));
        } catch (va) {
        }
      Mj(a, O());
      if (Qi)
        throw Qi = false, a = Ri, Ri = null, a;
      if (0 !== (X & 8))
        return null;
      ig();
      return null;
    }
    function ek() {
      for (; null !== Z; ) {
        var a = Z.alternate;
        Jj || null === Ij || (0 !== (Z.flags & 8) ? dc(Z, Ij) && (Jj = true) : 13 === Z.tag && mj(a, Z) && dc(Z, Ij) && (Jj = true));
        var b2 = Z.flags;
        0 !== (b2 & 256) && Xi(a, Z);
        0 === (b2 & 512) || xj || (xj = true, hg(97, function() {
          Oj();
          return null;
        }));
        Z = Z.nextEffect;
      }
    }
    function Oj() {
      if (90 !== zj) {
        var a = 97 < zj ? 97 : zj;
        zj = 90;
        return gg(a, fk);
      }
      return false;
    }
    function $i(a, b2) {
      Aj.push(b2, a);
      xj || (xj = true, hg(97, function() {
        Oj();
        return null;
      }));
    }
    function Zi(a, b2) {
      Bj.push(b2, a);
      xj || (xj = true, hg(97, function() {
        Oj();
        return null;
      }));
    }
    function fk() {
      if (null === yj)
        return false;
      var a = yj;
      yj = null;
      if (0 !== (X & 48))
        throw Error(y$2(331));
      var b2 = X;
      X |= 32;
      var c2 = Bj;
      Bj = [];
      for (var d2 = 0; d2 < c2.length; d2 += 2) {
        var e2 = c2[d2], f2 = c2[d2 + 1], g2 = e2.destroy;
        e2.destroy = void 0;
        if ("function" === typeof g2)
          try {
            g2();
          } catch (k2) {
            if (null === f2)
              throw Error(y$2(330));
            Wi(f2, k2);
          }
      }
      c2 = Aj;
      Aj = [];
      for (d2 = 0; d2 < c2.length; d2 += 2) {
        e2 = c2[d2];
        f2 = c2[d2 + 1];
        try {
          var h2 = e2.create;
          e2.destroy = h2();
        } catch (k2) {
          if (null === f2)
            throw Error(y$2(330));
          Wi(f2, k2);
        }
      }
      for (h2 = a.current.firstEffect; null !== h2; )
        a = h2.nextEffect, h2.nextEffect = null, h2.flags & 8 && (h2.sibling = null, h2.stateNode = null), h2 = a;
      X = b2;
      ig();
      return true;
    }
    function gk(a, b2, c2) {
      b2 = Mi(c2, b2);
      b2 = Pi(a, b2, 1);
      Ag(a, b2);
      b2 = Hg();
      a = Kj(a, 1);
      null !== a && ($c(a, 1, b2), Mj(a, b2));
    }
    function Wi(a, b2) {
      if (3 === a.tag)
        gk(a, a, b2);
      else
        for (var c2 = a.return; null !== c2; ) {
          if (3 === c2.tag) {
            gk(c2, a, b2);
            break;
          } else if (1 === c2.tag) {
            var d2 = c2.stateNode;
            if ("function" === typeof c2.type.getDerivedStateFromError || "function" === typeof d2.componentDidCatch && (null === Ti || !Ti.has(d2))) {
              a = Mi(b2, a);
              var e2 = Si(c2, a, 1);
              Ag(c2, e2);
              e2 = Hg();
              c2 = Kj(c2, 1);
              if (null !== c2)
                $c(c2, 1, e2), Mj(c2, e2);
              else if ("function" === typeof d2.componentDidCatch && (null === Ti || !Ti.has(d2)))
                try {
                  d2.componentDidCatch(b2, a);
                } catch (f2) {
                }
              break;
            }
          }
          c2 = c2.return;
        }
    }
    function Yj(a, b2, c2) {
      var d2 = a.pingCache;
      null !== d2 && d2.delete(b2);
      b2 = Hg();
      a.pingedLanes |= a.suspendedLanes & c2;
      U === a && (W & c2) === c2 && (4 === V || 3 === V && (W & 62914560) === W && 500 > O() - jj ? Qj(a, 0) : uj |= c2);
      Mj(a, b2);
    }
    function lj(a, b2) {
      var c2 = a.stateNode;
      null !== c2 && c2.delete(b2);
      b2 = 0;
      0 === b2 && (b2 = a.mode, 0 === (b2 & 2) ? b2 = 1 : 0 === (b2 & 4) ? b2 = 99 === eg() ? 1 : 2 : (0 === Gj && (Gj = tj), b2 = Yc(62914560 & ~Gj), 0 === b2 && (b2 = 4194304)));
      c2 = Hg();
      a = Kj(a, b2);
      null !== a && ($c(a, b2, c2), Mj(a, c2));
    }
    var ck;
    ck = function(a, b2, c2) {
      var d2 = b2.lanes;
      if (null !== a)
        if (a.memoizedProps !== b2.pendingProps || N.current)
          ug = true;
        else if (0 !== (c2 & d2))
          ug = 0 !== (a.flags & 16384) ? true : false;
        else {
          ug = false;
          switch (b2.tag) {
            case 3:
              ri(b2);
              sh();
              break;
            case 5:
              gh(b2);
              break;
            case 1:
              Ff(b2.type) && Jf(b2);
              break;
            case 4:
              eh(b2, b2.stateNode.containerInfo);
              break;
            case 10:
              d2 = b2.memoizedProps.value;
              var e2 = b2.type._context;
              I$1(mg, e2._currentValue);
              e2._currentValue = d2;
              break;
            case 13:
              if (null !== b2.memoizedState) {
                if (0 !== (c2 & b2.child.childLanes))
                  return ti(a, b2, c2);
                I$1(P, P.current & 1);
                b2 = hi(a, b2, c2);
                return null !== b2 ? b2.sibling : null;
              }
              I$1(P, P.current & 1);
              break;
            case 19:
              d2 = 0 !== (c2 & b2.childLanes);
              if (0 !== (a.flags & 64)) {
                if (d2)
                  return Ai(a, b2, c2);
                b2.flags |= 64;
              }
              e2 = b2.memoizedState;
              null !== e2 && (e2.rendering = null, e2.tail = null, e2.lastEffect = null);
              I$1(P, P.current);
              if (d2)
                break;
              else
                return null;
            case 23:
            case 24:
              return b2.lanes = 0, mi(a, b2, c2);
          }
          return hi(a, b2, c2);
        }
      else
        ug = false;
      b2.lanes = 0;
      switch (b2.tag) {
        case 2:
          d2 = b2.type;
          null !== a && (a.alternate = null, b2.alternate = null, b2.flags |= 2);
          a = b2.pendingProps;
          e2 = Ef(b2, M.current);
          tg(b2, c2);
          e2 = Ch(null, b2, d2, a, e2, c2);
          b2.flags |= 1;
          if ("object" === typeof e2 && null !== e2 && "function" === typeof e2.render && void 0 === e2.$$typeof) {
            b2.tag = 1;
            b2.memoizedState = null;
            b2.updateQueue = null;
            if (Ff(d2)) {
              var f2 = true;
              Jf(b2);
            } else
              f2 = false;
            b2.memoizedState = null !== e2.state && void 0 !== e2.state ? e2.state : null;
            xg(b2);
            var g2 = d2.getDerivedStateFromProps;
            "function" === typeof g2 && Gg(b2, d2, g2, a);
            e2.updater = Kg;
            b2.stateNode = e2;
            e2._reactInternals = b2;
            Og(b2, d2, a, c2);
            b2 = qi(null, b2, d2, true, f2, c2);
          } else
            b2.tag = 0, fi(null, b2, e2, c2), b2 = b2.child;
          return b2;
        case 16:
          e2 = b2.elementType;
          a: {
            null !== a && (a.alternate = null, b2.alternate = null, b2.flags |= 2);
            a = b2.pendingProps;
            f2 = e2._init;
            e2 = f2(e2._payload);
            b2.type = e2;
            f2 = b2.tag = hk(e2);
            a = lg(e2, a);
            switch (f2) {
              case 0:
                b2 = li(null, b2, e2, a, c2);
                break a;
              case 1:
                b2 = pi(null, b2, e2, a, c2);
                break a;
              case 11:
                b2 = gi(null, b2, e2, a, c2);
                break a;
              case 14:
                b2 = ii(null, b2, e2, lg(e2.type, a), d2, c2);
                break a;
            }
            throw Error(y$2(306, e2, ""));
          }
          return b2;
        case 0:
          return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : lg(d2, e2), li(a, b2, d2, e2, c2);
        case 1:
          return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : lg(d2, e2), pi(a, b2, d2, e2, c2);
        case 3:
          ri(b2);
          d2 = b2.updateQueue;
          if (null === a || null === d2)
            throw Error(y$2(282));
          d2 = b2.pendingProps;
          e2 = b2.memoizedState;
          e2 = null !== e2 ? e2.element : null;
          yg(a, b2);
          Cg(b2, d2, null, c2);
          d2 = b2.memoizedState.element;
          if (d2 === e2)
            sh(), b2 = hi(a, b2, c2);
          else {
            e2 = b2.stateNode;
            if (f2 = e2.hydrate)
              kh = rf(b2.stateNode.containerInfo.firstChild), jh = b2, f2 = lh = true;
            if (f2) {
              a = e2.mutableSourceEagerHydrationData;
              if (null != a)
                for (e2 = 0; e2 < a.length; e2 += 2)
                  f2 = a[e2], f2._workInProgressVersionPrimary = a[e2 + 1], th.push(f2);
              c2 = Zg(b2, null, d2, c2);
              for (b2.child = c2; c2; )
                c2.flags = c2.flags & -3 | 1024, c2 = c2.sibling;
            } else
              fi(a, b2, d2, c2), sh();
            b2 = b2.child;
          }
          return b2;
        case 5:
          return gh(b2), null === a && ph(b2), d2 = b2.type, e2 = b2.pendingProps, f2 = null !== a ? a.memoizedProps : null, g2 = e2.children, nf(d2, e2) ? g2 = null : null !== f2 && nf(d2, f2) && (b2.flags |= 16), oi(a, b2), fi(a, b2, g2, c2), b2.child;
        case 6:
          return null === a && ph(b2), null;
        case 13:
          return ti(a, b2, c2);
        case 4:
          return eh(b2, b2.stateNode.containerInfo), d2 = b2.pendingProps, null === a ? b2.child = Yg(b2, null, d2, c2) : fi(a, b2, d2, c2), b2.child;
        case 11:
          return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : lg(d2, e2), gi(a, b2, d2, e2, c2);
        case 7:
          return fi(a, b2, b2.pendingProps, c2), b2.child;
        case 8:
          return fi(
            a,
            b2,
            b2.pendingProps.children,
            c2
          ), b2.child;
        case 12:
          return fi(a, b2, b2.pendingProps.children, c2), b2.child;
        case 10:
          a: {
            d2 = b2.type._context;
            e2 = b2.pendingProps;
            g2 = b2.memoizedProps;
            f2 = e2.value;
            var h2 = b2.type._context;
            I$1(mg, h2._currentValue);
            h2._currentValue = f2;
            if (null !== g2)
              if (h2 = g2.value, f2 = He(h2, f2) ? 0 : ("function" === typeof d2._calculateChangedBits ? d2._calculateChangedBits(h2, f2) : 1073741823) | 0, 0 === f2) {
                if (g2.children === e2.children && !N.current) {
                  b2 = hi(a, b2, c2);
                  break a;
                }
              } else
                for (h2 = b2.child, null !== h2 && (h2.return = b2); null !== h2; ) {
                  var k2 = h2.dependencies;
                  if (null !== k2) {
                    g2 = h2.child;
                    for (var l2 = k2.firstContext; null !== l2; ) {
                      if (l2.context === d2 && 0 !== (l2.observedBits & f2)) {
                        1 === h2.tag && (l2 = zg(-1, c2 & -c2), l2.tag = 2, Ag(h2, l2));
                        h2.lanes |= c2;
                        l2 = h2.alternate;
                        null !== l2 && (l2.lanes |= c2);
                        sg(h2.return, c2);
                        k2.lanes |= c2;
                        break;
                      }
                      l2 = l2.next;
                    }
                  } else
                    g2 = 10 === h2.tag ? h2.type === b2.type ? null : h2.child : h2.child;
                  if (null !== g2)
                    g2.return = h2;
                  else
                    for (g2 = h2; null !== g2; ) {
                      if (g2 === b2) {
                        g2 = null;
                        break;
                      }
                      h2 = g2.sibling;
                      if (null !== h2) {
                        h2.return = g2.return;
                        g2 = h2;
                        break;
                      }
                      g2 = g2.return;
                    }
                  h2 = g2;
                }
            fi(a, b2, e2.children, c2);
            b2 = b2.child;
          }
          return b2;
        case 9:
          return e2 = b2.type, f2 = b2.pendingProps, d2 = f2.children, tg(b2, c2), e2 = vg(
            e2,
            f2.unstable_observedBits
          ), d2 = d2(e2), b2.flags |= 1, fi(a, b2, d2, c2), b2.child;
        case 14:
          return e2 = b2.type, f2 = lg(e2, b2.pendingProps), f2 = lg(e2.type, f2), ii(a, b2, e2, f2, d2, c2);
        case 15:
          return ki(a, b2, b2.type, b2.pendingProps, d2, c2);
        case 17:
          return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : lg(d2, e2), null !== a && (a.alternate = null, b2.alternate = null, b2.flags |= 2), b2.tag = 1, Ff(d2) ? (a = true, Jf(b2)) : a = false, tg(b2, c2), Mg(b2, d2, e2), Og(b2, d2, e2, c2), qi(null, b2, d2, true, a, c2);
        case 19:
          return Ai(a, b2, c2);
        case 23:
          return mi(a, b2, c2);
        case 24:
          return mi(a, b2, c2);
      }
      throw Error(y$2(156, b2.tag));
    };
    function ik(a, b2, c2, d2) {
      this.tag = a;
      this.key = c2;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = b2;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = d2;
      this.flags = 0;
      this.lastEffect = this.firstEffect = this.nextEffect = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
    }
    function nh(a, b2, c2, d2) {
      return new ik(a, b2, c2, d2);
    }
    function ji(a) {
      a = a.prototype;
      return !(!a || !a.isReactComponent);
    }
    function hk(a) {
      if ("function" === typeof a)
        return ji(a) ? 1 : 0;
      if (void 0 !== a && null !== a) {
        a = a.$$typeof;
        if (a === Aa)
          return 11;
        if (a === Da)
          return 14;
      }
      return 2;
    }
    function Tg(a, b2) {
      var c2 = a.alternate;
      null === c2 ? (c2 = nh(a.tag, b2, a.key, a.mode), c2.elementType = a.elementType, c2.type = a.type, c2.stateNode = a.stateNode, c2.alternate = a, a.alternate = c2) : (c2.pendingProps = b2, c2.type = a.type, c2.flags = 0, c2.nextEffect = null, c2.firstEffect = null, c2.lastEffect = null);
      c2.childLanes = a.childLanes;
      c2.lanes = a.lanes;
      c2.child = a.child;
      c2.memoizedProps = a.memoizedProps;
      c2.memoizedState = a.memoizedState;
      c2.updateQueue = a.updateQueue;
      b2 = a.dependencies;
      c2.dependencies = null === b2 ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
      c2.sibling = a.sibling;
      c2.index = a.index;
      c2.ref = a.ref;
      return c2;
    }
    function Vg(a, b2, c2, d2, e2, f2) {
      var g2 = 2;
      d2 = a;
      if ("function" === typeof a)
        ji(a) && (g2 = 1);
      else if ("string" === typeof a)
        g2 = 5;
      else
        a:
          switch (a) {
            case ua:
              return Xg(c2.children, e2, f2, b2);
            case Ha:
              g2 = 8;
              e2 |= 16;
              break;
            case wa:
              g2 = 8;
              e2 |= 1;
              break;
            case xa:
              return a = nh(12, c2, b2, e2 | 8), a.elementType = xa, a.type = xa, a.lanes = f2, a;
            case Ba:
              return a = nh(13, c2, b2, e2), a.type = Ba, a.elementType = Ba, a.lanes = f2, a;
            case Ca:
              return a = nh(19, c2, b2, e2), a.elementType = Ca, a.lanes = f2, a;
            case Ia:
              return vi(c2, e2, f2, b2);
            case Ja:
              return a = nh(24, c2, b2, e2), a.elementType = Ja, a.lanes = f2, a;
            default:
              if ("object" === typeof a && null !== a)
                switch (a.$$typeof) {
                  case ya:
                    g2 = 10;
                    break a;
                  case za:
                    g2 = 9;
                    break a;
                  case Aa:
                    g2 = 11;
                    break a;
                  case Da:
                    g2 = 14;
                    break a;
                  case Ea:
                    g2 = 16;
                    d2 = null;
                    break a;
                  case Fa:
                    g2 = 22;
                    break a;
                }
              throw Error(y$2(130, null == a ? a : typeof a, ""));
          }
      b2 = nh(g2, c2, b2, e2);
      b2.elementType = a;
      b2.type = d2;
      b2.lanes = f2;
      return b2;
    }
    function Xg(a, b2, c2, d2) {
      a = nh(7, a, d2, b2);
      a.lanes = c2;
      return a;
    }
    function vi(a, b2, c2, d2) {
      a = nh(23, a, d2, b2);
      a.elementType = Ia;
      a.lanes = c2;
      return a;
    }
    function Ug(a, b2, c2) {
      a = nh(6, a, null, b2);
      a.lanes = c2;
      return a;
    }
    function Wg(a, b2, c2) {
      b2 = nh(4, null !== a.children ? a.children : [], a.key, b2);
      b2.lanes = c2;
      b2.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
      return b2;
    }
    function jk(a, b2, c2) {
      this.tag = b2;
      this.containerInfo = a;
      this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = -1;
      this.pendingContext = this.context = null;
      this.hydrate = c2;
      this.callbackNode = null;
      this.callbackPriority = 0;
      this.eventTimes = Zc(0);
      this.expirationTimes = Zc(-1);
      this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
      this.entanglements = Zc(0);
      this.mutableSourceEagerHydrationData = null;
    }
    function kk(a, b2, c2) {
      var d2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return { $$typeof: ta, key: null == d2 ? null : "" + d2, children: a, containerInfo: b2, implementation: c2 };
    }
    function lk(a, b2, c2, d2) {
      var e2 = b2.current, f2 = Hg(), g2 = Ig(e2);
      a:
        if (c2) {
          c2 = c2._reactInternals;
          b: {
            if (Zb(c2) !== c2 || 1 !== c2.tag)
              throw Error(y$2(170));
            var h2 = c2;
            do {
              switch (h2.tag) {
                case 3:
                  h2 = h2.stateNode.context;
                  break b;
                case 1:
                  if (Ff(h2.type)) {
                    h2 = h2.stateNode.__reactInternalMemoizedMergedChildContext;
                    break b;
                  }
              }
              h2 = h2.return;
            } while (null !== h2);
            throw Error(y$2(171));
          }
          if (1 === c2.tag) {
            var k2 = c2.type;
            if (Ff(k2)) {
              c2 = If(c2, k2, h2);
              break a;
            }
          }
          c2 = h2;
        } else
          c2 = Cf;
      null === b2.context ? b2.context = c2 : b2.pendingContext = c2;
      b2 = zg(f2, g2);
      b2.payload = { element: a };
      d2 = void 0 === d2 ? null : d2;
      null !== d2 && (b2.callback = d2);
      Ag(e2, b2);
      Jg(e2, g2, f2);
      return g2;
    }
    function mk(a) {
      a = a.current;
      if (!a.child)
        return null;
      switch (a.child.tag) {
        case 5:
          return a.child.stateNode;
        default:
          return a.child.stateNode;
      }
    }
    function nk(a, b2) {
      a = a.memoizedState;
      if (null !== a && null !== a.dehydrated) {
        var c2 = a.retryLane;
        a.retryLane = 0 !== c2 && c2 < b2 ? c2 : b2;
      }
    }
    function ok(a, b2) {
      nk(a, b2);
      (a = a.alternate) && nk(a, b2);
    }
    function pk() {
      return null;
    }
    function qk(a, b2, c2) {
      var d2 = null != c2 && null != c2.hydrationOptions && c2.hydrationOptions.mutableSources || null;
      c2 = new jk(a, b2, null != c2 && true === c2.hydrate);
      b2 = nh(3, null, null, 2 === b2 ? 7 : 1 === b2 ? 3 : 0);
      c2.current = b2;
      b2.stateNode = c2;
      xg(b2);
      a[ff] = c2.current;
      cf(8 === a.nodeType ? a.parentNode : a);
      if (d2)
        for (a = 0; a < d2.length; a++) {
          b2 = d2[a];
          var e2 = b2._getVersion;
          e2 = e2(b2._source);
          null == c2.mutableSourceEagerHydrationData ? c2.mutableSourceEagerHydrationData = [b2, e2] : c2.mutableSourceEagerHydrationData.push(b2, e2);
        }
      this._internalRoot = c2;
    }
    qk.prototype.render = function(a) {
      lk(a, this._internalRoot, null, null);
    };
    qk.prototype.unmount = function() {
      var a = this._internalRoot, b2 = a.containerInfo;
      lk(null, a, null, function() {
        b2[ff] = null;
      });
    };
    function rk(a) {
      return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
    }
    function sk(a, b2) {
      b2 || (b2 = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b2 = !(!b2 || 1 !== b2.nodeType || !b2.hasAttribute("data-reactroot")));
      if (!b2)
        for (var c2; c2 = a.lastChild; )
          a.removeChild(c2);
      return new qk(a, 0, b2 ? { hydrate: true } : void 0);
    }
    function tk(a, b2, c2, d2, e2) {
      var f2 = c2._reactRootContainer;
      if (f2) {
        var g2 = f2._internalRoot;
        if ("function" === typeof e2) {
          var h2 = e2;
          e2 = function() {
            var a2 = mk(g2);
            h2.call(a2);
          };
        }
        lk(b2, g2, a, e2);
      } else {
        f2 = c2._reactRootContainer = sk(c2, d2);
        g2 = f2._internalRoot;
        if ("function" === typeof e2) {
          var k2 = e2;
          e2 = function() {
            var a2 = mk(g2);
            k2.call(a2);
          };
        }
        Xj(function() {
          lk(b2, g2, a, e2);
        });
      }
      return mk(g2);
    }
    ec = function(a) {
      if (13 === a.tag) {
        var b2 = Hg();
        Jg(a, 4, b2);
        ok(a, 4);
      }
    };
    fc = function(a) {
      if (13 === a.tag) {
        var b2 = Hg();
        Jg(a, 67108864, b2);
        ok(a, 67108864);
      }
    };
    gc = function(a) {
      if (13 === a.tag) {
        var b2 = Hg(), c2 = Ig(a);
        Jg(a, c2, b2);
        ok(a, c2);
      }
    };
    hc = function(a, b2) {
      return b2();
    };
    yb = function(a, b2, c2) {
      switch (b2) {
        case "input":
          ab(a, c2);
          b2 = c2.name;
          if ("radio" === c2.type && null != b2) {
            for (c2 = a; c2.parentNode; )
              c2 = c2.parentNode;
            c2 = c2.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
            for (b2 = 0; b2 < c2.length; b2++) {
              var d2 = c2[b2];
              if (d2 !== a && d2.form === a.form) {
                var e2 = Db(d2);
                if (!e2)
                  throw Error(y$2(90));
                Wa(d2);
                ab(d2, e2);
              }
            }
          }
          break;
        case "textarea":
          ib(a, c2);
          break;
        case "select":
          b2 = c2.value, null != b2 && fb(a, !!c2.multiple, b2, false);
      }
    };
    Gb = Wj;
    Hb = function(a, b2, c2, d2, e2) {
      var f2 = X;
      X |= 4;
      try {
        return gg(98, a.bind(null, b2, c2, d2, e2));
      } finally {
        X = f2, 0 === X && (wj(), ig());
      }
    };
    Ib = function() {
      0 === (X & 49) && (Vj(), Oj());
    };
    Jb = function(a, b2) {
      var c2 = X;
      X |= 2;
      try {
        return a(b2);
      } finally {
        X = c2, 0 === X && (wj(), ig());
      }
    };
    function uk(a, b2) {
      var c2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
      if (!rk(b2))
        throw Error(y$2(200));
      return kk(a, b2, null, c2);
    }
    var vk = { Events: [Cb, ue, Db, Eb, Fb, Oj, { current: false }] }, wk = { findFiberByHostInstance: wc, bundleType: 0, version: "17.0.2", rendererPackageName: "react-dom" };
    var xk = { bundleType: wk.bundleType, version: wk.version, rendererPackageName: wk.rendererPackageName, rendererConfig: wk.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ra.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
      a = cc(a);
      return null === a ? null : a.stateNode;
    }, findFiberByHostInstance: wk.findFiberByHostInstance || pk, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null };
    if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
      var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (!yk.isDisabled && yk.supportsFiber)
        try {
          Lf = yk.inject(xk), Mf = yk;
        } catch (a) {
        }
    }
    reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;
    reactDom_production_min.createPortal = uk;
    reactDom_production_min.findDOMNode = function(a) {
      if (null == a)
        return null;
      if (1 === a.nodeType)
        return a;
      var b2 = a._reactInternals;
      if (void 0 === b2) {
        if ("function" === typeof a.render)
          throw Error(y$2(188));
        throw Error(y$2(268, Object.keys(a)));
      }
      a = cc(b2);
      a = null === a ? null : a.stateNode;
      return a;
    };
    reactDom_production_min.flushSync = function(a, b2) {
      var c2 = X;
      if (0 !== (c2 & 48))
        return a(b2);
      X |= 1;
      try {
        if (a)
          return gg(99, a.bind(null, b2));
      } finally {
        X = c2, ig();
      }
    };
    reactDom_production_min.hydrate = function(a, b2, c2) {
      if (!rk(b2))
        throw Error(y$2(200));
      return tk(null, a, b2, true, c2);
    };
    reactDom_production_min.render = function(a, b2, c2) {
      if (!rk(b2))
        throw Error(y$2(200));
      return tk(null, a, b2, false, c2);
    };
    reactDom_production_min.unmountComponentAtNode = function(a) {
      if (!rk(a))
        throw Error(y$2(40));
      return a._reactRootContainer ? (Xj(function() {
        tk(null, null, a, false, function() {
          a._reactRootContainer = null;
          a[ff] = null;
        });
      }), true) : false;
    };
    reactDom_production_min.unstable_batchedUpdates = Wj;
    reactDom_production_min.unstable_createPortal = function(a, b2) {
      return uk(a, b2, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
    };
    reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a, b2, c2, d2) {
      if (!rk(c2))
        throw Error(y$2(200));
      if (null == a || void 0 === a._reactInternals)
        throw Error(y$2(38));
      return tk(a, b2, c2, false, d2);
    };
    reactDom_production_min.version = "17.0.2";
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    {
      checkDCE();
      reactDom.exports = reactDom_production_min;
    }
    var reactDomExports = reactDom.exports;
    const ReactDOM = /* @__PURE__ */ getDefaultExportFromCjs(reactDomExports);
    function _typeof$1(obj) {
      "@babel/helpers - typeof";
      return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof$1(obj);
    }
    function _toPrimitive(input, hint) {
      if (_typeof$1(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof$1(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof$1(key) === "symbol" ? key : String(key);
    }
    function _defineProperty$2(obj, key, value2) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value2,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _extends$1() {
      _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$1.apply(this, arguments);
    }
    function isPlainObject$4(item) {
      return item !== null && typeof item === "object" && item.constructor === Object;
    }
    function deepClone(source) {
      if (!isPlainObject$4(source)) {
        return source;
      }
      const output = {};
      Object.keys(source).forEach((key) => {
        output[key] = deepClone(source[key]);
      });
      return output;
    }
    function deepmerge(target, source, options = {
      clone: true
    }) {
      const output = options.clone ? _extends$1({}, target) : target;
      if (isPlainObject$4(target) && isPlainObject$4(source)) {
        Object.keys(source).forEach((key) => {
          if (key === "__proto__") {
            return;
          }
          if (isPlainObject$4(source[key]) && key in target && isPlainObject$4(target[key])) {
            output[key] = deepmerge(target[key], source[key], options);
          } else if (options.clone) {
            output[key] = isPlainObject$4(source[key]) ? deepClone(source[key]) : source[key];
          } else {
            output[key] = source[key];
          }
        });
      }
      return output;
    }
    var propTypes = { exports: {} };
    var ReactPropTypesSecret$1 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;
    var ReactPropTypesSecret = ReactPropTypesSecret_1;
    function emptyFunction() {
    }
    function emptyFunctionWithReset() {
    }
    emptyFunctionWithReset.resetWarningCache = emptyFunction;
    var factoryWithThrowingShims = function() {
      function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
          return;
        }
        var err = new Error(
          "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
        );
        err.name = "Invariant Violation";
        throw err;
      }
      shim.isRequired = shim;
      function getShim() {
        return shim;
      }
      var ReactPropTypes = {
        array: shim,
        bigint: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,
        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,
        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
      };
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
    {
      propTypes.exports = factoryWithThrowingShims();
    }
    var propTypesExports = propTypes.exports;
    const PropTypes = /* @__PURE__ */ getDefaultExportFromCjs(propTypesExports);
    function formatMuiErrorMessage(code) {
      let url = "https://mui.com/production-error/?code=" + code;
      for (let i = 1; i < arguments.length; i += 1) {
        url += "&args[]=" + encodeURIComponent(arguments[i]);
      }
      return "Minified MUI error #" + code + "; visit " + url + " for the full message.";
    }
    var reactIs_production_min$2 = {};
    /**
     * @license React
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b$2 = Symbol.for("react.element"), c$2 = Symbol.for("react.portal"), d$2 = Symbol.for("react.fragment"), e$2 = Symbol.for("react.strict_mode"), f$2 = Symbol.for("react.profiler"), g$2 = Symbol.for("react.provider"), h$2 = Symbol.for("react.context"), k$2 = Symbol.for("react.server_context"), l$2 = Symbol.for("react.forward_ref"), m$2 = Symbol.for("react.suspense"), n$2 = Symbol.for("react.suspense_list"), p$2 = Symbol.for("react.memo"), q$2 = Symbol.for("react.lazy"), t$1 = Symbol.for("react.offscreen"), u$1;
    u$1 = Symbol.for("react.module.reference");
    function v$2(a) {
      if ("object" === typeof a && null !== a) {
        var r2 = a.$$typeof;
        switch (r2) {
          case b$2:
            switch (a = a.type, a) {
              case d$2:
              case f$2:
              case e$2:
              case m$2:
              case n$2:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case k$2:
                  case h$2:
                  case l$2:
                  case q$2:
                  case p$2:
                  case g$2:
                    return a;
                  default:
                    return r2;
                }
            }
          case c$2:
            return r2;
        }
      }
    }
    reactIs_production_min$2.ContextConsumer = h$2;
    reactIs_production_min$2.ContextProvider = g$2;
    reactIs_production_min$2.Element = b$2;
    reactIs_production_min$2.ForwardRef = l$2;
    reactIs_production_min$2.Fragment = d$2;
    reactIs_production_min$2.Lazy = q$2;
    reactIs_production_min$2.Memo = p$2;
    reactIs_production_min$2.Portal = c$2;
    reactIs_production_min$2.Profiler = f$2;
    reactIs_production_min$2.StrictMode = e$2;
    reactIs_production_min$2.Suspense = m$2;
    reactIs_production_min$2.SuspenseList = n$2;
    reactIs_production_min$2.isAsyncMode = function() {
      return false;
    };
    reactIs_production_min$2.isConcurrentMode = function() {
      return false;
    };
    reactIs_production_min$2.isContextConsumer = function(a) {
      return v$2(a) === h$2;
    };
    reactIs_production_min$2.isContextProvider = function(a) {
      return v$2(a) === g$2;
    };
    reactIs_production_min$2.isElement = function(a) {
      return "object" === typeof a && null !== a && a.$$typeof === b$2;
    };
    reactIs_production_min$2.isForwardRef = function(a) {
      return v$2(a) === l$2;
    };
    reactIs_production_min$2.isFragment = function(a) {
      return v$2(a) === d$2;
    };
    reactIs_production_min$2.isLazy = function(a) {
      return v$2(a) === q$2;
    };
    reactIs_production_min$2.isMemo = function(a) {
      return v$2(a) === p$2;
    };
    reactIs_production_min$2.isPortal = function(a) {
      return v$2(a) === c$2;
    };
    reactIs_production_min$2.isProfiler = function(a) {
      return v$2(a) === f$2;
    };
    reactIs_production_min$2.isStrictMode = function(a) {
      return v$2(a) === e$2;
    };
    reactIs_production_min$2.isSuspense = function(a) {
      return v$2(a) === m$2;
    };
    reactIs_production_min$2.isSuspenseList = function(a) {
      return v$2(a) === n$2;
    };
    reactIs_production_min$2.isValidElementType = function(a) {
      return "string" === typeof a || "function" === typeof a || a === d$2 || a === f$2 || a === e$2 || a === m$2 || a === n$2 || a === t$1 || "object" === typeof a && null !== a && (a.$$typeof === q$2 || a.$$typeof === p$2 || a.$$typeof === g$2 || a.$$typeof === h$2 || a.$$typeof === l$2 || a.$$typeof === u$1 || void 0 !== a.getModuleId) ? true : false;
    };
    reactIs_production_min$2.typeOf = v$2;
    function capitalize(string) {
      if (typeof string !== "string") {
        throw new Error(formatMuiErrorMessage(7));
      }
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    function createChainedFunction(...funcs) {
      return funcs.reduce((acc, func) => {
        if (func == null) {
          return acc;
        }
        return function chainedFunction(...args) {
          acc.apply(this, args);
          func.apply(this, args);
        };
      }, () => {
      });
    }
    function debounce$4(func, wait = 166) {
      let timeout;
      function debounced(...args) {
        const later = () => {
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      }
      debounced.clear = () => {
        clearTimeout(timeout);
      };
      return debounced;
    }
    function deprecatedPropType(validator, reason) {
      {
        return () => null;
      }
    }
    function isMuiElement(element, muiNames) {
      return /* @__PURE__ */ reactExports.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
    }
    function ownerDocument(node2) {
      return node2 && node2.ownerDocument || document;
    }
    function ownerWindow(node2) {
      const doc = ownerDocument(node2);
      return doc.defaultView || window;
    }
    function requirePropFactory(componentNameInError, Component) {
      {
        return () => null;
      }
    }
    function setRef$1(ref, value2) {
      if (typeof ref === "function") {
        ref(value2);
      } else if (ref) {
        ref.current = value2;
      }
    }
    const useEnhancedEffect$2 = typeof window !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
    const useEnhancedEffect$3 = useEnhancedEffect$2;
    let globalId$1 = 0;
    function useGlobalId$1(idOverride) {
      const [defaultId, setDefaultId] = reactExports.useState(idOverride);
      const id2 = idOverride || defaultId;
      reactExports.useEffect(() => {
        if (defaultId == null) {
          globalId$1 += 1;
          setDefaultId(`mui-${globalId$1}`);
        }
      }, [defaultId]);
      return id2;
    }
    const maybeReactUseId$1 = React$5["useId"];
    function useId$2(idOverride) {
      if (maybeReactUseId$1 !== void 0) {
        const reactId = maybeReactUseId$1();
        return idOverride != null ? idOverride : reactId;
      }
      return useGlobalId$1(idOverride);
    }
    function unsupportedProp(props, propName, componentName, location, propFullName) {
      {
        return null;
      }
    }
    function useControlled$2({
      controlled,
      default: defaultProp,
      name,
      state = "value"
    }) {
      const {
        current: isControlled
      } = reactExports.useRef(controlled !== void 0);
      const [valueState, setValue2] = reactExports.useState(defaultProp);
      const value2 = isControlled ? controlled : valueState;
      const setValueIfUncontrolled = reactExports.useCallback((newValue) => {
        if (!isControlled) {
          setValue2(newValue);
        }
      }, []);
      return [value2, setValueIfUncontrolled];
    }
    function useEventCallback$2(fn) {
      const ref = reactExports.useRef(fn);
      useEnhancedEffect$3(() => {
        ref.current = fn;
      });
      return reactExports.useCallback((...args) => (
        // @ts-expect-error hide `this`
        // tslint:disable-next-line:ban-comma-operator
        (0, ref.current)(...args)
      ), []);
    }
    function useForkRef$2(...refs) {
      return reactExports.useMemo(() => {
        if (refs.every((ref) => ref == null)) {
          return null;
        }
        return (instance) => {
          refs.forEach((ref) => {
            setRef$1(ref, instance);
          });
        };
      }, refs);
    }
    let hadKeyboardEvent = true;
    let hadFocusVisibleRecently = false;
    let hadFocusVisibleRecentlyTimeout;
    const inputTypesWhitelist = {
      text: true,
      search: true,
      url: true,
      tel: true,
      email: true,
      password: true,
      number: true,
      date: true,
      month: true,
      week: true,
      time: true,
      datetime: true,
      "datetime-local": true
    };
    function focusTriggersKeyboardModality(node2) {
      const {
        type,
        tagName
      } = node2;
      if (tagName === "INPUT" && inputTypesWhitelist[type] && !node2.readOnly) {
        return true;
      }
      if (tagName === "TEXTAREA" && !node2.readOnly) {
        return true;
      }
      if (node2.isContentEditable) {
        return true;
      }
      return false;
    }
    function handleKeyDown(event) {
      if (event.metaKey || event.altKey || event.ctrlKey) {
        return;
      }
      hadKeyboardEvent = true;
    }
    function handlePointerDown() {
      hadKeyboardEvent = false;
    }
    function handleVisibilityChange() {
      if (this.visibilityState === "hidden") {
        if (hadFocusVisibleRecently) {
          hadKeyboardEvent = true;
        }
      }
    }
    function prepare(doc) {
      doc.addEventListener("keydown", handleKeyDown, true);
      doc.addEventListener("mousedown", handlePointerDown, true);
      doc.addEventListener("pointerdown", handlePointerDown, true);
      doc.addEventListener("touchstart", handlePointerDown, true);
      doc.addEventListener("visibilitychange", handleVisibilityChange, true);
    }
    function isFocusVisible(event) {
      const {
        target
      } = event;
      try {
        return target.matches(":focus-visible");
      } catch (error) {
      }
      return hadKeyboardEvent || focusTriggersKeyboardModality(target);
    }
    function useIsFocusVisible() {
      const ref = reactExports.useCallback((node2) => {
        if (node2 != null) {
          prepare(node2.ownerDocument);
        }
      }, []);
      const isFocusVisibleRef = reactExports.useRef(false);
      function handleBlurVisible() {
        if (isFocusVisibleRef.current) {
          hadFocusVisibleRecently = true;
          window.clearTimeout(hadFocusVisibleRecentlyTimeout);
          hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
            hadFocusVisibleRecently = false;
          }, 100);
          isFocusVisibleRef.current = false;
          return true;
        }
        return false;
      }
      function handleFocusVisible(event) {
        if (isFocusVisible(event)) {
          isFocusVisibleRef.current = true;
          return true;
        }
        return false;
      }
      return {
        isFocusVisibleRef,
        onFocus: handleFocusVisible,
        onBlur: handleBlurVisible,
        ref
      };
    }
    function getScrollbarSize(doc) {
      const documentWidth = doc.documentElement.clientWidth;
      return Math.abs(window.innerWidth - documentWidth);
    }
    let cachedType;
    function detectScrollType() {
      if (cachedType) {
        return cachedType;
      }
      const dummy = document.createElement("div");
      const container = document.createElement("div");
      container.style.width = "10px";
      container.style.height = "1px";
      dummy.appendChild(container);
      dummy.dir = "rtl";
      dummy.style.fontSize = "14px";
      dummy.style.width = "4px";
      dummy.style.height = "1px";
      dummy.style.position = "absolute";
      dummy.style.top = "-1000px";
      dummy.style.overflow = "scroll";
      document.body.appendChild(dummy);
      cachedType = "reverse";
      if (dummy.scrollLeft > 0) {
        cachedType = "default";
      } else {
        dummy.scrollLeft = 1;
        if (dummy.scrollLeft === 0) {
          cachedType = "negative";
        }
      }
      document.body.removeChild(dummy);
      return cachedType;
    }
    function getNormalizedScrollLeft(element, direction) {
      const scrollLeft = element.scrollLeft;
      if (direction !== "rtl") {
        return scrollLeft;
      }
      const type = detectScrollType();
      switch (type) {
        case "negative":
          return element.scrollWidth - element.clientWidth + scrollLeft;
        case "reverse":
          return element.scrollWidth - element.clientWidth - scrollLeft;
        default:
          return scrollLeft;
      }
    }
    const usePreviousProps = (value2) => {
      const ref = reactExports.useRef({});
      reactExports.useEffect(() => {
        ref.current = value2;
      });
      return ref.current;
    };
    const usePreviousProps$1 = usePreviousProps;
    const visuallyHidden = {
      border: 0,
      clip: "rect(0 0 0 0)",
      height: "1px",
      margin: -1,
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      whiteSpace: "nowrap",
      width: "1px"
    };
    const visuallyHidden$1 = visuallyHidden;
    function resolveProps(defaultProps2, props) {
      const output = _extends$1({}, props);
      Object.keys(defaultProps2).forEach((propName) => {
        if (propName.toString().match(/^(components|slots)$/)) {
          output[propName] = _extends$1({}, defaultProps2[propName], output[propName]);
        } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
          const defaultSlotProps = defaultProps2[propName] || {};
          const slotProps = props[propName];
          output[propName] = {};
          if (!slotProps || !Object.keys(slotProps)) {
            output[propName] = defaultSlotProps;
          } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
            output[propName] = slotProps;
          } else {
            output[propName] = _extends$1({}, slotProps);
            Object.keys(defaultSlotProps).forEach((slotPropName) => {
              output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
            });
          }
        } else if (output[propName] === void 0) {
          output[propName] = defaultProps2[propName];
        }
      });
      return output;
    }
    function composeClasses(slots, getUtilityClass, classes = void 0) {
      const output = {};
      Object.keys(slots).forEach(
        // `Objet.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
        // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
        (slot) => {
          output[slot] = slots[slot].reduce((acc, key) => {
            if (key) {
              const utilityClass = getUtilityClass(key);
              if (utilityClass !== "") {
                acc.push(utilityClass);
              }
              if (classes && classes[key]) {
                acc.push(classes[key]);
              }
            }
            return acc;
          }, []).join(" ");
        }
      );
      return output;
    }
    const defaultGenerator = (componentName) => componentName;
    const createClassNameGenerator = () => {
      let generate = defaultGenerator;
      return {
        configure(generator) {
          generate = generator;
        },
        generate(componentName) {
          return generate(componentName);
        },
        reset() {
          generate = defaultGenerator;
        }
      };
    };
    const ClassNameGenerator = createClassNameGenerator();
    const ClassNameGenerator$1 = ClassNameGenerator;
    const globalStateClassesMapping = {
      active: "active",
      checked: "checked",
      completed: "completed",
      disabled: "disabled",
      readOnly: "readOnly",
      error: "error",
      expanded: "expanded",
      focused: "focused",
      focusVisible: "focusVisible",
      required: "required",
      selected: "selected"
    };
    function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
      const globalStateClass = globalStateClassesMapping[slot];
      return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator$1.generate(componentName)}-${slot}`;
    }
    function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
      const result = {};
      slots.forEach((slot) => {
        result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
      });
      return result;
    }
    const THEME_ID = "$$material";
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function memoize$3(fn) {
      var cache = /* @__PURE__ */ Object.create(null);
      return function(arg) {
        if (cache[arg] === void 0)
          cache[arg] = fn(arg);
        return cache[arg];
      };
    }
    var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    var isPropValid = /* @__PURE__ */ memoize$3(
      function(prop) {
        return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
      }
      /* Z+1 */
    );
    function sheetForTag(tag) {
      if (tag.sheet) {
        return tag.sheet;
      }
      for (var i = 0; i < document.styleSheets.length; i++) {
        if (document.styleSheets[i].ownerNode === tag) {
          return document.styleSheets[i];
        }
      }
    }
    function createStyleElement(options) {
      var tag = document.createElement("style");
      tag.setAttribute("data-emotion", options.key);
      if (options.nonce !== void 0) {
        tag.setAttribute("nonce", options.nonce);
      }
      tag.appendChild(document.createTextNode(""));
      tag.setAttribute("data-s", "");
      return tag;
    }
    var StyleSheet = /* @__PURE__ */ function() {
      function StyleSheet2(options) {
        var _this = this;
        this._insertTag = function(tag) {
          var before;
          if (_this.tags.length === 0) {
            if (_this.insertionPoint) {
              before = _this.insertionPoint.nextSibling;
            } else if (_this.prepend) {
              before = _this.container.firstChild;
            } else {
              before = _this.before;
            }
          } else {
            before = _this.tags[_this.tags.length - 1].nextSibling;
          }
          _this.container.insertBefore(tag, before);
          _this.tags.push(tag);
        };
        this.isSpeedy = options.speedy === void 0 ? true : options.speedy;
        this.tags = [];
        this.ctr = 0;
        this.nonce = options.nonce;
        this.key = options.key;
        this.container = options.container;
        this.prepend = options.prepend;
        this.insertionPoint = options.insertionPoint;
        this.before = null;
      }
      var _proto = StyleSheet2.prototype;
      _proto.hydrate = function hydrate(nodes) {
        nodes.forEach(this._insertTag);
      };
      _proto.insert = function insert(rule2) {
        if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
          this._insertTag(createStyleElement(this));
        }
        var tag = this.tags[this.tags.length - 1];
        if (this.isSpeedy) {
          var sheet = sheetForTag(tag);
          try {
            sheet.insertRule(rule2, sheet.cssRules.length);
          } catch (e2) {
          }
        } else {
          tag.appendChild(document.createTextNode(rule2));
        }
        this.ctr++;
      };
      _proto.flush = function flush() {
        this.tags.forEach(function(tag) {
          return tag.parentNode && tag.parentNode.removeChild(tag);
        });
        this.tags = [];
        this.ctr = 0;
      };
      return StyleSheet2;
    }();
    var MS = "-ms-";
    var MOZ = "-moz-";
    var WEBKIT = "-webkit-";
    var COMMENT = "comm";
    var RULESET = "rule";
    var DECLARATION = "decl";
    var IMPORT = "@import";
    var KEYFRAMES = "@keyframes";
    var abs$2 = Math.abs;
    var from$1 = String.fromCharCode;
    var assign = Object.assign;
    function hash$2(value2, length2) {
      return charat(value2, 0) ^ 45 ? (((length2 << 2 ^ charat(value2, 0)) << 2 ^ charat(value2, 1)) << 2 ^ charat(value2, 2)) << 2 ^ charat(value2, 3) : 0;
    }
    function trim(value2) {
      return value2.trim();
    }
    function match$1(value2, pattern) {
      return (value2 = pattern.exec(value2)) ? value2[0] : value2;
    }
    function replace(value2, pattern, replacement) {
      return value2.replace(pattern, replacement);
    }
    function indexof(value2, search) {
      return value2.indexOf(search);
    }
    function charat(value2, index) {
      return value2.charCodeAt(index) | 0;
    }
    function substr(value2, begin, end2) {
      return value2.slice(begin, end2);
    }
    function strlen(value2) {
      return value2.length;
    }
    function sizeof(value2) {
      return value2.length;
    }
    function append(value2, array) {
      return array.push(value2), value2;
    }
    function combine(array, callback) {
      return array.map(callback).join("");
    }
    var line = 1;
    var column = 1;
    var length = 0;
    var position = 0;
    var character = 0;
    var characters = "";
    function node(value2, root2, parent2, type, props, children, length2) {
      return { value: value2, root: root2, parent: parent2, type, props, children, line, column, length: length2, return: "" };
    }
    function copy(root2, props) {
      return assign(node("", null, null, "", null, null, 0), root2, { length: -root2.length }, props);
    }
    function char() {
      return character;
    }
    function prev() {
      character = position > 0 ? charat(characters, --position) : 0;
      if (column--, character === 10)
        column = 1, line--;
      return character;
    }
    function next() {
      character = position < length ? charat(characters, position++) : 0;
      if (column++, character === 10)
        column = 1, line++;
      return character;
    }
    function peek() {
      return charat(characters, position);
    }
    function caret() {
      return position;
    }
    function slice(begin, end2) {
      return substr(characters, begin, end2);
    }
    function token$1(type) {
      switch (type) {
        case 0:
        case 9:
        case 10:
        case 13:
        case 32:
          return 5;
        case 33:
        case 43:
        case 44:
        case 47:
        case 62:
        case 64:
        case 126:
        case 59:
        case 123:
        case 125:
          return 4;
        case 58:
          return 3;
        case 34:
        case 39:
        case 40:
        case 91:
          return 2;
        case 41:
        case 93:
          return 1;
      }
      return 0;
    }
    function alloc(value2) {
      return line = column = 1, length = strlen(characters = value2), position = 0, [];
    }
    function dealloc(value2) {
      return characters = "", value2;
    }
    function delimit(type) {
      return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
    }
    function whitespace(type) {
      while (character = peek())
        if (character < 33)
          next();
        else
          break;
      return token$1(type) > 2 || token$1(character) > 3 ? "" : " ";
    }
    function escaping(index, count) {
      while (--count && next())
        if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
          break;
      return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
    }
    function delimiter(type) {
      while (next())
        switch (character) {
          case type:
            return position;
          case 34:
          case 39:
            if (type !== 34 && type !== 39)
              delimiter(character);
            break;
          case 40:
            if (type === 41)
              delimiter(type);
            break;
          case 92:
            next();
            break;
        }
      return position;
    }
    function commenter(type, index) {
      while (next())
        if (type + character === 47 + 10)
          break;
        else if (type + character === 42 + 42 && peek() === 47)
          break;
      return "/*" + slice(index, position - 1) + "*" + from$1(type === 47 ? type : next());
    }
    function identifier(index) {
      while (!token$1(peek()))
        next();
      return slice(index, position);
    }
    function compile(value2) {
      return dealloc(parse("", null, null, null, [""], value2 = alloc(value2), 0, [0], value2));
    }
    function parse(value2, root2, parent2, rule2, rules, rulesets, pseudo, points, declarations) {
      var index = 0;
      var offset2 = 0;
      var length2 = pseudo;
      var atrule = 0;
      var property2 = 0;
      var previous = 0;
      var variable = 1;
      var scanning = 1;
      var ampersand = 1;
      var character2 = 0;
      var type = "";
      var props = rules;
      var children = rulesets;
      var reference2 = rule2;
      var characters2 = type;
      while (scanning)
        switch (previous = character2, character2 = next()) {
          case 40:
            if (previous != 108 && charat(characters2, length2 - 1) == 58) {
              if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
                ampersand = -1;
              break;
            }
          case 34:
          case 39:
          case 91:
            characters2 += delimit(character2);
            break;
          case 9:
          case 10:
          case 13:
          case 32:
            characters2 += whitespace(previous);
            break;
          case 92:
            characters2 += escaping(caret() - 1, 7);
            continue;
          case 47:
            switch (peek()) {
              case 42:
              case 47:
                append(comment(commenter(next(), caret()), root2, parent2), declarations);
                break;
              default:
                characters2 += "/";
            }
            break;
          case 123 * variable:
            points[index++] = strlen(characters2) * ampersand;
          case 125 * variable:
          case 59:
          case 0:
            switch (character2) {
              case 0:
              case 125:
                scanning = 0;
              case 59 + offset2:
                if (property2 > 0 && strlen(characters2) - length2)
                  append(property2 > 32 ? declaration(characters2 + ";", rule2, parent2, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule2, parent2, length2 - 2), declarations);
                break;
              case 59:
                characters2 += ";";
              default:
                append(reference2 = ruleset(characters2, root2, parent2, index, offset2, rules, points, type, props = [], children = [], length2), rulesets);
                if (character2 === 123)
                  if (offset2 === 0)
                    parse(characters2, root2, reference2, reference2, props, rulesets, length2, points, children);
                  else
                    switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                      case 100:
                      case 109:
                      case 115:
                        parse(value2, reference2, reference2, rule2 && append(ruleset(value2, reference2, reference2, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule2 ? props : children);
                        break;
                      default:
                        parse(characters2, reference2, reference2, reference2, [""], children, 0, points, children);
                    }
            }
            index = offset2 = property2 = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
            break;
          case 58:
            length2 = 1 + strlen(characters2), property2 = previous;
          default:
            if (variable < 1) {
              if (character2 == 123)
                --variable;
              else if (character2 == 125 && variable++ == 0 && prev() == 125)
                continue;
            }
            switch (characters2 += from$1(character2), character2 * variable) {
              case 38:
                ampersand = offset2 > 0 ? 1 : (characters2 += "\f", -1);
                break;
              case 44:
                points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
                break;
              case 64:
                if (peek() === 45)
                  characters2 += delimit(next());
                atrule = peek(), offset2 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
                break;
              case 45:
                if (previous === 45 && strlen(characters2) == 2)
                  variable = 0;
            }
        }
      return rulesets;
    }
    function ruleset(value2, root2, parent2, index, offset2, rules, points, type, props, children, length2) {
      var post = offset2 - 1;
      var rule2 = offset2 === 0 ? rules : [""];
      var size = sizeof(rule2);
      for (var i = 0, j = 0, k2 = 0; i < index; ++i)
        for (var x2 = 0, y2 = substr(value2, post + 1, post = abs$2(j = points[i])), z2 = value2; x2 < size; ++x2)
          if (z2 = trim(j > 0 ? rule2[x2] + " " + y2 : replace(y2, /&\f/g, rule2[x2])))
            props[k2++] = z2;
      return node(value2, root2, parent2, offset2 === 0 ? RULESET : type, props, children, length2);
    }
    function comment(value2, root2, parent2) {
      return node(value2, root2, parent2, COMMENT, from$1(char()), substr(value2, 2, -2), 0);
    }
    function declaration(value2, root2, parent2, length2) {
      return node(value2, root2, parent2, DECLARATION, substr(value2, 0, length2), substr(value2, length2 + 1, -1), length2);
    }
    function serialize(children, callback) {
      var output = "";
      var length2 = sizeof(children);
      for (var i = 0; i < length2; i++)
        output += callback(children[i], i, children, callback) || "";
      return output;
    }
    function stringify$1(element, index, children, callback) {
      switch (element.type) {
        case IMPORT:
        case DECLARATION:
          return element.return = element.return || element.value;
        case COMMENT:
          return "";
        case KEYFRAMES:
          return element.return = element.value + "{" + serialize(element.children, callback) + "}";
        case RULESET:
          element.value = element.props.join(",");
      }
      return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
    }
    function middleware(collection) {
      var length2 = sizeof(collection);
      return function(element, index, children, callback) {
        var output = "";
        for (var i = 0; i < length2; i++)
          output += collection[i](element, index, children, callback) || "";
        return output;
      };
    }
    function rulesheet(callback) {
      return function(element) {
        if (!element.root) {
          if (element = element.return)
            callback(element);
        }
      };
    }
    var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
      var previous = 0;
      var character2 = 0;
      while (true) {
        previous = character2;
        character2 = peek();
        if (previous === 38 && character2 === 12) {
          points[index] = 1;
        }
        if (token$1(character2)) {
          break;
        }
        next();
      }
      return slice(begin, position);
    };
    var toRules = function toRules2(parsed, points) {
      var index = -1;
      var character2 = 44;
      do {
        switch (token$1(character2)) {
          case 0:
            if (character2 === 38 && peek() === 12) {
              points[index] = 1;
            }
            parsed[index] += identifierWithPointTracking(position - 1, points, index);
            break;
          case 2:
            parsed[index] += delimit(character2);
            break;
          case 4:
            if (character2 === 44) {
              parsed[++index] = peek() === 58 ? "&\f" : "";
              points[index] = parsed[index].length;
              break;
            }
          default:
            parsed[index] += from$1(character2);
        }
      } while (character2 = next());
      return parsed;
    };
    var getRules = function getRules2(value2, points) {
      return dealloc(toRules(alloc(value2), points));
    };
    var fixedElements = /* @__PURE__ */ new WeakMap();
    var compat = function compat2(element) {
      if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
      // negative .length indicates that this rule has been already prefixed
      element.length < 1) {
        return;
      }
      var value2 = element.value, parent2 = element.parent;
      var isImplicitRule = element.column === parent2.column && element.line === parent2.line;
      while (parent2.type !== "rule") {
        parent2 = parent2.parent;
        if (!parent2)
          return;
      }
      if (element.props.length === 1 && value2.charCodeAt(0) !== 58 && !fixedElements.get(parent2)) {
        return;
      }
      if (isImplicitRule) {
        return;
      }
      fixedElements.set(element, true);
      var points = [];
      var rules = getRules(value2, points);
      var parentRules = parent2.props;
      for (var i = 0, k2 = 0; i < rules.length; i++) {
        for (var j = 0; j < parentRules.length; j++, k2++) {
          element.props[k2] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
        }
      }
    };
    var removeLabel = function removeLabel2(element) {
      if (element.type === "decl") {
        var value2 = element.value;
        if (
          // charcode for l
          value2.charCodeAt(0) === 108 && // charcode for b
          value2.charCodeAt(2) === 98
        ) {
          element["return"] = "";
          element.value = "";
        }
      }
    };
    function prefix(value2, length2) {
      switch (hash$2(value2, length2)) {
        case 5103:
          return WEBKIT + "print-" + value2 + value2;
        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921:
        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005:
        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855:
        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
          return WEBKIT + value2 + value2;
        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
          return WEBKIT + value2 + MOZ + value2 + MS + value2 + value2;
        case 6828:
        case 4268:
          return WEBKIT + value2 + MS + value2 + value2;
        case 6165:
          return WEBKIT + value2 + MS + "flex-" + value2 + value2;
        case 5187:
          return WEBKIT + value2 + replace(value2, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value2;
        case 5443:
          return WEBKIT + value2 + MS + "flex-item-" + replace(value2, /flex-|-self/, "") + value2;
        case 4675:
          return WEBKIT + value2 + MS + "flex-line-pack" + replace(value2, /align-content|flex-|-self/, "") + value2;
        case 5548:
          return WEBKIT + value2 + MS + replace(value2, "shrink", "negative") + value2;
        case 5292:
          return WEBKIT + value2 + MS + replace(value2, "basis", "preferred-size") + value2;
        case 6060:
          return WEBKIT + "box-" + replace(value2, "-grow", "") + WEBKIT + value2 + MS + replace(value2, "grow", "positive") + value2;
        case 4554:
          return WEBKIT + replace(value2, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value2;
        case 6187:
          return replace(replace(replace(value2, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value2, "") + value2;
        case 5495:
        case 3959:
          return replace(value2, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
        case 4968:
          return replace(replace(value2, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value2 + value2;
        case 4095:
        case 3583:
        case 4068:
        case 2532:
          return replace(value2, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value2;
        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
          if (strlen(value2) - 1 - length2 > 6)
            switch (charat(value2, length2 + 1)) {
              case 109:
                if (charat(value2, length2 + 4) !== 45)
                  break;
              case 102:
                return replace(value2, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value2, length2 + 3) == 108 ? "$3" : "$2-$3")) + value2;
              case 115:
                return ~indexof(value2, "stretch") ? prefix(replace(value2, "stretch", "fill-available"), length2) + value2 : value2;
            }
          break;
        case 4949:
          if (charat(value2, length2 + 1) !== 115)
            break;
        case 6444:
          switch (charat(value2, strlen(value2) - 3 - (~indexof(value2, "!important") && 10))) {
            case 107:
              return replace(value2, ":", ":" + WEBKIT) + value2;
            case 101:
              return replace(value2, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value2, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value2;
          }
          break;
        case 5936:
          switch (charat(value2, length2 + 11)) {
            case 114:
              return WEBKIT + value2 + MS + replace(value2, /[svh]\w+-[tblr]{2}/, "tb") + value2;
            case 108:
              return WEBKIT + value2 + MS + replace(value2, /[svh]\w+-[tblr]{2}/, "tb-rl") + value2;
            case 45:
              return WEBKIT + value2 + MS + replace(value2, /[svh]\w+-[tblr]{2}/, "lr") + value2;
          }
          return WEBKIT + value2 + MS + value2 + value2;
      }
      return value2;
    }
    var prefixer = function prefixer2(element, index, children, callback) {
      if (element.length > -1) {
        if (!element["return"])
          switch (element.type) {
            case DECLARATION:
              element["return"] = prefix(element.value, element.length);
              break;
            case KEYFRAMES:
              return serialize([copy(element, {
                value: replace(element.value, "@", "@" + WEBKIT)
              })], callback);
            case RULESET:
              if (element.length)
                return combine(element.props, function(value2) {
                  switch (match$1(value2, /(::plac\w+|:read-\w+)/)) {
                    case ":read-only":
                    case ":read-write":
                      return serialize([copy(element, {
                        props: [replace(value2, /:(read-\w+)/, ":" + MOZ + "$1")]
                      })], callback);
                    case "::placeholder":
                      return serialize([copy(element, {
                        props: [replace(value2, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                      }), copy(element, {
                        props: [replace(value2, /:(plac\w+)/, ":" + MOZ + "$1")]
                      }), copy(element, {
                        props: [replace(value2, /:(plac\w+)/, MS + "input-$1")]
                      })], callback);
                  }
                  return "";
                });
          }
      }
    };
    var defaultStylisPlugins = [prefixer];
    var createCache = function createCache2(options) {
      var key = options.key;
      if (key === "css") {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
        Array.prototype.forEach.call(ssrStyles, function(node2) {
          var dataEmotionAttribute = node2.getAttribute("data-emotion");
          if (dataEmotionAttribute.indexOf(" ") === -1) {
            return;
          }
          document.head.appendChild(node2);
          node2.setAttribute("data-s", "");
        });
      }
      var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
      var inserted = {};
      var container;
      var nodesToHydrate = [];
      {
        container = options.container || document.head;
        Array.prototype.forEach.call(
          // this means we will ignore elements which don't have a space in them which
          // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
          document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
          function(node2) {
            var attrib = node2.getAttribute("data-emotion").split(" ");
            for (var i = 1; i < attrib.length; i++) {
              inserted[attrib[i]] = true;
            }
            nodesToHydrate.push(node2);
          }
        );
      }
      var _insert;
      var omnipresentPlugins = [compat, removeLabel];
      {
        var currentSheet;
        var finalizingPlugins = [stringify$1, rulesheet(function(rule2) {
          currentSheet.insert(rule2);
        })];
        var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
        var stylis = function stylis2(styles2) {
          return serialize(compile(styles2), serializer);
        };
        _insert = function insert(selector, serialized, sheet, shouldCache) {
          currentSheet = sheet;
          stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
          if (shouldCache) {
            cache.inserted[serialized.name] = true;
          }
        };
      }
      var cache = {
        key,
        sheet: new StyleSheet({
          key,
          container,
          nonce: options.nonce,
          speedy: options.speedy,
          prepend: options.prepend,
          insertionPoint: options.insertionPoint
        }),
        nonce: options.nonce,
        inserted,
        registered: {},
        insert: _insert
      };
      cache.sheet.hydrate(nodesToHydrate);
      return cache;
    };
    var reactIs$2 = { exports: {} };
    var reactIs_production_min$1 = {};
    /** @license React v16.13.1
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b$1 = "function" === typeof Symbol && Symbol.for, c$1 = b$1 ? Symbol.for("react.element") : 60103, d$1 = b$1 ? Symbol.for("react.portal") : 60106, e$1 = b$1 ? Symbol.for("react.fragment") : 60107, f$1 = b$1 ? Symbol.for("react.strict_mode") : 60108, g$1 = b$1 ? Symbol.for("react.profiler") : 60114, h$1 = b$1 ? Symbol.for("react.provider") : 60109, k$1 = b$1 ? Symbol.for("react.context") : 60110, l$1 = b$1 ? Symbol.for("react.async_mode") : 60111, m$1 = b$1 ? Symbol.for("react.concurrent_mode") : 60111, n$1 = b$1 ? Symbol.for("react.forward_ref") : 60112, p$1 = b$1 ? Symbol.for("react.suspense") : 60113, q$1 = b$1 ? Symbol.for("react.suspense_list") : 60120, r$2 = b$1 ? Symbol.for("react.memo") : 60115, t = b$1 ? Symbol.for("react.lazy") : 60116, v$1 = b$1 ? Symbol.for("react.block") : 60121, w$1 = b$1 ? Symbol.for("react.fundamental") : 60117, x$1 = b$1 ? Symbol.for("react.responder") : 60118, y$1 = b$1 ? Symbol.for("react.scope") : 60119;
    function z$1(a) {
      if ("object" === typeof a && null !== a) {
        var u2 = a.$$typeof;
        switch (u2) {
          case c$1:
            switch (a = a.type, a) {
              case l$1:
              case m$1:
              case e$1:
              case g$1:
              case f$1:
              case p$1:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case k$1:
                  case n$1:
                  case t:
                  case r$2:
                  case h$1:
                    return a;
                  default:
                    return u2;
                }
            }
          case d$1:
            return u2;
        }
      }
    }
    function A$1(a) {
      return z$1(a) === m$1;
    }
    reactIs_production_min$1.AsyncMode = l$1;
    reactIs_production_min$1.ConcurrentMode = m$1;
    reactIs_production_min$1.ContextConsumer = k$1;
    reactIs_production_min$1.ContextProvider = h$1;
    reactIs_production_min$1.Element = c$1;
    reactIs_production_min$1.ForwardRef = n$1;
    reactIs_production_min$1.Fragment = e$1;
    reactIs_production_min$1.Lazy = t;
    reactIs_production_min$1.Memo = r$2;
    reactIs_production_min$1.Portal = d$1;
    reactIs_production_min$1.Profiler = g$1;
    reactIs_production_min$1.StrictMode = f$1;
    reactIs_production_min$1.Suspense = p$1;
    reactIs_production_min$1.isAsyncMode = function(a) {
      return A$1(a) || z$1(a) === l$1;
    };
    reactIs_production_min$1.isConcurrentMode = A$1;
    reactIs_production_min$1.isContextConsumer = function(a) {
      return z$1(a) === k$1;
    };
    reactIs_production_min$1.isContextProvider = function(a) {
      return z$1(a) === h$1;
    };
    reactIs_production_min$1.isElement = function(a) {
      return "object" === typeof a && null !== a && a.$$typeof === c$1;
    };
    reactIs_production_min$1.isForwardRef = function(a) {
      return z$1(a) === n$1;
    };
    reactIs_production_min$1.isFragment = function(a) {
      return z$1(a) === e$1;
    };
    reactIs_production_min$1.isLazy = function(a) {
      return z$1(a) === t;
    };
    reactIs_production_min$1.isMemo = function(a) {
      return z$1(a) === r$2;
    };
    reactIs_production_min$1.isPortal = function(a) {
      return z$1(a) === d$1;
    };
    reactIs_production_min$1.isProfiler = function(a) {
      return z$1(a) === g$1;
    };
    reactIs_production_min$1.isStrictMode = function(a) {
      return z$1(a) === f$1;
    };
    reactIs_production_min$1.isSuspense = function(a) {
      return z$1(a) === p$1;
    };
    reactIs_production_min$1.isValidElementType = function(a) {
      return "string" === typeof a || "function" === typeof a || a === e$1 || a === m$1 || a === g$1 || a === f$1 || a === p$1 || a === q$1 || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r$2 || a.$$typeof === h$1 || a.$$typeof === k$1 || a.$$typeof === n$1 || a.$$typeof === w$1 || a.$$typeof === x$1 || a.$$typeof === y$1 || a.$$typeof === v$1);
    };
    reactIs_production_min$1.typeOf = z$1;
    {
      reactIs$2.exports = reactIs_production_min$1;
    }
    var reactIsExports$1 = reactIs$2.exports;
    var reactIs$1 = reactIsExports$1;
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs$1.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs$1.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs$1.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty$3 = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys2 = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys2.length; ++i) {
          var key = keys2[i];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty$3(targetComponent, key, descriptor);
            } catch (e2) {
            }
          }
        }
      }
      return targetComponent;
    }
    var hoistNonReactStatics_cjs = hoistNonReactStatics;
    const hoistStatics = /* @__PURE__ */ getDefaultExportFromCjs(hoistNonReactStatics_cjs);
    var isBrowser = true;
    function getRegisteredStyles(registered, registeredStyles, classNames2) {
      var rawClassName = "";
      classNames2.split(" ").forEach(function(className) {
        if (registered[className] !== void 0) {
          registeredStyles.push(registered[className] + ";");
        } else {
          rawClassName += className + " ";
        }
      });
      return rawClassName;
    }
    var registerStyles = function registerStyles2(cache, serialized, isStringTag2) {
      var className = cache.key + "-" + serialized.name;
      if (
        // we only need to add the styles to the registered cache if the
        // class name could be used further down
        // the tree but if it's a string tag, we know it won't
        // so we don't have to add it to registered cache.
        // this improves memory usage since we can avoid storing the whole style string
        (isStringTag2 === false || // we need to always store it if we're in compat mode and
        // in node since emotion-server relies on whether a style is in
        // the registered cache to know whether a style is global or not
        // also, note that this check will be dead code eliminated in the browser
        isBrowser === false) && cache.registered[className] === void 0
      ) {
        cache.registered[className] = serialized.styles;
      }
    };
    var insertStyles = function insertStyles2(cache, serialized, isStringTag2) {
      registerStyles(cache, serialized, isStringTag2);
      var className = cache.key + "-" + serialized.name;
      if (cache.inserted[serialized.name] === void 0) {
        var current = serialized;
        do {
          cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
          current = current.next;
        } while (current !== void 0);
      }
    };
    function murmur2(str) {
      var h2 = 0;
      var k2, i = 0, len = str.length;
      for (; len >= 4; ++i, len -= 4) {
        k2 = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
        k2 = /* Math.imul(k, m): */
        (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16);
        k2 ^= /* k >>> r: */
        k2 >>> 24;
        h2 = /* Math.imul(k, m): */
        (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
        (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
      }
      switch (len) {
        case 3:
          h2 ^= (str.charCodeAt(i + 2) & 255) << 16;
        case 2:
          h2 ^= (str.charCodeAt(i + 1) & 255) << 8;
        case 1:
          h2 ^= str.charCodeAt(i) & 255;
          h2 = /* Math.imul(h, m): */
          (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
      }
      h2 ^= h2 >>> 13;
      h2 = /* Math.imul(h, m): */
      (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
      return ((h2 ^ h2 >>> 15) >>> 0).toString(36);
    }
    var unitlessKeys = {
      animationIterationCount: 1,
      borderImageOutset: 1,
      borderImageSlice: 1,
      borderImageWidth: 1,
      boxFlex: 1,
      boxFlexGroup: 1,
      boxOrdinalGroup: 1,
      columnCount: 1,
      columns: 1,
      flex: 1,
      flexGrow: 1,
      flexPositive: 1,
      flexShrink: 1,
      flexNegative: 1,
      flexOrder: 1,
      gridRow: 1,
      gridRowEnd: 1,
      gridRowSpan: 1,
      gridRowStart: 1,
      gridColumn: 1,
      gridColumnEnd: 1,
      gridColumnSpan: 1,
      gridColumnStart: 1,
      msGridRow: 1,
      msGridRowSpan: 1,
      msGridColumn: 1,
      msGridColumnSpan: 1,
      fontWeight: 1,
      lineHeight: 1,
      opacity: 1,
      order: 1,
      orphans: 1,
      tabSize: 1,
      widows: 1,
      zIndex: 1,
      zoom: 1,
      WebkitLineClamp: 1,
      // SVG-related properties
      fillOpacity: 1,
      floodOpacity: 1,
      stopOpacity: 1,
      strokeDasharray: 1,
      strokeDashoffset: 1,
      strokeMiterlimit: 1,
      strokeOpacity: 1,
      strokeWidth: 1
    };
    var hyphenateRegex = /[A-Z]|^ms/g;
    var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
    var isCustomProperty = function isCustomProperty2(property2) {
      return property2.charCodeAt(1) === 45;
    };
    var isProcessableValue = function isProcessableValue2(value2) {
      return value2 != null && typeof value2 !== "boolean";
    };
    var processStyleName = /* @__PURE__ */ memoize$3(function(styleName) {
      return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
    });
    var processStyleValue = function processStyleValue2(key, value2) {
      switch (key) {
        case "animation":
        case "animationName": {
          if (typeof value2 === "string") {
            return value2.replace(animationRegex, function(match5, p1, p2) {
              cursor = {
                name: p1,
                styles: p2,
                next: cursor
              };
              return p1;
            });
          }
        }
      }
      if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value2 === "number" && value2 !== 0) {
        return value2 + "px";
      }
      return value2;
    };
    var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
    function handleInterpolation(mergedProps, registered, interpolation) {
      if (interpolation == null) {
        return "";
      }
      if (interpolation.__emotion_styles !== void 0) {
        return interpolation;
      }
      switch (typeof interpolation) {
        case "boolean": {
          return "";
        }
        case "object": {
          if (interpolation.anim === 1) {
            cursor = {
              name: interpolation.name,
              styles: interpolation.styles,
              next: cursor
            };
            return interpolation.name;
          }
          if (interpolation.styles !== void 0) {
            var next2 = interpolation.next;
            if (next2 !== void 0) {
              while (next2 !== void 0) {
                cursor = {
                  name: next2.name,
                  styles: next2.styles,
                  next: cursor
                };
                next2 = next2.next;
              }
            }
            var styles2 = interpolation.styles + ";";
            return styles2;
          }
          return createStringFromObject(mergedProps, registered, interpolation);
        }
        case "function": {
          if (mergedProps !== void 0) {
            var previousCursor = cursor;
            var result = interpolation(mergedProps);
            cursor = previousCursor;
            return handleInterpolation(mergedProps, registered, result);
          }
          break;
        }
      }
      if (registered == null) {
        return interpolation;
      }
      var cached = registered[interpolation];
      return cached !== void 0 ? cached : interpolation;
    }
    function createStringFromObject(mergedProps, registered, obj) {
      var string = "";
      if (Array.isArray(obj)) {
        for (var i = 0; i < obj.length; i++) {
          string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
        }
      } else {
        for (var _key in obj) {
          var value2 = obj[_key];
          if (typeof value2 !== "object") {
            if (registered != null && registered[value2] !== void 0) {
              string += _key + "{" + registered[value2] + "}";
            } else if (isProcessableValue(value2)) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value2) + ";";
            }
          } else {
            if (_key === "NO_COMPONENT_SELECTOR" && false) {
              throw new Error(noComponentSelectorMessage);
            }
            if (Array.isArray(value2) && typeof value2[0] === "string" && (registered == null || registered[value2[0]] === void 0)) {
              for (var _i = 0; _i < value2.length; _i++) {
                if (isProcessableValue(value2[_i])) {
                  string += processStyleName(_key) + ":" + processStyleValue(_key, value2[_i]) + ";";
                }
              }
            } else {
              var interpolated = handleInterpolation(mergedProps, registered, value2);
              switch (_key) {
                case "animation":
                case "animationName": {
                  string += processStyleName(_key) + ":" + interpolated + ";";
                  break;
                }
                default: {
                  string += _key + "{" + interpolated + "}";
                }
              }
            }
          }
        }
      }
      return string;
    }
    var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
    var cursor;
    var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
      if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
        return args[0];
      }
      var stringMode = true;
      var styles2 = "";
      cursor = void 0;
      var strings = args[0];
      if (strings == null || strings.raw === void 0) {
        stringMode = false;
        styles2 += handleInterpolation(mergedProps, registered, strings);
      } else {
        styles2 += strings[0];
      }
      for (var i = 1; i < args.length; i++) {
        styles2 += handleInterpolation(mergedProps, registered, args[i]);
        if (stringMode) {
          styles2 += strings[i];
        }
      }
      labelPattern.lastIndex = 0;
      var identifierName = "";
      var match5;
      while ((match5 = labelPattern.exec(styles2)) !== null) {
        identifierName += "-" + // $FlowFixMe we know it's not null
        match5[1];
      }
      var name = murmur2(styles2) + identifierName;
      return {
        name,
        styles: styles2,
        next: cursor
      };
    };
    var syncFallback = function syncFallback2(create) {
      return create();
    };
    var useInsertionEffect = React$5["useInsertionEffect"] ? React$5["useInsertionEffect"] : false;
    var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
    var useInsertionEffectWithLayoutFallback = useInsertionEffect || reactExports.useLayoutEffect;
    var EmotionCacheContext = /* @__PURE__ */ reactExports.createContext(
      // we're doing this to avoid preconstruct's dead code elimination in this one case
      // because this module is primarily intended for the browser and node
      // but it's also required in react native and similar environments sometimes
      // and we could have a special build just for that
      // but this is much easier and the native packages
      // might use a different theme context in the future anyway
      typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
        key: "css"
      }) : null
    );
    EmotionCacheContext.Provider;
    var withEmotionCache = function withEmotionCache2(func) {
      return /* @__PURE__ */ reactExports.forwardRef(function(props, ref) {
        var cache = reactExports.useContext(EmotionCacheContext);
        return func(props, cache, ref);
      });
    };
    var ThemeContext$2 = /* @__PURE__ */ reactExports.createContext({});
    var Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
      var styles2 = props.styles;
      var serialized = serializeStyles([styles2], void 0, reactExports.useContext(ThemeContext$2));
      var sheetRef = reactExports.useRef();
      useInsertionEffectWithLayoutFallback(function() {
        var key = cache.key + "-global";
        var sheet = new cache.sheet.constructor({
          key,
          nonce: cache.sheet.nonce,
          container: cache.sheet.container,
          speedy: cache.sheet.isSpeedy
        });
        var rehydrating = false;
        var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
        if (cache.sheet.tags.length) {
          sheet.before = cache.sheet.tags[0];
        }
        if (node2 !== null) {
          rehydrating = true;
          node2.setAttribute("data-emotion", key);
          sheet.hydrate([node2]);
        }
        sheetRef.current = [sheet, rehydrating];
        return function() {
          sheet.flush();
        };
      }, [cache]);
      useInsertionEffectWithLayoutFallback(function() {
        var sheetRefCurrent = sheetRef.current;
        var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
        if (rehydrating) {
          sheetRefCurrent[1] = false;
          return;
        }
        if (serialized.next !== void 0) {
          insertStyles(cache, serialized.next, true);
        }
        if (sheet.tags.length) {
          var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
          sheet.before = element;
          sheet.flush();
        }
        cache.insert("", serialized, sheet, false);
      }, [cache, serialized.name]);
      return null;
    });
    function css() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return serializeStyles(args);
    }
    var keyframes = function keyframes2() {
      var insertable = css.apply(void 0, arguments);
      var name = "animation-" + insertable.name;
      return {
        name,
        styles: "@keyframes " + name + "{" + insertable.styles + "}",
        anim: 1,
        toString: function toString2() {
          return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
        }
      };
    };
    var testOmitPropsOnStringTag = isPropValid;
    var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
      return key !== "theme";
    };
    var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
      return typeof tag === "string" && // 96 is one less than the char code
      // for "a" so this is checking that
      // it's a lowercase character
      tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
    };
    var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
      var shouldForwardProp2;
      if (options) {
        var optionsShouldForwardProp = options.shouldForwardProp;
        shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
          return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
        } : optionsShouldForwardProp;
      }
      if (typeof shouldForwardProp2 !== "function" && isReal) {
        shouldForwardProp2 = tag.__emotion_forwardProp;
      }
      return shouldForwardProp2;
    };
    var Insertion = function Insertion2(_ref) {
      var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
      registerStyles(cache, serialized, isStringTag2);
      useInsertionEffectAlwaysWithSyncFallback(function() {
        return insertStyles(cache, serialized, isStringTag2);
      });
      return null;
    };
    var createStyled$1 = function createStyled2(tag, options) {
      var isReal = tag.__emotion_real === tag;
      var baseTag = isReal && tag.__emotion_base || tag;
      var identifierName;
      var targetClassName;
      if (options !== void 0) {
        identifierName = options.label;
        targetClassName = options.target;
      }
      var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
      var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
      var shouldUseAs = !defaultShouldForwardProp("as");
      return function() {
        var args = arguments;
        var styles2 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
        if (identifierName !== void 0) {
          styles2.push("label:" + identifierName + ";");
        }
        if (args[0] == null || args[0].raw === void 0) {
          styles2.push.apply(styles2, args);
        } else {
          styles2.push(args[0][0]);
          var len = args.length;
          var i = 1;
          for (; i < len; i++) {
            styles2.push(args[i], args[0][i]);
          }
        }
        var Styled = withEmotionCache(function(props, cache, ref) {
          var FinalTag = shouldUseAs && props.as || baseTag;
          var className = "";
          var classInterpolations = [];
          var mergedProps = props;
          if (props.theme == null) {
            mergedProps = {};
            for (var key in props) {
              mergedProps[key] = props[key];
            }
            mergedProps.theme = reactExports.useContext(ThemeContext$2);
          }
          if (typeof props.className === "string") {
            className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
          } else if (props.className != null) {
            className = props.className + " ";
          }
          var serialized = serializeStyles(styles2.concat(classInterpolations), cache.registered, mergedProps);
          className += cache.key + "-" + serialized.name;
          if (targetClassName !== void 0) {
            className += " " + targetClassName;
          }
          var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
          var newProps = {};
          for (var _key in props) {
            if (shouldUseAs && _key === "as")
              continue;
            if (
              // $FlowFixMe
              finalShouldForwardProp(_key)
            ) {
              newProps[_key] = props[_key];
            }
          }
          newProps.className = className;
          newProps.ref = ref;
          return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion, {
            cache,
            serialized,
            isStringTag: typeof FinalTag === "string"
          }), /* @__PURE__ */ reactExports.createElement(FinalTag, newProps));
        });
        Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
        Styled.defaultProps = tag.defaultProps;
        Styled.__emotion_real = Styled;
        Styled.__emotion_base = baseTag;
        Styled.__emotion_styles = styles2;
        Styled.__emotion_forwardProp = shouldForwardProp2;
        Object.defineProperty(Styled, "toString", {
          value: function value2() {
            if (targetClassName === void 0 && false) {
              return "NO_COMPONENT_SELECTOR";
            }
            return "." + targetClassName;
          }
        });
        Styled.withComponent = function(nextTag, nextOptions) {
          return createStyled2(nextTag, _extends$1({}, options, nextOptions, {
            shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
          })).apply(void 0, styles2);
        };
        return Styled;
      };
    };
    const createStyled$2 = createStyled$1;
    var tags = [
      "a",
      "abbr",
      "address",
      "area",
      "article",
      "aside",
      "audio",
      "b",
      "base",
      "bdi",
      "bdo",
      "big",
      "blockquote",
      "body",
      "br",
      "button",
      "canvas",
      "caption",
      "cite",
      "code",
      "col",
      "colgroup",
      "data",
      "datalist",
      "dd",
      "del",
      "details",
      "dfn",
      "dialog",
      "div",
      "dl",
      "dt",
      "em",
      "embed",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hgroup",
      "hr",
      "html",
      "i",
      "iframe",
      "img",
      "input",
      "ins",
      "kbd",
      "keygen",
      "label",
      "legend",
      "li",
      "link",
      "main",
      "map",
      "mark",
      "marquee",
      "menu",
      "menuitem",
      "meta",
      "meter",
      "nav",
      "noscript",
      "object",
      "ol",
      "optgroup",
      "option",
      "output",
      "p",
      "param",
      "picture",
      "pre",
      "progress",
      "q",
      "rp",
      "rt",
      "ruby",
      "s",
      "samp",
      "script",
      "section",
      "select",
      "small",
      "source",
      "span",
      "strong",
      "style",
      "sub",
      "summary",
      "sup",
      "table",
      "tbody",
      "td",
      "textarea",
      "tfoot",
      "th",
      "thead",
      "time",
      "title",
      "tr",
      "track",
      "u",
      "ul",
      "var",
      "video",
      "wbr",
      // SVG
      "circle",
      "clipPath",
      "defs",
      "ellipse",
      "foreignObject",
      "g",
      "image",
      "line",
      "linearGradient",
      "mask",
      "path",
      "pattern",
      "polygon",
      "polyline",
      "radialGradient",
      "rect",
      "stop",
      "svg",
      "text",
      "tspan"
    ];
    var newStyled = createStyled$2.bind();
    tags.forEach(function(tagName) {
      newStyled[tagName] = newStyled(tagName);
    });
    const emStyled = newStyled;
    function isEmpty$4(obj) {
      return obj === void 0 || obj === null || Object.keys(obj).length === 0;
    }
    function GlobalStyles$2(props) {
      const {
        styles: styles2,
        defaultTheme: defaultTheme2 = {}
      } = props;
      const globalStyles = typeof styles2 === "function" ? (themeInput) => styles2(isEmpty$4(themeInput) ? defaultTheme2 : themeInput) : styles2;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Global, {
        styles: globalStyles
      });
    }
    /**
     * @mui/styled-engine v5.12.3
     *
     * @license MIT
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    function styled$2(tag, options) {
      const stylesFactory = emStyled(tag, options);
      return stylesFactory;
    }
    const internal_processStyles = (tag, processor) => {
      if (Array.isArray(tag.__emotion_styles)) {
        tag.__emotion_styles = processor(tag.__emotion_styles);
      }
    };
    const _excluded$1U = ["values", "unit", "step"];
    const sortBreakpointsValues = (values2) => {
      const breakpointsAsArray = Object.keys(values2).map((key) => ({
        key,
        val: values2[key]
      })) || [];
      breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
      return breakpointsAsArray.reduce((acc, obj) => {
        return _extends$1({}, acc, {
          [obj.key]: obj.val
        });
      }, {});
    };
    function createBreakpoints(breakpoints) {
      const {
        // The breakpoint **start** at this value.
        // For instance with the first breakpoint xs: [xs, sm).
        values: values2 = {
          xs: 0,
          // phone
          sm: 600,
          // tablet
          md: 900,
          // small laptop
          lg: 1200,
          // desktop
          xl: 1536
          // large screen
        },
        unit = "px",
        step = 5
      } = breakpoints, other = _objectWithoutPropertiesLoose(breakpoints, _excluded$1U);
      const sortedValues = sortBreakpointsValues(values2);
      const keys2 = Object.keys(sortedValues);
      function up(key) {
        const value2 = typeof values2[key] === "number" ? values2[key] : key;
        return `@media (min-width:${value2}${unit})`;
      }
      function down(key) {
        const value2 = typeof values2[key] === "number" ? values2[key] : key;
        return `@media (max-width:${value2 - step / 100}${unit})`;
      }
      function between(start2, end2) {
        const endIndex = keys2.indexOf(end2);
        return `@media (min-width:${typeof values2[start2] === "number" ? values2[start2] : start2}${unit}) and (max-width:${(endIndex !== -1 && typeof values2[keys2[endIndex]] === "number" ? values2[keys2[endIndex]] : end2) - step / 100}${unit})`;
      }
      function only(key) {
        if (keys2.indexOf(key) + 1 < keys2.length) {
          return between(key, keys2[keys2.indexOf(key) + 1]);
        }
        return up(key);
      }
      function not(key) {
        const keyIndex = keys2.indexOf(key);
        if (keyIndex === 0) {
          return up(keys2[1]);
        }
        if (keyIndex === keys2.length - 1) {
          return down(keys2[keyIndex]);
        }
        return between(key, keys2[keys2.indexOf(key) + 1]).replace("@media", "@media not all and");
      }
      return _extends$1({
        keys: keys2,
        values: sortedValues,
        up,
        down,
        between,
        only,
        not,
        unit
      }, other);
    }
    const shape = {
      borderRadius: 4
    };
    const shape$1 = shape;
    function merge$2(acc, item) {
      if (!item) {
        return acc;
      }
      return deepmerge(acc, item, {
        clone: false
        // No need to clone deep, it's way faster.
      });
    }
    const values$1 = {
      xs: 0,
      // phone
      sm: 600,
      // tablet
      md: 900,
      // small laptop
      lg: 1200,
      // desktop
      xl: 1536
      // large screen
    };
    const defaultBreakpoints = {
      // Sorted ASC by size. That's important.
      // It can't be configured as it's used statically for propTypes.
      keys: ["xs", "sm", "md", "lg", "xl"],
      up: (key) => `@media (min-width:${values$1[key]}px)`
    };
    function handleBreakpoints(props, propValue, styleFromPropValue) {
      const theme = props.theme || {};
      if (Array.isArray(propValue)) {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return propValue.reduce((acc, item, index) => {
          acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
          return acc;
        }, {});
      }
      if (typeof propValue === "object") {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return Object.keys(propValue).reduce((acc, breakpoint) => {
          if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
            const mediaKey = themeBreakpoints.up(breakpoint);
            acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
          } else {
            const cssKey = breakpoint;
            acc[cssKey] = propValue[cssKey];
          }
          return acc;
        }, {});
      }
      const output = styleFromPropValue(propValue);
      return output;
    }
    function createEmptyBreakpointObject(breakpointsInput = {}) {
      var _breakpointsInput$key;
      const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
        const breakpointStyleKey = breakpointsInput.up(key);
        acc[breakpointStyleKey] = {};
        return acc;
      }, {});
      return breakpointsInOrder || {};
    }
    function removeUnusedBreakpoints(breakpointKeys, style2) {
      return breakpointKeys.reduce((acc, key) => {
        const breakpointOutput = acc[key];
        const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
        if (isBreakpointUnused) {
          delete acc[key];
        }
        return acc;
      }, style2);
    }
    function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
      if (typeof breakpointValues !== "object") {
        return {};
      }
      const base = {};
      const breakpointsKeys = Object.keys(themeBreakpoints);
      if (Array.isArray(breakpointValues)) {
        breakpointsKeys.forEach((breakpoint, i) => {
          if (i < breakpointValues.length) {
            base[breakpoint] = true;
          }
        });
      } else {
        breakpointsKeys.forEach((breakpoint) => {
          if (breakpointValues[breakpoint] != null) {
            base[breakpoint] = true;
          }
        });
      }
      return base;
    }
    function resolveBreakpointValues({
      values: breakpointValues,
      breakpoints: themeBreakpoints,
      base: customBase
    }) {
      const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
      const keys2 = Object.keys(base);
      if (keys2.length === 0) {
        return breakpointValues;
      }
      let previous;
      return keys2.reduce((acc, breakpoint, i) => {
        if (Array.isArray(breakpointValues)) {
          acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
          previous = i;
        } else if (typeof breakpointValues === "object") {
          acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
          previous = breakpoint;
        } else {
          acc[breakpoint] = breakpointValues;
        }
        return acc;
      }, {});
    }
    function getPath(obj, path, checkVars = true) {
      if (!path || typeof path !== "string") {
        return null;
      }
      if (obj && obj.vars && checkVars) {
        const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
        if (val != null) {
          return val;
        }
      }
      return path.split(".").reduce((acc, item) => {
        if (acc && acc[item] != null) {
          return acc[item];
        }
        return null;
      }, obj);
    }
    function getStyleValue$1(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
      let value2;
      if (typeof themeMapping === "function") {
        value2 = themeMapping(propValueFinal);
      } else if (Array.isArray(themeMapping)) {
        value2 = themeMapping[propValueFinal] || userValue;
      } else {
        value2 = getPath(themeMapping, propValueFinal) || userValue;
      }
      if (transform) {
        value2 = transform(value2, userValue, themeMapping);
      }
      return value2;
    }
    function style$1(options) {
      const {
        prop,
        cssProperty = options.prop,
        themeKey,
        transform
      } = options;
      const fn = (props) => {
        if (props[prop] == null) {
          return null;
        }
        const propValue = props[prop];
        const theme = props.theme;
        const themeMapping = getPath(theme, themeKey) || {};
        const styleFromPropValue = (propValueFinal) => {
          let value2 = getStyleValue$1(themeMapping, transform, propValueFinal);
          if (propValueFinal === value2 && typeof propValueFinal === "string") {
            value2 = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
          }
          if (cssProperty === false) {
            return value2;
          }
          return {
            [cssProperty]: value2
          };
        };
        return handleBreakpoints(props, propValue, styleFromPropValue);
      };
      fn.propTypes = {};
      fn.filterProps = [prop];
      return fn;
    }
    function memoize$2(fn) {
      const cache = {};
      return (arg) => {
        if (cache[arg] === void 0) {
          cache[arg] = fn(arg);
        }
        return cache[arg];
      };
    }
    const properties = {
      m: "margin",
      p: "padding"
    };
    const directions = {
      t: "Top",
      r: "Right",
      b: "Bottom",
      l: "Left",
      x: ["Left", "Right"],
      y: ["Top", "Bottom"]
    };
    const aliases$1 = {
      marginX: "mx",
      marginY: "my",
      paddingX: "px",
      paddingY: "py"
    };
    const getCssProperties = memoize$2((prop) => {
      if (prop.length > 2) {
        if (aliases$1[prop]) {
          prop = aliases$1[prop];
        } else {
          return [prop];
        }
      }
      const [a, b2] = prop.split("");
      const property2 = properties[a];
      const direction = directions[b2] || "";
      return Array.isArray(direction) ? direction.map((dir) => property2 + dir) : [property2 + direction];
    });
    const marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
    const paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
    [...marginKeys, ...paddingKeys];
    function createUnaryUnit(theme, themeKey, defaultValue2, propName) {
      var _getPath;
      const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue2;
      if (typeof themeSpacing === "number") {
        return (abs2) => {
          if (typeof abs2 === "string") {
            return abs2;
          }
          return themeSpacing * abs2;
        };
      }
      if (Array.isArray(themeSpacing)) {
        return (abs2) => {
          if (typeof abs2 === "string") {
            return abs2;
          }
          return themeSpacing[abs2];
        };
      }
      if (typeof themeSpacing === "function") {
        return themeSpacing;
      }
      return () => void 0;
    }
    function createUnarySpacing(theme) {
      return createUnaryUnit(theme, "spacing", 8);
    }
    function getValue$2(transformer, propValue) {
      if (typeof propValue === "string" || propValue == null) {
        return propValue;
      }
      const abs2 = Math.abs(propValue);
      const transformed = transformer(abs2);
      if (propValue >= 0) {
        return transformed;
      }
      if (typeof transformed === "number") {
        return -transformed;
      }
      return `-${transformed}`;
    }
    function getStyleFromPropValue(cssProperties, transformer) {
      return (propValue) => cssProperties.reduce((acc, cssProperty) => {
        acc[cssProperty] = getValue$2(transformer, propValue);
        return acc;
      }, {});
    }
    function resolveCssProperty(props, keys2, prop, transformer) {
      if (keys2.indexOf(prop) === -1) {
        return null;
      }
      const cssProperties = getCssProperties(prop);
      const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
      const propValue = props[prop];
      return handleBreakpoints(props, propValue, styleFromPropValue);
    }
    function style(props, keys2) {
      const transformer = createUnarySpacing(props.theme);
      return Object.keys(props).map((prop) => resolveCssProperty(props, keys2, prop, transformer)).reduce(merge$2, {});
    }
    function margin(props) {
      return style(props, marginKeys);
    }
    margin.propTypes = {};
    margin.filterProps = marginKeys;
    function padding(props) {
      return style(props, paddingKeys);
    }
    padding.propTypes = {};
    padding.filterProps = paddingKeys;
    function createSpacing(spacingInput = 8) {
      if (spacingInput.mui) {
        return spacingInput;
      }
      const transform = createUnarySpacing({
        spacing: spacingInput
      });
      const spacing = (...argsInput) => {
        const args = argsInput.length === 0 ? [1] : argsInput;
        return args.map((argument) => {
          const output = transform(argument);
          return typeof output === "number" ? `${output}px` : output;
        }).join(" ");
      };
      spacing.mui = true;
      return spacing;
    }
    function compose(...styles2) {
      const handlers = styles2.reduce((acc, style2) => {
        style2.filterProps.forEach((prop) => {
          acc[prop] = style2;
        });
        return acc;
      }, {});
      const fn = (props) => {
        return Object.keys(props).reduce((acc, prop) => {
          if (handlers[prop]) {
            return merge$2(acc, handlers[prop](props));
          }
          return acc;
        }, {});
      };
      fn.propTypes = {};
      fn.filterProps = styles2.reduce((acc, style2) => acc.concat(style2.filterProps), []);
      return fn;
    }
    function borderTransform(value2) {
      if (typeof value2 !== "number") {
        return value2;
      }
      return `${value2}px solid`;
    }
    const border = style$1({
      prop: "border",
      themeKey: "borders",
      transform: borderTransform
    });
    const borderTop = style$1({
      prop: "borderTop",
      themeKey: "borders",
      transform: borderTransform
    });
    const borderRight = style$1({
      prop: "borderRight",
      themeKey: "borders",
      transform: borderTransform
    });
    const borderBottom = style$1({
      prop: "borderBottom",
      themeKey: "borders",
      transform: borderTransform
    });
    const borderLeft = style$1({
      prop: "borderLeft",
      themeKey: "borders",
      transform: borderTransform
    });
    const borderColor = style$1({
      prop: "borderColor",
      themeKey: "palette"
    });
    const borderTopColor = style$1({
      prop: "borderTopColor",
      themeKey: "palette"
    });
    const borderRightColor = style$1({
      prop: "borderRightColor",
      themeKey: "palette"
    });
    const borderBottomColor = style$1({
      prop: "borderBottomColor",
      themeKey: "palette"
    });
    const borderLeftColor = style$1({
      prop: "borderLeftColor",
      themeKey: "palette"
    });
    const borderRadius = (props) => {
      if (props.borderRadius !== void 0 && props.borderRadius !== null) {
        const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4);
        const styleFromPropValue = (propValue) => ({
          borderRadius: getValue$2(transformer, propValue)
        });
        return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
      }
      return null;
    };
    borderRadius.propTypes = {};
    borderRadius.filterProps = ["borderRadius"];
    compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
    const gap = (props) => {
      if (props.gap !== void 0 && props.gap !== null) {
        const transformer = createUnaryUnit(props.theme, "spacing", 8);
        const styleFromPropValue = (propValue) => ({
          gap: getValue$2(transformer, propValue)
        });
        return handleBreakpoints(props, props.gap, styleFromPropValue);
      }
      return null;
    };
    gap.propTypes = {};
    gap.filterProps = ["gap"];
    const columnGap = (props) => {
      if (props.columnGap !== void 0 && props.columnGap !== null) {
        const transformer = createUnaryUnit(props.theme, "spacing", 8);
        const styleFromPropValue = (propValue) => ({
          columnGap: getValue$2(transformer, propValue)
        });
        return handleBreakpoints(props, props.columnGap, styleFromPropValue);
      }
      return null;
    };
    columnGap.propTypes = {};
    columnGap.filterProps = ["columnGap"];
    const rowGap = (props) => {
      if (props.rowGap !== void 0 && props.rowGap !== null) {
        const transformer = createUnaryUnit(props.theme, "spacing", 8);
        const styleFromPropValue = (propValue) => ({
          rowGap: getValue$2(transformer, propValue)
        });
        return handleBreakpoints(props, props.rowGap, styleFromPropValue);
      }
      return null;
    };
    rowGap.propTypes = {};
    rowGap.filterProps = ["rowGap"];
    const gridColumn = style$1({
      prop: "gridColumn"
    });
    const gridRow = style$1({
      prop: "gridRow"
    });
    const gridAutoFlow = style$1({
      prop: "gridAutoFlow"
    });
    const gridAutoColumns = style$1({
      prop: "gridAutoColumns"
    });
    const gridAutoRows = style$1({
      prop: "gridAutoRows"
    });
    const gridTemplateColumns = style$1({
      prop: "gridTemplateColumns"
    });
    const gridTemplateRows = style$1({
      prop: "gridTemplateRows"
    });
    const gridTemplateAreas = style$1({
      prop: "gridTemplateAreas"
    });
    const gridArea = style$1({
      prop: "gridArea"
    });
    compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
    function paletteTransform(value2, userValue) {
      if (userValue === "grey") {
        return userValue;
      }
      return value2;
    }
    const color = style$1({
      prop: "color",
      themeKey: "palette",
      transform: paletteTransform
    });
    const bgcolor = style$1({
      prop: "bgcolor",
      cssProperty: "backgroundColor",
      themeKey: "palette",
      transform: paletteTransform
    });
    const backgroundColor = style$1({
      prop: "backgroundColor",
      themeKey: "palette",
      transform: paletteTransform
    });
    compose(color, bgcolor, backgroundColor);
    function sizingTransform(value2) {
      return value2 <= 1 && value2 !== 0 ? `${value2 * 100}%` : value2;
    }
    const width = style$1({
      prop: "width",
      transform: sizingTransform
    });
    const maxWidth = (props) => {
      if (props.maxWidth !== void 0 && props.maxWidth !== null) {
        const styleFromPropValue = (propValue) => {
          var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;
          const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || values$1[propValue];
          return {
            maxWidth: breakpoint || sizingTransform(propValue)
          };
        };
        return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
      }
      return null;
    };
    maxWidth.filterProps = ["maxWidth"];
    const minWidth = style$1({
      prop: "minWidth",
      transform: sizingTransform
    });
    const height = style$1({
      prop: "height",
      transform: sizingTransform
    });
    const maxHeight = style$1({
      prop: "maxHeight",
      transform: sizingTransform
    });
    const minHeight = style$1({
      prop: "minHeight",
      transform: sizingTransform
    });
    style$1({
      prop: "size",
      cssProperty: "width",
      transform: sizingTransform
    });
    style$1({
      prop: "size",
      cssProperty: "height",
      transform: sizingTransform
    });
    const boxSizing = style$1({
      prop: "boxSizing"
    });
    compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
    const defaultSxConfig = {
      // borders
      border: {
        themeKey: "borders",
        transform: borderTransform
      },
      borderTop: {
        themeKey: "borders",
        transform: borderTransform
      },
      borderRight: {
        themeKey: "borders",
        transform: borderTransform
      },
      borderBottom: {
        themeKey: "borders",
        transform: borderTransform
      },
      borderLeft: {
        themeKey: "borders",
        transform: borderTransform
      },
      borderColor: {
        themeKey: "palette"
      },
      borderTopColor: {
        themeKey: "palette"
      },
      borderRightColor: {
        themeKey: "palette"
      },
      borderBottomColor: {
        themeKey: "palette"
      },
      borderLeftColor: {
        themeKey: "palette"
      },
      borderRadius: {
        themeKey: "shape.borderRadius",
        style: borderRadius
      },
      // palette
      color: {
        themeKey: "palette",
        transform: paletteTransform
      },
      bgcolor: {
        themeKey: "palette",
        cssProperty: "backgroundColor",
        transform: paletteTransform
      },
      backgroundColor: {
        themeKey: "palette",
        transform: paletteTransform
      },
      // spacing
      p: {
        style: padding
      },
      pt: {
        style: padding
      },
      pr: {
        style: padding
      },
      pb: {
        style: padding
      },
      pl: {
        style: padding
      },
      px: {
        style: padding
      },
      py: {
        style: padding
      },
      padding: {
        style: padding
      },
      paddingTop: {
        style: padding
      },
      paddingRight: {
        style: padding
      },
      paddingBottom: {
        style: padding
      },
      paddingLeft: {
        style: padding
      },
      paddingX: {
        style: padding
      },
      paddingY: {
        style: padding
      },
      paddingInline: {
        style: padding
      },
      paddingInlineStart: {
        style: padding
      },
      paddingInlineEnd: {
        style: padding
      },
      paddingBlock: {
        style: padding
      },
      paddingBlockStart: {
        style: padding
      },
      paddingBlockEnd: {
        style: padding
      },
      m: {
        style: margin
      },
      mt: {
        style: margin
      },
      mr: {
        style: margin
      },
      mb: {
        style: margin
      },
      ml: {
        style: margin
      },
      mx: {
        style: margin
      },
      my: {
        style: margin
      },
      margin: {
        style: margin
      },
      marginTop: {
        style: margin
      },
      marginRight: {
        style: margin
      },
      marginBottom: {
        style: margin
      },
      marginLeft: {
        style: margin
      },
      marginX: {
        style: margin
      },
      marginY: {
        style: margin
      },
      marginInline: {
        style: margin
      },
      marginInlineStart: {
        style: margin
      },
      marginInlineEnd: {
        style: margin
      },
      marginBlock: {
        style: margin
      },
      marginBlockStart: {
        style: margin
      },
      marginBlockEnd: {
        style: margin
      },
      // display
      displayPrint: {
        cssProperty: false,
        transform: (value2) => ({
          "@media print": {
            display: value2
          }
        })
      },
      display: {},
      overflow: {},
      textOverflow: {},
      visibility: {},
      whiteSpace: {},
      // flexbox
      flexBasis: {},
      flexDirection: {},
      flexWrap: {},
      justifyContent: {},
      alignItems: {},
      alignContent: {},
      order: {},
      flex: {},
      flexGrow: {},
      flexShrink: {},
      alignSelf: {},
      justifyItems: {},
      justifySelf: {},
      // grid
      gap: {
        style: gap
      },
      rowGap: {
        style: rowGap
      },
      columnGap: {
        style: columnGap
      },
      gridColumn: {},
      gridRow: {},
      gridAutoFlow: {},
      gridAutoColumns: {},
      gridAutoRows: {},
      gridTemplateColumns: {},
      gridTemplateRows: {},
      gridTemplateAreas: {},
      gridArea: {},
      // positions
      position: {},
      zIndex: {
        themeKey: "zIndex"
      },
      top: {},
      right: {},
      bottom: {},
      left: {},
      // shadows
      boxShadow: {
        themeKey: "shadows"
      },
      // sizing
      width: {
        transform: sizingTransform
      },
      maxWidth: {
        style: maxWidth
      },
      minWidth: {
        transform: sizingTransform
      },
      height: {
        transform: sizingTransform
      },
      maxHeight: {
        transform: sizingTransform
      },
      minHeight: {
        transform: sizingTransform
      },
      boxSizing: {},
      // typography
      fontFamily: {
        themeKey: "typography"
      },
      fontSize: {
        themeKey: "typography"
      },
      fontStyle: {
        themeKey: "typography"
      },
      fontWeight: {
        themeKey: "typography"
      },
      letterSpacing: {},
      textTransform: {},
      lineHeight: {},
      textAlign: {},
      typography: {
        cssProperty: false,
        themeKey: "typography"
      }
    };
    const defaultSxConfig$1 = defaultSxConfig;
    function objectsHaveSameKeys(...objects) {
      const allKeys = objects.reduce((keys2, object) => keys2.concat(Object.keys(object)), []);
      const union = new Set(allKeys);
      return objects.every((object) => union.size === Object.keys(object).length);
    }
    function callIfFn(maybeFn, arg) {
      return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
    }
    function unstable_createStyleFunctionSx() {
      function getThemeValue(prop, val, theme, config2) {
        const props = {
          [prop]: val,
          theme
        };
        const options = config2[prop];
        if (!options) {
          return {
            [prop]: val
          };
        }
        const {
          cssProperty = prop,
          themeKey,
          transform,
          style: style2
        } = options;
        if (val == null) {
          return null;
        }
        if (themeKey === "typography" && val === "inherit") {
          return {
            [prop]: val
          };
        }
        const themeMapping = getPath(theme, themeKey) || {};
        if (style2) {
          return style2(props);
        }
        const styleFromPropValue = (propValueFinal) => {
          let value2 = getStyleValue$1(themeMapping, transform, propValueFinal);
          if (propValueFinal === value2 && typeof propValueFinal === "string") {
            value2 = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
          }
          if (cssProperty === false) {
            return value2;
          }
          return {
            [cssProperty]: value2
          };
        };
        return handleBreakpoints(props, val, styleFromPropValue);
      }
      function styleFunctionSx2(props) {
        var _theme$unstable_sxCon;
        const {
          sx,
          theme = {}
        } = props || {};
        if (!sx) {
          return null;
        }
        const config2 = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig$1;
        function traverse(sxInput) {
          let sxObject = sxInput;
          if (typeof sxInput === "function") {
            sxObject = sxInput(theme);
          } else if (typeof sxInput !== "object") {
            return sxInput;
          }
          if (!sxObject) {
            return null;
          }
          const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
          const breakpointsKeys = Object.keys(emptyBreakpoints);
          let css2 = emptyBreakpoints;
          Object.keys(sxObject).forEach((styleKey) => {
            const value2 = callIfFn(sxObject[styleKey], theme);
            if (value2 !== null && value2 !== void 0) {
              if (typeof value2 === "object") {
                if (config2[styleKey]) {
                  css2 = merge$2(css2, getThemeValue(styleKey, value2, theme, config2));
                } else {
                  const breakpointsValues = handleBreakpoints({
                    theme
                  }, value2, (x2) => ({
                    [styleKey]: x2
                  }));
                  if (objectsHaveSameKeys(breakpointsValues, value2)) {
                    css2[styleKey] = styleFunctionSx2({
                      sx: value2,
                      theme
                    });
                  } else {
                    css2 = merge$2(css2, breakpointsValues);
                  }
                }
              } else {
                css2 = merge$2(css2, getThemeValue(styleKey, value2, theme, config2));
              }
            }
          });
          return removeUnusedBreakpoints(breakpointsKeys, css2);
        }
        return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
      }
      return styleFunctionSx2;
    }
    const styleFunctionSx = unstable_createStyleFunctionSx();
    styleFunctionSx.filterProps = ["sx"];
    const styleFunctionSx$1 = styleFunctionSx;
    const _excluded$1T = ["breakpoints", "palette", "spacing", "shape"];
    function createTheme$1(options = {}, ...args) {
      const {
        breakpoints: breakpointsInput = {},
        palette: paletteInput = {},
        spacing: spacingInput,
        shape: shapeInput = {}
      } = options, other = _objectWithoutPropertiesLoose(options, _excluded$1T);
      const breakpoints = createBreakpoints(breakpointsInput);
      const spacing = createSpacing(spacingInput);
      let muiTheme = deepmerge({
        breakpoints,
        direction: "ltr",
        components: {},
        // Inject component definitions.
        palette: _extends$1({
          mode: "light"
        }, paletteInput),
        spacing,
        shape: _extends$1({}, shape$1, shapeInput)
      }, other);
      muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
      muiTheme.unstable_sxConfig = _extends$1({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
      muiTheme.unstable_sx = function sx(props) {
        return styleFunctionSx$1({
          sx: props,
          theme: this
        });
      };
      return muiTheme;
    }
    function isObjectEmpty$1(obj) {
      return Object.keys(obj).length === 0;
    }
    function useTheme$3(defaultTheme2 = null) {
      const contextTheme = reactExports.useContext(ThemeContext$2);
      return !contextTheme || isObjectEmpty$1(contextTheme) ? defaultTheme2 : contextTheme;
    }
    const systemDefaultTheme$1 = createTheme$1();
    function useTheme$2(defaultTheme2 = systemDefaultTheme$1) {
      return useTheme$3(defaultTheme2);
    }
    function GlobalStyles$1({
      styles: styles2,
      themeId,
      defaultTheme: defaultTheme2 = {}
    }) {
      const upperTheme = useTheme$2(defaultTheme2);
      const globalStyles = typeof styles2 === "function" ? styles2(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles2;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles$2, {
        styles: globalStyles
      });
    }
    const _excluded$1S = ["sx"];
    const splitProps = (props) => {
      var _props$theme$unstable, _props$theme;
      const result = {
        systemProps: {},
        otherProps: {}
      };
      const config2 = (_props$theme$unstable = props == null ? void 0 : (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig$1;
      Object.keys(props).forEach((prop) => {
        if (config2[prop]) {
          result.systemProps[prop] = props[prop];
        } else {
          result.otherProps[prop] = props[prop];
        }
      });
      return result;
    };
    function extendSxProp(props) {
      const {
        sx: inSx
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1S);
      const {
        systemProps,
        otherProps
      } = splitProps(other);
      let finalSx;
      if (Array.isArray(inSx)) {
        finalSx = [systemProps, ...inSx];
      } else if (typeof inSx === "function") {
        finalSx = (...args) => {
          const result = inSx(...args);
          if (!isPlainObject$4(result)) {
            return systemProps;
          }
          return _extends$1({}, systemProps, result);
        };
      } else {
        finalSx = _extends$1({}, systemProps, inSx);
      }
      return _extends$1({}, otherProps, {
        sx: finalSx
      });
    }
    function r$1(e2) {
      var t2, f2, n2 = "";
      if ("string" == typeof e2 || "number" == typeof e2)
        n2 += e2;
      else if ("object" == typeof e2)
        if (Array.isArray(e2))
          for (t2 = 0; t2 < e2.length; t2++)
            e2[t2] && (f2 = r$1(e2[t2])) && (n2 && (n2 += " "), n2 += f2);
        else
          for (t2 in e2)
            e2[t2] && (n2 && (n2 += " "), n2 += t2);
      return n2;
    }
    function clsx() {
      for (var e2, t2, f2 = 0, n2 = ""; f2 < arguments.length; )
        (e2 = arguments[f2++]) && (t2 = r$1(e2)) && (n2 && (n2 += " "), n2 += t2);
      return n2;
    }
    const _excluded$1R = ["variant"];
    function isEmpty$3(string) {
      return string.length === 0;
    }
    function propsToClassKey(props) {
      const {
        variant
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1R);
      let classKey = variant || "";
      Object.keys(other).sort().forEach((key) => {
        if (key === "color") {
          classKey += isEmpty$3(classKey) ? props[key] : capitalize(props[key]);
        } else {
          classKey += `${isEmpty$3(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
        }
      });
      return classKey;
    }
    const _excluded$1Q = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
    function isEmpty$2(obj) {
      return Object.keys(obj).length === 0;
    }
    function isStringTag(tag) {
      return typeof tag === "string" && // 96 is one less than the char code
      // for "a" so this is checking that
      // it's a lowercase character
      tag.charCodeAt(0) > 96;
    }
    const getStyleOverrides = (name, theme) => {
      if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
        return theme.components[name].styleOverrides;
      }
      return null;
    };
    const getVariantStyles = (name, theme) => {
      let variants = [];
      if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
        variants = theme.components[name].variants;
      }
      const variantsStyles = {};
      variants.forEach((definition) => {
        const key = propsToClassKey(definition.props);
        variantsStyles[key] = definition.style;
      });
      return variantsStyles;
    };
    const variantsResolver = (props, styles2, theme, name) => {
      var _theme$components, _theme$components$nam;
      const {
        ownerState = {}
      } = props;
      const variantsStyles = [];
      const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;
      if (themeVariants) {
        themeVariants.forEach((themeVariant) => {
          let isMatch = true;
          Object.keys(themeVariant.props).forEach((key) => {
            if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
              isMatch = false;
            }
          });
          if (isMatch) {
            variantsStyles.push(styles2[propsToClassKey(themeVariant.props)]);
          }
        });
      }
      return variantsStyles;
    };
    function shouldForwardProp(prop) {
      return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
    }
    const systemDefaultTheme = createTheme$1();
    function resolveTheme({
      defaultTheme: defaultTheme2,
      theme,
      themeId
    }) {
      return isEmpty$2(theme) ? defaultTheme2 : theme[themeId] || theme;
    }
    function createStyled(input = {}) {
      const {
        themeId,
        defaultTheme: defaultTheme2 = systemDefaultTheme,
        rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
        slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp
      } = input;
      const systemSx = (props) => {
        return styleFunctionSx$1(_extends$1({}, props, {
          theme: resolveTheme(_extends$1({}, props, {
            defaultTheme: defaultTheme2,
            themeId
          }))
        }));
      };
      systemSx.__mui_systemSx = true;
      return (tag, inputOptions = {}) => {
        internal_processStyles(tag, (styles2) => styles2.filter((style2) => !(style2 != null && style2.__mui_systemSx)));
        const {
          name: componentName,
          slot: componentSlot,
          skipVariantsResolver: inputSkipVariantsResolver,
          skipSx: inputSkipSx,
          overridesResolver: overridesResolver2
        } = inputOptions, options = _objectWithoutPropertiesLoose(inputOptions, _excluded$1Q);
        const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : componentSlot && componentSlot !== "Root" || false;
        const skipSx = inputSkipSx || false;
        let label;
        let shouldForwardPropOption = shouldForwardProp;
        if (componentSlot === "Root") {
          shouldForwardPropOption = rootShouldForwardProp2;
        } else if (componentSlot) {
          shouldForwardPropOption = slotShouldForwardProp2;
        } else if (isStringTag(tag)) {
          shouldForwardPropOption = void 0;
        }
        const defaultStyledResolver = styled$2(tag, _extends$1({
          shouldForwardProp: shouldForwardPropOption,
          label
        }, options));
        const muiStyledResolver = (styleArg2, ...expressions) => {
          const expressionsWithDefaultTheme = expressions ? expressions.map((stylesArg) => {
            return typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg ? (props) => {
              return stylesArg(_extends$1({}, props, {
                theme: resolveTheme(_extends$1({}, props, {
                  defaultTheme: defaultTheme2,
                  themeId
                }))
              }));
            } : stylesArg;
          }) : [];
          let transformedStyleArg = styleArg2;
          if (componentName && overridesResolver2) {
            expressionsWithDefaultTheme.push((props) => {
              const theme = resolveTheme(_extends$1({}, props, {
                defaultTheme: defaultTheme2,
                themeId
              }));
              const styleOverrides = getStyleOverrides(componentName, theme);
              if (styleOverrides) {
                const resolvedStyleOverrides = {};
                Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                  resolvedStyleOverrides[slotKey] = typeof slotStyle === "function" ? slotStyle(_extends$1({}, props, {
                    theme
                  })) : slotStyle;
                });
                return overridesResolver2(props, resolvedStyleOverrides);
              }
              return null;
            });
          }
          if (componentName && !skipVariantsResolver) {
            expressionsWithDefaultTheme.push((props) => {
              const theme = resolveTheme(_extends$1({}, props, {
                defaultTheme: defaultTheme2,
                themeId
              }));
              return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
            });
          }
          if (!skipSx) {
            expressionsWithDefaultTheme.push(systemSx);
          }
          const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
          if (Array.isArray(styleArg2) && numOfCustomFnsApplied > 0) {
            const placeholders = new Array(numOfCustomFnsApplied).fill("");
            transformedStyleArg = [...styleArg2, ...placeholders];
            transformedStyleArg.raw = [...styleArg2.raw, ...placeholders];
          } else if (typeof styleArg2 === "function" && // On the server Emotion doesn't use React.forwardRef for creating components, so the created
          // component stays as a function. This condition makes sure that we do not interpolate functions
          // which are basically components used as a selectors.
          styleArg2.__emotion_real !== styleArg2) {
            transformedStyleArg = (props) => styleArg2(_extends$1({}, props, {
              theme: resolveTheme(_extends$1({}, props, {
                defaultTheme: defaultTheme2,
                themeId
              }))
            }));
          }
          const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
          if (tag.muiName) {
            Component.muiName = tag.muiName;
          }
          return Component;
        };
        if (defaultStyledResolver.withConfig) {
          muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
        }
        return muiStyledResolver;
      };
    }
    function getThemeProps(params) {
      const {
        theme,
        name,
        props
      } = params;
      if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
        return props;
      }
      return resolveProps(theme.components[name].defaultProps, props);
    }
    function useThemeProps$1({
      props,
      name,
      defaultTheme: defaultTheme2,
      themeId
    }) {
      let theme = useTheme$2(defaultTheme2);
      if (themeId) {
        theme = theme[themeId] || theme;
      }
      const mergedProps = getThemeProps({
        theme,
        name,
        props
      });
      return mergedProps;
    }
    function clamp$2(value2, min2 = 0, max2 = 1) {
      return Math.min(Math.max(min2, value2), max2);
    }
    function hexToRgb(color2) {
      color2 = color2.slice(1);
      const re2 = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
      let colors = color2.match(re2);
      if (colors && colors[0].length === 1) {
        colors = colors.map((n2) => n2 + n2);
      }
      return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n2, index) => {
        return index < 3 ? parseInt(n2, 16) : Math.round(parseInt(n2, 16) / 255 * 1e3) / 1e3;
      }).join(", ")})` : "";
    }
    function decomposeColor(color2) {
      if (color2.type) {
        return color2;
      }
      if (color2.charAt(0) === "#") {
        return decomposeColor(hexToRgb(color2));
      }
      const marker = color2.indexOf("(");
      const type = color2.substring(0, marker);
      if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
        throw new Error(formatMuiErrorMessage(9, color2));
      }
      let values2 = color2.substring(marker + 1, color2.length - 1);
      let colorSpace;
      if (type === "color") {
        values2 = values2.split(" ");
        colorSpace = values2.shift();
        if (values2.length === 4 && values2[3].charAt(0) === "/") {
          values2[3] = values2[3].slice(1);
        }
        if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
          throw new Error(formatMuiErrorMessage(10, colorSpace));
        }
      } else {
        values2 = values2.split(",");
      }
      values2 = values2.map((value2) => parseFloat(value2));
      return {
        type,
        values: values2,
        colorSpace
      };
    }
    function recomposeColor(color2) {
      const {
        type,
        colorSpace
      } = color2;
      let {
        values: values2
      } = color2;
      if (type.indexOf("rgb") !== -1) {
        values2 = values2.map((n2, i) => i < 3 ? parseInt(n2, 10) : n2);
      } else if (type.indexOf("hsl") !== -1) {
        values2[1] = `${values2[1]}%`;
        values2[2] = `${values2[2]}%`;
      }
      if (type.indexOf("color") !== -1) {
        values2 = `${colorSpace} ${values2.join(" ")}`;
      } else {
        values2 = `${values2.join(", ")}`;
      }
      return `${type}(${values2})`;
    }
    function hslToRgb(color2) {
      color2 = decomposeColor(color2);
      const {
        values: values2
      } = color2;
      const h2 = values2[0];
      const s = values2[1] / 100;
      const l2 = values2[2] / 100;
      const a = s * Math.min(l2, 1 - l2);
      const f2 = (n2, k2 = (n2 + h2 / 30) % 12) => l2 - a * Math.max(Math.min(k2 - 3, 9 - k2, 1), -1);
      let type = "rgb";
      const rgb = [Math.round(f2(0) * 255), Math.round(f2(8) * 255), Math.round(f2(4) * 255)];
      if (color2.type === "hsla") {
        type += "a";
        rgb.push(values2[3]);
      }
      return recomposeColor({
        type,
        values: rgb
      });
    }
    function getLuminance(color2) {
      color2 = decomposeColor(color2);
      let rgb = color2.type === "hsl" || color2.type === "hsla" ? decomposeColor(hslToRgb(color2)).values : color2.values;
      rgb = rgb.map((val) => {
        if (color2.type !== "color") {
          val /= 255;
        }
        return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
      });
      return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
    }
    function getContrastRatio(foreground, background) {
      const lumA = getLuminance(foreground);
      const lumB = getLuminance(background);
      return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
    }
    function alpha(color2, value2) {
      color2 = decomposeColor(color2);
      value2 = clamp$2(value2);
      if (color2.type === "rgb" || color2.type === "hsl") {
        color2.type += "a";
      }
      if (color2.type === "color") {
        color2.values[3] = `/${value2}`;
      } else {
        color2.values[3] = value2;
      }
      return recomposeColor(color2);
    }
    function darken(color2, coefficient) {
      color2 = decomposeColor(color2);
      coefficient = clamp$2(coefficient);
      if (color2.type.indexOf("hsl") !== -1) {
        color2.values[2] *= 1 - coefficient;
      } else if (color2.type.indexOf("rgb") !== -1 || color2.type.indexOf("color") !== -1) {
        for (let i = 0; i < 3; i += 1) {
          color2.values[i] *= 1 - coefficient;
        }
      }
      return recomposeColor(color2);
    }
    function lighten(color2, coefficient) {
      color2 = decomposeColor(color2);
      coefficient = clamp$2(coefficient);
      if (color2.type.indexOf("hsl") !== -1) {
        color2.values[2] += (100 - color2.values[2]) * coefficient;
      } else if (color2.type.indexOf("rgb") !== -1) {
        for (let i = 0; i < 3; i += 1) {
          color2.values[i] += (255 - color2.values[i]) * coefficient;
        }
      } else if (color2.type.indexOf("color") !== -1) {
        for (let i = 0; i < 3; i += 1) {
          color2.values[i] += (1 - color2.values[i]) * coefficient;
        }
      }
      return recomposeColor(color2);
    }
    const ThemeContext = /* @__PURE__ */ reactExports.createContext(null);
    const ThemeContext$1 = ThemeContext;
    function useTheme$1() {
      const theme = reactExports.useContext(ThemeContext$1);
      return theme;
    }
    const hasSymbol = typeof Symbol === "function" && Symbol.for;
    const nested = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";
    function mergeOuterLocalTheme(outerTheme, localTheme) {
      if (typeof localTheme === "function") {
        const mergedTheme = localTheme(outerTheme);
        return mergedTheme;
      }
      return _extends$1({}, outerTheme, localTheme);
    }
    function ThemeProvider$2(props) {
      const {
        children,
        theme: localTheme
      } = props;
      const outerTheme = useTheme$1();
      const theme = reactExports.useMemo(() => {
        const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
        if (output != null) {
          output[nested] = outerTheme !== null;
        }
        return output;
      }, [localTheme, outerTheme]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeContext$1.Provider, {
        value: theme,
        children
      });
    }
    const EMPTY_THEME = {};
    function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
      return reactExports.useMemo(() => {
        const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
        if (typeof localTheme === "function") {
          const mergedTheme = localTheme(resolvedTheme);
          const result = themeId ? _extends$1({}, upperTheme, {
            [themeId]: mergedTheme
          }) : mergedTheme;
          if (isPrivate) {
            return () => result;
          }
          return result;
        }
        return themeId ? _extends$1({}, upperTheme, {
          [themeId]: localTheme
        }) : _extends$1({}, upperTheme, localTheme);
      }, [themeId, upperTheme, localTheme, isPrivate]);
    }
    function ThemeProvider$1(props) {
      const {
        children,
        theme: localTheme,
        themeId
      } = props;
      const upperTheme = useTheme$3(EMPTY_THEME);
      const upperPrivateTheme = useTheme$1() || EMPTY_THEME;
      const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
      const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider$2, {
        theme: privateTheme,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeContext$2.Provider, {
          value: engineTheme,
          children
        })
      });
    }
    function createMixins(breakpoints, mixins) {
      return _extends$1({
        toolbar: {
          minHeight: 56,
          [breakpoints.up("xs")]: {
            "@media (orientation: landscape)": {
              minHeight: 48
            }
          },
          [breakpoints.up("sm")]: {
            minHeight: 64
          }
        }
      }, mixins);
    }
    const common = {
      black: "#000",
      white: "#fff"
    };
    const common$1 = common;
    const grey = {
      50: "#fafafa",
      100: "#f5f5f5",
      200: "#eeeeee",
      300: "#e0e0e0",
      400: "#bdbdbd",
      500: "#9e9e9e",
      600: "#757575",
      700: "#616161",
      800: "#424242",
      900: "#212121",
      A100: "#f5f5f5",
      A200: "#eeeeee",
      A400: "#bdbdbd",
      A700: "#616161"
    };
    const grey$1 = grey;
    const purple = {
      50: "#f3e5f5",
      100: "#e1bee7",
      200: "#ce93d8",
      300: "#ba68c8",
      400: "#ab47bc",
      500: "#9c27b0",
      600: "#8e24aa",
      700: "#7b1fa2",
      800: "#6a1b9a",
      900: "#4a148c",
      A100: "#ea80fc",
      A200: "#e040fb",
      A400: "#d500f9",
      A700: "#aa00ff"
    };
    const purple$1 = purple;
    const red = {
      50: "#ffebee",
      100: "#ffcdd2",
      200: "#ef9a9a",
      300: "#e57373",
      400: "#ef5350",
      500: "#f44336",
      600: "#e53935",
      700: "#d32f2f",
      800: "#c62828",
      900: "#b71c1c",
      A100: "#ff8a80",
      A200: "#ff5252",
      A400: "#ff1744",
      A700: "#d50000"
    };
    const red$1 = red;
    const orange = {
      50: "#fff3e0",
      100: "#ffe0b2",
      200: "#ffcc80",
      300: "#ffb74d",
      400: "#ffa726",
      500: "#ff9800",
      600: "#fb8c00",
      700: "#f57c00",
      800: "#ef6c00",
      900: "#e65100",
      A100: "#ffd180",
      A200: "#ffab40",
      A400: "#ff9100",
      A700: "#ff6d00"
    };
    const orange$1 = orange;
    const blue = {
      50: "#e3f2fd",
      100: "#bbdefb",
      200: "#90caf9",
      300: "#64b5f6",
      400: "#42a5f5",
      500: "#2196f3",
      600: "#1e88e5",
      700: "#1976d2",
      800: "#1565c0",
      900: "#0d47a1",
      A100: "#82b1ff",
      A200: "#448aff",
      A400: "#2979ff",
      A700: "#2962ff"
    };
    const blue$1 = blue;
    const lightBlue = {
      50: "#e1f5fe",
      100: "#b3e5fc",
      200: "#81d4fa",
      300: "#4fc3f7",
      400: "#29b6f6",
      500: "#03a9f4",
      600: "#039be5",
      700: "#0288d1",
      800: "#0277bd",
      900: "#01579b",
      A100: "#80d8ff",
      A200: "#40c4ff",
      A400: "#00b0ff",
      A700: "#0091ea"
    };
    const lightBlue$1 = lightBlue;
    const green = {
      50: "#e8f5e9",
      100: "#c8e6c9",
      200: "#a5d6a7",
      300: "#81c784",
      400: "#66bb6a",
      500: "#4caf50",
      600: "#43a047",
      700: "#388e3c",
      800: "#2e7d32",
      900: "#1b5e20",
      A100: "#b9f6ca",
      A200: "#69f0ae",
      A400: "#00e676",
      A700: "#00c853"
    };
    const green$1 = green;
    const _excluded$1P = ["mode", "contrastThreshold", "tonalOffset"];
    const light = {
      // The colors used to style the text.
      text: {
        // The most important text.
        primary: "rgba(0, 0, 0, 0.87)",
        // Secondary text.
        secondary: "rgba(0, 0, 0, 0.6)",
        // Disabled text have even lower visual prominence.
        disabled: "rgba(0, 0, 0, 0.38)"
      },
      // The color used to divide different elements.
      divider: "rgba(0, 0, 0, 0.12)",
      // The background colors used to style the surfaces.
      // Consistency between these values is important.
      background: {
        paper: common$1.white,
        default: common$1.white
      },
      // The colors used to style the action elements.
      action: {
        // The color of an active action like an icon button.
        active: "rgba(0, 0, 0, 0.54)",
        // The color of an hovered action.
        hover: "rgba(0, 0, 0, 0.04)",
        hoverOpacity: 0.04,
        // The color of a selected action.
        selected: "rgba(0, 0, 0, 0.08)",
        selectedOpacity: 0.08,
        // The color of a disabled action.
        disabled: "rgba(0, 0, 0, 0.26)",
        // The background color of a disabled action.
        disabledBackground: "rgba(0, 0, 0, 0.12)",
        disabledOpacity: 0.38,
        focus: "rgba(0, 0, 0, 0.12)",
        focusOpacity: 0.12,
        activatedOpacity: 0.12
      }
    };
    const dark = {
      text: {
        primary: common$1.white,
        secondary: "rgba(255, 255, 255, 0.7)",
        disabled: "rgba(255, 255, 255, 0.5)",
        icon: "rgba(255, 255, 255, 0.5)"
      },
      divider: "rgba(255, 255, 255, 0.12)",
      background: {
        paper: "#121212",
        default: "#121212"
      },
      action: {
        active: common$1.white,
        hover: "rgba(255, 255, 255, 0.08)",
        hoverOpacity: 0.08,
        selected: "rgba(255, 255, 255, 0.16)",
        selectedOpacity: 0.16,
        disabled: "rgba(255, 255, 255, 0.3)",
        disabledBackground: "rgba(255, 255, 255, 0.12)",
        disabledOpacity: 0.38,
        focus: "rgba(255, 255, 255, 0.12)",
        focusOpacity: 0.12,
        activatedOpacity: 0.24
      }
    };
    function addLightOrDark(intent, direction, shade, tonalOffset) {
      const tonalOffsetLight = tonalOffset.light || tonalOffset;
      const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
      if (!intent[direction]) {
        if (intent.hasOwnProperty(shade)) {
          intent[direction] = intent[shade];
        } else if (direction === "light") {
          intent.light = lighten(intent.main, tonalOffsetLight);
        } else if (direction === "dark") {
          intent.dark = darken(intent.main, tonalOffsetDark);
        }
      }
    }
    function getDefaultPrimary(mode = "light") {
      if (mode === "dark") {
        return {
          main: blue$1[200],
          light: blue$1[50],
          dark: blue$1[400]
        };
      }
      return {
        main: blue$1[700],
        light: blue$1[400],
        dark: blue$1[800]
      };
    }
    function getDefaultSecondary(mode = "light") {
      if (mode === "dark") {
        return {
          main: purple$1[200],
          light: purple$1[50],
          dark: purple$1[400]
        };
      }
      return {
        main: purple$1[500],
        light: purple$1[300],
        dark: purple$1[700]
      };
    }
    function getDefaultError(mode = "light") {
      if (mode === "dark") {
        return {
          main: red$1[500],
          light: red$1[300],
          dark: red$1[700]
        };
      }
      return {
        main: red$1[700],
        light: red$1[400],
        dark: red$1[800]
      };
    }
    function getDefaultInfo(mode = "light") {
      if (mode === "dark") {
        return {
          main: lightBlue$1[400],
          light: lightBlue$1[300],
          dark: lightBlue$1[700]
        };
      }
      return {
        main: lightBlue$1[700],
        light: lightBlue$1[500],
        dark: lightBlue$1[900]
      };
    }
    function getDefaultSuccess(mode = "light") {
      if (mode === "dark") {
        return {
          main: green$1[400],
          light: green$1[300],
          dark: green$1[700]
        };
      }
      return {
        main: green$1[800],
        light: green$1[500],
        dark: green$1[900]
      };
    }
    function getDefaultWarning(mode = "light") {
      if (mode === "dark") {
        return {
          main: orange$1[400],
          light: orange$1[300],
          dark: orange$1[700]
        };
      }
      return {
        main: "#ed6c02",
        // closest to orange[800] that pass 3:1.
        light: orange$1[500],
        dark: orange$1[900]
      };
    }
    function createPalette(palette) {
      const {
        mode = "light",
        contrastThreshold = 3,
        tonalOffset = 0.2
      } = palette, other = _objectWithoutPropertiesLoose(palette, _excluded$1P);
      const primary = palette.primary || getDefaultPrimary(mode);
      const secondary = palette.secondary || getDefaultSecondary(mode);
      const error = palette.error || getDefaultError(mode);
      const info = palette.info || getDefaultInfo(mode);
      const success = palette.success || getDefaultSuccess(mode);
      const warning = palette.warning || getDefaultWarning(mode);
      function getContrastText(background) {
        const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
        return contrastText;
      }
      const augmentColor = ({
        color: color2,
        name,
        mainShade = 500,
        lightShade = 300,
        darkShade = 700
      }) => {
        color2 = _extends$1({}, color2);
        if (!color2.main && color2[mainShade]) {
          color2.main = color2[mainShade];
        }
        if (!color2.hasOwnProperty("main")) {
          throw new Error(formatMuiErrorMessage(11, name ? ` (${name})` : "", mainShade));
        }
        if (typeof color2.main !== "string") {
          throw new Error(formatMuiErrorMessage(12, name ? ` (${name})` : "", JSON.stringify(color2.main)));
        }
        addLightOrDark(color2, "light", lightShade, tonalOffset);
        addLightOrDark(color2, "dark", darkShade, tonalOffset);
        if (!color2.contrastText) {
          color2.contrastText = getContrastText(color2.main);
        }
        return color2;
      };
      const modes = {
        dark,
        light
      };
      const paletteOutput = deepmerge(_extends$1({
        // A collection of common colors.
        common: _extends$1({}, common$1),
        // prevent mutable object.
        // The palette mode, can be light or dark.
        mode,
        // The colors used to represent primary interface elements for a user.
        primary: augmentColor({
          color: primary,
          name: "primary"
        }),
        // The colors used to represent secondary interface elements for a user.
        secondary: augmentColor({
          color: secondary,
          name: "secondary",
          mainShade: "A400",
          lightShade: "A200",
          darkShade: "A700"
        }),
        // The colors used to represent interface elements that the user should be made aware of.
        error: augmentColor({
          color: error,
          name: "error"
        }),
        // The colors used to represent potentially dangerous actions or important messages.
        warning: augmentColor({
          color: warning,
          name: "warning"
        }),
        // The colors used to present information to the user that is neutral and not necessarily important.
        info: augmentColor({
          color: info,
          name: "info"
        }),
        // The colors used to indicate the successful completion of an action that user triggered.
        success: augmentColor({
          color: success,
          name: "success"
        }),
        // The grey colors.
        grey: grey$1,
        // Used by `getContrastText()` to maximize the contrast between
        // the background and the text.
        contrastThreshold,
        // Takes a background color and returns the text color that maximizes the contrast.
        getContrastText,
        // Generate a rich color object.
        augmentColor,
        // Used by the functions below to shift a color's luminance by approximately
        // two indexes within its tonal palette.
        // E.g., shift from Red 500 to Red 300 or Red 700.
        tonalOffset
      }, modes[mode]), other);
      return paletteOutput;
    }
    const _excluded$1O = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
    function round$2(value2) {
      return Math.round(value2 * 1e5) / 1e5;
    }
    const caseAllCaps = {
      textTransform: "uppercase"
    };
    const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
    function createTypography(palette, typography) {
      const _ref = typeof typography === "function" ? typography(palette) : typography, {
        fontFamily = defaultFontFamily,
        // The default font size of the Material Specification.
        fontSize = 14,
        // px
        fontWeightLight = 300,
        fontWeightRegular = 400,
        fontWeightMedium = 500,
        fontWeightBold = 700,
        // Tell MUI what's the font-size on the html element.
        // 16px is the default font-size used by browsers.
        htmlFontSize = 16,
        // Apply the CSS properties to all the variants.
        allVariants,
        pxToRem: pxToRem2
      } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded$1O);
      const coef = fontSize / 14;
      const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
      const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends$1({
        fontFamily,
        fontWeight,
        fontSize: pxToRem(size),
        // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
        lineHeight
      }, fontFamily === defaultFontFamily ? {
        letterSpacing: `${round$2(letterSpacing / size)}em`
      } : {}, casing, allVariants);
      const variants = {
        h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
        h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
        h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
        h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
        h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
        h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
        subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
        subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
        body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
        body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
        button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
        caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
        overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
        inherit: {
          fontFamily: "inherit",
          fontWeight: "inherit",
          fontSize: "inherit",
          lineHeight: "inherit",
          letterSpacing: "inherit"
        }
      };
      return deepmerge(_extends$1({
        htmlFontSize,
        pxToRem,
        fontFamily,
        fontSize,
        fontWeightLight,
        fontWeightRegular,
        fontWeightMedium,
        fontWeightBold
      }, variants), other, {
        clone: false
        // No need to clone deep
      });
    }
    const shadowKeyUmbraOpacity = 0.2;
    const shadowKeyPenumbraOpacity = 0.14;
    const shadowAmbientShadowOpacity = 0.12;
    function createShadow(...px) {
      return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
    }
    const shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
    const shadows$1 = shadows;
    const _excluded$1N = ["duration", "easing", "delay"];
    const easing = {
      // This is the most common easing curve.
      easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
      // Objects enter the screen at full velocity from off-screen and
      // slowly decelerate to a resting point.
      easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
      // Objects leave the screen at full velocity. They do not decelerate when off-screen.
      easeIn: "cubic-bezier(0.4, 0, 1, 1)",
      // The sharp curve is used by objects that may return to the screen at any time.
      sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
    };
    const duration = {
      shortest: 150,
      shorter: 200,
      short: 250,
      // most basic recommended timing
      standard: 300,
      // this is to be used in complex animations
      complex: 375,
      // recommended when something is entering screen
      enteringScreen: 225,
      // recommended when something is leaving screen
      leavingScreen: 195
    };
    function formatMs(milliseconds2) {
      return `${Math.round(milliseconds2)}ms`;
    }
    function getAutoHeightDuration(height2) {
      if (!height2) {
        return 0;
      }
      const constant2 = height2 / 36;
      return Math.round((4 + 15 * constant2 ** 0.25 + constant2 / 5) * 10);
    }
    function createTransitions(inputTransitions) {
      const mergedEasing = _extends$1({}, easing, inputTransitions.easing);
      const mergedDuration = _extends$1({}, duration, inputTransitions.duration);
      const create = (props = ["all"], options = {}) => {
        const {
          duration: durationOption = mergedDuration.standard,
          easing: easingOption = mergedEasing.easeInOut,
          delay = 0
        } = options;
        _objectWithoutPropertiesLoose(options, _excluded$1N);
        return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
      };
      return _extends$1({
        getAutoHeightDuration,
        create
      }, inputTransitions, {
        easing: mergedEasing,
        duration: mergedDuration
      });
    }
    const zIndex = {
      mobileStepper: 1e3,
      fab: 1050,
      speedDial: 1050,
      appBar: 1100,
      drawer: 1200,
      modal: 1300,
      snackbar: 1400,
      tooltip: 1500
    };
    const zIndex$1 = zIndex;
    const _excluded$1M = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
    function createTheme(options = {}, ...args) {
      const {
        mixins: mixinsInput = {},
        palette: paletteInput = {},
        transitions: transitionsInput = {},
        typography: typographyInput = {}
      } = options, other = _objectWithoutPropertiesLoose(options, _excluded$1M);
      if (options.vars) {
        throw new Error(formatMuiErrorMessage(18));
      }
      const palette = createPalette(paletteInput);
      const systemTheme = createTheme$1(options);
      let muiTheme = deepmerge(systemTheme, {
        mixins: createMixins(systemTheme.breakpoints, mixinsInput),
        palette,
        // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
        shadows: shadows$1.slice(),
        typography: createTypography(palette, typographyInput),
        transitions: createTransitions(transitionsInput),
        zIndex: _extends$1({}, zIndex$1)
      });
      muiTheme = deepmerge(muiTheme, other);
      muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
      muiTheme.unstable_sxConfig = _extends$1({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
      muiTheme.unstable_sx = function sx(props) {
        return styleFunctionSx$1({
          sx: props,
          theme: this
        });
      };
      return muiTheme;
    }
    const defaultTheme = createTheme();
    const defaultTheme$1 = defaultTheme;
    function useTheme() {
      const theme = useTheme$2(defaultTheme$1);
      return theme[THEME_ID] || theme;
    }
    function useThemeProps({
      props,
      name
    }) {
      return useThemeProps$1({
        props,
        name,
        defaultTheme: defaultTheme$1,
        themeId: THEME_ID
      });
    }
    const rootShouldForwardProp = (prop) => shouldForwardProp(prop) && prop !== "classes";
    const slotShouldForwardProp = shouldForwardProp;
    const styled = createStyled({
      themeId: THEME_ID,
      defaultTheme: defaultTheme$1,
      rootShouldForwardProp
    });
    const styled$1 = styled;
    const _excluded$1L = ["theme"];
    function ThemeProvider(_ref) {
      let {
        theme: themeInput
      } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded$1L);
      const scopedTheme = themeInput[THEME_ID];
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider$1, _extends$1({}, props, {
        themeId: scopedTheme ? THEME_ID : void 0,
        theme: scopedTheme || themeInput
      }));
    }
    const getOverlayAlpha = (elevation) => {
      let alphaValue;
      if (elevation < 1) {
        alphaValue = 5.11916 * elevation ** 2;
      } else {
        alphaValue = 4.5 * Math.log(elevation + 1) + 2;
      }
      return (alphaValue / 100).toFixed(2);
    };
    const getOverlayAlpha$1 = getOverlayAlpha;
    function isHostComponent$1(element) {
      return typeof element === "string";
    }
    function appendOwnerState$1(elementType, otherProps, ownerState) {
      if (elementType === void 0 || isHostComponent$1(elementType)) {
        return otherProps;
      }
      return _extends$1({}, otherProps, {
        ownerState: _extends$1({}, otherProps.ownerState, ownerState)
      });
    }
    function areArraysEqual(array1, array2, itemComparer = (a, b2) => a === b2) {
      return array1.length === array2.length && array1.every((value2, index) => itemComparer(value2, array2[index]));
    }
    const defaultContextValue = {
      disableDefaultClasses: false
    };
    const ClassNameConfiguratorContext = /* @__PURE__ */ reactExports.createContext(defaultContextValue);
    function useClassNamesOverride(generateUtilityClass2) {
      const {
        disableDefaultClasses
      } = reactExports.useContext(ClassNameConfiguratorContext);
      return (slot) => {
        if (disableDefaultClasses) {
          return "";
        }
        return generateUtilityClass2(slot);
      };
    }
    function extractEventHandlers$1(object, excludeKeys = []) {
      if (object === void 0) {
        return {};
      }
      const result = {};
      Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
        result[prop] = object[prop];
      });
      return result;
    }
    function resolveComponentProps$1(componentProps, ownerState) {
      if (typeof componentProps === "function") {
        return componentProps(ownerState);
      }
      return componentProps;
    }
    function omitEventHandlers$1(object) {
      if (object === void 0) {
        return {};
      }
      const result = {};
      Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
        result[prop] = object[prop];
      });
      return result;
    }
    function mergeSlotProps$1(parameters) {
      const {
        getSlotProps,
        additionalProps,
        externalSlotProps,
        externalForwardedProps,
        className
      } = parameters;
      if (!getSlotProps) {
        const joinedClasses2 = clsx(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);
        const mergedStyle2 = _extends$1({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
        const props2 = _extends$1({}, additionalProps, externalForwardedProps, externalSlotProps);
        if (joinedClasses2.length > 0) {
          props2.className = joinedClasses2;
        }
        if (Object.keys(mergedStyle2).length > 0) {
          props2.style = mergedStyle2;
        }
        return {
          props: props2,
          internalRef: void 0
        };
      }
      const eventHandlers = extractEventHandlers$1(_extends$1({}, externalForwardedProps, externalSlotProps));
      const componentsPropsWithoutEventHandlers = omitEventHandlers$1(externalSlotProps);
      const otherPropsWithoutEventHandlers = omitEventHandlers$1(externalForwardedProps);
      const internalSlotProps = getSlotProps(eventHandlers);
      const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
      const mergedStyle = _extends$1({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
      const props = _extends$1({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
      if (joinedClasses.length > 0) {
        props.className = joinedClasses;
      }
      if (Object.keys(mergedStyle).length > 0) {
        props.style = mergedStyle;
      }
      return {
        props,
        internalRef: internalSlotProps.ref
      };
    }
    const _excluded$1K = ["elementType", "externalSlotProps", "ownerState"];
    function useSlotProps$1(parameters) {
      var _parameters$additiona;
      const {
        elementType,
        externalSlotProps,
        ownerState
      } = parameters, rest = _objectWithoutPropertiesLoose(parameters, _excluded$1K);
      const resolvedComponentsProps = resolveComponentProps$1(externalSlotProps, ownerState);
      const {
        props: mergedProps,
        internalRef
      } = mergeSlotProps$1(_extends$1({}, rest, {
        externalSlotProps: resolvedComponentsProps
      }));
      const ref = useForkRef$2(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
      const props = appendOwnerState$1(elementType, _extends$1({}, mergedProps, {
        ref
      }), ownerState);
      return props;
    }
    const candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
    function getTabIndex(node2) {
      const tabindexAttr = parseInt(node2.getAttribute("tabindex") || "", 10);
      if (!Number.isNaN(tabindexAttr)) {
        return tabindexAttr;
      }
      if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
        return 0;
      }
      return node2.tabIndex;
    }
    function isNonTabbableRadio(node2) {
      if (node2.tagName !== "INPUT" || node2.type !== "radio") {
        return false;
      }
      if (!node2.name) {
        return false;
      }
      const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
      let roving = getRadio(`[name="${node2.name}"]:checked`);
      if (!roving) {
        roving = getRadio(`[name="${node2.name}"]`);
      }
      return roving !== node2;
    }
    function isNodeMatchingSelectorFocusable(node2) {
      if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
        return false;
      }
      return true;
    }
    function defaultGetTabbable(root2) {
      const regularTabNodes = [];
      const orderedTabNodes = [];
      Array.from(root2.querySelectorAll(candidatesSelector)).forEach((node2, i) => {
        const nodeTabIndex = getTabIndex(node2);
        if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
          return;
        }
        if (nodeTabIndex === 0) {
          regularTabNodes.push(node2);
        } else {
          orderedTabNodes.push({
            documentOrder: i,
            tabIndex: nodeTabIndex,
            node: node2
          });
        }
      });
      return orderedTabNodes.sort((a, b2) => a.tabIndex === b2.tabIndex ? a.documentOrder - b2.documentOrder : a.tabIndex - b2.tabIndex).map((a) => a.node).concat(regularTabNodes);
    }
    function defaultIsEnabled() {
      return true;
    }
    function FocusTrap(props) {
      const {
        children,
        disableAutoFocus = false,
        disableEnforceFocus = false,
        disableRestoreFocus = false,
        getTabbable = defaultGetTabbable,
        isEnabled = defaultIsEnabled,
        open
      } = props;
      const ignoreNextEnforceFocus = reactExports.useRef(false);
      const sentinelStart = reactExports.useRef(null);
      const sentinelEnd = reactExports.useRef(null);
      const nodeToRestore = reactExports.useRef(null);
      const reactFocusEventTarget = reactExports.useRef(null);
      const activated = reactExports.useRef(false);
      const rootRef = reactExports.useRef(null);
      const handleRef = useForkRef$2(children.ref, rootRef);
      const lastKeydown = reactExports.useRef(null);
      reactExports.useEffect(() => {
        if (!open || !rootRef.current) {
          return;
        }
        activated.current = !disableAutoFocus;
      }, [disableAutoFocus, open]);
      reactExports.useEffect(() => {
        if (!open || !rootRef.current) {
          return;
        }
        const doc = ownerDocument(rootRef.current);
        if (!rootRef.current.contains(doc.activeElement)) {
          if (!rootRef.current.hasAttribute("tabIndex")) {
            rootRef.current.setAttribute("tabIndex", "-1");
          }
          if (activated.current) {
            rootRef.current.focus();
          }
        }
        return () => {
          if (!disableRestoreFocus) {
            if (nodeToRestore.current && nodeToRestore.current.focus) {
              ignoreNextEnforceFocus.current = true;
              nodeToRestore.current.focus();
            }
            nodeToRestore.current = null;
          }
        };
      }, [open]);
      reactExports.useEffect(() => {
        if (!open || !rootRef.current) {
          return;
        }
        const doc = ownerDocument(rootRef.current);
        const contain = (nativeEvent) => {
          const {
            current: rootElement2
          } = rootRef;
          if (rootElement2 === null) {
            return;
          }
          if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
            ignoreNextEnforceFocus.current = false;
            return;
          }
          if (!rootElement2.contains(doc.activeElement)) {
            if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
              reactFocusEventTarget.current = null;
            } else if (reactFocusEventTarget.current !== null) {
              return;
            }
            if (!activated.current) {
              return;
            }
            let tabbable = [];
            if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
              tabbable = getTabbable(rootRef.current);
            }
            if (tabbable.length > 0) {
              var _lastKeydown$current, _lastKeydown$current2;
              const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
              const focusNext = tabbable[0];
              const focusPrevious = tabbable[tabbable.length - 1];
              if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
                if (isShiftTab) {
                  focusPrevious.focus();
                } else {
                  focusNext.focus();
                }
              }
            } else {
              rootElement2.focus();
            }
          }
        };
        const loopFocus = (nativeEvent) => {
          lastKeydown.current = nativeEvent;
          if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
            return;
          }
          if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
            ignoreNextEnforceFocus.current = true;
            if (sentinelEnd.current) {
              sentinelEnd.current.focus();
            }
          }
        };
        doc.addEventListener("focusin", contain);
        doc.addEventListener("keydown", loopFocus, true);
        const interval = setInterval(() => {
          if (doc.activeElement && doc.activeElement.tagName === "BODY") {
            contain(null);
          }
        }, 50);
        return () => {
          clearInterval(interval);
          doc.removeEventListener("focusin", contain);
          doc.removeEventListener("keydown", loopFocus, true);
        };
      }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
      const onFocus = (event) => {
        if (nodeToRestore.current === null) {
          nodeToRestore.current = event.relatedTarget;
        }
        activated.current = true;
        reactFocusEventTarget.current = event.target;
        const childrenPropsHandler = children.props.onFocus;
        if (childrenPropsHandler) {
          childrenPropsHandler(event);
        }
      };
      const handleFocusSentinel = (event) => {
        if (nodeToRestore.current === null) {
          nodeToRestore.current = event.relatedTarget;
        }
        activated.current = true;
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx("div", {
          tabIndex: open ? 0 : -1,
          onFocus: handleFocusSentinel,
          ref: sentinelStart,
          "data-testid": "sentinelStart"
        }), /* @__PURE__ */ reactExports.cloneElement(children, {
          ref: handleRef,
          onFocus
        }), /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
          tabIndex: open ? 0 : -1,
          onFocus: handleFocusSentinel,
          ref: sentinelEnd,
          "data-testid": "sentinelEnd"
        })]
      });
    }
    var top = "top";
    var bottom = "bottom";
    var right = "right";
    var left = "left";
    var auto = "auto";
    var basePlacements = [top, bottom, right, left];
    var start = "start";
    var end = "end";
    var clippingParents = "clippingParents";
    var viewport = "viewport";
    var popper = "popper";
    var reference = "reference";
    var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
      return acc.concat([placement + "-" + start, placement + "-" + end]);
    }, []);
    var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
      return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
    }, []);
    var beforeRead = "beforeRead";
    var read = "read";
    var afterRead = "afterRead";
    var beforeMain = "beforeMain";
    var main = "main";
    var afterMain = "afterMain";
    var beforeWrite = "beforeWrite";
    var write = "write";
    var afterWrite = "afterWrite";
    var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
    function getNodeName(element) {
      return element ? (element.nodeName || "").toLowerCase() : null;
    }
    function getWindow(node2) {
      if (node2 == null) {
        return window;
      }
      if (node2.toString() !== "[object Window]") {
        var ownerDocument2 = node2.ownerDocument;
        return ownerDocument2 ? ownerDocument2.defaultView || window : window;
      }
      return node2;
    }
    function isElement(node2) {
      var OwnElement = getWindow(node2).Element;
      return node2 instanceof OwnElement || node2 instanceof Element;
    }
    function isHTMLElement$1(node2) {
      var OwnElement = getWindow(node2).HTMLElement;
      return node2 instanceof OwnElement || node2 instanceof HTMLElement;
    }
    function isShadowRoot(node2) {
      if (typeof ShadowRoot === "undefined") {
        return false;
      }
      var OwnElement = getWindow(node2).ShadowRoot;
      return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
    }
    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function(name) {
        var style2 = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name];
        if (!isHTMLElement$1(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style2);
        Object.keys(attributes).forEach(function(name2) {
          var value2 = attributes[name2];
          if (value2 === false) {
            element.removeAttribute(name2);
          } else {
            element.setAttribute(name2, value2 === true ? "" : value2);
          }
        });
      });
    }
    function effect$2(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: "0",
          top: "0",
          margin: "0"
        },
        arrow: {
          position: "absolute"
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;
      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }
      return function() {
        Object.keys(state.elements).forEach(function(name) {
          var element = state.elements[name];
          var attributes = state.attributes[name] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
          var style2 = styleProperties.reduce(function(style3, property2) {
            style3[property2] = "";
            return style3;
          }, {});
          if (!isHTMLElement$1(element) || !getNodeName(element)) {
            return;
          }
          Object.assign(element.style, style2);
          Object.keys(attributes).forEach(function(attribute) {
            element.removeAttribute(attribute);
          });
        });
      };
    }
    const applyStyles$1 = {
      name: "applyStyles",
      enabled: true,
      phase: "write",
      fn: applyStyles,
      effect: effect$2,
      requires: ["computeStyles"]
    };
    function getBasePlacement(placement) {
      return placement.split("-")[0];
    }
    var max$1 = Math.max;
    var min$1 = Math.min;
    var round$1 = Math.round;
    function getUAString() {
      var uaData = navigator.userAgentData;
      if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
        return uaData.brands.map(function(item) {
          return item.brand + "/" + item.version;
        }).join(" ");
      }
      return navigator.userAgent;
    }
    function isLayoutViewport() {
      return !/^((?!chrome|android).)*safari/i.test(getUAString());
    }
    function getBoundingClientRect(element, includeScale, isFixedStrategy) {
      if (includeScale === void 0) {
        includeScale = false;
      }
      if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
      }
      var clientRect = element.getBoundingClientRect();
      var scaleX = 1;
      var scaleY = 1;
      if (includeScale && isHTMLElement$1(element)) {
        scaleX = element.offsetWidth > 0 ? round$1(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? round$1(clientRect.height) / element.offsetHeight || 1 : 1;
      }
      var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
      var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
      var x2 = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
      var y2 = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
      var width2 = clientRect.width / scaleX;
      var height2 = clientRect.height / scaleY;
      return {
        width: width2,
        height: height2,
        top: y2,
        right: x2 + width2,
        bottom: y2 + height2,
        left: x2,
        x: x2,
        y: y2
      };
    }
    function getLayoutRect(element) {
      var clientRect = getBoundingClientRect(element);
      var width2 = element.offsetWidth;
      var height2 = element.offsetHeight;
      if (Math.abs(clientRect.width - width2) <= 1) {
        width2 = clientRect.width;
      }
      if (Math.abs(clientRect.height - height2) <= 1) {
        height2 = clientRect.height;
      }
      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width2,
        height: height2
      };
    }
    function contains(parent2, child) {
      var rootNode = child.getRootNode && child.getRootNode();
      if (parent2.contains(child)) {
        return true;
      } else if (rootNode && isShadowRoot(rootNode)) {
        var next2 = child;
        do {
          if (next2 && parent2.isSameNode(next2)) {
            return true;
          }
          next2 = next2.parentNode || next2.host;
        } while (next2);
      }
      return false;
    }
    function getComputedStyle(element) {
      return getWindow(element).getComputedStyle(element);
    }
    function isTableElement(element) {
      return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
    }
    function getDocumentElement(element) {
      return ((isElement(element) ? element.ownerDocument : (
        // $FlowFixMe[prop-missing]
        element.document
      )) || window.document).documentElement;
    }
    function getParentNode(element) {
      if (getNodeName(element) === "html") {
        return element;
      }
      return (
        // this is a quicker (but less type safe) way to save quite some bytes from the bundle
        // $FlowFixMe[incompatible-return]
        // $FlowFixMe[prop-missing]
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || // DOM Element detected
        (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement(element)
      );
    }
    function getTrueOffsetParent(element) {
      if (!isHTMLElement$1(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle(element).position === "fixed") {
        return null;
      }
      return element.offsetParent;
    }
    function getContainingBlock(element) {
      var isFirefox = /firefox/i.test(getUAString());
      var isIE = /Trident/i.test(getUAString());
      if (isIE && isHTMLElement$1(element)) {
        var elementCss = getComputedStyle(element);
        if (elementCss.position === "fixed") {
          return null;
        }
      }
      var currentNode = getParentNode(element);
      if (isShadowRoot(currentNode)) {
        currentNode = currentNode.host;
      }
      while (isHTMLElement$1(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
        var css2 = getComputedStyle(currentNode);
        if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }
      return null;
    }
    function getOffsetParent(element) {
      var window2 = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);
      while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
        offsetParent = getTrueOffsetParent(offsetParent);
      }
      if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
        return window2;
      }
      return offsetParent || getContainingBlock(element) || window2;
    }
    function getMainAxisFromPlacement(placement) {
      return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
    }
    function within(min2, value2, max2) {
      return max$1(min2, min$1(value2, max2));
    }
    function withinMaxClamp(min2, value2, max2) {
      var v2 = within(min2, value2, max2);
      return v2 > max2 ? max2 : v2;
    }
    function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
    function mergePaddingObject(paddingObject) {
      return Object.assign({}, getFreshSideObject(), paddingObject);
    }
    function expandToHashMap(value2, keys2) {
      return keys2.reduce(function(hashMap, key) {
        hashMap[key] = value2;
        return hashMap;
      }, {});
    }
    var toPaddingObject = function toPaddingObject2(padding2, state) {
      padding2 = typeof padding2 === "function" ? padding2(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding2;
      return mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
    };
    function arrow(_ref) {
      var _state$modifiersData$;
      var state = _ref.state, name = _ref.name, options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets2 = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement(state.placement);
      var axis = getMainAxisFromPlacement(basePlacement);
      var isVertical = [left, right].indexOf(basePlacement) >= 0;
      var len = isVertical ? "height" : "width";
      if (!arrowElement || !popperOffsets2) {
        return;
      }
      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === "y" ? top : left;
      var maxProp = axis === "y" ? bottom : right;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
      var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent(arrowElement);
      var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2;
      var min2 = paddingObject[minProp];
      var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset2 = within(min2, center, max2);
      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
    }
    function effect$1(_ref2) {
      var state = _ref2.state, options = _ref2.options;
      var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
      if (arrowElement == null) {
        return;
      }
      if (typeof arrowElement === "string") {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) {
          return;
        }
      }
      if (!contains(state.elements.popper, arrowElement)) {
        return;
      }
      state.elements.arrow = arrowElement;
    }
    const arrow$1 = {
      name: "arrow",
      enabled: true,
      phase: "main",
      fn: arrow,
      effect: effect$1,
      requires: ["popperOffsets"],
      requiresIfExists: ["preventOverflow"]
    };
    function getVariation(placement) {
      return placement.split("-")[1];
    }
    var unsetSides = {
      top: "auto",
      right: "auto",
      bottom: "auto",
      left: "auto"
    };
    function roundOffsetsByDPR(_ref, win) {
      var x2 = _ref.x, y2 = _ref.y;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: round$1(x2 * dpr) / dpr || 0,
        y: round$1(y2 * dpr) / dpr || 0
      };
    }
    function mapToStyles(_ref2) {
      var _Object$assign2;
      var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
      var _offsets$x = offsets.x, x2 = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y2 = _offsets$y === void 0 ? 0 : _offsets$y;
      var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
        x: x2,
        y: y2
      }) : {
        x: x2,
        y: y2
      };
      x2 = _ref3.x;
      y2 = _ref3.y;
      var hasX = offsets.hasOwnProperty("x");
      var hasY = offsets.hasOwnProperty("y");
      var sideX = left;
      var sideY = top;
      var win = window;
      if (adaptive) {
        var offsetParent = getOffsetParent(popper2);
        var heightProp = "clientHeight";
        var widthProp = "clientWidth";
        if (offsetParent === getWindow(popper2)) {
          offsetParent = getDocumentElement(popper2);
          if (getComputedStyle(offsetParent).position !== "static" && position2 === "absolute") {
            heightProp = "scrollHeight";
            widthProp = "scrollWidth";
          }
        }
        offsetParent = offsetParent;
        if (placement === top || (placement === left || placement === right) && variation === end) {
          sideY = bottom;
          var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
            // $FlowFixMe[prop-missing]
            offsetParent[heightProp]
          );
          y2 -= offsetY - popperRect.height;
          y2 *= gpuAcceleration ? 1 : -1;
        }
        if (placement === left || (placement === top || placement === bottom) && variation === end) {
          sideX = right;
          var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
            // $FlowFixMe[prop-missing]
            offsetParent[widthProp]
          );
          x2 -= offsetX - popperRect.width;
          x2 *= gpuAcceleration ? 1 : -1;
        }
      }
      var commonStyles = Object.assign({
        position: position2
      }, adaptive && unsetSides);
      var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x2,
        y: y2
      }, getWindow(popper2)) : {
        x: x2,
        y: y2
      };
      x2 = _ref4.x;
      y2 = _ref4.y;
      if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x2 + "px, " + y2 + "px)" : "translate3d(" + x2 + "px, " + y2 + "px, 0)", _Object$assign));
      }
      return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y2 + "px" : "", _Object$assign2[sideX] = hasX ? x2 + "px" : "", _Object$assign2.transform = "", _Object$assign2));
    }
    function computeStyles(_ref5) {
      var state = _ref5.state, options = _ref5.options;
      var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
      var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration,
        isFixed: state.options.strategy === "fixed"
      };
      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive,
          roundOffsets
        })));
      }
      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: "absolute",
          adaptive: false,
          roundOffsets
        })));
      }
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-placement": state.placement
      });
    }
    const computeStyles$1 = {
      name: "computeStyles",
      enabled: true,
      phase: "beforeWrite",
      fn: computeStyles,
      data: {}
    };
    var passive = {
      passive: true
    };
    function effect(_ref) {
      var state = _ref.state, instance = _ref.instance, options = _ref.options;
      var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
      var window2 = getWindow(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.addEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.addEventListener("resize", instance.update, passive);
      }
      return function() {
        if (scroll) {
          scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener("scroll", instance.update, passive);
          });
        }
        if (resize) {
          window2.removeEventListener("resize", instance.update, passive);
        }
      };
    }
    const eventListeners = {
      name: "eventListeners",
      enabled: true,
      phase: "write",
      fn: function fn() {
      },
      effect,
      data: {}
    };
    var hash$1 = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash$1[matched];
      });
    }
    var hash = {
      start: "end",
      end: "start"
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function(matched) {
        return hash[matched];
      });
    }
    function getWindowScroll(node2) {
      var win = getWindow(node2);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft,
        scrollTop
      };
    }
    function getWindowScrollBarX(element) {
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }
    function getViewportRect(element, strategy) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width2 = html.clientWidth;
      var height2 = html.clientHeight;
      var x2 = 0;
      var y2 = 0;
      if (visualViewport) {
        width2 = visualViewport.width;
        height2 = visualViewport.height;
        var layoutViewport = isLayoutViewport();
        if (layoutViewport || !layoutViewport && strategy === "fixed") {
          x2 = visualViewport.offsetLeft;
          y2 = visualViewport.offsetTop;
        }
      }
      return {
        width: width2,
        height: height2,
        x: x2 + getWindowScrollBarX(element),
        y: y2
      };
    }
    function getDocumentRect(element) {
      var _element$ownerDocumen;
      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width2 = max$1(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height2 = max$1(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x2 = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y2 = -winScroll.scrollTop;
      if (getComputedStyle(body || html).direction === "rtl") {
        x2 += max$1(html.clientWidth, body ? body.clientWidth : 0) - width2;
      }
      return {
        width: width2,
        height: height2,
        x: x2,
        y: y2
      };
    }
    function isScrollParent(element) {
      var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }
    function getScrollParent(node2) {
      if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
        return node2.ownerDocument.body;
      }
      if (isHTMLElement$1(node2) && isScrollParent(node2)) {
        return node2;
      }
      return getScrollParent(getParentNode(node2));
    }
    function listScrollParents(element, list) {
      var _element$ownerDocumen;
      if (list === void 0) {
        list = [];
      }
      var scrollParent = getScrollParent(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : (
        // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
        updatedList.concat(listScrollParents(getParentNode(target)))
      );
    }
    function rectToClientRect(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }
    function getInnerBoundingClientRect(element, strategy) {
      var rect = getBoundingClientRect(element, false, strategy === "fixed");
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }
    function getClientRectFromMixedType(element, clippingParent, strategy) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    }
    function getClippingParents(element) {
      var clippingParents2 = listScrollParents(getParentNode(element));
      var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement$1(element) ? getOffsetParent(element) : element;
      if (!isElement(clipperElement)) {
        return [];
      }
      return clippingParents2.filter(function(clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
      });
    }
    function getClippingRect(element, boundary, rootBoundary, strategy) {
      var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
      var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents2[0];
      var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent, strategy);
        accRect.top = max$1(rect.top, accRect.top);
        accRect.right = min$1(rect.right, accRect.right);
        accRect.bottom = min$1(rect.bottom, accRect.bottom);
        accRect.left = max$1(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent, strategy));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }
    function computeOffsets(_ref) {
      var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference2.x + reference2.width / 2 - element.width / 2;
      var commonY = reference2.y + reference2.height / 2 - element.height / 2;
      var offsets;
      switch (basePlacement) {
        case top:
          offsets = {
            x: commonX,
            y: reference2.y - element.height
          };
          break;
        case bottom:
          offsets = {
            x: commonX,
            y: reference2.y + reference2.height
          };
          break;
        case right:
          offsets = {
            x: reference2.x + reference2.width,
            y: commonY
          };
          break;
        case left:
          offsets = {
            x: reference2.x - element.width,
            y: commonY
          };
          break;
        default:
          offsets = {
            x: reference2.x,
            y: reference2.y
          };
      }
      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
      if (mainAxis != null) {
        var len = mainAxis === "y" ? "height" : "width";
        switch (variation) {
          case start:
            offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
            break;
          case end:
            offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
            break;
        }
      }
      return offsets;
    }
    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding2 = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
      var altContext = elementContext === popper ? reference : popper;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
      var referenceClientRect = getBoundingClientRect(state.elements.reference);
      var popperOffsets2 = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: "absolute",
        placement
      });
      var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
      var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset;
      if (elementContext === popper && offsetData) {
        var offset2 = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
          var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
          overflowOffsets[key] += offset2[axis] * multiply;
        });
      }
      return overflowOffsets;
    }
    function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding2 = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
        return getVariation(placement2) === variation;
      }) : basePlacements;
      var allowedPlacements = placements$1.filter(function(placement2) {
        return allowedAutoPlacements.indexOf(placement2) >= 0;
      });
      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;
      }
      var overflows = allowedPlacements.reduce(function(acc, placement2) {
        acc[placement2] = detectOverflow(state, {
          placement: placement2,
          boundary,
          rootBoundary,
          padding: padding2
        })[getBasePlacement(placement2)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function(a, b2) {
        return overflows[a] - overflows[b2];
      });
    }
    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement(placement) === auto) {
        return [];
      }
      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }
    function flip(_ref) {
      var state = _ref.state, options = _ref.options, name = _ref.name;
      if (state.modifiersData[name]._skip) {
        return;
      }
      var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding2 = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
        return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
          placement: placement2,
          boundary,
          rootBoundary,
          padding: padding2,
          flipVariations,
          allowedAutoPlacements
        }) : placement2);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = /* @__PURE__ */ new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements2[0];
      for (var i = 0; i < placements2.length; i++) {
        var placement = placements2[i];
        var _basePlacement = getBasePlacement(placement);
        var isStartVariation = getVariation(placement) === start;
        var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
        var len = isVertical ? "width" : "height";
        var overflow = detectOverflow(state, {
          placement,
          boundary,
          rootBoundary,
          altBoundary,
          padding: padding2
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
        if (referenceRect[len] > popperRect[len]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }
        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];
        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }
        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }
        if (checks.every(function(check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }
        checksMap.set(placement, checks);
      }
      if (makeFallbackChecks) {
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop2(_i2) {
          var fittingPlacement = placements2.find(function(placement2) {
            var checks2 = checksMap.get(placement2);
            if (checks2) {
              return checks2.slice(0, _i2).every(function(check) {
                return check;
              });
            }
          });
          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };
        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);
          if (_ret === "break")
            break;
        }
      }
      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    }
    const flip$1 = {
      name: "flip",
      enabled: true,
      phase: "main",
      fn: flip,
      requiresIfExists: ["offset"],
      data: {
        _skip: false
      }
    };
    function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) {
        preventedOffsets = {
          x: 0,
          y: 0
        };
      }
      return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
      };
    }
    function isAnySideFullyClipped(overflow) {
      return [top, right, bottom, left].some(function(side) {
        return overflow[side] >= 0;
      });
    }
    function hide(_ref) {
      var state = _ref.state, name = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = detectOverflow(state, {
        elementContext: "reference"
      });
      var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name] = {
        referenceClippingOffsets,
        popperEscapeOffsets,
        isReferenceHidden,
        hasPopperEscaped
      };
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-reference-hidden": isReferenceHidden,
        "data-popper-escaped": hasPopperEscaped
      });
    }
    const hide$1 = {
      name: "hide",
      enabled: true,
      phase: "main",
      requiresIfExists: ["preventOverflow"],
      fn: hide
    };
    function distanceAndSkiddingToXY(placement, rects, offset2) {
      var basePlacement = getBasePlacement(placement);
      var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
      var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
        placement
      })) : offset2, skidding = _ref[0], distance = _ref[1];
      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }
    function offset$1(_ref2) {
      var state = _ref2.state, options = _ref2.options, name = _ref2.name;
      var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement], x2 = _data$state$placement.x, y2 = _data$state$placement.y;
      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x2;
        state.modifiersData.popperOffsets.y += y2;
      }
      state.modifiersData[name] = data;
    }
    const offset$2 = {
      name: "offset",
      enabled: true,
      phase: "main",
      requires: ["popperOffsets"],
      fn: offset$1
    };
    function popperOffsets(_ref) {
      var state = _ref.state, name = _ref.name;
      state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: "absolute",
        placement: state.placement
      });
    }
    const popperOffsets$1 = {
      name: "popperOffsets",
      enabled: true,
      phase: "read",
      fn: popperOffsets,
      data: {}
    };
    function getAltAxis(axis) {
      return axis === "x" ? "y" : "x";
    }
    function preventOverflow(_ref) {
      var state = _ref.state, options = _ref.options, name = _ref.name;
      var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding2 = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow(state, {
        boundary,
        rootBoundary,
        padding: padding2,
        altBoundary
      });
      var basePlacement = getBasePlacement(state.placement);
      var variation = getVariation(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets2 = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
      })) : tetherOffset;
      var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
      } : Object.assign({
        mainAxis: 0,
        altAxis: 0
      }, tetherOffsetValue);
      var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
      var data = {
        x: 0,
        y: 0
      };
      if (!popperOffsets2) {
        return;
      }
      if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === "y" ? top : left;
        var altSide = mainAxis === "y" ? bottom : right;
        var len = mainAxis === "y" ? "height" : "width";
        var offset2 = popperOffsets2[mainAxis];
        var min2 = offset2 + overflow[mainSide];
        var max2 = offset2 - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide];
        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset2 + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? min$1(min2, tetherMin) : min2, offset2, tether ? max$1(max2, tetherMax) : max2);
        popperOffsets2[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset2;
      }
      if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === "x" ? top : left;
        var _altSide = mainAxis === "x" ? bottom : right;
        var _offset = popperOffsets2[altAxis];
        var _len = altAxis === "y" ? "height" : "width";
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets2[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }
      state.modifiersData[name] = data;
    }
    const preventOverflow$1 = {
      name: "preventOverflow",
      enabled: true,
      phase: "main",
      fn: preventOverflow,
      requiresIfExists: ["offset"]
    };
    function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    function getNodeScroll(node2) {
      if (node2 === getWindow(node2) || !isHTMLElement$1(node2)) {
        return getWindowScroll(node2);
      } else {
        return getHTMLElementScroll(node2);
      }
    }
    function isElementScaled(element) {
      var rect = element.getBoundingClientRect();
      var scaleX = round$1(rect.width) / element.offsetWidth || 1;
      var scaleY = round$1(rect.height) / element.offsetHeight || 1;
      return scaleX !== 1 || scaleY !== 1;
    }
    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }
      var isOffsetParentAnElement = isHTMLElement$1(offsetParent);
      var offsetParentIsScaled = isHTMLElement$1(offsetParent) && isElementScaled(offsetParent);
      var documentElement = getDocumentElement(offsetParent);
      var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };
      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }
        if (isHTMLElement$1(offsetParent)) {
          offsets = getBoundingClientRect(offsetParent, true);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }
      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }
    function order(modifiers) {
      var map2 = /* @__PURE__ */ new Map();
      var visited = /* @__PURE__ */ new Set();
      var result = [];
      modifiers.forEach(function(modifier) {
        map2.set(modifier.name, modifier);
      });
      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
          if (!visited.has(dep)) {
            var depModifier = map2.get(dep);
            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }
      modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) {
          sort(modifier);
        }
      });
      return result;
    }
    function orderModifiers(modifiers) {
      var orderedModifiers = order(modifiers);
      return modifierPhases.reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }
    function debounce$3(fn) {
      var pending;
      return function() {
        if (!pending) {
          pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
              pending = void 0;
              resolve(fn());
            });
          });
        }
        return pending;
      };
    }
    function mergeByName(modifiers) {
      var merged = modifiers.reduce(function(merged2, current) {
        var existing = merged2[current.name];
        merged2[current.name] = existing ? Object.assign({}, existing, current, {
          options: Object.assign({}, existing.options, current.options),
          data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged2;
      }, {});
      return Object.keys(merged).map(function(key) {
        return merged[key];
      });
    }
    var DEFAULT_OPTIONS$1 = {
      placement: "bottom",
      modifiers: [],
      strategy: "absolute"
    };
    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === "function");
      });
    }
    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }
      var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS$1 : _generatorOptions$def2;
      return function createPopper2(reference2, popper2, options) {
        if (options === void 0) {
          options = defaultOptions;
        }
        var state = {
          placement: "bottom",
          orderedModifiers: [],
          options: Object.assign({}, DEFAULT_OPTIONS$1, defaultOptions),
          modifiersData: {},
          elements: {
            reference: reference2,
            popper: popper2
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state,
          setOptions: function setOptions(setOptionsAction) {
            var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
            cleanupModifierEffects();
            state.options = Object.assign({}, defaultOptions, state.options, options2);
            state.scrollParents = {
              reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
              popper: listScrollParents(popper2)
            };
            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
            state.orderedModifiers = orderedModifiers.filter(function(m2) {
              return m2.enabled;
            });
            runModifierEffects();
            return instance.update();
          },
          // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }
            var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
            if (!areValidElements(reference3, popper3)) {
              return;
            }
            state.rects = {
              reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
              popper: getLayoutRect(popper3)
            };
            state.reset = false;
            state.placement = state.options.placement;
            state.orderedModifiers.forEach(function(modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });
            for (var index = 0; index < state.orderedModifiers.length; index++) {
              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }
              var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
              if (typeof fn === "function") {
                state = fn({
                  state,
                  options: _options,
                  name,
                  instance
                }) || state;
              }
            }
          },
          // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: debounce$3(function() {
            return new Promise(function(resolve) {
              instance.forceUpdate();
              resolve(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };
        if (!areValidElements(reference2, popper2)) {
          return instance;
        }
        instance.setOptions(options).then(function(state2) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state2);
          }
        });
        function runModifierEffects() {
          state.orderedModifiers.forEach(function(_ref3) {
            var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect2 = _ref3.effect;
            if (typeof effect2 === "function") {
              var cleanupFn = effect2({
                state,
                name,
                instance,
                options: options2
              });
              var noopFn = function noopFn2() {
              };
              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }
        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function(fn) {
            return fn();
          });
          effectCleanupFns = [];
        }
        return instance;
      };
    }
    var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$2, flip$1, preventOverflow$1, arrow$1, hide$1];
    var createPopper = /* @__PURE__ */ popperGenerator({
      defaultModifiers
    });
    function getContainer$1(container) {
      return typeof container === "function" ? container() : container;
    }
    const Portal = /* @__PURE__ */ reactExports.forwardRef(function Portal2(props, forwardedRef) {
      const {
        children,
        container,
        disablePortal = false
      } = props;
      const [mountNode, setMountNode] = reactExports.useState(null);
      const handleRef = useForkRef$2(/* @__PURE__ */ reactExports.isValidElement(children) ? children.ref : null, forwardedRef);
      useEnhancedEffect$3(() => {
        if (!disablePortal) {
          setMountNode(getContainer$1(container) || document.body);
        }
      }, [container, disablePortal]);
      useEnhancedEffect$3(() => {
        if (mountNode && !disablePortal) {
          setRef$1(forwardedRef, mountNode);
          return () => {
            setRef$1(forwardedRef, null);
          };
        }
        return void 0;
      }, [forwardedRef, mountNode, disablePortal]);
      if (disablePortal) {
        if (/* @__PURE__ */ reactExports.isValidElement(children)) {
          const newProps = {
            ref: handleRef
          };
          return /* @__PURE__ */ reactExports.cloneElement(children, newProps);
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Fragment, {
          children
        });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Fragment, {
        children: mountNode ? /* @__PURE__ */ reactDomExports.createPortal(children, mountNode) : mountNode
      });
    });
    const Portal$1 = Portal;
    function getPopperUtilityClass(slot) {
      return generateUtilityClass("MuiPopper", slot);
    }
    generateUtilityClasses("MuiPopper", ["root"]);
    const _excluded$1J = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps", "ownerState"], _excluded2$a = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition", "slotProps", "slots"];
    function flipPlacement(placement, direction) {
      if (direction === "ltr") {
        return placement;
      }
      switch (placement) {
        case "bottom-end":
          return "bottom-start";
        case "bottom-start":
          return "bottom-end";
        case "top-end":
          return "top-start";
        case "top-start":
          return "top-end";
        default:
          return placement;
      }
    }
    function resolveAnchorEl$1(anchorEl) {
      return typeof anchorEl === "function" ? anchorEl() : anchorEl;
    }
    function isHTMLElement(element) {
      return element.nodeType !== void 0;
    }
    const useUtilityClasses$1d = () => {
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, useClassNamesOverride(getPopperUtilityClass));
    };
    const defaultPopperOptions = {};
    const PopperTooltip = /* @__PURE__ */ reactExports.forwardRef(function PopperTooltip2(props, forwardedRef) {
      var _slots$root;
      const {
        anchorEl,
        children,
        direction,
        disablePortal,
        modifiers,
        open,
        placement: initialPlacement,
        popperOptions,
        popperRef: popperRefProp,
        slotProps = {},
        slots = {},
        TransitionProps
        // @ts-ignore internal logic
        // prevent from spreading to DOM, it can come from the parent component e.g. Select.
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1J);
      const tooltipRef = reactExports.useRef(null);
      const ownRef = useForkRef$2(tooltipRef, forwardedRef);
      const popperRef = reactExports.useRef(null);
      const handlePopperRef = useForkRef$2(popperRef, popperRefProp);
      const handlePopperRefRef = reactExports.useRef(handlePopperRef);
      useEnhancedEffect$3(() => {
        handlePopperRefRef.current = handlePopperRef;
      }, [handlePopperRef]);
      reactExports.useImperativeHandle(popperRefProp, () => popperRef.current, []);
      const rtlPlacement = flipPlacement(initialPlacement, direction);
      const [placement, setPlacement] = reactExports.useState(rtlPlacement);
      const [resolvedAnchorElement, setResolvedAnchorElement] = reactExports.useState(resolveAnchorEl$1(anchorEl));
      reactExports.useEffect(() => {
        if (popperRef.current) {
          popperRef.current.forceUpdate();
        }
      });
      reactExports.useEffect(() => {
        if (anchorEl) {
          setResolvedAnchorElement(resolveAnchorEl$1(anchorEl));
        }
      }, [anchorEl]);
      useEnhancedEffect$3(() => {
        if (!resolvedAnchorElement || !open) {
          return void 0;
        }
        const handlePopperUpdate = (data) => {
          setPlacement(data.placement);
        };
        let popperModifiers = [{
          name: "preventOverflow",
          options: {
            altBoundary: disablePortal
          }
        }, {
          name: "flip",
          options: {
            altBoundary: disablePortal
          }
        }, {
          name: "onUpdate",
          enabled: true,
          phase: "afterWrite",
          fn: ({
            state
          }) => {
            handlePopperUpdate(state);
          }
        }];
        if (modifiers != null) {
          popperModifiers = popperModifiers.concat(modifiers);
        }
        if (popperOptions && popperOptions.modifiers != null) {
          popperModifiers = popperModifiers.concat(popperOptions.modifiers);
        }
        const popper2 = createPopper(resolvedAnchorElement, tooltipRef.current, _extends$1({
          placement: rtlPlacement
        }, popperOptions, {
          modifiers: popperModifiers
        }));
        handlePopperRefRef.current(popper2);
        return () => {
          popper2.destroy();
          handlePopperRefRef.current(null);
        };
      }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
      const childProps = {
        placement
      };
      if (TransitionProps !== null) {
        childProps.TransitionProps = TransitionProps;
      }
      const classes = useUtilityClasses$1d();
      const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
      const rootProps = useSlotProps$1({
        elementType: Root,
        externalSlotProps: slotProps.root,
        externalForwardedProps: other,
        additionalProps: {
          role: "tooltip",
          ref: ownRef
        },
        ownerState: props,
        className: classes.root
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends$1({}, rootProps, {
        children: typeof children === "function" ? children(childProps) : children
      }));
    });
    const Popper$2 = /* @__PURE__ */ reactExports.forwardRef(function Popper2(props, forwardedRef) {
      const {
        anchorEl,
        children,
        container: containerProp,
        direction = "ltr",
        disablePortal = false,
        keepMounted = false,
        modifiers,
        open,
        placement = "bottom",
        popperOptions = defaultPopperOptions,
        popperRef,
        style: style2,
        transition = false,
        slotProps = {},
        slots = {}
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded2$a);
      const [exited, setExited] = reactExports.useState(true);
      const handleEnter = () => {
        setExited(false);
      };
      const handleExited = () => {
        setExited(true);
      };
      if (!keepMounted && !open && (!transition || exited)) {
        return null;
      }
      let container;
      if (containerProp) {
        container = containerProp;
      } else if (anchorEl) {
        const resolvedAnchorEl = resolveAnchorEl$1(anchorEl);
        container = resolvedAnchorEl && isHTMLElement(resolvedAnchorEl) ? ownerDocument(resolvedAnchorEl).body : ownerDocument(null).body;
      }
      const display = !open && keepMounted && (!transition || exited) ? "none" : void 0;
      const transitionProps = transition ? {
        in: open,
        onEnter: handleEnter,
        onExited: handleExited
      } : void 0;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal$1, {
        disablePortal,
        container,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(PopperTooltip, _extends$1({
          anchorEl,
          direction,
          disablePortal,
          modifiers,
          ref: forwardedRef,
          open: transition ? !exited : open,
          placement,
          popperOptions,
          popperRef,
          slotProps,
          slots
        }, other, {
          style: _extends$1({
            // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
            position: "fixed",
            // Fix Popper.js display issue
            top: 0,
            left: 0,
            display
          }, style2),
          TransitionProps: transitionProps,
          children
        }))
      });
    });
    const BasePopper = Popper$2;
    function isOverflowing(container) {
      const doc = ownerDocument(container);
      if (doc.body === container) {
        return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
      }
      return container.scrollHeight > container.clientHeight;
    }
    function ariaHidden(element, show) {
      if (show) {
        element.setAttribute("aria-hidden", "true");
      } else {
        element.removeAttribute("aria-hidden");
      }
    }
    function getPaddingRight(element) {
      return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
    }
    function isAriaHiddenForbiddenOnElement(element) {
      const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
      const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
      const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
      return isForbiddenTagName || isInputHidden;
    }
    function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
      const blacklist = [mountElement, currentElement, ...elementsToExclude];
      [].forEach.call(container.children, (element) => {
        const isNotExcludedElement = blacklist.indexOf(element) === -1;
        const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
        if (isNotExcludedElement && isNotForbiddenElement) {
          ariaHidden(element, show);
        }
      });
    }
    function findIndexOf(items, callback) {
      let idx = -1;
      items.some((item, index) => {
        if (callback(item)) {
          idx = index;
          return true;
        }
        return false;
      });
      return idx;
    }
    function handleContainer(containerInfo, props) {
      const restoreStyle = [];
      const container = containerInfo.container;
      if (!props.disableScrollLock) {
        if (isOverflowing(container)) {
          const scrollbarSize = getScrollbarSize(ownerDocument(container));
          restoreStyle.push({
            value: container.style.paddingRight,
            property: "padding-right",
            el: container
          });
          container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
          const fixedElements2 = ownerDocument(container).querySelectorAll(".mui-fixed");
          [].forEach.call(fixedElements2, (element) => {
            restoreStyle.push({
              value: element.style.paddingRight,
              property: "padding-right",
              el: element
            });
            element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
          });
        }
        let scrollContainer;
        if (container.parentNode instanceof DocumentFragment) {
          scrollContainer = ownerDocument(container).body;
        } else {
          const parent2 = container.parentElement;
          const containerWindow = ownerWindow(container);
          scrollContainer = (parent2 == null ? void 0 : parent2.nodeName) === "HTML" && containerWindow.getComputedStyle(parent2).overflowY === "scroll" ? parent2 : container;
        }
        restoreStyle.push({
          value: scrollContainer.style.overflow,
          property: "overflow",
          el: scrollContainer
        }, {
          value: scrollContainer.style.overflowX,
          property: "overflow-x",
          el: scrollContainer
        }, {
          value: scrollContainer.style.overflowY,
          property: "overflow-y",
          el: scrollContainer
        });
        scrollContainer.style.overflow = "hidden";
      }
      const restore = () => {
        restoreStyle.forEach(({
          value: value2,
          el,
          property: property2
        }) => {
          if (value2) {
            el.style.setProperty(property2, value2);
          } else {
            el.style.removeProperty(property2);
          }
        });
      };
      return restore;
    }
    function getHiddenSiblings(container) {
      const hiddenSiblings = [];
      [].forEach.call(container.children, (element) => {
        if (element.getAttribute("aria-hidden") === "true") {
          hiddenSiblings.push(element);
        }
      });
      return hiddenSiblings;
    }
    class ModalManager {
      constructor() {
        this.containers = void 0;
        this.modals = void 0;
        this.modals = [];
        this.containers = [];
      }
      add(modal, container) {
        let modalIndex = this.modals.indexOf(modal);
        if (modalIndex !== -1) {
          return modalIndex;
        }
        modalIndex = this.modals.length;
        this.modals.push(modal);
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, false);
        }
        const hiddenSiblings = getHiddenSiblings(container);
        ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
        const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
        if (containerIndex !== -1) {
          this.containers[containerIndex].modals.push(modal);
          return modalIndex;
        }
        this.containers.push({
          modals: [modal],
          container,
          restore: null,
          hiddenSiblings
        });
        return modalIndex;
      }
      mount(modal, props) {
        const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
        const containerInfo = this.containers[containerIndex];
        if (!containerInfo.restore) {
          containerInfo.restore = handleContainer(containerInfo, props);
        }
      }
      remove(modal, ariaHiddenState = true) {
        const modalIndex = this.modals.indexOf(modal);
        if (modalIndex === -1) {
          return modalIndex;
        }
        const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
        const containerInfo = this.containers[containerIndex];
        containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
        this.modals.splice(modalIndex, 1);
        if (containerInfo.modals.length === 0) {
          if (containerInfo.restore) {
            containerInfo.restore();
          }
          if (modal.modalRef) {
            ariaHidden(modal.modalRef, ariaHiddenState);
          }
          ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
          this.containers.splice(containerIndex, 1);
        } else {
          const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
          if (nextTop.modalRef) {
            ariaHidden(nextTop.modalRef, false);
          }
        }
        return modalIndex;
      }
      isTopModal(modal) {
        return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
      }
    }
    function getModalUtilityClass(slot) {
      return generateUtilityClass("MuiModal", slot);
    }
    generateUtilityClasses("MuiModal", ["root", "hidden", "backdrop"]);
    const _excluded$1I = ["children", "closeAfterTransition", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots"];
    const useUtilityClasses$1c = (ownerState) => {
      const {
        open,
        exited
      } = ownerState;
      const slots = {
        root: ["root", !open && exited && "hidden"],
        backdrop: ["backdrop"]
      };
      return composeClasses(slots, useClassNamesOverride(getModalUtilityClass));
    };
    function getContainer(container) {
      return typeof container === "function" ? container() : container;
    }
    function getHasTransition(children) {
      return children ? children.props.hasOwnProperty("in") : false;
    }
    const defaultManager = new ModalManager();
    const Modal$2 = /* @__PURE__ */ reactExports.forwardRef(function Modal2(props, forwardedRef) {
      var _props$ariaHidden, _slots$root;
      const {
        children,
        closeAfterTransition = false,
        container,
        disableAutoFocus = false,
        disableEnforceFocus = false,
        disableEscapeKeyDown = false,
        disablePortal = false,
        disableRestoreFocus = false,
        disableScrollLock = false,
        hideBackdrop = false,
        keepMounted = false,
        // private
        manager: managerProp = defaultManager,
        onBackdropClick,
        onClose,
        onKeyDown,
        open,
        onTransitionEnter,
        onTransitionExited,
        slotProps = {},
        slots = {}
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1I);
      const manager = managerProp;
      const [exited, setExited] = reactExports.useState(!open);
      const modal = reactExports.useRef({});
      const mountNodeRef = reactExports.useRef(null);
      const modalRef = reactExports.useRef(null);
      const handleRef = useForkRef$2(modalRef, forwardedRef);
      const hasTransition = getHasTransition(children);
      const ariaHiddenProp = (_props$ariaHidden = props["aria-hidden"]) != null ? _props$ariaHidden : true;
      const getDoc = () => ownerDocument(mountNodeRef.current);
      const getModal = () => {
        modal.current.modalRef = modalRef.current;
        modal.current.mountNode = mountNodeRef.current;
        return modal.current;
      };
      const handleMounted = () => {
        manager.mount(getModal(), {
          disableScrollLock
        });
        if (modalRef.current) {
          modalRef.current.scrollTop = 0;
        }
      };
      const handleOpen = useEventCallback$2(() => {
        const resolvedContainer = getContainer(container) || getDoc().body;
        manager.add(getModal(), resolvedContainer);
        if (modalRef.current) {
          handleMounted();
        }
      });
      const isTopModal = reactExports.useCallback(() => manager.isTopModal(getModal()), [manager]);
      const handlePortalRef = useEventCallback$2((node2) => {
        mountNodeRef.current = node2;
        if (!node2 || !modalRef.current) {
          return;
        }
        if (open && isTopModal()) {
          handleMounted();
        } else {
          ariaHidden(modalRef.current, ariaHiddenProp);
        }
      });
      const handleClose = reactExports.useCallback(() => {
        manager.remove(getModal(), ariaHiddenProp);
      }, [manager, ariaHiddenProp]);
      reactExports.useEffect(() => {
        return () => {
          handleClose();
        };
      }, [handleClose]);
      reactExports.useEffect(() => {
        if (open) {
          handleOpen();
        } else if (!hasTransition || !closeAfterTransition) {
          handleClose();
        }
      }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
      const ownerState = _extends$1({}, props, {
        closeAfterTransition,
        disableAutoFocus,
        disableEnforceFocus,
        disableEscapeKeyDown,
        disablePortal,
        disableRestoreFocus,
        disableScrollLock,
        exited,
        hideBackdrop,
        keepMounted
      });
      const classes = useUtilityClasses$1c(ownerState);
      const handleEnter = () => {
        setExited(false);
        if (onTransitionEnter) {
          onTransitionEnter();
        }
      };
      const handleExited = () => {
        setExited(true);
        if (onTransitionExited) {
          onTransitionExited();
        }
        if (closeAfterTransition) {
          handleClose();
        }
      };
      const handleBackdropClick = (event) => {
        if (event.target !== event.currentTarget) {
          return;
        }
        if (onBackdropClick) {
          onBackdropClick(event);
        }
        if (onClose) {
          onClose(event, "backdropClick");
        }
      };
      const handleKeyDown2 = (event) => {
        if (onKeyDown) {
          onKeyDown(event);
        }
        if (event.key !== "Escape" || !isTopModal()) {
          return;
        }
        if (!disableEscapeKeyDown) {
          event.stopPropagation();
          if (onClose) {
            onClose(event, "escapeKeyDown");
          }
        }
      };
      const childProps = {};
      if (children.props.tabIndex === void 0) {
        childProps.tabIndex = "-1";
      }
      if (hasTransition) {
        childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
        childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
      }
      const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
      const rootProps = useSlotProps$1({
        elementType: Root,
        externalSlotProps: slotProps.root,
        externalForwardedProps: other,
        additionalProps: {
          ref: handleRef,
          role: "presentation",
          onKeyDown: handleKeyDown2
        },
        className: classes.root,
        ownerState
      });
      const BackdropComponent = slots.backdrop;
      const backdropProps = useSlotProps$1({
        elementType: BackdropComponent,
        externalSlotProps: slotProps.backdrop,
        additionalProps: {
          "aria-hidden": true,
          onClick: handleBackdropClick,
          open
        },
        className: classes.backdrop,
        ownerState
      });
      if (!keepMounted && !open && (!hasTransition || exited)) {
        return null;
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Portal$1,
        {
          ref: handlePortalRef,
          container,
          disablePortal,
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends$1({}, rootProps, {
            children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ jsxRuntimeExports.jsx(BackdropComponent, _extends$1({}, backdropProps)) : null, /* @__PURE__ */ jsxRuntimeExports.jsx(FocusTrap, {
              disableEnforceFocus,
              disableAutoFocus,
              disableRestoreFocus,
              isEnabled: isTopModal,
              open,
              children: /* @__PURE__ */ reactExports.cloneElement(children, childProps)
            })]
          }))
        }
      );
    });
    const ModalUnstyled = Modal$2;
    const INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
    function asc(a, b2) {
      return a - b2;
    }
    function clamp$1(value2, min2, max2) {
      if (value2 == null) {
        return min2;
      }
      return Math.min(Math.max(min2, value2), max2);
    }
    function findClosest(values2, currentValue) {
      var _values$reduce;
      const {
        index: closestIndex
      } = (_values$reduce = values2.reduce((acc, value2, index) => {
        const distance = Math.abs(currentValue - value2);
        if (acc === null || distance < acc.distance || distance === acc.distance) {
          return {
            distance,
            index
          };
        }
        return acc;
      }, null)) != null ? _values$reduce : {};
      return closestIndex;
    }
    function trackFinger(event, touchId) {
      if (touchId.current !== void 0 && event.changedTouches) {
        const touchEvent = event;
        for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
          const touch = touchEvent.changedTouches[i];
          if (touch.identifier === touchId.current) {
            return {
              x: touch.clientX,
              y: touch.clientY
            };
          }
        }
        return false;
      }
      return {
        x: event.clientX,
        y: event.clientY
      };
    }
    function valueToPercent(value2, min2, max2) {
      return (value2 - min2) * 100 / (max2 - min2);
    }
    function percentToValue(percent, min2, max2) {
      return (max2 - min2) * percent + min2;
    }
    function getDecimalPrecision(num) {
      if (Math.abs(num) < 1) {
        const parts = num.toExponential().split("e-");
        const matissaDecimalPart = parts[0].split(".")[1];
        return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
      }
      const decimalPart = num.toString().split(".")[1];
      return decimalPart ? decimalPart.length : 0;
    }
    function roundValueToStep(value2, step, min2) {
      const nearest = Math.round((value2 - min2) / step) * step + min2;
      return Number(nearest.toFixed(getDecimalPrecision(step)));
    }
    function setValueIndex({
      values: values2,
      newValue,
      index
    }) {
      const output = values2.slice();
      output[index] = newValue;
      return output.sort(asc);
    }
    function focusThumb({
      sliderRef,
      activeIndex,
      setActive
    }) {
      var _sliderRef$current, _doc$activeElement;
      const doc = ownerDocument(sliderRef.current);
      if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null ? void 0 : (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute("data-index")) !== activeIndex) {
        var _sliderRef$current2;
        (_sliderRef$current2 = sliderRef.current) == null ? void 0 : _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
      }
      if (setActive) {
        setActive(activeIndex);
      }
    }
    function areValuesEqual(newValue, oldValue) {
      if (typeof newValue === "number" && typeof oldValue === "number") {
        return newValue === oldValue;
      }
      if (typeof newValue === "object" && typeof oldValue === "object") {
        return areArraysEqual(newValue, oldValue);
      }
      return false;
    }
    const axisProps = {
      horizontal: {
        offset: (percent) => ({
          left: `${percent}%`
        }),
        leap: (percent) => ({
          width: `${percent}%`
        })
      },
      "horizontal-reverse": {
        offset: (percent) => ({
          right: `${percent}%`
        }),
        leap: (percent) => ({
          width: `${percent}%`
        })
      },
      vertical: {
        offset: (percent) => ({
          bottom: `${percent}%`
        }),
        leap: (percent) => ({
          height: `${percent}%`
        })
      }
    };
    const Identity$1 = (x2) => x2;
    let cachedSupportsTouchActionNone;
    function doesSupportTouchActionNone() {
      if (cachedSupportsTouchActionNone === void 0) {
        if (typeof CSS !== "undefined" && typeof CSS.supports === "function") {
          cachedSupportsTouchActionNone = CSS.supports("touch-action", "none");
        } else {
          cachedSupportsTouchActionNone = true;
        }
      }
      return cachedSupportsTouchActionNone;
    }
    function useSlider(parameters) {
      const {
        "aria-labelledby": ariaLabelledby,
        defaultValue: defaultValue2,
        disabled = false,
        disableSwap = false,
        isRtl = false,
        marks: marksProp = false,
        max: max2 = 100,
        min: min2 = 0,
        name,
        onChange,
        onChangeCommitted,
        orientation = "horizontal",
        rootRef: ref,
        scale = Identity$1,
        step = 1,
        tabIndex,
        value: valueProp
      } = parameters;
      const touchId = reactExports.useRef();
      const [active, setActive] = reactExports.useState(-1);
      const [open, setOpen] = reactExports.useState(-1);
      const [dragging, setDragging] = reactExports.useState(false);
      const moveCount = reactExports.useRef(0);
      const [valueDerived, setValueState] = useControlled$2({
        controlled: valueProp,
        default: defaultValue2 != null ? defaultValue2 : min2,
        name: "Slider"
      });
      const handleChange = onChange && ((event, value2, thumbIndex) => {
        const nativeEvent = event.nativeEvent || event;
        const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
        Object.defineProperty(clonedEvent, "target", {
          writable: true,
          value: {
            value: value2,
            name
          }
        });
        onChange(clonedEvent, value2, thumbIndex);
      });
      const range2 = Array.isArray(valueDerived);
      let values2 = range2 ? valueDerived.slice().sort(asc) : [valueDerived];
      values2 = values2.map((value2) => clamp$1(value2, min2, max2));
      const marks = marksProp === true && step !== null ? [...Array(Math.floor((max2 - min2) / step) + 1)].map((_2, index) => ({
        value: min2 + step * index
      })) : marksProp || [];
      const marksValues = marks.map((mark) => mark.value);
      const {
        isFocusVisibleRef,
        onBlur: handleBlurVisible,
        onFocus: handleFocusVisible,
        ref: focusVisibleRef
      } = useIsFocusVisible();
      const [focusedThumbIndex, setFocusedThumbIndex] = reactExports.useState(-1);
      const sliderRef = reactExports.useRef();
      const handleFocusRef = useForkRef$2(focusVisibleRef, sliderRef);
      const handleRef = useForkRef$2(ref, handleFocusRef);
      const createHandleHiddenInputFocus = (otherHandlers) => (event) => {
        var _otherHandlers$onFocu;
        const index = Number(event.currentTarget.getAttribute("data-index"));
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
          setFocusedThumbIndex(index);
        }
        setOpen(index);
        otherHandlers == null ? void 0 : (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
      };
      const createHandleHiddenInputBlur = (otherHandlers) => (event) => {
        var _otherHandlers$onBlur;
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) {
          setFocusedThumbIndex(-1);
        }
        setOpen(-1);
        otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
      };
      useEnhancedEffect$3(() => {
        if (disabled && sliderRef.current.contains(document.activeElement)) {
          var _document$activeEleme;
          (_document$activeEleme = document.activeElement) == null ? void 0 : _document$activeEleme.blur();
        }
      }, [disabled]);
      if (disabled && active !== -1) {
        setActive(-1);
      }
      if (disabled && focusedThumbIndex !== -1) {
        setFocusedThumbIndex(-1);
      }
      const createHandleHiddenInputChange = (otherHandlers) => (event) => {
        var _otherHandlers$onChan;
        (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event);
        const index = Number(event.currentTarget.getAttribute("data-index"));
        const value2 = values2[index];
        const marksIndex = marksValues.indexOf(value2);
        let newValue = event.target.valueAsNumber;
        if (marks && step == null) {
          newValue = newValue < value2 ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
        }
        newValue = clamp$1(newValue, min2, max2);
        if (marks && step == null) {
          const currentMarkIndex = marksValues.indexOf(values2[index]);
          newValue = newValue < values2[index] ? marksValues[currentMarkIndex - 1] : marksValues[currentMarkIndex + 1];
        }
        if (range2) {
          if (disableSwap) {
            newValue = clamp$1(newValue, values2[index - 1] || -Infinity, values2[index + 1] || Infinity);
          }
          const previousValue = newValue;
          newValue = setValueIndex({
            values: values2,
            newValue,
            index
          });
          let activeIndex = index;
          if (!disableSwap) {
            activeIndex = newValue.indexOf(previousValue);
          }
          focusThumb({
            sliderRef,
            activeIndex
          });
        }
        setValueState(newValue);
        setFocusedThumbIndex(index);
        if (handleChange && !areValuesEqual(newValue, valueDerived)) {
          handleChange(event, newValue, index);
        }
        if (onChangeCommitted) {
          onChangeCommitted(event, newValue);
        }
      };
      const previousIndex = reactExports.useRef();
      let axis = orientation;
      if (isRtl && orientation === "horizontal") {
        axis += "-reverse";
      }
      const getFingerNewValue = ({
        finger,
        move = false
      }) => {
        const {
          current: slider
        } = sliderRef;
        const {
          width: width2,
          height: height2,
          bottom: bottom2,
          left: left2
        } = slider.getBoundingClientRect();
        let percent;
        if (axis.indexOf("vertical") === 0) {
          percent = (bottom2 - finger.y) / height2;
        } else {
          percent = (finger.x - left2) / width2;
        }
        if (axis.indexOf("-reverse") !== -1) {
          percent = 1 - percent;
        }
        let newValue;
        newValue = percentToValue(percent, min2, max2);
        if (step) {
          newValue = roundValueToStep(newValue, step, min2);
        } else {
          const closestIndex = findClosest(marksValues, newValue);
          newValue = marksValues[closestIndex];
        }
        newValue = clamp$1(newValue, min2, max2);
        let activeIndex = 0;
        if (range2) {
          if (!move) {
            activeIndex = findClosest(values2, newValue);
          } else {
            activeIndex = previousIndex.current;
          }
          if (disableSwap) {
            newValue = clamp$1(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);
          }
          const previousValue = newValue;
          newValue = setValueIndex({
            values: values2,
            newValue,
            index: activeIndex
          });
          if (!(disableSwap && move)) {
            activeIndex = newValue.indexOf(previousValue);
            previousIndex.current = activeIndex;
          }
        }
        return {
          newValue,
          activeIndex
        };
      };
      const handleTouchMove = useEventCallback$2((nativeEvent) => {
        const finger = trackFinger(nativeEvent, touchId);
        if (!finger) {
          return;
        }
        moveCount.current += 1;
        if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
          handleTouchEnd(nativeEvent);
          return;
        }
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger,
          move: true
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
          setDragging(true);
        }
        if (handleChange && !areValuesEqual(newValue, valueDerived)) {
          handleChange(nativeEvent, newValue, activeIndex);
        }
      });
      const handleTouchEnd = useEventCallback$2((nativeEvent) => {
        const finger = trackFinger(nativeEvent, touchId);
        setDragging(false);
        if (!finger) {
          return;
        }
        const {
          newValue
        } = getFingerNewValue({
          finger,
          move: true
        });
        setActive(-1);
        if (nativeEvent.type === "touchend") {
          setOpen(-1);
        }
        if (onChangeCommitted) {
          onChangeCommitted(nativeEvent, newValue);
        }
        touchId.current = void 0;
        stopListening();
      });
      const handleTouchStart = useEventCallback$2((nativeEvent) => {
        if (disabled) {
          return;
        }
        if (!doesSupportTouchActionNone()) {
          nativeEvent.preventDefault();
        }
        const touch = nativeEvent.changedTouches[0];
        if (touch != null) {
          touchId.current = touch.identifier;
        }
        const finger = trackFinger(nativeEvent, touchId);
        if (finger !== false) {
          const {
            newValue,
            activeIndex
          } = getFingerNewValue({
            finger
          });
          focusThumb({
            sliderRef,
            activeIndex,
            setActive
          });
          setValueState(newValue);
          if (handleChange && !areValuesEqual(newValue, valueDerived)) {
            handleChange(nativeEvent, newValue, activeIndex);
          }
        }
        moveCount.current = 0;
        const doc = ownerDocument(sliderRef.current);
        doc.addEventListener("touchmove", handleTouchMove);
        doc.addEventListener("touchend", handleTouchEnd);
      });
      const stopListening = reactExports.useCallback(() => {
        const doc = ownerDocument(sliderRef.current);
        doc.removeEventListener("mousemove", handleTouchMove);
        doc.removeEventListener("mouseup", handleTouchEnd);
        doc.removeEventListener("touchmove", handleTouchMove);
        doc.removeEventListener("touchend", handleTouchEnd);
      }, [handleTouchEnd, handleTouchMove]);
      reactExports.useEffect(() => {
        const {
          current: slider
        } = sliderRef;
        slider.addEventListener("touchstart", handleTouchStart, {
          passive: doesSupportTouchActionNone()
        });
        return () => {
          slider.removeEventListener("touchstart", handleTouchStart, {
            passive: doesSupportTouchActionNone()
          });
          stopListening();
        };
      }, [stopListening, handleTouchStart]);
      reactExports.useEffect(() => {
        if (disabled) {
          stopListening();
        }
      }, [disabled, stopListening]);
      const createHandleMouseDown = (otherHandlers) => (event) => {
        var _otherHandlers$onMous;
        (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
        if (disabled) {
          return;
        }
        if (event.defaultPrevented) {
          return;
        }
        if (event.button !== 0) {
          return;
        }
        event.preventDefault();
        const finger = trackFinger(event, touchId);
        if (finger !== false) {
          const {
            newValue,
            activeIndex
          } = getFingerNewValue({
            finger
          });
          focusThumb({
            sliderRef,
            activeIndex,
            setActive
          });
          setValueState(newValue);
          if (handleChange && !areValuesEqual(newValue, valueDerived)) {
            handleChange(event, newValue, activeIndex);
          }
        }
        moveCount.current = 0;
        const doc = ownerDocument(sliderRef.current);
        doc.addEventListener("mousemove", handleTouchMove);
        doc.addEventListener("mouseup", handleTouchEnd);
      };
      const trackOffset = valueToPercent(range2 ? values2[0] : min2, min2, max2);
      const trackLeap = valueToPercent(values2[values2.length - 1], min2, max2) - trackOffset;
      const getRootProps = (otherHandlers = {}) => {
        const ownEventHandlers = {
          onMouseDown: createHandleMouseDown(otherHandlers || {})
        };
        const mergedEventHandlers = _extends$1({}, otherHandlers, ownEventHandlers);
        return _extends$1({
          ref: handleRef
        }, mergedEventHandlers);
      };
      const createHandleMouseOver = (otherHandlers) => (event) => {
        var _otherHandlers$onMous2;
        (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
        const index = Number(event.currentTarget.getAttribute("data-index"));
        setOpen(index);
      };
      const createHandleMouseLeave = (otherHandlers) => (event) => {
        var _otherHandlers$onMous3;
        (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
        setOpen(-1);
      };
      const getThumbProps = (otherHandlers = {}) => {
        const ownEventHandlers = {
          onMouseOver: createHandleMouseOver(otherHandlers || {}),
          onMouseLeave: createHandleMouseLeave(otherHandlers || {})
        };
        return _extends$1({}, otherHandlers, ownEventHandlers);
      };
      const getHiddenInputProps = (otherHandlers = {}) => {
        var _parameters$step;
        const ownEventHandlers = {
          onChange: createHandleHiddenInputChange(otherHandlers || {}),
          onFocus: createHandleHiddenInputFocus(otherHandlers || {}),
          onBlur: createHandleHiddenInputBlur(otherHandlers || {})
        };
        const mergedEventHandlers = _extends$1({}, otherHandlers, ownEventHandlers);
        return _extends$1({
          tabIndex,
          "aria-labelledby": ariaLabelledby,
          "aria-orientation": orientation,
          "aria-valuemax": scale(max2),
          "aria-valuemin": scale(min2),
          name,
          type: "range",
          min: parameters.min,
          max: parameters.max,
          step: (_parameters$step = parameters.step) != null ? _parameters$step : void 0,
          disabled
        }, mergedEventHandlers, {
          style: _extends$1({}, visuallyHidden$1, {
            direction: isRtl ? "rtl" : "ltr",
            // So that VoiceOver's focus indicator matches the thumb's dimensions
            width: "100%",
            height: "100%"
          })
        });
      };
      return {
        active,
        axis,
        axisProps,
        dragging,
        focusedThumbIndex,
        getHiddenInputProps,
        getRootProps,
        getThumbProps,
        marks,
        open,
        range: range2,
        rootRef: handleRef,
        trackLeap,
        trackOffset,
        values: values2
      };
    }
    const _excluded$1H = ["onChange", "maxRows", "minRows", "style", "value"];
    function getStyleValue(value2) {
      return parseInt(value2, 10) || 0;
    }
    const styles$4 = {
      shadow: {
        // Visibility needed to hide the extra text area on iPads
        visibility: "hidden",
        // Remove from the content flow
        position: "absolute",
        // Ignore the scrollbar width
        overflow: "hidden",
        height: 0,
        top: 0,
        left: 0,
        // Create a new layer, increase the isolation of the computed values
        transform: "translateZ(0)"
      }
    };
    function isEmpty$1(obj) {
      return obj === void 0 || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;
    }
    const TextareaAutosize = /* @__PURE__ */ reactExports.forwardRef(function TextareaAutosize2(props, forwardedRef) {
      const {
        onChange,
        maxRows,
        minRows = 1,
        style: style2,
        value: value2
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1H);
      const {
        current: isControlled
      } = reactExports.useRef(value2 != null);
      const inputRef = reactExports.useRef(null);
      const handleRef = useForkRef$2(forwardedRef, inputRef);
      const shadowRef = reactExports.useRef(null);
      const renders = reactExports.useRef(0);
      const [state, setState] = reactExports.useState({
        outerHeightStyle: 0
      });
      const getUpdatedState = reactExports.useCallback(() => {
        const input = inputRef.current;
        const containerWindow = ownerWindow(input);
        const computedStyle = containerWindow.getComputedStyle(input);
        if (computedStyle.width === "0px") {
          return {
            outerHeightStyle: 0
          };
        }
        const inputShallow = shadowRef.current;
        inputShallow.style.width = computedStyle.width;
        inputShallow.value = input.value || props.placeholder || "x";
        if (inputShallow.value.slice(-1) === "\n") {
          inputShallow.value += " ";
        }
        const boxSizing2 = computedStyle.boxSizing;
        const padding2 = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);
        const border2 = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);
        const innerHeight = inputShallow.scrollHeight;
        inputShallow.value = "x";
        const singleRowHeight = inputShallow.scrollHeight;
        let outerHeight = innerHeight;
        if (minRows) {
          outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
        }
        if (maxRows) {
          outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
        }
        outerHeight = Math.max(outerHeight, singleRowHeight);
        const outerHeightStyle = outerHeight + (boxSizing2 === "border-box" ? padding2 + border2 : 0);
        const overflow = Math.abs(outerHeight - innerHeight) <= 1;
        return {
          outerHeightStyle,
          overflow
        };
      }, [maxRows, minRows, props.placeholder]);
      const updateState = (prevState, newState) => {
        const {
          outerHeightStyle,
          overflow
        } = newState;
        if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
          renders.current += 1;
          return {
            overflow,
            outerHeightStyle
          };
        }
        return prevState;
      };
      const syncHeight = reactExports.useCallback(() => {
        const newState = getUpdatedState();
        if (isEmpty$1(newState)) {
          return;
        }
        setState((prevState) => {
          return updateState(prevState, newState);
        });
      }, [getUpdatedState]);
      const syncHeightWithFlushSync = () => {
        const newState = getUpdatedState();
        if (isEmpty$1(newState)) {
          return;
        }
        reactDomExports.flushSync(() => {
          setState((prevState) => {
            return updateState(prevState, newState);
          });
        });
      };
      reactExports.useEffect(() => {
        const handleResize = debounce$4(() => {
          renders.current = 0;
          if (inputRef.current) {
            syncHeightWithFlushSync();
          }
        });
        let resizeObserver;
        const input = inputRef.current;
        const containerWindow = ownerWindow(input);
        containerWindow.addEventListener("resize", handleResize);
        if (typeof ResizeObserver !== "undefined") {
          resizeObserver = new ResizeObserver(handleResize);
          resizeObserver.observe(input);
        }
        return () => {
          handleResize.clear();
          containerWindow.removeEventListener("resize", handleResize);
          if (resizeObserver) {
            resizeObserver.disconnect();
          }
        };
      });
      useEnhancedEffect$3(() => {
        syncHeight();
      });
      reactExports.useEffect(() => {
        renders.current = 0;
      }, [value2]);
      const handleChange = (event) => {
        renders.current = 0;
        if (!isControlled) {
          syncHeight();
        }
        if (onChange) {
          onChange(event);
        }
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx("textarea", _extends$1({
          value: value2,
          onChange: handleChange,
          ref: handleRef,
          rows: minRows,
          style: _extends$1({
            height: state.outerHeightStyle,
            // Need a large enough difference to allow scrolling.
            // This prevents infinite rendering loop.
            overflow: state.overflow ? "hidden" : void 0
          }, style2)
        }, other)), /* @__PURE__ */ jsxRuntimeExports.jsx("textarea", {
          "aria-hidden": true,
          className: props.className,
          readOnly: true,
          ref: shadowRef,
          tabIndex: -1,
          style: _extends$1({}, styles$4.shadow, style2, {
            padding: 0
          })
        })]
      });
    });
    const TextareaAutosize$1 = TextareaAutosize;
    function stripDiacritics(string) {
      return typeof string.normalize !== "undefined" ? string.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : string;
    }
    function createFilterOptions(config2 = {}) {
      const {
        ignoreAccents = true,
        ignoreCase = true,
        limit,
        matchFrom = "any",
        stringify: stringify2,
        trim: trim2 = false
      } = config2;
      return (options, {
        inputValue,
        getOptionLabel
      }) => {
        let input = trim2 ? inputValue.trim() : inputValue;
        if (ignoreCase) {
          input = input.toLowerCase();
        }
        if (ignoreAccents) {
          input = stripDiacritics(input);
        }
        const filteredOptions = !input ? options : options.filter((option) => {
          let candidate = (stringify2 || getOptionLabel)(option);
          if (ignoreCase) {
            candidate = candidate.toLowerCase();
          }
          if (ignoreAccents) {
            candidate = stripDiacritics(candidate);
          }
          return matchFrom === "start" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
        });
        return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
      };
    }
    function findIndex(array, comp) {
      for (let i = 0; i < array.length; i += 1) {
        if (comp(array[i])) {
          return i;
        }
      }
      return -1;
    }
    const defaultFilterOptions = createFilterOptions();
    const pageSize = 5;
    const defaultIsActiveElementInListbox = (listboxRef) => {
      var _listboxRef$current$p;
      return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
    };
    function useAutocomplete(props) {
      const {
        // eslint-disable-next-line @typescript-eslint/naming-convention
        unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        unstable_classNamePrefix = "Mui",
        autoComplete = false,
        autoHighlight = false,
        autoSelect = false,
        blurOnSelect = false,
        clearOnBlur = !props.freeSolo,
        clearOnEscape = false,
        componentName = "useAutocomplete",
        defaultValue: defaultValue2 = props.multiple ? [] : null,
        disableClearable = false,
        disableCloseOnSelect = false,
        disabled: disabledProp,
        disabledItemsFocusable = false,
        disableListWrap = false,
        filterOptions = defaultFilterOptions,
        filterSelectedOptions = false,
        freeSolo = false,
        getOptionDisabled,
        getOptionLabel: getOptionLabelProp = (option) => {
          var _option$label;
          return (_option$label = option.label) != null ? _option$label : option;
        },
        groupBy,
        handleHomeEndKeys = !props.freeSolo,
        id: idProp,
        includeInputInList = false,
        inputValue: inputValueProp,
        isOptionEqualToValue = (option, value3) => option === value3,
        multiple = false,
        onChange,
        onClose,
        onHighlightChange,
        onInputChange,
        onOpen,
        open: openProp,
        openOnFocus = false,
        options,
        readOnly = false,
        selectOnFocus = !props.freeSolo,
        value: valueProp
      } = props;
      const id2 = useId$2(idProp);
      let getOptionLabel = getOptionLabelProp;
      getOptionLabel = (option) => {
        const optionLabel = getOptionLabelProp(option);
        if (typeof optionLabel !== "string") {
          return String(optionLabel);
        }
        return optionLabel;
      };
      const ignoreFocus = reactExports.useRef(false);
      const firstFocus = reactExports.useRef(true);
      const inputRef = reactExports.useRef(null);
      const listboxRef = reactExports.useRef(null);
      const [anchorEl, setAnchorEl] = reactExports.useState(null);
      const [focusedTag, setFocusedTag] = reactExports.useState(-1);
      const defaultHighlighted = autoHighlight ? 0 : -1;
      const highlightedIndexRef = reactExports.useRef(defaultHighlighted);
      const [value2, setValueState] = useControlled$2({
        controlled: valueProp,
        default: defaultValue2,
        name: componentName
      });
      const [inputValue, setInputValueState] = useControlled$2({
        controlled: inputValueProp,
        default: "",
        name: componentName,
        state: "inputValue"
      });
      const [focused, setFocused] = reactExports.useState(false);
      const resetInputValue = reactExports.useCallback((event, newValue) => {
        const isOptionSelected = multiple ? value2.length < newValue.length : newValue !== null;
        if (!isOptionSelected && !clearOnBlur) {
          return;
        }
        let newInputValue;
        if (multiple) {
          newInputValue = "";
        } else if (newValue == null) {
          newInputValue = "";
        } else {
          const optionLabel = getOptionLabel(newValue);
          newInputValue = typeof optionLabel === "string" ? optionLabel : "";
        }
        if (inputValue === newInputValue) {
          return;
        }
        setInputValueState(newInputValue);
        if (onInputChange) {
          onInputChange(event, newInputValue, "reset");
        }
      }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value2]);
      const [open, setOpenState] = useControlled$2({
        controlled: openProp,
        default: false,
        name: componentName,
        state: "open"
      });
      const [inputPristine, setInputPristine] = reactExports.useState(true);
      const inputValueIsSelectedValue = !multiple && value2 != null && inputValue === getOptionLabel(value2);
      const popupOpen = open && !readOnly;
      const filteredOptions = popupOpen ? filterOptions(
        options.filter((option) => {
          if (filterSelectedOptions && (multiple ? value2 : [value2]).some((value22) => value22 !== null && isOptionEqualToValue(option, value22))) {
            return false;
          }
          return true;
        }),
        // we use the empty string to manipulate `filterOptions` to not filter any options
        // i.e. the filter predicate always returns true
        {
          inputValue: inputValueIsSelectedValue && inputPristine ? "" : inputValue,
          getOptionLabel
        }
      ) : [];
      const previousProps = usePreviousProps$1({
        filteredOptions,
        value: value2
      });
      reactExports.useEffect(() => {
        const valueChange = value2 !== previousProps.value;
        if (focused && !valueChange) {
          return;
        }
        if (freeSolo && !valueChange) {
          return;
        }
        resetInputValue(null, value2);
      }, [value2, resetInputValue, focused, previousProps.value, freeSolo]);
      const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
      const focusTag = useEventCallback$2((tagToFocus) => {
        if (tagToFocus === -1) {
          inputRef.current.focus();
        } else {
          anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
        }
      });
      reactExports.useEffect(() => {
        if (multiple && focusedTag > value2.length - 1) {
          setFocusedTag(-1);
          focusTag(-1);
        }
      }, [value2, multiple, focusedTag, focusTag]);
      function validOptionIndex(index, direction) {
        if (!listboxRef.current || index === -1) {
          return -1;
        }
        let nextFocus = index;
        while (true) {
          if (direction === "next" && nextFocus === filteredOptions.length || direction === "previous" && nextFocus === -1) {
            return -1;
          }
          const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);
          const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute("aria-disabled") === "true";
          if (option && !option.hasAttribute("tabindex") || nextFocusDisabled) {
            nextFocus += direction === "next" ? 1 : -1;
          } else {
            return nextFocus;
          }
        }
      }
      const setHighlightedIndex = useEventCallback$2(({
        event,
        index,
        reason = "auto"
      }) => {
        highlightedIndexRef.current = index;
        if (index === -1) {
          inputRef.current.removeAttribute("aria-activedescendant");
        } else {
          inputRef.current.setAttribute("aria-activedescendant", `${id2}-option-${index}`);
        }
        if (onHighlightChange) {
          onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
        }
        if (!listboxRef.current) {
          return;
        }
        const prev2 = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
        if (prev2) {
          prev2.classList.remove(`${unstable_classNamePrefix}-focused`);
          prev2.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
        }
        const listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
        if (!listboxNode) {
          return;
        }
        if (index === -1) {
          listboxNode.scrollTop = 0;
          return;
        }
        const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
        if (!option) {
          return;
        }
        option.classList.add(`${unstable_classNamePrefix}-focused`);
        if (reason === "keyboard") {
          option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
        }
        if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== "mouse") {
          const element = option;
          const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
          const elementBottom = element.offsetTop + element.offsetHeight;
          if (elementBottom > scrollBottom) {
            listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
          } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
            listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
          }
        }
      });
      const changeHighlightedIndex = useEventCallback$2(({
        event,
        diff: diff2,
        direction = "next",
        reason = "auto"
      }) => {
        if (!popupOpen) {
          return;
        }
        const getNextIndex = () => {
          const maxIndex = filteredOptions.length - 1;
          if (diff2 === "reset") {
            return defaultHighlighted;
          }
          if (diff2 === "start") {
            return 0;
          }
          if (diff2 === "end") {
            return maxIndex;
          }
          const newIndex = highlightedIndexRef.current + diff2;
          if (newIndex < 0) {
            if (newIndex === -1 && includeInputInList) {
              return -1;
            }
            if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff2) > 1) {
              return 0;
            }
            return maxIndex;
          }
          if (newIndex > maxIndex) {
            if (newIndex === maxIndex + 1 && includeInputInList) {
              return -1;
            }
            if (disableListWrap || Math.abs(diff2) > 1) {
              return maxIndex;
            }
            return 0;
          }
          return newIndex;
        };
        const nextIndex = validOptionIndex(getNextIndex(), direction);
        setHighlightedIndex({
          index: nextIndex,
          reason,
          event
        });
        if (autoComplete && diff2 !== "reset") {
          if (nextIndex === -1) {
            inputRef.current.value = inputValue;
          } else {
            const option = getOptionLabel(filteredOptions[nextIndex]);
            inputRef.current.value = option;
            const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
            if (index === 0 && inputValue.length > 0) {
              inputRef.current.setSelectionRange(inputValue.length, option.length);
            }
          }
        }
      });
      const checkHighlightedOptionExists = () => {
        const isSameValue = (value1, value22) => {
          const label1 = value1 ? getOptionLabel(value1) : "";
          const label2 = value22 ? getOptionLabel(value22) : "";
          return label1 === label2;
        };
        if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && (multiple ? value2.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value2[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value2))) {
          const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];
          if (previousHighlightedOption) {
            const previousHighlightedOptionExists = filteredOptions.some((option) => {
              return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);
            });
            if (previousHighlightedOptionExists) {
              return true;
            }
          }
        }
        return false;
      };
      const syncHighlightedIndex = reactExports.useCallback(() => {
        if (!popupOpen) {
          return;
        }
        if (checkHighlightedOptionExists()) {
          return;
        }
        const valueItem = multiple ? value2[0] : value2;
        if (filteredOptions.length === 0 || valueItem == null) {
          changeHighlightedIndex({
            diff: "reset"
          });
          return;
        }
        if (!listboxRef.current) {
          return;
        }
        if (valueItem != null) {
          const currentOption = filteredOptions[highlightedIndexRef.current];
          if (multiple && currentOption && findIndex(value2, (val) => isOptionEqualToValue(currentOption, val)) !== -1) {
            return;
          }
          const itemIndex = findIndex(filteredOptions, (optionItem) => isOptionEqualToValue(optionItem, valueItem));
          if (itemIndex === -1) {
            changeHighlightedIndex({
              diff: "reset"
            });
          } else {
            setHighlightedIndex({
              index: itemIndex
            });
          }
          return;
        }
        if (highlightedIndexRef.current >= filteredOptions.length - 1) {
          setHighlightedIndex({
            index: filteredOptions.length - 1
          });
          return;
        }
        setHighlightedIndex({
          index: highlightedIndexRef.current
        });
      }, [
        // Only sync the highlighted index when the option switch between empty and not
        filteredOptions.length,
        // Don't sync the highlighted index with the value when multiple
        // eslint-disable-next-line react-hooks/exhaustive-deps
        multiple ? false : value2,
        filterSelectedOptions,
        changeHighlightedIndex,
        setHighlightedIndex,
        popupOpen,
        inputValue,
        multiple
      ]);
      const handleListboxRef = useEventCallback$2((node2) => {
        setRef$1(listboxRef, node2);
        if (!node2) {
          return;
        }
        syncHighlightedIndex();
      });
      reactExports.useEffect(() => {
        syncHighlightedIndex();
      }, [syncHighlightedIndex]);
      const handleOpen = (event) => {
        if (open) {
          return;
        }
        setOpenState(true);
        setInputPristine(true);
        if (onOpen) {
          onOpen(event);
        }
      };
      const handleClose = (event, reason) => {
        if (!open) {
          return;
        }
        setOpenState(false);
        if (onClose) {
          onClose(event, reason);
        }
      };
      const handleValue = (event, newValue, reason, details) => {
        if (multiple) {
          if (value2.length === newValue.length && value2.every((val, i) => val === newValue[i])) {
            return;
          }
        } else if (value2 === newValue) {
          return;
        }
        if (onChange) {
          onChange(event, newValue, reason, details);
        }
        setValueState(newValue);
      };
      const isTouch = reactExports.useRef(false);
      const selectNewValue = (event, option, reasonProp = "selectOption", origin = "options") => {
        let reason = reasonProp;
        let newValue = option;
        if (multiple) {
          newValue = Array.isArray(value2) ? value2.slice() : [];
          const itemIndex = findIndex(newValue, (valueItem) => isOptionEqualToValue(option, valueItem));
          if (itemIndex === -1) {
            newValue.push(option);
          } else if (origin !== "freeSolo") {
            newValue.splice(itemIndex, 1);
            reason = "removeOption";
          }
        }
        resetInputValue(event, newValue);
        handleValue(event, newValue, reason, {
          option
        });
        if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
          handleClose(event, reason);
        }
        if (blurOnSelect === true || blurOnSelect === "touch" && isTouch.current || blurOnSelect === "mouse" && !isTouch.current) {
          inputRef.current.blur();
        }
      };
      function validTagIndex(index, direction) {
        if (index === -1) {
          return -1;
        }
        let nextFocus = index;
        while (true) {
          if (direction === "next" && nextFocus === value2.length || direction === "previous" && nextFocus === -1) {
            return -1;
          }
          const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);
          if (!option || !option.hasAttribute("tabindex") || option.disabled || option.getAttribute("aria-disabled") === "true") {
            nextFocus += direction === "next" ? 1 : -1;
          } else {
            return nextFocus;
          }
        }
      }
      const handleFocusTag = (event, direction) => {
        if (!multiple) {
          return;
        }
        if (inputValue === "") {
          handleClose(event, "toggleInput");
        }
        let nextTag = focusedTag;
        if (focusedTag === -1) {
          if (inputValue === "" && direction === "previous") {
            nextTag = value2.length - 1;
          }
        } else {
          nextTag += direction === "next" ? 1 : -1;
          if (nextTag < 0) {
            nextTag = 0;
          }
          if (nextTag === value2.length) {
            nextTag = -1;
          }
        }
        nextTag = validTagIndex(nextTag, direction);
        setFocusedTag(nextTag);
        focusTag(nextTag);
      };
      const handleClear = (event) => {
        ignoreFocus.current = true;
        setInputValueState("");
        if (onInputChange) {
          onInputChange(event, "", "clear");
        }
        handleValue(event, multiple ? [] : null, "clear");
      };
      const handleKeyDown2 = (other) => (event) => {
        if (other.onKeyDown) {
          other.onKeyDown(event);
        }
        if (event.defaultMuiPrevented) {
          return;
        }
        if (focusedTag !== -1 && ["ArrowLeft", "ArrowRight"].indexOf(event.key) === -1) {
          setFocusedTag(-1);
          focusTag(-1);
        }
        if (event.which !== 229) {
          switch (event.key) {
            case "Home":
              if (popupOpen && handleHomeEndKeys) {
                event.preventDefault();
                changeHighlightedIndex({
                  diff: "start",
                  direction: "next",
                  reason: "keyboard",
                  event
                });
              }
              break;
            case "End":
              if (popupOpen && handleHomeEndKeys) {
                event.preventDefault();
                changeHighlightedIndex({
                  diff: "end",
                  direction: "previous",
                  reason: "keyboard",
                  event
                });
              }
              break;
            case "PageUp":
              event.preventDefault();
              changeHighlightedIndex({
                diff: -pageSize,
                direction: "previous",
                reason: "keyboard",
                event
              });
              handleOpen(event);
              break;
            case "PageDown":
              event.preventDefault();
              changeHighlightedIndex({
                diff: pageSize,
                direction: "next",
                reason: "keyboard",
                event
              });
              handleOpen(event);
              break;
            case "ArrowDown":
              event.preventDefault();
              changeHighlightedIndex({
                diff: 1,
                direction: "next",
                reason: "keyboard",
                event
              });
              handleOpen(event);
              break;
            case "ArrowUp":
              event.preventDefault();
              changeHighlightedIndex({
                diff: -1,
                direction: "previous",
                reason: "keyboard",
                event
              });
              handleOpen(event);
              break;
            case "ArrowLeft":
              handleFocusTag(event, "previous");
              break;
            case "ArrowRight":
              handleFocusTag(event, "next");
              break;
            case "Enter":
              if (highlightedIndexRef.current !== -1 && popupOpen) {
                const option = filteredOptions[highlightedIndexRef.current];
                const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
                event.preventDefault();
                if (disabled) {
                  return;
                }
                selectNewValue(event, option, "selectOption");
                if (autoComplete) {
                  inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
                }
              } else if (freeSolo && inputValue !== "" && inputValueIsSelectedValue === false) {
                if (multiple) {
                  event.preventDefault();
                }
                selectNewValue(event, inputValue, "createOption", "freeSolo");
              }
              break;
            case "Escape":
              if (popupOpen) {
                event.preventDefault();
                event.stopPropagation();
                handleClose(event, "escape");
              } else if (clearOnEscape && (inputValue !== "" || multiple && value2.length > 0)) {
                event.preventDefault();
                event.stopPropagation();
                handleClear(event);
              }
              break;
            case "Backspace":
              if (multiple && !readOnly && inputValue === "" && value2.length > 0) {
                const index = focusedTag === -1 ? value2.length - 1 : focusedTag;
                const newValue = value2.slice();
                newValue.splice(index, 1);
                handleValue(event, newValue, "removeOption", {
                  option: value2[index]
                });
              }
              break;
            case "Delete":
              if (multiple && !readOnly && inputValue === "" && value2.length > 0 && focusedTag !== -1) {
                const index = focusedTag;
                const newValue = value2.slice();
                newValue.splice(index, 1);
                handleValue(event, newValue, "removeOption", {
                  option: value2[index]
                });
              }
              break;
          }
        }
      };
      const handleFocus = (event) => {
        setFocused(true);
        if (openOnFocus && !ignoreFocus.current) {
          handleOpen(event);
        }
      };
      const handleBlur = (event) => {
        if (unstable_isActiveElementInListbox(listboxRef)) {
          inputRef.current.focus();
          return;
        }
        setFocused(false);
        firstFocus.current = true;
        ignoreFocus.current = false;
        if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
          selectNewValue(event, filteredOptions[highlightedIndexRef.current], "blur");
        } else if (autoSelect && freeSolo && inputValue !== "") {
          selectNewValue(event, inputValue, "blur", "freeSolo");
        } else if (clearOnBlur) {
          resetInputValue(event, value2);
        }
        handleClose(event, "blur");
      };
      const handleInputChange = (event) => {
        const newValue = event.target.value;
        if (inputValue !== newValue) {
          setInputValueState(newValue);
          setInputPristine(false);
          if (onInputChange) {
            onInputChange(event, newValue, "input");
          }
        }
        if (newValue === "") {
          if (!disableClearable && !multiple) {
            handleValue(event, null, "clear");
          }
        } else {
          handleOpen(event);
        }
      };
      const handleOptionMouseMove = (event) => {
        const index = Number(event.currentTarget.getAttribute("data-option-index"));
        if (highlightedIndexRef.current !== index) {
          setHighlightedIndex({
            event,
            index,
            reason: "mouse"
          });
        }
      };
      const handleOptionTouchStart = (event) => {
        setHighlightedIndex({
          event,
          index: Number(event.currentTarget.getAttribute("data-option-index")),
          reason: "touch"
        });
        isTouch.current = true;
      };
      const handleOptionClick = (event) => {
        const index = Number(event.currentTarget.getAttribute("data-option-index"));
        selectNewValue(event, filteredOptions[index], "selectOption");
        isTouch.current = false;
      };
      const handleTagDelete = (index) => (event) => {
        const newValue = value2.slice();
        newValue.splice(index, 1);
        handleValue(event, newValue, "removeOption", {
          option: value2[index]
        });
      };
      const handlePopupIndicator = (event) => {
        if (open) {
          handleClose(event, "toggleInput");
        } else {
          handleOpen(event);
        }
      };
      const handleMouseDown = (event) => {
        if (event.target.getAttribute("id") !== id2) {
          event.preventDefault();
        }
      };
      const handleClick = () => {
        inputRef.current.focus();
        if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
          inputRef.current.select();
        }
        firstFocus.current = false;
      };
      const handleInputMouseDown = (event) => {
        if (inputValue === "" || !open) {
          handlePopupIndicator(event);
        }
      };
      let dirty = freeSolo && inputValue.length > 0;
      dirty = dirty || (multiple ? value2.length > 0 : value2 !== null);
      let groupedOptions = filteredOptions;
      if (groupBy) {
        groupedOptions = filteredOptions.reduce((acc, option, index) => {
          const group2 = groupBy(option);
          if (acc.length > 0 && acc[acc.length - 1].group === group2) {
            acc[acc.length - 1].options.push(option);
          } else {
            acc.push({
              key: index,
              index,
              group: group2,
              options: [option]
            });
          }
          return acc;
        }, []);
      }
      if (disabledProp && focused) {
        handleBlur();
      }
      return {
        getRootProps: (other = {}) => _extends$1({
          "aria-owns": listboxAvailable ? `${id2}-listbox` : null
        }, other, {
          onKeyDown: handleKeyDown2(other),
          onMouseDown: handleMouseDown,
          onClick: handleClick
        }),
        getInputLabelProps: () => ({
          id: `${id2}-label`,
          htmlFor: id2
        }),
        getInputProps: () => ({
          id: id2,
          value: inputValue,
          onBlur: handleBlur,
          onFocus: handleFocus,
          onChange: handleInputChange,
          onMouseDown: handleInputMouseDown,
          // if open then this is handled imperatively so don't let react override
          // only have an opinion about this when closed
          "aria-activedescendant": popupOpen ? "" : null,
          "aria-autocomplete": autoComplete ? "both" : "list",
          "aria-controls": listboxAvailable ? `${id2}-listbox` : void 0,
          "aria-expanded": listboxAvailable,
          // Disable browser's suggestion that might overlap with the popup.
          // Handle autocomplete but not autofill.
          autoComplete: "off",
          ref: inputRef,
          autoCapitalize: "none",
          spellCheck: "false",
          role: "combobox",
          disabled: disabledProp
        }),
        getClearProps: () => ({
          tabIndex: -1,
          onClick: handleClear
        }),
        getPopupIndicatorProps: () => ({
          tabIndex: -1,
          onClick: handlePopupIndicator
        }),
        getTagProps: ({
          index
        }) => _extends$1({
          key: index,
          "data-tag-index": index,
          tabIndex: -1
        }, !readOnly && {
          onDelete: handleTagDelete(index)
        }),
        getListboxProps: () => ({
          role: "listbox",
          id: `${id2}-listbox`,
          "aria-labelledby": `${id2}-label`,
          ref: handleListboxRef,
          onMouseDown: (event) => {
            event.preventDefault();
          }
        }),
        getOptionProps: ({
          index,
          option
        }) => {
          const selected = (multiple ? value2 : [value2]).some((value22) => value22 != null && isOptionEqualToValue(option, value22));
          const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
          return {
            key: getOptionLabel(option),
            tabIndex: -1,
            role: "option",
            id: `${id2}-option-${index}`,
            onMouseMove: handleOptionMouseMove,
            onClick: handleOptionClick,
            onTouchStart: handleOptionTouchStart,
            "data-option-index": index,
            "aria-disabled": disabled,
            "aria-selected": selected
          };
        },
        id: id2,
        inputValue,
        value: value2,
        dirty,
        expanded: popupOpen && anchorEl,
        popupOpen,
        focused: focused || focusedTag !== -1,
        anchorEl,
        setAnchorEl,
        focusedTag,
        groupedOptions
      };
    }
    function _setPrototypeOf(o, p2) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
        o2.__proto__ = p3;
        return o2;
      };
      return _setPrototypeOf(o, p2);
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }
    function hasClass(element, className) {
      if (element.classList)
        return !!className && element.classList.contains(className);
      return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
    }
    function addClass(element, className) {
      if (element.classList)
        element.classList.add(className);
      else if (!hasClass(element, className))
        if (typeof element.className === "string")
          element.className = element.className + " " + className;
        else
          element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
    }
    function replaceClassName(origClass, classToRemove) {
      return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
    }
    function removeClass$1(element, className) {
      if (element.classList) {
        element.classList.remove(className);
      } else if (typeof element.className === "string") {
        element.className = replaceClassName(element.className, className);
      } else {
        element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
      }
    }
    const config$4 = {
      disabled: false
    };
    const TransitionGroupContext = React$4.createContext(null);
    var forceReflow = function forceReflow2(node2) {
      return node2.scrollTop;
    };
    var UNMOUNTED = "unmounted";
    var EXITED = "exited";
    var ENTERING = "entering";
    var ENTERED = "entered";
    var EXITING = "exiting";
    var Transition = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(Transition2, _React$Component);
      function Transition2(props, context2) {
        var _this;
        _this = _React$Component.call(this, props, context2) || this;
        var parentGroup = context2;
        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;
        if (props.in) {
          if (appear) {
            initialStatus = EXITED;
            _this.appearStatus = ENTERING;
          } else {
            initialStatus = ENTERED;
          }
        } else {
          if (props.unmountOnExit || props.mountOnEnter) {
            initialStatus = UNMOUNTED;
          } else {
            initialStatus = EXITED;
          }
        }
        _this.state = {
          status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
      }
      Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;
        if (nextIn && prevState.status === UNMOUNTED) {
          return {
            status: EXITED
          };
        }
        return null;
      };
      var _proto = Transition2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
      };
      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;
        if (prevProps !== this.props) {
          var status = this.state.status;
          if (this.props.in) {
            if (status !== ENTERING && status !== ENTERED) {
              nextStatus = ENTERING;
            }
          } else {
            if (status === ENTERING || status === ENTERED) {
              nextStatus = EXITING;
            }
          }
        }
        this.updateStatus(false, nextStatus);
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
      };
      _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;
        if (timeout != null && typeof timeout !== "number") {
          exit = timeout.exit;
          enter = timeout.enter;
          appear = timeout.appear !== void 0 ? timeout.appear : enter;
        }
        return {
          exit,
          enter,
          appear
        };
      };
      _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) {
          mounting = false;
        }
        if (nextStatus !== null) {
          this.cancelNextCallback();
          if (nextStatus === ENTERING) {
            if (this.props.unmountOnExit || this.props.mountOnEnter) {
              var node2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
              if (node2)
                forceReflow(node2);
            }
            this.performEnter(mounting);
          } else {
            this.performExit();
          }
        } else if (this.props.unmountOnExit && this.state.status === EXITED) {
          this.setState({
            status: UNMOUNTED
          });
        }
      };
      _proto.performEnter = function performEnter(mounting) {
        var _this2 = this;
        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;
        var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
        if (!mounting && !enter || config$4.disabled) {
          this.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode);
          });
          return;
        }
        this.props.onEnter(maybeNode, maybeAppearing);
        this.safeSetState({
          status: ENTERING
        }, function() {
          _this2.props.onEntering(maybeNode, maybeAppearing);
          _this2.onTransitionEnd(enterTimeout, function() {
            _this2.safeSetState({
              status: ENTERED
            }, function() {
              _this2.props.onEntered(maybeNode, maybeAppearing);
            });
          });
        });
      };
      _proto.performExit = function performExit() {
        var _this3 = this;
        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        var maybeNode = this.props.nodeRef ? void 0 : ReactDOM.findDOMNode(this);
        if (!exit || config$4.disabled) {
          this.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
          return;
        }
        this.props.onExit(maybeNode);
        this.safeSetState({
          status: EXITING
        }, function() {
          _this3.props.onExiting(maybeNode);
          _this3.onTransitionEnd(timeouts.exit, function() {
            _this3.safeSetState({
              status: EXITED
            }, function() {
              _this3.props.onExited(maybeNode);
            });
          });
        });
      };
      _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
          this.nextCallback.cancel();
          this.nextCallback = null;
        }
      };
      _proto.safeSetState = function safeSetState(nextState, callback) {
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
      };
      _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;
        var active = true;
        this.nextCallback = function(event) {
          if (active) {
            active = false;
            _this4.nextCallback = null;
            callback(event);
          }
        };
        this.nextCallback.cancel = function() {
          active = false;
        };
        return this.nextCallback;
      };
      _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
        this.setNextCallback(handler);
        var node2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
        if (!node2 || doesNotHaveTimeoutOrListener) {
          setTimeout(this.nextCallback, 0);
          return;
        }
        if (this.props.addEndListener) {
          var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
          this.props.addEndListener(maybeNode, maybeNextCallback);
        }
        if (timeout != null) {
          setTimeout(this.nextCallback, timeout);
        }
      };
      _proto.render = function render() {
        var status = this.state.status;
        if (status === UNMOUNTED) {
          return null;
        }
        var _this$props = this.props, children = _this$props.children;
        _this$props.in;
        _this$props.mountOnEnter;
        _this$props.unmountOnExit;
        _this$props.appear;
        _this$props.enter;
        _this$props.exit;
        _this$props.timeout;
        _this$props.addEndListener;
        _this$props.onEnter;
        _this$props.onEntering;
        _this$props.onEntered;
        _this$props.onExit;
        _this$props.onExiting;
        _this$props.onExited;
        _this$props.nodeRef;
        var childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
        return (
          // allows for nested Transitions
          /* @__PURE__ */ React$4.createElement(TransitionGroupContext.Provider, {
            value: null
          }, typeof children === "function" ? children(status, childProps) : React$4.cloneElement(React$4.Children.only(children), childProps))
        );
      };
      return Transition2;
    }(React$4.Component);
    Transition.contextType = TransitionGroupContext;
    Transition.propTypes = {};
    function noop$1() {
    }
    Transition.defaultProps = {
      in: false,
      mountOnEnter: false,
      unmountOnExit: false,
      appear: false,
      enter: true,
      exit: true,
      onEnter: noop$1,
      onEntering: noop$1,
      onEntered: noop$1,
      onExit: noop$1,
      onExiting: noop$1,
      onExited: noop$1
    };
    Transition.UNMOUNTED = UNMOUNTED;
    Transition.EXITED = EXITED;
    Transition.ENTERING = ENTERING;
    Transition.ENTERED = ENTERED;
    Transition.EXITING = EXITING;
    const Transition$1 = Transition;
    var _addClass = function addClass$1(node2, classes) {
      return node2 && classes && classes.split(" ").forEach(function(c2) {
        return addClass(node2, c2);
      });
    };
    var removeClass = function removeClass2(node2, classes) {
      return node2 && classes && classes.split(" ").forEach(function(c2) {
        return removeClass$1(node2, c2);
      });
    };
    var CSSTransition = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(CSSTransition2, _React$Component);
      function CSSTransition2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.appliedClasses = {
          appear: {},
          enter: {},
          exit: {}
        };
        _this.onEnter = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
          _this.removeClasses(node2, "exit");
          _this.addClass(node2, appearing ? "appear" : "enter", "base");
          if (_this.props.onEnter) {
            _this.props.onEnter(maybeNode, maybeAppearing);
          }
        };
        _this.onEntering = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
          var type = appearing ? "appear" : "enter";
          _this.addClass(node2, type, "active");
          if (_this.props.onEntering) {
            _this.props.onEntering(maybeNode, maybeAppearing);
          }
        };
        _this.onEntered = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
          var type = appearing ? "appear" : "enter";
          _this.removeClasses(node2, type);
          _this.addClass(node2, type, "done");
          if (_this.props.onEntered) {
            _this.props.onEntered(maybeNode, maybeAppearing);
          }
        };
        _this.onExit = function(maybeNode) {
          var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument4[0];
          _this.removeClasses(node2, "appear");
          _this.removeClasses(node2, "enter");
          _this.addClass(node2, "exit", "base");
          if (_this.props.onExit) {
            _this.props.onExit(maybeNode);
          }
        };
        _this.onExiting = function(maybeNode) {
          var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument5[0];
          _this.addClass(node2, "exit", "active");
          if (_this.props.onExiting) {
            _this.props.onExiting(maybeNode);
          }
        };
        _this.onExited = function(maybeNode) {
          var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument6[0];
          _this.removeClasses(node2, "exit");
          _this.addClass(node2, "exit", "done");
          if (_this.props.onExited) {
            _this.props.onExited(maybeNode);
          }
        };
        _this.resolveArguments = function(maybeNode, maybeAppearing) {
          return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
        };
        _this.getClassNames = function(type) {
          var classNames2 = _this.props.classNames;
          var isStringClassNames = typeof classNames2 === "string";
          var prefix2 = isStringClassNames && classNames2 ? classNames2 + "-" : "";
          var baseClassName = isStringClassNames ? "" + prefix2 + type : classNames2[type];
          var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames2[type + "Active"];
          var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames2[type + "Done"];
          return {
            baseClassName,
            activeClassName,
            doneClassName
          };
        };
        return _this;
      }
      var _proto = CSSTransition2.prototype;
      _proto.addClass = function addClass2(node2, type, phase) {
        var className = this.getClassNames(type)[phase + "ClassName"];
        var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
        if (type === "appear" && phase === "done" && doneClassName) {
          className += " " + doneClassName;
        }
        if (phase === "active") {
          if (node2)
            forceReflow(node2);
        }
        if (className) {
          this.appliedClasses[type][phase] = className;
          _addClass(node2, className);
        }
      };
      _proto.removeClasses = function removeClasses(node2, type) {
        var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
        this.appliedClasses[type] = {};
        if (baseClassName) {
          removeClass(node2, baseClassName);
        }
        if (activeClassName) {
          removeClass(node2, activeClassName);
        }
        if (doneClassName) {
          removeClass(node2, doneClassName);
        }
      };
      _proto.render = function render() {
        var _this$props = this.props;
        _this$props.classNames;
        var props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);
        return /* @__PURE__ */ React$4.createElement(Transition$1, _extends$1({}, props, {
          onEnter: this.onEnter,
          onEntered: this.onEntered,
          onEntering: this.onEntering,
          onExit: this.onExit,
          onExiting: this.onExiting,
          onExited: this.onExited
        }));
      };
      return CSSTransition2;
    }(React$4.Component);
    CSSTransition.defaultProps = {
      classNames: ""
    };
    CSSTransition.propTypes = {};
    const CSSTransition$1 = CSSTransition;
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function getChildMapping(children, mapFn) {
      var mapper = function mapper2(child) {
        return mapFn && reactExports.isValidElement(child) ? mapFn(child) : child;
      };
      var result = /* @__PURE__ */ Object.create(null);
      if (children)
        reactExports.Children.map(children, function(c2) {
          return c2;
        }).forEach(function(child) {
          result[child.key] = mapper(child);
        });
      return result;
    }
    function mergeChildMappings(prev2, next2) {
      prev2 = prev2 || {};
      next2 = next2 || {};
      function getValueForKey(key) {
        return key in next2 ? next2[key] : prev2[key];
      }
      var nextKeysPending = /* @__PURE__ */ Object.create(null);
      var pendingKeys = [];
      for (var prevKey in prev2) {
        if (prevKey in next2) {
          if (pendingKeys.length) {
            nextKeysPending[prevKey] = pendingKeys;
            pendingKeys = [];
          }
        } else {
          pendingKeys.push(prevKey);
        }
      }
      var i;
      var childMapping = {};
      for (var nextKey in next2) {
        if (nextKeysPending[nextKey]) {
          for (i = 0; i < nextKeysPending[nextKey].length; i++) {
            var pendingNextKey = nextKeysPending[nextKey][i];
            childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
          }
        }
        childMapping[nextKey] = getValueForKey(nextKey);
      }
      for (i = 0; i < pendingKeys.length; i++) {
        childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
      }
      return childMapping;
    }
    function getProp(child, prop, props) {
      return props[prop] != null ? props[prop] : child.props[prop];
    }
    function getInitialChildMapping(props, onExited) {
      return getChildMapping(props.children, function(child) {
        return reactExports.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: true,
          appear: getProp(child, "appear", props),
          enter: getProp(child, "enter", props),
          exit: getProp(child, "exit", props)
        });
      });
    }
    function getNextChildMapping(nextProps, prevChildMapping, onExited) {
      var nextChildMapping = getChildMapping(nextProps.children);
      var children = mergeChildMappings(prevChildMapping, nextChildMapping);
      Object.keys(children).forEach(function(key) {
        var child = children[key];
        if (!reactExports.isValidElement(child))
          return;
        var hasPrev = key in prevChildMapping;
        var hasNext = key in nextChildMapping;
        var prevChild = prevChildMapping[key];
        var isLeaving = reactExports.isValidElement(prevChild) && !prevChild.props.in;
        if (hasNext && (!hasPrev || isLeaving)) {
          children[key] = reactExports.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: true,
            exit: getProp(child, "exit", nextProps),
            enter: getProp(child, "enter", nextProps)
          });
        } else if (!hasNext && hasPrev && !isLeaving) {
          children[key] = reactExports.cloneElement(child, {
            in: false
          });
        } else if (hasNext && hasPrev && reactExports.isValidElement(prevChild)) {
          children[key] = reactExports.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: prevChild.props.in,
            exit: getProp(child, "exit", nextProps),
            enter: getProp(child, "enter", nextProps)
          });
        }
      });
      return children;
    }
    var values = Object.values || function(obj) {
      return Object.keys(obj).map(function(k2) {
        return obj[k2];
      });
    };
    var defaultProps = {
      component: "div",
      childFactory: function childFactory(child) {
        return child;
      }
    };
    var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(TransitionGroup2, _React$Component);
      function TransitionGroup2(props, context2) {
        var _this;
        _this = _React$Component.call(this, props, context2) || this;
        var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
        _this.state = {
          contextValue: {
            isMounting: true
          },
          handleExited,
          firstRender: true
        };
        return _this;
      }
      var _proto = TransitionGroup2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
          contextValue: {
            isMounting: false
          }
        });
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
      };
      TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
        return {
          children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
          firstRender: false
        };
      };
      _proto.handleExited = function handleExited(child, node2) {
        var currentChildMapping = getChildMapping(this.props.children);
        if (child.key in currentChildMapping)
          return;
        if (child.props.onExited) {
          child.props.onExited(node2);
        }
        if (this.mounted) {
          this.setState(function(state) {
            var children = _extends$1({}, state.children);
            delete children[child.key];
            return {
              children
            };
          });
        }
      };
      _proto.render = function render() {
        var _this$props = this.props, Component = _this$props.component, childFactory = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
        var contextValue = this.state.contextValue;
        var children = values(this.state.children).map(childFactory);
        delete props.appear;
        delete props.enter;
        delete props.exit;
        if (Component === null) {
          return /* @__PURE__ */ React$4.createElement(TransitionGroupContext.Provider, {
            value: contextValue
          }, children);
        }
        return /* @__PURE__ */ React$4.createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, /* @__PURE__ */ React$4.createElement(Component, props, children));
      };
      return TransitionGroup2;
    }(React$4.Component);
    TransitionGroup.propTypes = {};
    TransitionGroup.defaultProps = defaultProps;
    const TransitionGroup$1 = TransitionGroup;
    function Ripple(props) {
      const {
        className,
        classes,
        pulsate = false,
        rippleX,
        rippleY,
        rippleSize,
        in: inProp,
        onExited,
        timeout
      } = props;
      const [leaving, setLeaving] = reactExports.useState(false);
      const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
      const rippleStyles = {
        width: rippleSize,
        height: rippleSize,
        top: -(rippleSize / 2) + rippleY,
        left: -(rippleSize / 2) + rippleX
      };
      const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
      if (!inProp && !leaving) {
        setLeaving(true);
      }
      reactExports.useEffect(() => {
        if (!inProp && onExited != null) {
          const timeoutId = setTimeout(onExited, timeout);
          return () => {
            clearTimeout(timeoutId);
          };
        }
        return void 0;
      }, [onExited, inProp, timeout]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
        className: rippleClassName,
        style: rippleStyles,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
          className: childClassName
        })
      });
    }
    const touchRippleClasses = generateUtilityClasses("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
    const touchRippleClasses$1 = touchRippleClasses;
    const _excluded$1G = ["center", "classes", "className"];
    let _$1 = (t2) => t2, _t$1, _t2$1, _t3$1, _t4$1;
    const DURATION = 550;
    const DELAY_RIPPLE = 80;
    const enterKeyframe = keyframes(_t$1 || (_t$1 = _$1`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
    const exitKeyframe = keyframes(_t2$1 || (_t2$1 = _$1`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
    const pulsateKeyframe = keyframes(_t3$1 || (_t3$1 = _$1`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
    const TouchRippleRoot = styled$1("span", {
      name: "MuiTouchRipple",
      slot: "Root"
    })({
      overflow: "hidden",
      pointerEvents: "none",
      position: "absolute",
      zIndex: 0,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      borderRadius: "inherit"
    });
    const TouchRippleRipple = styled$1(Ripple, {
      name: "MuiTouchRipple",
      slot: "Ripple"
    })(_t4$1 || (_t4$1 = _$1`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses$1.rippleVisible, enterKeyframe, DURATION, ({
      theme
    }) => theme.transitions.easing.easeInOut, touchRippleClasses$1.ripplePulsate, ({
      theme
    }) => theme.transitions.duration.shorter, touchRippleClasses$1.child, touchRippleClasses$1.childLeaving, exitKeyframe, DURATION, ({
      theme
    }) => theme.transitions.easing.easeInOut, touchRippleClasses$1.childPulsate, pulsateKeyframe, ({
      theme
    }) => theme.transitions.easing.easeInOut);
    const TouchRipple = /* @__PURE__ */ reactExports.forwardRef(function TouchRipple2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiTouchRipple"
      });
      const {
        center: centerProp = false,
        classes = {},
        className
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1G);
      const [ripples, setRipples] = reactExports.useState([]);
      const nextKey = reactExports.useRef(0);
      const rippleCallback = reactExports.useRef(null);
      reactExports.useEffect(() => {
        if (rippleCallback.current) {
          rippleCallback.current();
          rippleCallback.current = null;
        }
      }, [ripples]);
      const ignoringMouseDown = reactExports.useRef(false);
      const startTimer = reactExports.useRef(null);
      const startTimerCommit = reactExports.useRef(null);
      const container = reactExports.useRef(null);
      reactExports.useEffect(() => {
        return () => {
          clearTimeout(startTimer.current);
        };
      }, []);
      const startCommit = reactExports.useCallback((params) => {
        const {
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb: cb2
        } = params;
        setRipples((oldRipples) => [...oldRipples, /* @__PURE__ */ jsxRuntimeExports.jsx(TouchRippleRipple, {
          classes: {
            ripple: clsx(classes.ripple, touchRippleClasses$1.ripple),
            rippleVisible: clsx(classes.rippleVisible, touchRippleClasses$1.rippleVisible),
            ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses$1.ripplePulsate),
            child: clsx(classes.child, touchRippleClasses$1.child),
            childLeaving: clsx(classes.childLeaving, touchRippleClasses$1.childLeaving),
            childPulsate: clsx(classes.childPulsate, touchRippleClasses$1.childPulsate)
          },
          timeout: DURATION,
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize
        }, nextKey.current)]);
        nextKey.current += 1;
        rippleCallback.current = cb2;
      }, [classes]);
      const start2 = reactExports.useCallback((event = {}, options = {}, cb2 = () => {
      }) => {
        const {
          pulsate: pulsate2 = false,
          center = centerProp || options.pulsate,
          fakeElement = false
          // For test purposes
        } = options;
        if ((event == null ? void 0 : event.type) === "mousedown" && ignoringMouseDown.current) {
          ignoringMouseDown.current = false;
          return;
        }
        if ((event == null ? void 0 : event.type) === "touchstart") {
          ignoringMouseDown.current = true;
        }
        const element = fakeElement ? null : container.current;
        const rect = element ? element.getBoundingClientRect() : {
          width: 0,
          height: 0,
          left: 0,
          top: 0
        };
        let rippleX;
        let rippleY;
        let rippleSize;
        if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
          rippleX = Math.round(rect.width / 2);
          rippleY = Math.round(rect.height / 2);
        } else {
          const {
            clientX,
            clientY
          } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
          rippleX = Math.round(clientX - rect.left);
          rippleY = Math.round(clientY - rect.top);
        }
        if (center) {
          rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
          if (rippleSize % 2 === 0) {
            rippleSize += 1;
          }
        } else {
          const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
          const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
          rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
        }
        if (event != null && event.touches) {
          if (startTimerCommit.current === null) {
            startTimerCommit.current = () => {
              startCommit({
                pulsate: pulsate2,
                rippleX,
                rippleY,
                rippleSize,
                cb: cb2
              });
            };
            startTimer.current = setTimeout(() => {
              if (startTimerCommit.current) {
                startTimerCommit.current();
                startTimerCommit.current = null;
              }
            }, DELAY_RIPPLE);
          }
        } else {
          startCommit({
            pulsate: pulsate2,
            rippleX,
            rippleY,
            rippleSize,
            cb: cb2
          });
        }
      }, [centerProp, startCommit]);
      const pulsate = reactExports.useCallback(() => {
        start2({}, {
          pulsate: true
        });
      }, [start2]);
      const stop = reactExports.useCallback((event, cb2) => {
        clearTimeout(startTimer.current);
        if ((event == null ? void 0 : event.type) === "touchend" && startTimerCommit.current) {
          startTimerCommit.current();
          startTimerCommit.current = null;
          startTimer.current = setTimeout(() => {
            stop(event, cb2);
          });
          return;
        }
        startTimerCommit.current = null;
        setRipples((oldRipples) => {
          if (oldRipples.length > 0) {
            return oldRipples.slice(1);
          }
          return oldRipples;
        });
        rippleCallback.current = cb2;
      }, []);
      reactExports.useImperativeHandle(ref, () => ({
        pulsate,
        start: start2,
        stop
      }), [pulsate, start2, stop]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(TouchRippleRoot, _extends$1({
        className: clsx(touchRippleClasses$1.root, classes.root, className),
        ref: container
      }, other, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionGroup$1, {
          component: null,
          exit: true,
          children: ripples
        })
      }));
    });
    const TouchRipple$1 = TouchRipple;
    function getButtonBaseUtilityClass(slot) {
      return generateUtilityClass("MuiButtonBase", slot);
    }
    const buttonBaseClasses = generateUtilityClasses("MuiButtonBase", ["root", "disabled", "focusVisible"]);
    const buttonBaseClasses$1 = buttonBaseClasses;
    const _excluded$1F = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
    const useUtilityClasses$1b = (ownerState) => {
      const {
        disabled,
        focusVisible,
        focusVisibleClassName,
        classes
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
      };
      const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
      if (focusVisible && focusVisibleClassName) {
        composedClasses.root += ` ${focusVisibleClassName}`;
      }
      return composedClasses;
    };
    const ButtonBaseRoot = styled$1("button", {
      name: "MuiButtonBase",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      position: "relative",
      boxSizing: "border-box",
      WebkitTapHighlightColor: "transparent",
      backgroundColor: "transparent",
      // Reset default value
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      border: 0,
      margin: 0,
      // Remove the margin in Safari
      borderRadius: 0,
      padding: 0,
      // Remove the padding in Firefox
      cursor: "pointer",
      userSelect: "none",
      verticalAlign: "middle",
      MozAppearance: "none",
      // Reset
      WebkitAppearance: "none",
      // Reset
      textDecoration: "none",
      // So we take precedent over the style of a native <a /> element.
      color: "inherit",
      "&::-moz-focus-inner": {
        borderStyle: "none"
        // Remove Firefox dotted outline.
      },
      [`&.${buttonBaseClasses$1.disabled}`]: {
        pointerEvents: "none",
        // Disable link interactions
        cursor: "default"
      },
      "@media print": {
        colorAdjust: "exact"
      }
    });
    const ButtonBase = /* @__PURE__ */ reactExports.forwardRef(function ButtonBase2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiButtonBase"
      });
      const {
        action,
        centerRipple = false,
        children,
        className,
        component = "button",
        disabled = false,
        disableRipple = false,
        disableTouchRipple = false,
        focusRipple = false,
        LinkComponent = "a",
        onBlur,
        onClick,
        onContextMenu,
        onDragLeave,
        onFocus,
        onFocusVisible,
        onKeyDown,
        onKeyUp,
        onMouseDown,
        onMouseLeave,
        onMouseUp,
        onTouchEnd,
        onTouchMove,
        onTouchStart,
        tabIndex = 0,
        TouchRippleProps,
        touchRippleRef,
        type
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1F);
      const buttonRef = reactExports.useRef(null);
      const rippleRef = reactExports.useRef(null);
      const handleRippleRef = useForkRef$2(rippleRef, touchRippleRef);
      const {
        isFocusVisibleRef,
        onFocus: handleFocusVisible,
        onBlur: handleBlurVisible,
        ref: focusVisibleRef
      } = useIsFocusVisible();
      const [focusVisible, setFocusVisible] = reactExports.useState(false);
      if (disabled && focusVisible) {
        setFocusVisible(false);
      }
      reactExports.useImperativeHandle(action, () => ({
        focusVisible: () => {
          setFocusVisible(true);
          buttonRef.current.focus();
        }
      }), []);
      const [mountedState, setMountedState] = reactExports.useState(false);
      reactExports.useEffect(() => {
        setMountedState(true);
      }, []);
      const enableTouchRipple = mountedState && !disableRipple && !disabled;
      reactExports.useEffect(() => {
        if (focusVisible && focusRipple && !disableRipple && mountedState) {
          rippleRef.current.pulsate();
        }
      }, [disableRipple, focusRipple, focusVisible, mountedState]);
      function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
        return useEventCallback$2((event) => {
          if (eventCallback) {
            eventCallback(event);
          }
          const ignore = skipRippleAction;
          if (!ignore && rippleRef.current) {
            rippleRef.current[rippleAction](event);
          }
          return true;
        });
      }
      const handleMouseDown = useRippleHandler("start", onMouseDown);
      const handleContextMenu = useRippleHandler("stop", onContextMenu);
      const handleDragLeave = useRippleHandler("stop", onDragLeave);
      const handleMouseUp = useRippleHandler("stop", onMouseUp);
      const handleMouseLeave = useRippleHandler("stop", (event) => {
        if (focusVisible) {
          event.preventDefault();
        }
        if (onMouseLeave) {
          onMouseLeave(event);
        }
      });
      const handleTouchStart = useRippleHandler("start", onTouchStart);
      const handleTouchEnd = useRippleHandler("stop", onTouchEnd);
      const handleTouchMove = useRippleHandler("stop", onTouchMove);
      const handleBlur = useRippleHandler("stop", (event) => {
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) {
          setFocusVisible(false);
        }
        if (onBlur) {
          onBlur(event);
        }
      }, false);
      const handleFocus = useEventCallback$2((event) => {
        if (!buttonRef.current) {
          buttonRef.current = event.currentTarget;
        }
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
          setFocusVisible(true);
          if (onFocusVisible) {
            onFocusVisible(event);
          }
        }
        if (onFocus) {
          onFocus(event);
        }
      });
      const isNonNativeButton = () => {
        const button = buttonRef.current;
        return component && component !== "button" && !(button.tagName === "A" && button.href);
      };
      const keydownRef = reactExports.useRef(false);
      const handleKeyDown2 = useEventCallback$2((event) => {
        if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
          keydownRef.current = true;
          rippleRef.current.stop(event, () => {
            rippleRef.current.start(event);
          });
        }
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
          event.preventDefault();
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
          event.preventDefault();
          if (onClick) {
            onClick(event);
          }
        }
      });
      const handleKeyUp = useEventCallback$2((event) => {
        if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
          keydownRef.current = false;
          rippleRef.current.stop(event, () => {
            rippleRef.current.pulsate(event);
          });
        }
        if (onKeyUp) {
          onKeyUp(event);
        }
        if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
          onClick(event);
        }
      });
      let ComponentProp = component;
      if (ComponentProp === "button" && (other.href || other.to)) {
        ComponentProp = LinkComponent;
      }
      const buttonProps = {};
      if (ComponentProp === "button") {
        buttonProps.type = type === void 0 ? "button" : type;
        buttonProps.disabled = disabled;
      } else {
        if (!other.href && !other.to) {
          buttonProps.role = "button";
        }
        if (disabled) {
          buttonProps["aria-disabled"] = disabled;
        }
      }
      const handleRef = useForkRef$2(ref, focusVisibleRef, buttonRef);
      const ownerState = _extends$1({}, props, {
        centerRipple,
        component,
        disabled,
        disableRipple,
        disableTouchRipple,
        focusRipple,
        tabIndex,
        focusVisible
      });
      const classes = useUtilityClasses$1b(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(ButtonBaseRoot, _extends$1({
        as: ComponentProp,
        className: clsx(classes.root, className),
        ownerState,
        onBlur: handleBlur,
        onClick,
        onContextMenu: handleContextMenu,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown2,
        onKeyUp: handleKeyUp,
        onMouseDown: handleMouseDown,
        onMouseLeave: handleMouseLeave,
        onMouseUp: handleMouseUp,
        onDragLeave: handleDragLeave,
        onTouchEnd: handleTouchEnd,
        onTouchMove: handleTouchMove,
        onTouchStart: handleTouchStart,
        ref: handleRef,
        tabIndex: disabled ? -1 : tabIndex,
        type
      }, buttonProps, other, {
        children: [children, enableTouchRipple ? (
          /* TouchRipple is only needed client-side, x2 boost on the server. */
          /* @__PURE__ */ jsxRuntimeExports.jsx(TouchRipple$1, _extends$1({
            ref: handleRippleRef,
            center: centerRipple
          }, TouchRippleProps))
        ) : null]
      }));
    });
    const ButtonBase$1 = ButtonBase;
    function getButtonUtilityClass(slot) {
      return generateUtilityClass("MuiButton", slot);
    }
    const buttonClasses = generateUtilityClasses("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]);
    const buttonClasses$1 = buttonClasses;
    const ButtonGroupContext = /* @__PURE__ */ reactExports.createContext({});
    const ButtonGroupContext$1 = ButtonGroupContext;
    const _excluded$1E = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
    const useUtilityClasses$1a = (ownerState) => {
      const {
        color: color2,
        disableElevation,
        fullWidth,
        size,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ["root", variant, `${variant}${capitalize(color2)}`, `size${capitalize(size)}`, `${variant}Size${capitalize(size)}`, color2 === "inherit" && "colorInherit", disableElevation && "disableElevation", fullWidth && "fullWidth"],
        label: ["label"],
        startIcon: ["startIcon", `iconSize${capitalize(size)}`],
        endIcon: ["endIcon", `iconSize${capitalize(size)}`]
      };
      const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const commonIconStyles = (ownerState) => _extends$1({}, ownerState.size === "small" && {
      "& > *:nth-of-type(1)": {
        fontSize: 18
      }
    }, ownerState.size === "medium" && {
      "& > *:nth-of-type(1)": {
        fontSize: 20
      }
    }, ownerState.size === "large" && {
      "& > *:nth-of-type(1)": {
        fontSize: 22
      }
    });
    const ButtonRoot = styled$1(ButtonBase$1, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiButton",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[ownerState.variant], styles2[`${ownerState.variant}${capitalize(ownerState.color)}`], styles2[`size${capitalize(ownerState.size)}`], styles2[`${ownerState.variant}Size${capitalize(ownerState.size)}`], ownerState.color === "inherit" && styles2.colorInherit, ownerState.disableElevation && styles2.disableElevation, ownerState.fullWidth && styles2.fullWidth];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _theme$palette$getCon, _theme$palette;
      const inheritContainedBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey[300] : theme.palette.grey[800];
      const inheritContainedHoverBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey.A100 : theme.palette.grey[700];
      return _extends$1({}, theme.typography.button, {
        minWidth: 64,
        padding: "6px 16px",
        borderRadius: (theme.vars || theme).shape.borderRadius,
        transition: theme.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
          duration: theme.transitions.duration.short
        }),
        "&:hover": _extends$1({
          textDecoration: "none",
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
          border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }, ownerState.variant === "contained" && {
          backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
          boxShadow: (theme.vars || theme).shadows[4],
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            boxShadow: (theme.vars || theme).shadows[2],
            backgroundColor: (theme.vars || theme).palette.grey[300]
          }
        }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: (theme.vars || theme).palette[ownerState.color].main
          }
        }),
        "&:active": _extends$1({}, ownerState.variant === "contained" && {
          boxShadow: (theme.vars || theme).shadows[8]
        }),
        [`&.${buttonClasses$1.focusVisible}`]: _extends$1({}, ownerState.variant === "contained" && {
          boxShadow: (theme.vars || theme).shadows[6]
        }),
        [`&.${buttonClasses$1.disabled}`]: _extends$1({
          color: (theme.vars || theme).palette.action.disabled
        }, ownerState.variant === "outlined" && {
          border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
        }, ownerState.variant === "contained" && {
          color: (theme.vars || theme).palette.action.disabled,
          boxShadow: (theme.vars || theme).shadows[0],
          backgroundColor: (theme.vars || theme).palette.action.disabledBackground
        })
      }, ownerState.variant === "text" && {
        padding: "6px 8px"
      }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
        color: (theme.vars || theme).palette[ownerState.color].main
      }, ownerState.variant === "outlined" && {
        padding: "5px 15px",
        border: "1px solid currentColor"
      }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
        color: (theme.vars || theme).palette[ownerState.color].main,
        border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
      }, ownerState.variant === "contained" && {
        color: theme.vars ? (
          // this is safe because grey does not change between default light/dark mode
          theme.vars.palette.text.primary
        ) : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
        backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
        boxShadow: (theme.vars || theme).shadows[2]
      }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
        color: (theme.vars || theme).palette[ownerState.color].contrastText,
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
      }, ownerState.color === "inherit" && {
        color: "inherit",
        borderColor: "currentColor"
      }, ownerState.size === "small" && ownerState.variant === "text" && {
        padding: "4px 5px",
        fontSize: theme.typography.pxToRem(13)
      }, ownerState.size === "large" && ownerState.variant === "text" && {
        padding: "8px 11px",
        fontSize: theme.typography.pxToRem(15)
      }, ownerState.size === "small" && ownerState.variant === "outlined" && {
        padding: "3px 9px",
        fontSize: theme.typography.pxToRem(13)
      }, ownerState.size === "large" && ownerState.variant === "outlined" && {
        padding: "7px 21px",
        fontSize: theme.typography.pxToRem(15)
      }, ownerState.size === "small" && ownerState.variant === "contained" && {
        padding: "4px 10px",
        fontSize: theme.typography.pxToRem(13)
      }, ownerState.size === "large" && ownerState.variant === "contained" && {
        padding: "8px 22px",
        fontSize: theme.typography.pxToRem(15)
      }, ownerState.fullWidth && {
        width: "100%"
      });
    }, ({
      ownerState
    }) => ownerState.disableElevation && {
      boxShadow: "none",
      "&:hover": {
        boxShadow: "none"
      },
      [`&.${buttonClasses$1.focusVisible}`]: {
        boxShadow: "none"
      },
      "&:active": {
        boxShadow: "none"
      },
      [`&.${buttonClasses$1.disabled}`]: {
        boxShadow: "none"
      }
    });
    const ButtonStartIcon = styled$1("span", {
      name: "MuiButton",
      slot: "StartIcon",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.startIcon, styles2[`iconSize${capitalize(ownerState.size)}`]];
      }
    })(({
      ownerState
    }) => _extends$1({
      display: "inherit",
      marginRight: 8,
      marginLeft: -4
    }, ownerState.size === "small" && {
      marginLeft: -2
    }, commonIconStyles(ownerState)));
    const ButtonEndIcon = styled$1("span", {
      name: "MuiButton",
      slot: "EndIcon",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.endIcon, styles2[`iconSize${capitalize(ownerState.size)}`]];
      }
    })(({
      ownerState
    }) => _extends$1({
      display: "inherit",
      marginRight: -4,
      marginLeft: 8
    }, ownerState.size === "small" && {
      marginRight: -2
    }, commonIconStyles(ownerState)));
    const Button = /* @__PURE__ */ reactExports.forwardRef(function Button2(inProps, ref) {
      const contextProps = reactExports.useContext(ButtonGroupContext$1);
      const resolvedProps = resolveProps(contextProps, inProps);
      const props = useThemeProps({
        props: resolvedProps,
        name: "MuiButton"
      });
      const {
        children,
        color: color2 = "primary",
        component = "button",
        className,
        disabled = false,
        disableElevation = false,
        disableFocusRipple = false,
        endIcon: endIconProp,
        focusVisibleClassName,
        fullWidth = false,
        size = "medium",
        startIcon: startIconProp,
        type,
        variant = "text"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1E);
      const ownerState = _extends$1({}, props, {
        color: color2,
        component,
        disabled,
        disableElevation,
        disableFocusRipple,
        fullWidth,
        size,
        type,
        variant
      });
      const classes = useUtilityClasses$1a(ownerState);
      const startIcon = startIconProp && /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonStartIcon, {
        className: classes.startIcon,
        ownerState,
        children: startIconProp
      });
      const endIcon = endIconProp && /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonEndIcon, {
        className: classes.endIcon,
        ownerState,
        children: endIconProp
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(ButtonRoot, _extends$1({
        ownerState,
        className: clsx(contextProps.className, classes.root, className),
        component,
        disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
        ref,
        type
      }, other, {
        classes,
        children: [startIcon, children, endIcon]
      }));
    });
    const Button$1 = Button;
    const reflow = (node2) => node2.scrollTop;
    function getTransitionProps(props, options) {
      var _style$transitionDura, _style$transitionTimi;
      const {
        timeout,
        easing: easing2,
        style: style2 = {}
      } = props;
      return {
        duration: (_style$transitionDura = style2.transitionDuration) != null ? _style$transitionDura : typeof timeout === "number" ? timeout : timeout[options.mode] || 0,
        easing: (_style$transitionTimi = style2.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
        delay: style2.transitionDelay
      };
    }
    const _excluded$1D = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
    const styles$3 = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      }
    };
    const Fade = /* @__PURE__ */ reactExports.forwardRef(function Fade2(props, ref) {
      const theme = useTheme();
      const defaultTimeout = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
      };
      const {
        addEndListener,
        appear = true,
        children,
        easing: easing2,
        in: inProp,
        onEnter,
        onEntered,
        onEntering,
        onExit,
        onExited,
        onExiting,
        style: style2,
        timeout = defaultTimeout,
        // eslint-disable-next-line react/prop-types
        TransitionComponent = Transition$1
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1D);
      const nodeRef = reactExports.useRef(null);
      const handleRef = useForkRef$2(nodeRef, children.ref, ref);
      const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
        if (callback) {
          const node2 = nodeRef.current;
          if (maybeIsAppearing === void 0) {
            callback(node2);
          } else {
            callback(node2, maybeIsAppearing);
          }
        }
      };
      const handleEntering = normalizedTransitionCallback(onEntering);
      const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
        reflow(node2);
        const transitionProps = getTransitionProps({
          style: style2,
          timeout,
          easing: easing2
        }, {
          mode: "enter"
        });
        node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
        node2.style.transition = theme.transitions.create("opacity", transitionProps);
        if (onEnter) {
          onEnter(node2, isAppearing);
        }
      });
      const handleEntered = normalizedTransitionCallback(onEntered);
      const handleExiting = normalizedTransitionCallback(onExiting);
      const handleExit = normalizedTransitionCallback((node2) => {
        const transitionProps = getTransitionProps({
          style: style2,
          timeout,
          easing: easing2
        }, {
          mode: "exit"
        });
        node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
        node2.style.transition = theme.transitions.create("opacity", transitionProps);
        if (onExit) {
          onExit(node2);
        }
      });
      const handleExited = normalizedTransitionCallback(onExited);
      const handleAddEndListener = (next2) => {
        if (addEndListener) {
          addEndListener(nodeRef.current, next2);
        }
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$1({
        appear,
        in: inProp,
        nodeRef,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout
      }, other, {
        children: (state, childProps) => {
          return /* @__PURE__ */ reactExports.cloneElement(children, _extends$1({
            style: _extends$1({
              opacity: 0,
              visibility: state === "exited" && !inProp ? "hidden" : void 0
            }, styles$3[state], style2, children.props.style),
            ref: handleRef
          }, childProps));
        }
      }));
    });
    const Fade$1 = Fade;
    function getBackdropUtilityClass(slot) {
      return generateUtilityClass("MuiBackdrop", slot);
    }
    generateUtilityClasses("MuiBackdrop", ["root", "invisible"]);
    const _excluded$1C = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
    const useUtilityClasses$19 = (ownerState) => {
      const {
        classes,
        invisible
      } = ownerState;
      const slots = {
        root: ["root", invisible && "invisible"]
      };
      return composeClasses(slots, getBackdropUtilityClass, classes);
    };
    const BackdropRoot = styled$1("div", {
      name: "MuiBackdrop",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.invisible && styles2.invisible];
      }
    })(({
      ownerState
    }) => _extends$1({
      position: "fixed",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      backgroundColor: "rgba(0, 0, 0, 0.5)",
      WebkitTapHighlightColor: "transparent"
    }, ownerState.invisible && {
      backgroundColor: "transparent"
    }));
    const Backdrop = /* @__PURE__ */ reactExports.forwardRef(function Backdrop2(inProps, ref) {
      var _slotProps$root, _ref, _slots$root;
      const props = useThemeProps({
        props: inProps,
        name: "MuiBackdrop"
      });
      const {
        children,
        className,
        component = "div",
        components = {},
        componentsProps = {},
        invisible = false,
        open,
        slotProps = {},
        slots = {},
        TransitionComponent = Fade$1,
        transitionDuration
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1C);
      const ownerState = _extends$1({}, props, {
        component,
        invisible
      });
      const classes = useUtilityClasses$19(ownerState);
      const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$1({
        in: open,
        timeout: transitionDuration
      }, other, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(BackdropRoot, _extends$1({
          "aria-hidden": true
        }, rootSlotProps, {
          as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
          className: clsx(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
          ownerState: _extends$1({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
          classes,
          ref,
          children
        }))
      }));
    });
    const Backdrop$1 = Backdrop;
    const _excluded$1B = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "open", "slotProps", "slots", "theme"];
    const ModalRoot = styled$1("div", {
      name: "MuiModal",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, !ownerState.open && ownerState.exited && styles2.hidden];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      position: "fixed",
      zIndex: (theme.vars || theme).zIndex.modal,
      right: 0,
      bottom: 0,
      top: 0,
      left: 0
    }, !ownerState.open && ownerState.exited && {
      visibility: "hidden"
    }));
    const ModalBackdrop = styled$1(Backdrop$1, {
      name: "MuiModal",
      slot: "Backdrop",
      overridesResolver: (props, styles2) => {
        return styles2.backdrop;
      }
    })({
      zIndex: -1
    });
    const Modal = /* @__PURE__ */ reactExports.forwardRef(function Modal2(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
      const props = useThemeProps({
        name: "MuiModal",
        props: inProps
      });
      const {
        BackdropComponent = ModalBackdrop,
        BackdropProps,
        classes,
        className,
        closeAfterTransition = false,
        children,
        container,
        component,
        components = {},
        componentsProps = {},
        disableAutoFocus = false,
        disableEnforceFocus = false,
        disableEscapeKeyDown = false,
        disablePortal = false,
        disableRestoreFocus = false,
        disableScrollLock = false,
        hideBackdrop = false,
        keepMounted = false,
        onBackdropClick,
        onClose,
        open,
        slotProps,
        slots,
        // eslint-disable-next-line react/prop-types
        theme
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1B);
      const [exited, setExited] = reactExports.useState(true);
      const commonProps = {
        container,
        closeAfterTransition,
        disableAutoFocus,
        disableEnforceFocus,
        disableEscapeKeyDown,
        disablePortal,
        disableRestoreFocus,
        disableScrollLock,
        hideBackdrop,
        keepMounted,
        onBackdropClick,
        onClose,
        open
      };
      const ownerState = _extends$1({}, props, commonProps, {
        exited
      });
      const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
      const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
      const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
      const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ModalUnstyled, _extends$1({
        slots: {
          root: RootSlot,
          backdrop: BackdropSlot
        },
        slotProps: {
          root: () => _extends$1({}, resolveComponentProps$1(rootSlotProps, ownerState), !isHostComponent$1(RootSlot) && {
            as: component,
            theme
          }, {
            className: clsx(className, rootSlotProps == null ? void 0 : rootSlotProps.className, classes == null ? void 0 : classes.root, !ownerState.open && ownerState.exited && (classes == null ? void 0 : classes.hidden))
          }),
          backdrop: () => _extends$1({}, BackdropProps, resolveComponentProps$1(backdropSlotProps, ownerState), {
            className: clsx(backdropSlotProps == null ? void 0 : backdropSlotProps.className, classes == null ? void 0 : classes.backdrop)
          })
        },
        onTransitionEnter: () => setExited(false),
        onTransitionExited: () => setExited(true),
        ref
      }, other, commonProps, {
        children
      }));
    });
    const Modal$1 = Modal;
    function getPaperUtilityClass(slot) {
      return generateUtilityClass("MuiPaper", slot);
    }
    generateUtilityClasses("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);
    const _excluded$1A = ["className", "component", "elevation", "square", "variant"];
    const useUtilityClasses$18 = (ownerState) => {
      const {
        square,
        elevation,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
      };
      return composeClasses(slots, getPaperUtilityClass, classes);
    };
    const PaperRoot = styled$1("div", {
      name: "MuiPaper",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[ownerState.variant], !ownerState.square && styles2.rounded, ownerState.variant === "elevation" && styles2[`elevation${ownerState.elevation}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _theme$vars$overlays;
      return _extends$1({
        backgroundColor: (theme.vars || theme).palette.background.paper,
        color: (theme.vars || theme).palette.text.primary,
        transition: theme.transitions.create("box-shadow")
      }, !ownerState.square && {
        borderRadius: theme.shape.borderRadius
      }, ownerState.variant === "outlined" && {
        border: `1px solid ${(theme.vars || theme).palette.divider}`
      }, ownerState.variant === "elevation" && _extends$1({
        boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
      }, !theme.vars && theme.palette.mode === "dark" && {
        backgroundImage: `linear-gradient(${alpha("#fff", getOverlayAlpha$1(ownerState.elevation))}, ${alpha("#fff", getOverlayAlpha$1(ownerState.elevation))})`
      }, theme.vars && {
        backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
      }));
    });
    const Paper = /* @__PURE__ */ reactExports.forwardRef(function Paper2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPaper"
      });
      const {
        className,
        component = "div",
        elevation = 1,
        square = false,
        variant = "elevation"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1A);
      const ownerState = _extends$1({}, props, {
        component,
        elevation,
        square,
        variant
      });
      const classes = useUtilityClasses$18(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PaperRoot, _extends$1({
        as: component,
        ownerState,
        className: clsx(classes.root, className),
        ref
      }, other));
    });
    const Paper$1 = Paper;
    function getDialogUtilityClass(slot) {
      return generateUtilityClass("MuiDialog", slot);
    }
    const dialogClasses = generateUtilityClasses("MuiDialog", ["root", "scrollPaper", "scrollBody", "container", "paper", "paperScrollPaper", "paperScrollBody", "paperWidthFalse", "paperWidthXs", "paperWidthSm", "paperWidthMd", "paperWidthLg", "paperWidthXl", "paperFullWidth", "paperFullScreen"]);
    const dialogClasses$1 = dialogClasses;
    const DialogContext = /* @__PURE__ */ reactExports.createContext({});
    const DialogContext$1 = DialogContext;
    const _excluded$1z = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
    const DialogBackdrop = styled$1(Backdrop$1, {
      name: "MuiDialog",
      slot: "Backdrop",
      overrides: (props, styles2) => styles2.backdrop
    })({
      // Improve scrollable dialog support.
      zIndex: -1
    });
    const useUtilityClasses$17 = (ownerState) => {
      const {
        classes,
        scroll,
        maxWidth: maxWidth2,
        fullWidth,
        fullScreen
      } = ownerState;
      const slots = {
        root: ["root"],
        container: ["container", `scroll${capitalize(scroll)}`],
        paper: ["paper", `paperScroll${capitalize(scroll)}`, `paperWidth${capitalize(String(maxWidth2))}`, fullWidth && "paperFullWidth", fullScreen && "paperFullScreen"]
      };
      return composeClasses(slots, getDialogUtilityClass, classes);
    };
    const DialogRoot = styled$1(Modal$1, {
      name: "MuiDialog",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      "@media print": {
        // Use !important to override the Modal inline-style.
        position: "absolute !important"
      }
    });
    const DialogContainer = styled$1("div", {
      name: "MuiDialog",
      slot: "Container",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.container, styles2[`scroll${capitalize(ownerState.scroll)}`]];
      }
    })(({
      ownerState
    }) => _extends$1({
      height: "100%",
      "@media print": {
        height: "auto"
      },
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0
    }, ownerState.scroll === "paper" && {
      display: "flex",
      justifyContent: "center",
      alignItems: "center"
    }, ownerState.scroll === "body" && {
      overflowY: "auto",
      overflowX: "hidden",
      textAlign: "center",
      "&:after": {
        content: '""',
        display: "inline-block",
        verticalAlign: "middle",
        height: "100%",
        width: "0"
      }
    }));
    const DialogPaper = styled$1(Paper$1, {
      name: "MuiDialog",
      slot: "Paper",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.paper, styles2[`scrollPaper${capitalize(ownerState.scroll)}`], styles2[`paperWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles2.paperFullWidth, ownerState.fullScreen && styles2.paperFullScreen];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      margin: 32,
      position: "relative",
      overflowY: "auto",
      // Fix IE11 issue, to remove at some point.
      "@media print": {
        overflowY: "visible",
        boxShadow: "none"
      }
    }, ownerState.scroll === "paper" && {
      display: "flex",
      flexDirection: "column",
      maxHeight: "calc(100% - 64px)"
    }, ownerState.scroll === "body" && {
      display: "inline-block",
      verticalAlign: "middle",
      textAlign: "left"
      // 'initial' doesn't work on IE11
    }, !ownerState.maxWidth && {
      maxWidth: "calc(100% - 64px)"
    }, ownerState.maxWidth === "xs" && {
      maxWidth: theme.breakpoints.unit === "px" ? Math.max(theme.breakpoints.values.xs, 444) : `${theme.breakpoints.values.xs}${theme.breakpoints.unit}`,
      [`&.${dialogClasses$1.paperScrollBody}`]: {
        [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
          maxWidth: "calc(100% - 64px)"
        }
      }
    }, ownerState.maxWidth && ownerState.maxWidth !== "xs" && {
      maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
      [`&.${dialogClasses$1.paperScrollBody}`]: {
        [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
          maxWidth: "calc(100% - 64px)"
        }
      }
    }, ownerState.fullWidth && {
      width: "calc(100% - 64px)"
    }, ownerState.fullScreen && {
      margin: 0,
      width: "100%",
      maxWidth: "100%",
      height: "100%",
      maxHeight: "none",
      borderRadius: 0,
      [`&.${dialogClasses$1.paperScrollBody}`]: {
        margin: 0,
        maxWidth: "100%"
      }
    }));
    const Dialog = /* @__PURE__ */ reactExports.forwardRef(function Dialog2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDialog"
      });
      const theme = useTheme();
      const defaultTransitionDuration = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
      };
      const {
        "aria-describedby": ariaDescribedby,
        "aria-labelledby": ariaLabelledbyProp,
        BackdropComponent,
        BackdropProps,
        children,
        className,
        disableEscapeKeyDown = false,
        fullScreen = false,
        fullWidth = false,
        maxWidth: maxWidth2 = "sm",
        onBackdropClick,
        onClose,
        open,
        PaperComponent = Paper$1,
        PaperProps = {},
        scroll = "paper",
        TransitionComponent = Fade$1,
        transitionDuration = defaultTransitionDuration,
        TransitionProps
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1z);
      const ownerState = _extends$1({}, props, {
        disableEscapeKeyDown,
        fullScreen,
        fullWidth,
        maxWidth: maxWidth2,
        scroll
      });
      const classes = useUtilityClasses$17(ownerState);
      const backdropClick = reactExports.useRef();
      const handleMouseDown = (event) => {
        backdropClick.current = event.target === event.currentTarget;
      };
      const handleBackdropClick = (event) => {
        if (!backdropClick.current) {
          return;
        }
        backdropClick.current = null;
        if (onBackdropClick) {
          onBackdropClick(event);
        }
        if (onClose) {
          onClose(event, "backdropClick");
        }
      };
      const ariaLabelledby = useId$2(ariaLabelledbyProp);
      const dialogContextValue = reactExports.useMemo(() => {
        return {
          titleId: ariaLabelledby
        };
      }, [ariaLabelledby]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(DialogRoot, _extends$1({
        className: clsx(classes.root, className),
        closeAfterTransition: true,
        components: {
          Backdrop: DialogBackdrop
        },
        componentsProps: {
          backdrop: _extends$1({
            transitionDuration,
            as: BackdropComponent
          }, BackdropProps)
        },
        disableEscapeKeyDown,
        onClose,
        open,
        ref,
        onClick: handleBackdropClick,
        ownerState
      }, other, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$1({
          appear: true,
          in: open,
          timeout: transitionDuration,
          role: "presentation"
        }, TransitionProps, {
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContainer, {
            className: clsx(classes.container),
            onMouseDown: handleMouseDown,
            ownerState,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(DialogPaper, _extends$1({
              as: PaperComponent,
              elevation: 24,
              role: "dialog",
              "aria-describedby": ariaDescribedby,
              "aria-labelledby": ariaLabelledby
            }, PaperProps, {
              className: clsx(classes.paper, PaperProps.className),
              ownerState,
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContext$1.Provider, {
                value: dialogContextValue,
                children
              })
            }))
          })
        }))
      }));
    });
    const MuiDialog = Dialog;
    function getDialogActionsUtilityClass(slot) {
      return generateUtilityClass("MuiDialogActions", slot);
    }
    generateUtilityClasses("MuiDialogActions", ["root", "spacing"]);
    const _excluded$1y = ["className", "disableSpacing"];
    const useUtilityClasses$16 = (ownerState) => {
      const {
        classes,
        disableSpacing
      } = ownerState;
      const slots = {
        root: ["root", !disableSpacing && "spacing"]
      };
      return composeClasses(slots, getDialogActionsUtilityClass, classes);
    };
    const DialogActionsRoot = styled$1("div", {
      name: "MuiDialogActions",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, !ownerState.disableSpacing && styles2.spacing];
      }
    })(({
      ownerState
    }) => _extends$1({
      display: "flex",
      alignItems: "center",
      padding: 8,
      justifyContent: "flex-end",
      flex: "0 0 auto"
    }, !ownerState.disableSpacing && {
      "& > :not(:first-of-type)": {
        marginLeft: 8
      }
    }));
    const DialogActions = /* @__PURE__ */ reactExports.forwardRef(function DialogActions2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDialogActions"
      });
      const {
        className,
        disableSpacing = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1y);
      const ownerState = _extends$1({}, props, {
        disableSpacing
      });
      const classes = useUtilityClasses$16(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(DialogActionsRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref
      }, other));
    });
    const DialogActions$1 = DialogActions;
    function getDialogContentUtilityClass(slot) {
      return generateUtilityClass("MuiDialogContent", slot);
    }
    generateUtilityClasses("MuiDialogContent", ["root", "dividers"]);
    function getDialogTitleUtilityClass(slot) {
      return generateUtilityClass("MuiDialogTitle", slot);
    }
    const dialogTitleClasses = generateUtilityClasses("MuiDialogTitle", ["root"]);
    const dialogTitleClasses$1 = dialogTitleClasses;
    const _excluded$1x = ["className", "dividers"];
    const useUtilityClasses$15 = (ownerState) => {
      const {
        classes,
        dividers
      } = ownerState;
      const slots = {
        root: ["root", dividers && "dividers"]
      };
      return composeClasses(slots, getDialogContentUtilityClass, classes);
    };
    const DialogContentRoot = styled$1("div", {
      name: "MuiDialogContent",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.dividers && styles2.dividers];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      flex: "1 1 auto",
      // Add iOS momentum scrolling for iOS < 13.0
      WebkitOverflowScrolling: "touch",
      overflowY: "auto",
      padding: "20px 24px"
    }, ownerState.dividers ? {
      padding: "16px 24px",
      borderTop: `1px solid ${(theme.vars || theme).palette.divider}`,
      borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
    } : {
      [`.${dialogTitleClasses$1.root} + &`]: {
        paddingTop: 0
      }
    }));
    const DialogContent = /* @__PURE__ */ reactExports.forwardRef(function DialogContent2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDialogContent"
      });
      const {
        className,
        dividers = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1x);
      const ownerState = _extends$1({}, props, {
        dividers
      });
      const classes = useUtilityClasses$15(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContentRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref
      }, other));
    });
    const DialogContent$1 = DialogContent;
    function getTypographyUtilityClass(slot) {
      return generateUtilityClass("MuiTypography", slot);
    }
    generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
    const _excluded$1w = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
    const useUtilityClasses$14 = (ownerState) => {
      const {
        align,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
      };
      return composeClasses(slots, getTypographyUtilityClass, classes);
    };
    const TypographyRoot = styled$1("span", {
      name: "MuiTypography",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.variant && styles2[ownerState.variant], ownerState.align !== "inherit" && styles2[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles2.noWrap, ownerState.gutterBottom && styles2.gutterBottom, ownerState.paragraph && styles2.paragraph];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      margin: 0
    }, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== "inherit" && {
      textAlign: ownerState.align
    }, ownerState.noWrap && {
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap"
    }, ownerState.gutterBottom && {
      marginBottom: "0.35em"
    }, ownerState.paragraph && {
      marginBottom: 16
    }));
    const defaultVariantMapping = {
      h1: "h1",
      h2: "h2",
      h3: "h3",
      h4: "h4",
      h5: "h5",
      h6: "h6",
      subtitle1: "h6",
      subtitle2: "h6",
      body1: "p",
      body2: "p",
      inherit: "p"
    };
    const colorTransformations = {
      primary: "primary.main",
      textPrimary: "text.primary",
      secondary: "secondary.main",
      textSecondary: "text.secondary",
      error: "error.main"
    };
    const transformDeprecatedColors = (color2) => {
      return colorTransformations[color2] || color2;
    };
    const Typography = /* @__PURE__ */ reactExports.forwardRef(function Typography2(inProps, ref) {
      const themeProps = useThemeProps({
        props: inProps,
        name: "MuiTypography"
      });
      const color2 = transformDeprecatedColors(themeProps.color);
      const props = extendSxProp(_extends$1({}, themeProps, {
        color: color2
      }));
      const {
        align = "inherit",
        className,
        component,
        gutterBottom = false,
        noWrap = false,
        paragraph = false,
        variant = "body1",
        variantMapping = defaultVariantMapping
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1w);
      const ownerState = _extends$1({}, props, {
        align,
        color: color2,
        className,
        component,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        variantMapping
      });
      const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
      const classes = useUtilityClasses$14(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(TypographyRoot, _extends$1({
        as: Component,
        ref,
        ownerState,
        className: clsx(classes.root, className)
      }, other));
    });
    const Typography$1 = Typography;
    function getDialogContentTextUtilityClass(slot) {
      return generateUtilityClass("MuiDialogContentText", slot);
    }
    generateUtilityClasses("MuiDialogContentText", ["root"]);
    const _excluded$1v = ["children", "className"];
    const useUtilityClasses$13 = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const DialogContentTextRoot = styled$1(Typography$1, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiDialogContentText",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({});
    const DialogContentText = /* @__PURE__ */ reactExports.forwardRef(function DialogContentText2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDialogContentText"
      });
      const {
        className
      } = props, ownerState = _objectWithoutPropertiesLoose(props, _excluded$1v);
      const classes = useUtilityClasses$13(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContentTextRoot, _extends$1({
        component: "p",
        variant: "body1",
        color: "text.secondary",
        ref,
        ownerState,
        className: clsx(classes.root, className)
      }, props, {
        classes
      }));
    });
    const DialogContentText$1 = DialogContentText;
    const _excluded$1u = ["className", "id"];
    const useUtilityClasses$12 = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getDialogTitleUtilityClass, classes);
    };
    const DialogTitleRoot = styled$1(Typography$1, {
      name: "MuiDialogTitle",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      padding: "16px 24px",
      flex: "0 0 auto"
    });
    const DialogTitle = /* @__PURE__ */ reactExports.forwardRef(function DialogTitle2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDialogTitle"
      });
      const {
        className,
        id: idProp
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1u);
      const ownerState = props;
      const classes = useUtilityClasses$12(ownerState);
      const {
        titleId = idProp
      } = reactExports.useContext(DialogContext$1);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(DialogTitleRoot, _extends$1({
        component: "h2",
        className: clsx(classes.root, className),
        ownerState,
        ref,
        variant: "h6",
        id: idProp != null ? idProp : titleId
      }, other));
    });
    const DialogTitle$1 = DialogTitle;
    function formControlState({
      props,
      states,
      muiFormControl
    }) {
      return states.reduce((acc, state) => {
        acc[state] = props[state];
        if (muiFormControl) {
          if (typeof props[state] === "undefined") {
            acc[state] = muiFormControl[state];
          }
        }
        return acc;
      }, {});
    }
    const FormControlContext = /* @__PURE__ */ reactExports.createContext(void 0);
    const FormControlContext$1 = FormControlContext;
    function useFormControl() {
      return reactExports.useContext(FormControlContext$1);
    }
    function GlobalStyles(props) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles$1, _extends$1({}, props, {
        defaultTheme: defaultTheme$1,
        themeId: THEME_ID
      }));
    }
    function hasValue(value2) {
      return value2 != null && !(Array.isArray(value2) && value2.length === 0);
    }
    function isFilled(obj, SSR = false) {
      return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
    }
    function isAdornedStart(obj) {
      return obj.startAdornment;
    }
    function getInputBaseUtilityClass(slot) {
      return generateUtilityClass("MuiInputBase", slot);
    }
    const inputBaseClasses = generateUtilityClasses("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
    const inputBaseClasses$1 = inputBaseClasses;
    const _excluded$1t = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
    const rootOverridesResolver = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.formControl && styles2.formControl, ownerState.startAdornment && styles2.adornedStart, ownerState.endAdornment && styles2.adornedEnd, ownerState.error && styles2.error, ownerState.size === "small" && styles2.sizeSmall, ownerState.multiline && styles2.multiline, ownerState.color && styles2[`color${capitalize(ownerState.color)}`], ownerState.fullWidth && styles2.fullWidth, ownerState.hiddenLabel && styles2.hiddenLabel];
    };
    const inputOverridesResolver = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.input, ownerState.size === "small" && styles2.inputSizeSmall, ownerState.multiline && styles2.inputMultiline, ownerState.type === "search" && styles2.inputTypeSearch, ownerState.startAdornment && styles2.inputAdornedStart, ownerState.endAdornment && styles2.inputAdornedEnd, ownerState.hiddenLabel && styles2.inputHiddenLabel];
    };
    const useUtilityClasses$11 = (ownerState) => {
      const {
        classes,
        color: color2,
        disabled,
        error,
        endAdornment,
        focused,
        formControl,
        fullWidth,
        hiddenLabel,
        multiline,
        readOnly,
        size,
        startAdornment,
        type
      } = ownerState;
      const slots = {
        root: ["root", `color${capitalize(color2)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size === "small" && "sizeSmall", multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel", readOnly && "readOnly"],
        input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd", readOnly && "readOnly"]
      };
      return composeClasses(slots, getInputBaseUtilityClass, classes);
    };
    const InputBaseRoot = styled$1("div", {
      name: "MuiInputBase",
      slot: "Root",
      overridesResolver: rootOverridesResolver
    })(({
      theme,
      ownerState
    }) => _extends$1({}, theme.typography.body1, {
      color: (theme.vars || theme).palette.text.primary,
      lineHeight: "1.4375em",
      // 23px
      boxSizing: "border-box",
      // Prevent padding issue with fullWidth.
      position: "relative",
      cursor: "text",
      display: "inline-flex",
      alignItems: "center",
      [`&.${inputBaseClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled,
        cursor: "default"
      }
    }, ownerState.multiline && _extends$1({
      padding: "4px 0 5px"
    }, ownerState.size === "small" && {
      paddingTop: 1
    }), ownerState.fullWidth && {
      width: "100%"
    }));
    const InputBaseComponent = styled$1("input", {
      name: "MuiInputBase",
      slot: "Input",
      overridesResolver: inputOverridesResolver
    })(({
      theme,
      ownerState
    }) => {
      const light2 = theme.palette.mode === "light";
      const placeholder = _extends$1({
        color: "currentColor"
      }, theme.vars ? {
        opacity: theme.vars.opacity.inputPlaceholder
      } : {
        opacity: light2 ? 0.42 : 0.5
      }, {
        transition: theme.transitions.create("opacity", {
          duration: theme.transitions.duration.shorter
        })
      });
      const placeholderHidden = {
        opacity: "0 !important"
      };
      const placeholderVisible = theme.vars ? {
        opacity: theme.vars.opacity.inputPlaceholder
      } : {
        opacity: light2 ? 0.42 : 0.5
      };
      return _extends$1({
        font: "inherit",
        letterSpacing: "inherit",
        color: "currentColor",
        padding: "4px 0 5px",
        border: 0,
        boxSizing: "content-box",
        background: "none",
        height: "1.4375em",
        // Reset 23pxthe native input line-height
        margin: 0,
        // Reset for Safari
        WebkitTapHighlightColor: "transparent",
        display: "block",
        // Make the flex item shrink with Firefox
        minWidth: 0,
        width: "100%",
        // Fix IE11 width issue
        animationName: "mui-auto-fill-cancel",
        animationDuration: "10ms",
        "&::-webkit-input-placeholder": placeholder,
        "&::-moz-placeholder": placeholder,
        // Firefox 19+
        "&:-ms-input-placeholder": placeholder,
        // IE11
        "&::-ms-input-placeholder": placeholder,
        // Edge
        "&:focus": {
          outline: 0
        },
        // Reset Firefox invalid required input style
        "&:invalid": {
          boxShadow: "none"
        },
        "&::-webkit-search-decoration": {
          // Remove the padding when type=search.
          WebkitAppearance: "none"
        },
        // Show and hide the placeholder logic
        [`label[data-shrink=false] + .${inputBaseClasses$1.formControl} &`]: {
          "&::-webkit-input-placeholder": placeholderHidden,
          "&::-moz-placeholder": placeholderHidden,
          // Firefox 19+
          "&:-ms-input-placeholder": placeholderHidden,
          // IE11
          "&::-ms-input-placeholder": placeholderHidden,
          // Edge
          "&:focus::-webkit-input-placeholder": placeholderVisible,
          "&:focus::-moz-placeholder": placeholderVisible,
          // Firefox 19+
          "&:focus:-ms-input-placeholder": placeholderVisible,
          // IE11
          "&:focus::-ms-input-placeholder": placeholderVisible
          // Edge
        },
        [`&.${inputBaseClasses$1.disabled}`]: {
          opacity: 1,
          // Reset iOS opacity
          WebkitTextFillColor: (theme.vars || theme).palette.text.disabled
          // Fix opacity Safari bug
        },
        "&:-webkit-autofill": {
          animationDuration: "5000s",
          animationName: "mui-auto-fill"
        }
      }, ownerState.size === "small" && {
        paddingTop: 1
      }, ownerState.multiline && {
        height: "auto",
        resize: "none",
        padding: 0,
        paddingTop: 0
      }, ownerState.type === "search" && {
        // Improve type search style.
        MozAppearance: "textfield"
      });
    });
    const inputGlobalStyles = /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles, {
      styles: {
        "@keyframes mui-auto-fill": {
          from: {
            display: "block"
          }
        },
        "@keyframes mui-auto-fill-cancel": {
          from: {
            display: "block"
          }
        }
      }
    });
    const InputBase = /* @__PURE__ */ reactExports.forwardRef(function InputBase2(inProps, ref) {
      var _slotProps$input;
      const props = useThemeProps({
        props: inProps,
        name: "MuiInputBase"
      });
      const {
        "aria-describedby": ariaDescribedby,
        autoComplete,
        autoFocus,
        className,
        components = {},
        componentsProps = {},
        defaultValue: defaultValue2,
        disabled,
        disableInjectingGlobalStyles,
        endAdornment,
        fullWidth = false,
        id: id2,
        inputComponent = "input",
        inputProps: inputPropsProp = {},
        inputRef: inputRefProp,
        maxRows,
        minRows,
        multiline = false,
        name,
        onBlur,
        onChange,
        onClick,
        onFocus,
        onKeyDown,
        onKeyUp,
        placeholder,
        readOnly,
        renderSuffix,
        rows,
        slotProps = {},
        slots = {},
        startAdornment,
        type = "text",
        value: valueProp
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1t);
      const value2 = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
      const {
        current: isControlled
      } = reactExports.useRef(value2 != null);
      const inputRef = reactExports.useRef();
      const handleInputRefWarning = reactExports.useCallback((instance) => {
      }, []);
      const handleInputRef = useForkRef$2(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
      const [focused, setFocused] = reactExports.useState(false);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
      });
      fcs.focused = muiFormControl ? muiFormControl.focused : focused;
      reactExports.useEffect(() => {
        if (!muiFormControl && disabled && focused) {
          setFocused(false);
          if (onBlur) {
            onBlur();
          }
        }
      }, [muiFormControl, disabled, focused, onBlur]);
      const onFilled = muiFormControl && muiFormControl.onFilled;
      const onEmpty = muiFormControl && muiFormControl.onEmpty;
      const checkDirty = reactExports.useCallback((obj) => {
        if (isFilled(obj)) {
          if (onFilled) {
            onFilled();
          }
        } else if (onEmpty) {
          onEmpty();
        }
      }, [onFilled, onEmpty]);
      useEnhancedEffect$3(() => {
        if (isControlled) {
          checkDirty({
            value: value2
          });
        }
      }, [value2, checkDirty, isControlled]);
      const handleFocus = (event) => {
        if (fcs.disabled) {
          event.stopPropagation();
          return;
        }
        if (onFocus) {
          onFocus(event);
        }
        if (inputPropsProp.onFocus) {
          inputPropsProp.onFocus(event);
        }
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        } else {
          setFocused(true);
        }
      };
      const handleBlur = (event) => {
        if (onBlur) {
          onBlur(event);
        }
        if (inputPropsProp.onBlur) {
          inputPropsProp.onBlur(event);
        }
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        } else {
          setFocused(false);
        }
      };
      const handleChange = (event, ...args) => {
        if (!isControlled) {
          const element = event.target || inputRef.current;
          if (element == null) {
            throw new Error(formatMuiErrorMessage(1));
          }
          checkDirty({
            value: element.value
          });
        }
        if (inputPropsProp.onChange) {
          inputPropsProp.onChange(event, ...args);
        }
        if (onChange) {
          onChange(event, ...args);
        }
      };
      reactExports.useEffect(() => {
        checkDirty(inputRef.current);
      }, []);
      const handleClick = (event) => {
        if (inputRef.current && event.currentTarget === event.target) {
          inputRef.current.focus();
        }
        if (onClick && !fcs.disabled) {
          onClick(event);
        }
      };
      let InputComponent = inputComponent;
      let inputProps = inputPropsProp;
      if (multiline && InputComponent === "input") {
        if (rows) {
          inputProps = _extends$1({
            type: void 0,
            minRows: rows,
            maxRows: rows
          }, inputProps);
        } else {
          inputProps = _extends$1({
            type: void 0,
            maxRows,
            minRows
          }, inputProps);
        }
        InputComponent = TextareaAutosize$1;
      }
      const handleAutoFill = (event) => {
        checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
          value: "x"
        });
      };
      reactExports.useEffect(() => {
        if (muiFormControl) {
          muiFormControl.setAdornedStart(Boolean(startAdornment));
        }
      }, [muiFormControl, startAdornment]);
      const ownerState = _extends$1({}, props, {
        color: fcs.color || "primary",
        disabled: fcs.disabled,
        endAdornment,
        error: fcs.error,
        focused: fcs.focused,
        formControl: muiFormControl,
        fullWidth,
        hiddenLabel: fcs.hiddenLabel,
        multiline,
        size: fcs.size,
        startAdornment,
        type
      });
      const classes = useUtilityClasses$11(ownerState);
      const Root = slots.root || components.Root || InputBaseRoot;
      const rootProps = slotProps.root || componentsProps.root || {};
      const Input2 = slots.input || components.Input || InputBaseComponent;
      inputProps = _extends$1({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
        children: [!disableInjectingGlobalStyles && inputGlobalStyles, /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends$1({}, rootProps, !isHostComponent$1(Root) && {
          ownerState: _extends$1({}, ownerState, rootProps.ownerState)
        }, {
          ref,
          onClick: handleClick
        }, other, {
          className: clsx(classes.root, rootProps.className, className, readOnly && "MuiInputBase-readOnly"),
          children: [startAdornment, /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlContext$1.Provider, {
            value: null,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Input2, _extends$1({
              ownerState,
              "aria-invalid": fcs.error,
              "aria-describedby": ariaDescribedby,
              autoComplete,
              autoFocus,
              defaultValue: defaultValue2,
              disabled: fcs.disabled,
              id: id2,
              onAnimationStart: handleAutoFill,
              name,
              placeholder,
              readOnly,
              required: fcs.required,
              rows,
              value: value2,
              onKeyDown,
              onKeyUp,
              type
            }, inputProps, !isHostComponent$1(Input2) && {
              as: InputComponent,
              ownerState: _extends$1({}, ownerState, inputProps.ownerState)
            }, {
              ref: handleInputRef,
              className: clsx(classes.input, inputProps.className, readOnly && "MuiInputBase-readOnly"),
              onBlur: handleBlur,
              onChange: handleChange,
              onFocus: handleFocus
            }))
          }), endAdornment, renderSuffix ? renderSuffix(_extends$1({}, fcs, {
            startAdornment
          })) : null]
        }))]
      });
    });
    const InputBase$1 = InputBase;
    function getInputUtilityClass(slot) {
      return generateUtilityClass("MuiInput", slot);
    }
    const inputClasses = _extends$1({}, inputBaseClasses$1, generateUtilityClasses("MuiInput", ["root", "underline", "input"]));
    const inputClasses$1 = inputClasses;
    const _excluded$1s = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
    const useUtilityClasses$10 = (ownerState) => {
      const {
        classes,
        disableUnderline
      } = ownerState;
      const slots = {
        root: ["root", !disableUnderline && "underline"],
        input: ["input"]
      };
      const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const InputRoot = styled$1(InputBaseRoot, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiInput",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [...rootOverridesResolver(props, styles2), !ownerState.disableUnderline && styles2.underline];
      }
    })(({
      theme,
      ownerState
    }) => {
      const light2 = theme.palette.mode === "light";
      let bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
      if (theme.vars) {
        bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
      }
      return _extends$1({
        position: "relative"
      }, ownerState.formControl && {
        "label + &": {
          marginTop: 16
        }
      }, !ownerState.disableUnderline && {
        "&:after": {
          borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: theme.transitions.create("transform", {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&.${inputClasses$1.focused}:after`]: {
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: "scaleX(1) translateX(0)"
        },
        [`&.${inputClasses$1.error}`]: {
          "&:before, &:after": {
            borderBottomColor: (theme.vars || theme).palette.error.main
          }
        },
        "&:before": {
          borderBottom: `1px solid ${bottomLineColor}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: theme.transitions.create("border-bottom-color", {
            duration: theme.transitions.duration.shorter
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&:hover:not(.${inputClasses$1.disabled}, .${inputClasses$1.error}):before`]: {
          borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            borderBottom: `1px solid ${bottomLineColor}`
          }
        },
        [`&.${inputClasses$1.disabled}:before`]: {
          borderBottomStyle: "dotted"
        }
      });
    });
    const InputInput = styled$1(InputBaseComponent, {
      name: "MuiInput",
      slot: "Input",
      overridesResolver: inputOverridesResolver
    })({});
    const Input = /* @__PURE__ */ reactExports.forwardRef(function Input2(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$input;
      const props = useThemeProps({
        props: inProps,
        name: "MuiInput"
      });
      const {
        disableUnderline,
        components = {},
        componentsProps: componentsPropsProp,
        fullWidth = false,
        inputComponent = "input",
        multiline = false,
        slotProps,
        slots = {},
        type = "text"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1s);
      const classes = useUtilityClasses$10(props);
      const ownerState = {
        disableUnderline
      };
      const inputComponentsProps = {
        root: {
          ownerState
        }
      };
      const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
      const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
      const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(InputBase$1, _extends$1({
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        slotProps: componentsProps,
        fullWidth,
        inputComponent,
        multiline,
        ref,
        type
      }, other, {
        classes
      }));
    });
    Input.muiName = "Input";
    const Input$1 = Input;
    function getFilledInputUtilityClass(slot) {
      return generateUtilityClass("MuiFilledInput", slot);
    }
    const filledInputClasses = _extends$1({}, inputBaseClasses$1, generateUtilityClasses("MuiFilledInput", ["root", "underline", "input"]));
    const filledInputClasses$1 = filledInputClasses;
    const _excluded$1r = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
    const useUtilityClasses$$ = (ownerState) => {
      const {
        classes,
        disableUnderline
      } = ownerState;
      const slots = {
        root: ["root", !disableUnderline && "underline"],
        input: ["input"]
      };
      const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const FilledInputRoot = styled$1(InputBaseRoot, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiFilledInput",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [...rootOverridesResolver(props, styles2), !ownerState.disableUnderline && styles2.underline];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _palette;
      const light2 = theme.palette.mode === "light";
      const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
      const backgroundColor2 = light2 ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
      const hoverBackground = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)";
      const disabledBackground = light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
      return _extends$1({
        position: "relative",
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2,
        borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
        borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
        transition: theme.transitions.create("background-color", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        "&:hover": {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
          }
        },
        [`&.${filledInputClasses$1.focused}`]: {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
        },
        [`&.${filledInputClasses$1.disabled}`]: {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
        }
      }, !ownerState.disableUnderline && {
        "&:after": {
          borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || "primary"]) == null ? void 0 : _palette.main}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: theme.transitions.create("transform", {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&.${filledInputClasses$1.focused}:after`]: {
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: "scaleX(1) translateX(0)"
        },
        [`&.${filledInputClasses$1.error}`]: {
          "&:before, &:after": {
            borderBottomColor: (theme.vars || theme).palette.error.main
          }
        },
        "&:before": {
          borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: theme.transitions.create("border-bottom-color", {
            duration: theme.transitions.duration.shorter
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&:hover:not(.${filledInputClasses$1.disabled}, .${filledInputClasses$1.error}):before`]: {
          borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
        },
        [`&.${filledInputClasses$1.disabled}:before`]: {
          borderBottomStyle: "dotted"
        }
      }, ownerState.startAdornment && {
        paddingLeft: 12
      }, ownerState.endAdornment && {
        paddingRight: 12
      }, ownerState.multiline && _extends$1({
        padding: "25px 12px 8px"
      }, ownerState.size === "small" && {
        paddingTop: 21,
        paddingBottom: 4
      }, ownerState.hiddenLabel && {
        paddingTop: 16,
        paddingBottom: 17
      }));
    });
    const FilledInputInput = styled$1(InputBaseComponent, {
      name: "MuiFilledInput",
      slot: "Input",
      overridesResolver: inputOverridesResolver
    })(({
      theme,
      ownerState
    }) => _extends$1({
      paddingTop: 25,
      paddingRight: 12,
      paddingBottom: 8,
      paddingLeft: 12
    }, !theme.vars && {
      "&:-webkit-autofill": {
        WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
        WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
        caretColor: theme.palette.mode === "light" ? null : "#fff",
        borderTopLeftRadius: "inherit",
        borderTopRightRadius: "inherit"
      }
    }, theme.vars && {
      "&:-webkit-autofill": {
        borderTopLeftRadius: "inherit",
        borderTopRightRadius: "inherit"
      },
      [theme.getColorSchemeSelector("dark")]: {
        "&:-webkit-autofill": {
          WebkitBoxShadow: "0 0 0 100px #266798 inset",
          WebkitTextFillColor: "#fff",
          caretColor: "#fff"
        }
      }
    }, ownerState.size === "small" && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }, ownerState.multiline && {
      paddingTop: 0,
      paddingBottom: 0,
      paddingLeft: 0,
      paddingRight: 0
    }, ownerState.startAdornment && {
      paddingLeft: 0
    }, ownerState.endAdornment && {
      paddingRight: 0
    }, ownerState.hiddenLabel && ownerState.size === "small" && {
      paddingTop: 8,
      paddingBottom: 9
    }));
    const FilledInput = /* @__PURE__ */ reactExports.forwardRef(function FilledInput2(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$input;
      const props = useThemeProps({
        props: inProps,
        name: "MuiFilledInput"
      });
      const {
        components = {},
        componentsProps: componentsPropsProp,
        fullWidth = false,
        // declare here to prevent spreading to DOM
        inputComponent = "input",
        multiline = false,
        slotProps,
        slots = {},
        type = "text"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1r);
      const ownerState = _extends$1({}, props, {
        fullWidth,
        inputComponent,
        multiline,
        type
      });
      const classes = useUtilityClasses$$(props);
      const filledInputComponentsProps = {
        root: {
          ownerState
        },
        input: {
          ownerState
        }
      };
      const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
      const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : FilledInputRoot;
      const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : FilledInputInput;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(InputBase$1, _extends$1({
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        componentsProps,
        fullWidth,
        inputComponent,
        multiline,
        ref,
        type
      }, other, {
        classes
      }));
    });
    FilledInput.muiName = "Input";
    const FilledInput$1 = FilledInput;
    var _span$3;
    const _excluded$1q = ["children", "classes", "className", "label", "notched"];
    const NotchedOutlineRoot$1 = styled$1("fieldset")({
      textAlign: "left",
      position: "absolute",
      bottom: 0,
      right: 0,
      top: -5,
      left: 0,
      margin: 0,
      padding: "0 8px",
      pointerEvents: "none",
      borderRadius: "inherit",
      borderStyle: "solid",
      borderWidth: 1,
      overflow: "hidden",
      minWidth: "0%"
    });
    const NotchedOutlineLegend = styled$1("legend")(({
      ownerState,
      theme
    }) => _extends$1({
      float: "unset",
      // Fix conflict with bootstrap
      width: "auto",
      // Fix conflict with bootstrap
      overflow: "hidden"
    }, !ownerState.withLabel && {
      padding: 0,
      lineHeight: "11px",
      // sync with `height` in `legend` styles
      transition: theme.transitions.create("width", {
        duration: 150,
        easing: theme.transitions.easing.easeOut
      })
    }, ownerState.withLabel && _extends$1({
      display: "block",
      // Fix conflict with normalize.css and sanitize.css
      padding: 0,
      height: 11,
      // sync with `lineHeight` in `legend` styles
      fontSize: "0.75em",
      visibility: "hidden",
      maxWidth: 0.01,
      transition: theme.transitions.create("max-width", {
        duration: 50,
        easing: theme.transitions.easing.easeOut
      }),
      whiteSpace: "nowrap",
      "& > span": {
        paddingLeft: 5,
        paddingRight: 5,
        display: "inline-block",
        opacity: 0,
        visibility: "visible"
      }
    }, ownerState.notched && {
      maxWidth: "100%",
      transition: theme.transitions.create("max-width", {
        duration: 100,
        easing: theme.transitions.easing.easeOut,
        delay: 50
      })
    })));
    function NotchedOutline(props) {
      const {
        className,
        label,
        notched
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1q);
      const withLabel = label != null && label !== "";
      const ownerState = _extends$1({}, props, {
        notched,
        withLabel
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(NotchedOutlineRoot$1, _extends$1({
        "aria-hidden": true,
        className,
        ownerState
      }, other, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(NotchedOutlineLegend, {
          ownerState,
          children: withLabel ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
            children: label
          }) : (
            // notranslate needed while Google Translate will not fix zero-width space issue
            _span$3 || (_span$3 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
              className: "notranslate",
              children: "​"
            }))
          )
        })
      }));
    }
    function getOutlinedInputUtilityClass(slot) {
      return generateUtilityClass("MuiOutlinedInput", slot);
    }
    const outlinedInputClasses = _extends$1({}, inputBaseClasses$1, generateUtilityClasses("MuiOutlinedInput", ["root", "notchedOutline", "input"]));
    const outlinedInputClasses$1 = outlinedInputClasses;
    const _excluded$1p = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
    const useUtilityClasses$_ = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        notchedOutline: ["notchedOutline"],
        input: ["input"]
      };
      const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const OutlinedInputRoot = styled$1(InputBaseRoot, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiOutlinedInput",
      slot: "Root",
      overridesResolver: rootOverridesResolver
    })(({
      theme,
      ownerState
    }) => {
      const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
      return _extends$1({
        position: "relative",
        borderRadius: (theme.vars || theme).shape.borderRadius,
        [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette.text.primary
        },
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
            borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
          }
        },
        [`&.${outlinedInputClasses$1.focused} .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette[ownerState.color].main,
          borderWidth: 2
        },
        [`&.${outlinedInputClasses$1.error} .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette.error.main
        },
        [`&.${outlinedInputClasses$1.disabled} .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette.action.disabled
        }
      }, ownerState.startAdornment && {
        paddingLeft: 14
      }, ownerState.endAdornment && {
        paddingRight: 14
      }, ownerState.multiline && _extends$1({
        padding: "16.5px 14px"
      }, ownerState.size === "small" && {
        padding: "8.5px 14px"
      }));
    });
    const NotchedOutlineRoot = styled$1(NotchedOutline, {
      name: "MuiOutlinedInput",
      slot: "NotchedOutline",
      overridesResolver: (props, styles2) => styles2.notchedOutline
    })(({
      theme
    }) => {
      const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
      return {
        borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
      };
    });
    const OutlinedInputInput = styled$1(InputBaseComponent, {
      name: "MuiOutlinedInput",
      slot: "Input",
      overridesResolver: inputOverridesResolver
    })(({
      theme,
      ownerState
    }) => _extends$1({
      padding: "16.5px 14px"
    }, !theme.vars && {
      "&:-webkit-autofill": {
        WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
        WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
        caretColor: theme.palette.mode === "light" ? null : "#fff",
        borderRadius: "inherit"
      }
    }, theme.vars && {
      "&:-webkit-autofill": {
        borderRadius: "inherit"
      },
      [theme.getColorSchemeSelector("dark")]: {
        "&:-webkit-autofill": {
          WebkitBoxShadow: "0 0 0 100px #266798 inset",
          WebkitTextFillColor: "#fff",
          caretColor: "#fff"
        }
      }
    }, ownerState.size === "small" && {
      padding: "8.5px 14px"
    }, ownerState.multiline && {
      padding: 0
    }, ownerState.startAdornment && {
      paddingLeft: 0
    }, ownerState.endAdornment && {
      paddingRight: 0
    }));
    const OutlinedInput = /* @__PURE__ */ reactExports.forwardRef(function OutlinedInput2(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
      const props = useThemeProps({
        props: inProps,
        name: "MuiOutlinedInput"
      });
      const {
        components = {},
        fullWidth = false,
        inputComponent = "input",
        label,
        multiline = false,
        notched,
        slots = {},
        type = "text"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1p);
      const classes = useUtilityClasses$_(props);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["required"]
      });
      const ownerState = _extends$1({}, props, {
        color: fcs.color || "primary",
        disabled: fcs.disabled,
        error: fcs.error,
        focused: fcs.focused,
        formControl: muiFormControl,
        fullWidth,
        hiddenLabel: fcs.hiddenLabel,
        multiline,
        size: fcs.size,
        type
      });
      const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : OutlinedInputRoot;
      const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : OutlinedInputInput;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(InputBase$1, _extends$1({
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        renderSuffix: (state) => /* @__PURE__ */ jsxRuntimeExports.jsx(NotchedOutlineRoot, {
          ownerState,
          className: classes.notchedOutline,
          label: label != null && label !== "" && fcs.required ? _React$Fragment || (_React$Fragment = /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
            children: [label, " ", "*"]
          })) : label,
          notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
        }),
        fullWidth,
        inputComponent,
        multiline,
        ref,
        type
      }, other, {
        classes: _extends$1({}, classes, {
          notchedOutline: null
        })
      }));
    });
    OutlinedInput.muiName = "Input";
    const OutlinedInput$1 = OutlinedInput;
    function getFormLabelUtilityClasses(slot) {
      return generateUtilityClass("MuiFormLabel", slot);
    }
    const formLabelClasses = generateUtilityClasses("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
    const formLabelClasses$1 = formLabelClasses;
    const _excluded$1o = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
    const useUtilityClasses$Z = (ownerState) => {
      const {
        classes,
        color: color2,
        focused,
        disabled,
        error,
        filled,
        required
      } = ownerState;
      const slots = {
        root: ["root", `color${capitalize(color2)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
        asterisk: ["asterisk", error && "error"]
      };
      return composeClasses(slots, getFormLabelUtilityClasses, classes);
    };
    const FormLabelRoot = styled$1("label", {
      name: "MuiFormLabel",
      slot: "Root",
      overridesResolver: ({
        ownerState
      }, styles2) => {
        return _extends$1({}, styles2.root, ownerState.color === "secondary" && styles2.colorSecondary, ownerState.filled && styles2.filled);
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      color: (theme.vars || theme).palette.text.secondary
    }, theme.typography.body1, {
      lineHeight: "1.4375em",
      padding: 0,
      position: "relative",
      [`&.${formLabelClasses$1.focused}`]: {
        color: (theme.vars || theme).palette[ownerState.color].main
      },
      [`&.${formLabelClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      },
      [`&.${formLabelClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }));
    const AsteriskComponent$1 = styled$1("span", {
      name: "MuiFormLabel",
      slot: "Asterisk",
      overridesResolver: (props, styles2) => styles2.asterisk
    })(({
      theme
    }) => ({
      [`&.${formLabelClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }));
    const FormLabel = /* @__PURE__ */ reactExports.forwardRef(function FormLabel2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiFormLabel"
      });
      const {
        children,
        className,
        component = "label"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1o);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["color", "required", "focused", "disabled", "error", "filled"]
      });
      const ownerState = _extends$1({}, props, {
        color: fcs.color || "primary",
        component,
        disabled: fcs.disabled,
        error: fcs.error,
        filled: fcs.filled,
        focused: fcs.focused,
        required: fcs.required
      });
      const classes = useUtilityClasses$Z(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(FormLabelRoot, _extends$1({
        as: component,
        ownerState,
        className: clsx(classes.root, className),
        ref
      }, other, {
        children: [children, fcs.required && /* @__PURE__ */ jsxRuntimeExports.jsxs(AsteriskComponent$1, {
          ownerState,
          "aria-hidden": true,
          className: classes.asterisk,
          children: [" ", "*"]
        })]
      }));
    });
    const FormLabel$1 = FormLabel;
    function getInputLabelUtilityClasses(slot) {
      return generateUtilityClass("MuiInputLabel", slot);
    }
    generateUtilityClasses("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);
    const _excluded$1n = ["disableAnimation", "margin", "shrink", "variant", "className"];
    const useUtilityClasses$Y = (ownerState) => {
      const {
        classes,
        formControl,
        size,
        shrink,
        disableAnimation,
        variant,
        required
      } = ownerState;
      const slots = {
        root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size === "small" && "sizeSmall", variant],
        asterisk: [required && "asterisk"]
      };
      const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const InputLabelRoot = styled$1(FormLabel$1, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiInputLabel",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${formLabelClasses$1.asterisk}`]: styles2.asterisk
        }, styles2.root, ownerState.formControl && styles2.formControl, ownerState.size === "small" && styles2.sizeSmall, ownerState.shrink && styles2.shrink, !ownerState.disableAnimation && styles2.animated, styles2[ownerState.variant]];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      display: "block",
      transformOrigin: "top left",
      whiteSpace: "nowrap",
      overflow: "hidden",
      textOverflow: "ellipsis",
      maxWidth: "100%"
    }, ownerState.formControl && {
      position: "absolute",
      left: 0,
      top: 0,
      // slight alteration to spec spacing to match visual spec result
      transform: "translate(0, 20px) scale(1)"
    }, ownerState.size === "small" && {
      // Compensation for the `Input.inputSizeSmall` style.
      transform: "translate(0, 17px) scale(1)"
    }, ownerState.shrink && {
      transform: "translate(0, -1.5px) scale(0.75)",
      transformOrigin: "top left",
      maxWidth: "133%"
    }, !ownerState.disableAnimation && {
      transition: theme.transitions.create(["color", "transform", "max-width"], {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      })
    }, ownerState.variant === "filled" && _extends$1({
      // Chrome's autofill feature gives the input field a yellow background.
      // Since the input field is behind the label in the HTML tree,
      // the input field is drawn last and hides the label with an opaque background color.
      // zIndex: 1 will raise the label above opaque background-colors of input.
      zIndex: 1,
      pointerEvents: "none",
      transform: "translate(12px, 16px) scale(1)",
      maxWidth: "calc(100% - 24px)"
    }, ownerState.size === "small" && {
      transform: "translate(12px, 13px) scale(1)"
    }, ownerState.shrink && _extends$1({
      userSelect: "none",
      pointerEvents: "auto",
      transform: "translate(12px, 7px) scale(0.75)",
      maxWidth: "calc(133% - 24px)"
    }, ownerState.size === "small" && {
      transform: "translate(12px, 4px) scale(0.75)"
    })), ownerState.variant === "outlined" && _extends$1({
      // see comment above on filled.zIndex
      zIndex: 1,
      pointerEvents: "none",
      transform: "translate(14px, 16px) scale(1)",
      maxWidth: "calc(100% - 24px)"
    }, ownerState.size === "small" && {
      transform: "translate(14px, 9px) scale(1)"
    }, ownerState.shrink && {
      userSelect: "none",
      pointerEvents: "auto",
      // Theoretically, we should have (8+5)*2/0.75 = 34px
      // but it feels a better when it bleeds a bit on the left, so 32px.
      maxWidth: "calc(133% - 32px)",
      transform: "translate(14px, -9px) scale(0.75)"
    })));
    const InputLabel = /* @__PURE__ */ reactExports.forwardRef(function InputLabel2(inProps, ref) {
      const props = useThemeProps({
        name: "MuiInputLabel",
        props: inProps
      });
      const {
        disableAnimation = false,
        shrink: shrinkProp,
        className
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1n);
      const muiFormControl = useFormControl();
      let shrink = shrinkProp;
      if (typeof shrink === "undefined" && muiFormControl) {
        shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
      }
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["size", "variant", "required"]
      });
      const ownerState = _extends$1({}, props, {
        disableAnimation,
        formControl: muiFormControl,
        shrink,
        size: fcs.size,
        variant: fcs.variant,
        required: fcs.required
      });
      const classes = useUtilityClasses$Y(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabelRoot, _extends$1({
        "data-shrink": shrink,
        ownerState,
        ref,
        className: clsx(classes.root, className)
      }, other, {
        classes
      }));
    });
    const InputLabel$1 = InputLabel;
    function getFormControlUtilityClasses(slot) {
      return generateUtilityClass("MuiFormControl", slot);
    }
    generateUtilityClasses("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);
    const _excluded$1m = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
    const useUtilityClasses$X = (ownerState) => {
      const {
        classes,
        margin: margin2,
        fullWidth
      } = ownerState;
      const slots = {
        root: ["root", margin2 !== "none" && `margin${capitalize(margin2)}`, fullWidth && "fullWidth"]
      };
      return composeClasses(slots, getFormControlUtilityClasses, classes);
    };
    const FormControlRoot = styled$1("div", {
      name: "MuiFormControl",
      slot: "Root",
      overridesResolver: ({
        ownerState
      }, styles2) => {
        return _extends$1({}, styles2.root, styles2[`margin${capitalize(ownerState.margin)}`], ownerState.fullWidth && styles2.fullWidth);
      }
    })(({
      ownerState
    }) => _extends$1({
      display: "inline-flex",
      flexDirection: "column",
      position: "relative",
      // Reset fieldset default style.
      minWidth: 0,
      padding: 0,
      margin: 0,
      border: 0,
      verticalAlign: "top"
    }, ownerState.margin === "normal" && {
      marginTop: 16,
      marginBottom: 8
    }, ownerState.margin === "dense" && {
      marginTop: 8,
      marginBottom: 4
    }, ownerState.fullWidth && {
      width: "100%"
    }));
    const FormControl = /* @__PURE__ */ reactExports.forwardRef(function FormControl2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiFormControl"
      });
      const {
        children,
        className,
        color: color2 = "primary",
        component = "div",
        disabled = false,
        error = false,
        focused: visuallyFocused,
        fullWidth = false,
        hiddenLabel = false,
        margin: margin2 = "none",
        required = false,
        size = "medium",
        variant = "outlined"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1m);
      const ownerState = _extends$1({}, props, {
        color: color2,
        component,
        disabled,
        error,
        fullWidth,
        hiddenLabel,
        margin: margin2,
        required,
        size,
        variant
      });
      const classes = useUtilityClasses$X(ownerState);
      const [adornedStart, setAdornedStart] = reactExports.useState(() => {
        let initialAdornedStart = false;
        if (children) {
          reactExports.Children.forEach(children, (child) => {
            if (!isMuiElement(child, ["Input", "Select"])) {
              return;
            }
            const input = isMuiElement(child, ["Select"]) ? child.props.input : child;
            if (input && isAdornedStart(input.props)) {
              initialAdornedStart = true;
            }
          });
        }
        return initialAdornedStart;
      });
      const [filled, setFilled] = reactExports.useState(() => {
        let initialFilled = false;
        if (children) {
          reactExports.Children.forEach(children, (child) => {
            if (!isMuiElement(child, ["Input", "Select"])) {
              return;
            }
            if (isFilled(child.props, true) || isFilled(child.props.inputProps, true)) {
              initialFilled = true;
            }
          });
        }
        return initialFilled;
      });
      const [focusedState, setFocused] = reactExports.useState(false);
      if (disabled && focusedState) {
        setFocused(false);
      }
      const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
      let registerEffect;
      const childContext = reactExports.useMemo(() => {
        return {
          adornedStart,
          setAdornedStart,
          color: color2,
          disabled,
          error,
          filled,
          focused,
          fullWidth,
          hiddenLabel,
          size,
          onBlur: () => {
            setFocused(false);
          },
          onEmpty: () => {
            setFilled(false);
          },
          onFilled: () => {
            setFilled(true);
          },
          onFocus: () => {
            setFocused(true);
          },
          registerEffect,
          required,
          variant
        };
      }, [adornedStart, color2, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlContext$1.Provider, {
        value: childContext,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlRoot, _extends$1({
          as: component,
          ownerState,
          className: clsx(classes.root, className),
          ref
        }, other, {
          children
        }))
      });
    });
    const FormControl$1 = FormControl;
    function getFormHelperTextUtilityClasses(slot) {
      return generateUtilityClass("MuiFormHelperText", slot);
    }
    const formHelperTextClasses = generateUtilityClasses("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
    const formHelperTextClasses$1 = formHelperTextClasses;
    var _span$2;
    const _excluded$1l = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
    const useUtilityClasses$W = (ownerState) => {
      const {
        classes,
        contained,
        size,
        disabled,
        error,
        filled,
        focused,
        required
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", error && "error", size && `size${capitalize(size)}`, contained && "contained", focused && "focused", filled && "filled", required && "required"]
      };
      return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
    };
    const FormHelperTextRoot = styled$1("p", {
      name: "MuiFormHelperText",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.size && styles2[`size${capitalize(ownerState.size)}`], ownerState.contained && styles2.contained, ownerState.filled && styles2.filled];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      color: (theme.vars || theme).palette.text.secondary
    }, theme.typography.caption, {
      textAlign: "left",
      marginTop: 3,
      marginRight: 0,
      marginBottom: 0,
      marginLeft: 0,
      [`&.${formHelperTextClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      },
      [`&.${formHelperTextClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }, ownerState.size === "small" && {
      marginTop: 4
    }, ownerState.contained && {
      marginLeft: 14,
      marginRight: 14
    }));
    const FormHelperText = /* @__PURE__ */ reactExports.forwardRef(function FormHelperText2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiFormHelperText"
      });
      const {
        children,
        className,
        component = "p"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1l);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
      });
      const ownerState = _extends$1({}, props, {
        component,
        contained: fcs.variant === "filled" || fcs.variant === "outlined",
        variant: fcs.variant,
        size: fcs.size,
        disabled: fcs.disabled,
        error: fcs.error,
        filled: fcs.filled,
        focused: fcs.focused,
        required: fcs.required
      });
      const classes = useUtilityClasses$W(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(FormHelperTextRoot, _extends$1({
        as: component,
        ownerState,
        className: clsx(classes.root, className),
        ref
      }, other, {
        children: children === " " ? (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span$2 || (_span$2 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
            className: "notranslate",
            children: "​"
          }))
        ) : children
      }));
    });
    const FormHelperText$1 = FormHelperText;
    const ListContext = /* @__PURE__ */ reactExports.createContext({});
    const ListContext$1 = ListContext;
    function getListUtilityClass(slot) {
      return generateUtilityClass("MuiList", slot);
    }
    generateUtilityClasses("MuiList", ["root", "padding", "dense", "subheader"]);
    const _excluded$1k = ["children", "className", "component", "dense", "disablePadding", "subheader"];
    const useUtilityClasses$V = (ownerState) => {
      const {
        classes,
        disablePadding,
        dense,
        subheader
      } = ownerState;
      const slots = {
        root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
      };
      return composeClasses(slots, getListUtilityClass, classes);
    };
    const ListRoot = styled$1("ul", {
      name: "MuiList",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, !ownerState.disablePadding && styles2.padding, ownerState.dense && styles2.dense, ownerState.subheader && styles2.subheader];
      }
    })(({
      ownerState
    }) => _extends$1({
      listStyle: "none",
      margin: 0,
      padding: 0,
      position: "relative"
    }, !ownerState.disablePadding && {
      paddingTop: 8,
      paddingBottom: 8
    }, ownerState.subheader && {
      paddingTop: 0
    }));
    const List = /* @__PURE__ */ reactExports.forwardRef(function List2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiList"
      });
      const {
        children,
        className,
        component = "ul",
        dense = false,
        disablePadding = false,
        subheader
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1k);
      const context2 = reactExports.useMemo(() => ({
        dense
      }), [dense]);
      const ownerState = _extends$1({}, props, {
        component,
        dense,
        disablePadding
      });
      const classes = useUtilityClasses$V(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext$1.Provider, {
        value: context2,
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(ListRoot, _extends$1({
          as: component,
          className: clsx(classes.root, className),
          ref,
          ownerState
        }, other, {
          children: [subheader, children]
        }))
      });
    });
    const List$1 = List;
    const _excluded$1j = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
    function nextItem$1(list, item, disableListWrap) {
      if (list === item) {
        return list.firstChild;
      }
      if (item && item.nextElementSibling) {
        return item.nextElementSibling;
      }
      return disableListWrap ? null : list.firstChild;
    }
    function previousItem$1(list, item, disableListWrap) {
      if (list === item) {
        return disableListWrap ? list.firstChild : list.lastChild;
      }
      if (item && item.previousElementSibling) {
        return item.previousElementSibling;
      }
      return disableListWrap ? null : list.lastChild;
    }
    function textCriteriaMatches(nextFocus, textCriteria) {
      if (textCriteria === void 0) {
        return true;
      }
      let text = nextFocus.innerText;
      if (text === void 0) {
        text = nextFocus.textContent;
      }
      text = text.trim().toLowerCase();
      if (text.length === 0) {
        return false;
      }
      if (textCriteria.repeating) {
        return text[0] === textCriteria.keys[0];
      }
      return text.indexOf(textCriteria.keys.join("")) === 0;
    }
    function moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
      let wrappedOnce = false;
      let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
      while (nextFocus) {
        if (nextFocus === list.firstChild) {
          if (wrappedOnce) {
            return false;
          }
          wrappedOnce = true;
        }
        const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
        if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
          nextFocus = traversalFunction(list, nextFocus, disableListWrap);
        } else {
          nextFocus.focus();
          return true;
        }
      }
      return false;
    }
    const MenuList = /* @__PURE__ */ reactExports.forwardRef(function MenuList2(props, ref) {
      const {
        // private
        // eslint-disable-next-line react/prop-types
        actions,
        autoFocus = false,
        autoFocusItem = false,
        children,
        className,
        disabledItemsFocusable = false,
        disableListWrap = false,
        onKeyDown,
        variant = "selectedMenu"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1j);
      const listRef = reactExports.useRef(null);
      const textCriteriaRef = reactExports.useRef({
        keys: [],
        repeating: true,
        previousKeyMatched: true,
        lastTime: null
      });
      useEnhancedEffect$3(() => {
        if (autoFocus) {
          listRef.current.focus();
        }
      }, [autoFocus]);
      reactExports.useImperativeHandle(actions, () => ({
        adjustStyleForScrollbar: (containerElement, theme) => {
          const noExplicitWidth = !listRef.current.style.width;
          if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
            const scrollbarSize = `${getScrollbarSize(ownerDocument(containerElement))}px`;
            listRef.current.style[theme.direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
            listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
          }
          return listRef.current;
        }
      }), []);
      const handleKeyDown2 = (event) => {
        const list = listRef.current;
        const key = event.key;
        const currentFocus = ownerDocument(list).activeElement;
        if (key === "ArrowDown") {
          event.preventDefault();
          moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem$1);
        } else if (key === "ArrowUp") {
          event.preventDefault();
          moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem$1);
        } else if (key === "Home") {
          event.preventDefault();
          moveFocus$1(list, null, disableListWrap, disabledItemsFocusable, nextItem$1);
        } else if (key === "End") {
          event.preventDefault();
          moveFocus$1(list, null, disableListWrap, disabledItemsFocusable, previousItem$1);
        } else if (key.length === 1) {
          const criteria = textCriteriaRef.current;
          const lowerKey = key.toLowerCase();
          const currTime = performance.now();
          if (criteria.keys.length > 0) {
            if (currTime - criteria.lastTime > 500) {
              criteria.keys = [];
              criteria.repeating = true;
              criteria.previousKeyMatched = true;
            } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
              criteria.repeating = false;
            }
          }
          criteria.lastTime = currTime;
          criteria.keys.push(lowerKey);
          const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
          if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus$1(list, currentFocus, false, disabledItemsFocusable, nextItem$1, criteria))) {
            event.preventDefault();
          } else {
            criteria.previousKeyMatched = false;
          }
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
      };
      const handleRef = useForkRef$2(listRef, ref);
      let activeItemIndex = -1;
      reactExports.Children.forEach(children, (child, index) => {
        if (!/* @__PURE__ */ reactExports.isValidElement(child)) {
          return;
        }
        if (!child.props.disabled) {
          if (variant === "selectedMenu" && child.props.selected) {
            activeItemIndex = index;
          } else if (activeItemIndex === -1) {
            activeItemIndex = index;
          }
        }
        if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
          activeItemIndex += 1;
          if (activeItemIndex >= children.length) {
            activeItemIndex = -1;
          }
        }
      });
      const items = reactExports.Children.map(children, (child, index) => {
        if (index === activeItemIndex) {
          const newChildProps = {};
          if (autoFocusItem) {
            newChildProps.autoFocus = true;
          }
          if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
            newChildProps.tabIndex = 0;
          }
          return /* @__PURE__ */ reactExports.cloneElement(child, newChildProps);
        }
        return child;
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(List$1, _extends$1({
        role: "menu",
        ref: handleRef,
        className,
        onKeyDown: handleKeyDown2,
        tabIndex: autoFocus ? 0 : -1
      }, other, {
        children: items
      }));
    });
    const MenuList$1 = MenuList;
    const _excluded$1i = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
    function getScale(value2) {
      return `scale(${value2}, ${value2 ** 2})`;
    }
    const styles$2 = {
      entering: {
        opacity: 1,
        transform: getScale(1)
      },
      entered: {
        opacity: 1,
        transform: "none"
      }
    };
    const isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
    const Grow = /* @__PURE__ */ reactExports.forwardRef(function Grow2(props, ref) {
      const {
        addEndListener,
        appear = true,
        children,
        easing: easing2,
        in: inProp,
        onEnter,
        onEntered,
        onEntering,
        onExit,
        onExited,
        onExiting,
        style: style2,
        timeout = "auto",
        // eslint-disable-next-line react/prop-types
        TransitionComponent = Transition$1
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1i);
      const timer = reactExports.useRef();
      const autoTimeout = reactExports.useRef();
      const theme = useTheme();
      const nodeRef = reactExports.useRef(null);
      const handleRef = useForkRef$2(nodeRef, children.ref, ref);
      const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
        if (callback) {
          const node2 = nodeRef.current;
          if (maybeIsAppearing === void 0) {
            callback(node2);
          } else {
            callback(node2, maybeIsAppearing);
          }
        }
      };
      const handleEntering = normalizedTransitionCallback(onEntering);
      const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
        reflow(node2);
        const {
          duration: transitionDuration,
          delay,
          easing: transitionTimingFunction
        } = getTransitionProps({
          style: style2,
          timeout,
          easing: easing2
        }, {
          mode: "enter"
        });
        let duration2;
        if (timeout === "auto") {
          duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
          autoTimeout.current = duration2;
        } else {
          duration2 = transitionDuration;
        }
        node2.style.transition = [theme.transitions.create("opacity", {
          duration: duration2,
          delay
        }), theme.transitions.create("transform", {
          duration: isWebKit154 ? duration2 : duration2 * 0.666,
          delay,
          easing: transitionTimingFunction
        })].join(",");
        if (onEnter) {
          onEnter(node2, isAppearing);
        }
      });
      const handleEntered = normalizedTransitionCallback(onEntered);
      const handleExiting = normalizedTransitionCallback(onExiting);
      const handleExit = normalizedTransitionCallback((node2) => {
        const {
          duration: transitionDuration,
          delay,
          easing: transitionTimingFunction
        } = getTransitionProps({
          style: style2,
          timeout,
          easing: easing2
        }, {
          mode: "exit"
        });
        let duration2;
        if (timeout === "auto") {
          duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
          autoTimeout.current = duration2;
        } else {
          duration2 = transitionDuration;
        }
        node2.style.transition = [theme.transitions.create("opacity", {
          duration: duration2,
          delay
        }), theme.transitions.create("transform", {
          duration: isWebKit154 ? duration2 : duration2 * 0.666,
          delay: isWebKit154 ? delay : delay || duration2 * 0.333,
          easing: transitionTimingFunction
        })].join(",");
        node2.style.opacity = 0;
        node2.style.transform = getScale(0.75);
        if (onExit) {
          onExit(node2);
        }
      });
      const handleExited = normalizedTransitionCallback(onExited);
      const handleAddEndListener = (next2) => {
        if (timeout === "auto") {
          timer.current = setTimeout(next2, autoTimeout.current || 0);
        }
        if (addEndListener) {
          addEndListener(nodeRef.current, next2);
        }
      };
      reactExports.useEffect(() => {
        return () => {
          clearTimeout(timer.current);
        };
      }, []);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$1({
        appear,
        in: inProp,
        nodeRef,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout: timeout === "auto" ? null : timeout
      }, other, {
        children: (state, childProps) => {
          return /* @__PURE__ */ reactExports.cloneElement(children, _extends$1({
            style: _extends$1({
              opacity: 0,
              transform: getScale(0.75),
              visibility: state === "exited" && !inProp ? "hidden" : void 0
            }, styles$2[state], style2, children.props.style),
            ref: handleRef
          }, childProps));
        }
      }));
    });
    Grow.muiSupportAuto = true;
    const Grow$1 = Grow;
    function getPopoverUtilityClass(slot) {
      return generateUtilityClass("MuiPopover", slot);
    }
    generateUtilityClasses("MuiPopover", ["root", "paper"]);
    const _excluded$1h = ["onEntering"], _excluded2$9 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"];
    function getOffsetTop(rect, vertical) {
      let offset2 = 0;
      if (typeof vertical === "number") {
        offset2 = vertical;
      } else if (vertical === "center") {
        offset2 = rect.height / 2;
      } else if (vertical === "bottom") {
        offset2 = rect.height;
      }
      return offset2;
    }
    function getOffsetLeft(rect, horizontal) {
      let offset2 = 0;
      if (typeof horizontal === "number") {
        offset2 = horizontal;
      } else if (horizontal === "center") {
        offset2 = rect.width / 2;
      } else if (horizontal === "right") {
        offset2 = rect.width;
      }
      return offset2;
    }
    function getTransformOriginValue(transformOrigin) {
      return [transformOrigin.horizontal, transformOrigin.vertical].map((n2) => typeof n2 === "number" ? `${n2}px` : n2).join(" ");
    }
    function resolveAnchorEl(anchorEl) {
      return typeof anchorEl === "function" ? anchorEl() : anchorEl;
    }
    const useUtilityClasses$U = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        paper: ["paper"]
      };
      return composeClasses(slots, getPopoverUtilityClass, classes);
    };
    const PopoverRoot = styled$1(Modal$1, {
      name: "MuiPopover",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({});
    const PopoverPaper = styled$1(Paper$1, {
      name: "MuiPopover",
      slot: "Paper",
      overridesResolver: (props, styles2) => styles2.paper
    })({
      position: "absolute",
      overflowY: "auto",
      overflowX: "hidden",
      // So we see the popover when it's empty.
      // It's most likely on issue on userland.
      minWidth: 16,
      minHeight: 16,
      maxWidth: "calc(100% - 32px)",
      maxHeight: "calc(100% - 32px)",
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0
    });
    const Popover = /* @__PURE__ */ reactExports.forwardRef(function Popover2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPopover"
      });
      const {
        action,
        anchorEl,
        anchorOrigin = {
          vertical: "top",
          horizontal: "left"
        },
        anchorPosition,
        anchorReference = "anchorEl",
        children,
        className,
        container: containerProp,
        elevation = 8,
        marginThreshold = 16,
        open,
        PaperProps = {},
        transformOrigin = {
          vertical: "top",
          horizontal: "left"
        },
        TransitionComponent = Grow$1,
        transitionDuration: transitionDurationProp = "auto",
        TransitionProps: {
          onEntering
        } = {}
      } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$1h), other = _objectWithoutPropertiesLoose(props, _excluded2$9);
      const paperRef = reactExports.useRef();
      const handlePaperRef = useForkRef$2(paperRef, PaperProps.ref);
      const ownerState = _extends$1({}, props, {
        anchorOrigin,
        anchorReference,
        elevation,
        marginThreshold,
        PaperProps,
        transformOrigin,
        TransitionComponent,
        transitionDuration: transitionDurationProp,
        TransitionProps
      });
      const classes = useUtilityClasses$U(ownerState);
      const getAnchorOffset = reactExports.useCallback(() => {
        if (anchorReference === "anchorPosition") {
          return anchorPosition;
        }
        const resolvedAnchorEl = resolveAnchorEl(anchorEl);
        const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
        const anchorRect = anchorElement.getBoundingClientRect();
        return {
          top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
          left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
        };
      }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
      const getTransformOrigin = reactExports.useCallback((elemRect) => {
        return {
          vertical: getOffsetTop(elemRect, transformOrigin.vertical),
          horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
        };
      }, [transformOrigin.horizontal, transformOrigin.vertical]);
      const getPositioningStyle = reactExports.useCallback((element) => {
        const elemRect = {
          width: element.offsetWidth,
          height: element.offsetHeight
        };
        const elemTransformOrigin = getTransformOrigin(elemRect);
        if (anchorReference === "none") {
          return {
            top: null,
            left: null,
            transformOrigin: getTransformOriginValue(elemTransformOrigin)
          };
        }
        const anchorOffset = getAnchorOffset();
        let top2 = anchorOffset.top - elemTransformOrigin.vertical;
        let left2 = anchorOffset.left - elemTransformOrigin.horizontal;
        const bottom2 = top2 + elemRect.height;
        const right2 = left2 + elemRect.width;
        const containerWindow = ownerWindow(resolveAnchorEl(anchorEl));
        const heightThreshold = containerWindow.innerHeight - marginThreshold;
        const widthThreshold = containerWindow.innerWidth - marginThreshold;
        if (top2 < marginThreshold) {
          const diff2 = top2 - marginThreshold;
          top2 -= diff2;
          elemTransformOrigin.vertical += diff2;
        } else if (bottom2 > heightThreshold) {
          const diff2 = bottom2 - heightThreshold;
          top2 -= diff2;
          elemTransformOrigin.vertical += diff2;
        }
        if (left2 < marginThreshold) {
          const diff2 = left2 - marginThreshold;
          left2 -= diff2;
          elemTransformOrigin.horizontal += diff2;
        } else if (right2 > widthThreshold) {
          const diff2 = right2 - widthThreshold;
          left2 -= diff2;
          elemTransformOrigin.horizontal += diff2;
        }
        return {
          top: `${Math.round(top2)}px`,
          left: `${Math.round(left2)}px`,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
      const [isPositioned, setIsPositioned] = reactExports.useState(open);
      const setPositioningStyles = reactExports.useCallback(() => {
        const element = paperRef.current;
        if (!element) {
          return;
        }
        const positioning = getPositioningStyle(element);
        if (positioning.top !== null) {
          element.style.top = positioning.top;
        }
        if (positioning.left !== null) {
          element.style.left = positioning.left;
        }
        element.style.transformOrigin = positioning.transformOrigin;
        setIsPositioned(true);
      }, [getPositioningStyle]);
      const handleEntering = (element, isAppearing) => {
        if (onEntering) {
          onEntering(element, isAppearing);
        }
        setPositioningStyles();
      };
      const handleExited = () => {
        setIsPositioned(false);
      };
      reactExports.useEffect(() => {
        if (open) {
          setPositioningStyles();
        }
      });
      reactExports.useImperativeHandle(action, () => open ? {
        updatePosition: () => {
          setPositioningStyles();
        }
      } : null, [open, setPositioningStyles]);
      reactExports.useEffect(() => {
        if (!open) {
          return void 0;
        }
        const handleResize = debounce$4(() => {
          setPositioningStyles();
        });
        const containerWindow = ownerWindow(anchorEl);
        containerWindow.addEventListener("resize", handleResize);
        return () => {
          handleResize.clear();
          containerWindow.removeEventListener("resize", handleResize);
        };
      }, [anchorEl, open, setPositioningStyles]);
      let transitionDuration = transitionDurationProp;
      if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
        transitionDuration = void 0;
      }
      const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : void 0);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PopoverRoot, _extends$1({
        BackdropProps: {
          invisible: true
        },
        className: clsx(classes.root, className),
        container,
        open,
        ref,
        ownerState
      }, other, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$1({
          appear: true,
          in: open,
          onEntering: handleEntering,
          onExited: handleExited,
          timeout: transitionDuration
        }, TransitionProps, {
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(PopoverPaper, _extends$1({
            elevation
          }, PaperProps, {
            ref: handlePaperRef,
            className: clsx(classes.paper, PaperProps.className)
          }, isPositioned ? void 0 : {
            style: _extends$1({}, PaperProps.style, {
              opacity: 0
            })
          }, {
            ownerState,
            children
          }))
        }))
      }));
    });
    const Popover$1 = Popover;
    function getMenuUtilityClass(slot) {
      return generateUtilityClass("MuiMenu", slot);
    }
    generateUtilityClasses("MuiMenu", ["root", "paper", "list"]);
    const _excluded$1g = ["onEntering"], _excluded2$8 = ["autoFocus", "children", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"];
    const RTL_ORIGIN = {
      vertical: "top",
      horizontal: "right"
    };
    const LTR_ORIGIN = {
      vertical: "top",
      horizontal: "left"
    };
    const useUtilityClasses$T = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        paper: ["paper"],
        list: ["list"]
      };
      return composeClasses(slots, getMenuUtilityClass, classes);
    };
    const MenuRoot = styled$1(Popover$1, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiMenu",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({});
    const MenuPaper = styled$1(Paper$1, {
      name: "MuiMenu",
      slot: "Paper",
      overridesResolver: (props, styles2) => styles2.paper
    })({
      // specZ: The maximum height of a simple menu should be one or more rows less than the view
      // height. This ensures a tappable area outside of the simple menu with which to dismiss
      // the menu.
      maxHeight: "calc(100% - 96px)",
      // Add iOS momentum scrolling for iOS < 13.0
      WebkitOverflowScrolling: "touch"
    });
    const MenuMenuList = styled$1(MenuList$1, {
      name: "MuiMenu",
      slot: "List",
      overridesResolver: (props, styles2) => styles2.list
    })({
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0
    });
    const Menu = /* @__PURE__ */ reactExports.forwardRef(function Menu2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiMenu"
      });
      const {
        autoFocus = true,
        children,
        disableAutoFocusItem = false,
        MenuListProps = {},
        onClose,
        open,
        PaperProps = {},
        PopoverClasses,
        transitionDuration = "auto",
        TransitionProps: {
          onEntering
        } = {},
        variant = "selectedMenu"
      } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$1g), other = _objectWithoutPropertiesLoose(props, _excluded2$8);
      const theme = useTheme();
      const isRtl = theme.direction === "rtl";
      const ownerState = _extends$1({}, props, {
        autoFocus,
        disableAutoFocusItem,
        MenuListProps,
        onEntering,
        PaperProps,
        transitionDuration,
        TransitionProps,
        variant
      });
      const classes = useUtilityClasses$T(ownerState);
      const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
      const menuListActionsRef = reactExports.useRef(null);
      const handleEntering = (element, isAppearing) => {
        if (menuListActionsRef.current) {
          menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
        }
        if (onEntering) {
          onEntering(element, isAppearing);
        }
      };
      const handleListKeyDown = (event) => {
        if (event.key === "Tab") {
          event.preventDefault();
          if (onClose) {
            onClose(event, "tabKeyDown");
          }
        }
      };
      let activeItemIndex = -1;
      reactExports.Children.map(children, (child, index) => {
        if (!/* @__PURE__ */ reactExports.isValidElement(child)) {
          return;
        }
        if (!child.props.disabled) {
          if (variant === "selectedMenu" && child.props.selected) {
            activeItemIndex = index;
          } else if (activeItemIndex === -1) {
            activeItemIndex = index;
          }
        }
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(MenuRoot, _extends$1({
        onClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: isRtl ? "right" : "left"
        },
        transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
        PaperProps: _extends$1({
          as: MenuPaper
        }, PaperProps, {
          classes: _extends$1({}, PaperProps.classes, {
            root: classes.paper
          })
        }),
        className: classes.root,
        open,
        ref,
        transitionDuration,
        TransitionProps: _extends$1({
          onEntering: handleEntering
        }, TransitionProps),
        ownerState
      }, other, {
        classes: PopoverClasses,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuMenuList, _extends$1({
          onKeyDown: handleListKeyDown,
          actions: menuListActionsRef,
          autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
          autoFocusItem,
          variant
        }, MenuListProps, {
          className: clsx(classes.list, MenuListProps.className),
          children
        }))
      }));
    });
    const Menu$1 = Menu;
    function getNativeSelectUtilityClasses(slot) {
      return generateUtilityClass("MuiNativeSelect", slot);
    }
    const nativeSelectClasses = generateUtilityClasses("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
    const nativeSelectClasses$1 = nativeSelectClasses;
    const _excluded$1f = ["className", "disabled", "error", "IconComponent", "inputRef", "variant"];
    const useUtilityClasses$S = (ownerState) => {
      const {
        classes,
        variant,
        disabled,
        multiple,
        open,
        error
      } = ownerState;
      const slots = {
        select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
        icon: ["icon", `icon${capitalize(variant)}`, open && "iconOpen", disabled && "disabled"]
      };
      return composeClasses(slots, getNativeSelectUtilityClasses, classes);
    };
    const nativeSelectSelectStyles = ({
      ownerState,
      theme
    }) => _extends$1({
      MozAppearance: "none",
      // Reset
      WebkitAppearance: "none",
      // Reset
      // When interacting quickly, the text can end up selected.
      // Native select can't be selected either.
      userSelect: "none",
      borderRadius: 0,
      // Reset
      cursor: "pointer",
      "&:focus": _extends$1({}, theme.vars ? {
        backgroundColor: `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.05)`
      } : {
        backgroundColor: theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)"
      }, {
        borderRadius: 0
        // Reset Chrome style
      }),
      // Remove IE11 arrow
      "&::-ms-expand": {
        display: "none"
      },
      [`&.${nativeSelectClasses$1.disabled}`]: {
        cursor: "default"
      },
      "&[multiple]": {
        height: "auto"
      },
      "&:not([multiple]) option, &:not([multiple]) optgroup": {
        backgroundColor: (theme.vars || theme).palette.background.paper
      },
      // Bump specificity to allow extending custom inputs
      "&&&": {
        paddingRight: 24,
        minWidth: 16
        // So it doesn't collapse.
      }
    }, ownerState.variant === "filled" && {
      "&&&": {
        paddingRight: 32
      }
    }, ownerState.variant === "outlined" && {
      borderRadius: (theme.vars || theme).shape.borderRadius,
      "&:focus": {
        borderRadius: (theme.vars || theme).shape.borderRadius
        // Reset the reset for Chrome style
      },
      "&&&": {
        paddingRight: 32
      }
    });
    const NativeSelectSelect = styled$1("select", {
      name: "MuiNativeSelect",
      slot: "Select",
      shouldForwardProp: rootShouldForwardProp,
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.select, styles2[ownerState.variant], ownerState.error && styles2.error, {
          [`&.${nativeSelectClasses$1.multiple}`]: styles2.multiple
        }];
      }
    })(nativeSelectSelectStyles);
    const nativeSelectIconStyles = ({
      ownerState,
      theme
    }) => _extends$1({
      // We use a position absolute over a flexbox in order to forward the pointer events
      // to the input and to support wrapping tags..
      position: "absolute",
      right: 0,
      top: "calc(50% - .5em)",
      // Center vertically, height is 1em
      pointerEvents: "none",
      // Don't block pointer events on the select under the icon.
      color: (theme.vars || theme).palette.action.active,
      [`&.${nativeSelectClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled
      }
    }, ownerState.open && {
      transform: "rotate(180deg)"
    }, ownerState.variant === "filled" && {
      right: 7
    }, ownerState.variant === "outlined" && {
      right: 7
    });
    const NativeSelectIcon = styled$1("svg", {
      name: "MuiNativeSelect",
      slot: "Icon",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.icon, ownerState.variant && styles2[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles2.iconOpen];
      }
    })(nativeSelectIconStyles);
    const NativeSelectInput = /* @__PURE__ */ reactExports.forwardRef(function NativeSelectInput2(props, ref) {
      const {
        className,
        disabled,
        error,
        IconComponent,
        inputRef,
        variant = "standard"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1f);
      const ownerState = _extends$1({}, props, {
        disabled,
        variant,
        error
      });
      const classes = useUtilityClasses$S(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(NativeSelectSelect, _extends$1({
          ownerState,
          className: clsx(classes.select, className),
          disabled,
          ref: inputRef || ref
        }, other)), props.multiple ? null : /* @__PURE__ */ jsxRuntimeExports.jsx(NativeSelectIcon, {
          as: IconComponent,
          ownerState,
          className: classes.icon
        })]
      });
    });
    const NativeSelectInput$1 = NativeSelectInput;
    function getSelectUtilityClasses(slot) {
      return generateUtilityClass("MuiSelect", slot);
    }
    const selectClasses = generateUtilityClasses("MuiSelect", ["select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
    const selectClasses$1 = selectClasses;
    var _span$1;
    const _excluded$1e = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "error", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
    const SelectSelect = styled$1("div", {
      name: "MuiSelect",
      slot: "Select",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [
          // Win specificity over the input base
          {
            [`&.${selectClasses$1.select}`]: styles2.select
          },
          {
            [`&.${selectClasses$1.select}`]: styles2[ownerState.variant]
          },
          {
            [`&.${selectClasses$1.error}`]: styles2.error
          },
          {
            [`&.${selectClasses$1.multiple}`]: styles2.multiple
          }
        ];
      }
    })(nativeSelectSelectStyles, {
      // Win specificity over the input base
      [`&.${selectClasses$1.select}`]: {
        height: "auto",
        // Resets for multiple select with chips
        minHeight: "1.4375em",
        // Required for select\text-field height consistency
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        overflow: "hidden"
      }
    });
    const SelectIcon = styled$1("svg", {
      name: "MuiSelect",
      slot: "Icon",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.icon, ownerState.variant && styles2[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles2.iconOpen];
      }
    })(nativeSelectIconStyles);
    const SelectNativeInput = styled$1("input", {
      shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "classes",
      name: "MuiSelect",
      slot: "NativeInput",
      overridesResolver: (props, styles2) => styles2.nativeInput
    })({
      bottom: 0,
      left: 0,
      position: "absolute",
      opacity: 0,
      pointerEvents: "none",
      width: "100%",
      boxSizing: "border-box"
    });
    function areEqualValues(a, b2) {
      if (typeof b2 === "object" && b2 !== null) {
        return a === b2;
      }
      return String(a) === String(b2);
    }
    function isEmpty(display) {
      return display == null || typeof display === "string" && !display.trim();
    }
    const useUtilityClasses$R = (ownerState) => {
      const {
        classes,
        variant,
        disabled,
        multiple,
        open,
        error
      } = ownerState;
      const slots = {
        select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
        icon: ["icon", `icon${capitalize(variant)}`, open && "iconOpen", disabled && "disabled"],
        nativeInput: ["nativeInput"]
      };
      return composeClasses(slots, getSelectUtilityClasses, classes);
    };
    const SelectInput = /* @__PURE__ */ reactExports.forwardRef(function SelectInput2(props, ref) {
      const {
        "aria-describedby": ariaDescribedby,
        "aria-label": ariaLabel,
        autoFocus,
        autoWidth,
        children,
        className,
        defaultOpen,
        defaultValue: defaultValue2,
        disabled,
        displayEmpty,
        error = false,
        IconComponent,
        inputRef: inputRefProp,
        labelId,
        MenuProps = {},
        multiple,
        name,
        onBlur,
        onChange,
        onClose,
        onFocus,
        onOpen,
        open: openProp,
        readOnly,
        renderValue,
        SelectDisplayProps = {},
        tabIndex: tabIndexProp,
        value: valueProp,
        variant = "standard"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1e);
      const [value2, setValueState] = useControlled$2({
        controlled: valueProp,
        default: defaultValue2,
        name: "Select"
      });
      const [openState, setOpenState] = useControlled$2({
        controlled: openProp,
        default: defaultOpen,
        name: "Select"
      });
      const inputRef = reactExports.useRef(null);
      const displayRef = reactExports.useRef(null);
      const [displayNode, setDisplayNode] = reactExports.useState(null);
      const {
        current: isOpenControlled
      } = reactExports.useRef(openProp != null);
      const [menuMinWidthState, setMenuMinWidthState] = reactExports.useState();
      const handleRef = useForkRef$2(ref, inputRefProp);
      const handleDisplayRef = reactExports.useCallback((node2) => {
        displayRef.current = node2;
        if (node2) {
          setDisplayNode(node2);
        }
      }, []);
      const anchorElement = displayNode == null ? void 0 : displayNode.parentNode;
      reactExports.useImperativeHandle(handleRef, () => ({
        focus: () => {
          displayRef.current.focus();
        },
        node: inputRef.current,
        value: value2
      }), [value2]);
      reactExports.useEffect(() => {
        if (defaultOpen && openState && displayNode && !isOpenControlled) {
          setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
          displayRef.current.focus();
        }
      }, [displayNode, autoWidth]);
      reactExports.useEffect(() => {
        if (autoFocus) {
          displayRef.current.focus();
        }
      }, [autoFocus]);
      reactExports.useEffect(() => {
        if (!labelId) {
          return void 0;
        }
        const label = ownerDocument(displayRef.current).getElementById(labelId);
        if (label) {
          const handler = () => {
            if (getSelection().isCollapsed) {
              displayRef.current.focus();
            }
          };
          label.addEventListener("click", handler);
          return () => {
            label.removeEventListener("click", handler);
          };
        }
        return void 0;
      }, [labelId]);
      const update = (open2, event) => {
        if (open2) {
          if (onOpen) {
            onOpen(event);
          }
        } else if (onClose) {
          onClose(event);
        }
        if (!isOpenControlled) {
          setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
          setOpenState(open2);
        }
      };
      const handleMouseDown = (event) => {
        if (event.button !== 0) {
          return;
        }
        event.preventDefault();
        displayRef.current.focus();
        update(true, event);
      };
      const handleClose = (event) => {
        update(false, event);
      };
      const childrenArray = reactExports.Children.toArray(children);
      const handleChange = (event) => {
        const index = childrenArray.map((child2) => child2.props.value).indexOf(event.target.value);
        if (index === -1) {
          return;
        }
        const child = childrenArray[index];
        setValueState(child.props.value);
        if (onChange) {
          onChange(event, child);
        }
      };
      const handleItemClick = (child) => (event) => {
        let newValue;
        if (!event.currentTarget.hasAttribute("tabindex")) {
          return;
        }
        if (multiple) {
          newValue = Array.isArray(value2) ? value2.slice() : [];
          const itemIndex = value2.indexOf(child.props.value);
          if (itemIndex === -1) {
            newValue.push(child.props.value);
          } else {
            newValue.splice(itemIndex, 1);
          }
        } else {
          newValue = child.props.value;
        }
        if (child.props.onClick) {
          child.props.onClick(event);
        }
        if (value2 !== newValue) {
          setValueState(newValue);
          if (onChange) {
            const nativeEvent = event.nativeEvent || event;
            const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
            Object.defineProperty(clonedEvent, "target", {
              writable: true,
              value: {
                value: newValue,
                name
              }
            });
            onChange(clonedEvent, child);
          }
        }
        if (!multiple) {
          update(false, event);
        }
      };
      const handleKeyDown2 = (event) => {
        if (!readOnly) {
          const validKeys = [
            " ",
            "ArrowUp",
            "ArrowDown",
            // The native select doesn't respond to enter on macOS, but it's recommended by
            // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
            "Enter"
          ];
          if (validKeys.indexOf(event.key) !== -1) {
            event.preventDefault();
            update(true, event);
          }
        }
      };
      const open = displayNode !== null && openState;
      const handleBlur = (event) => {
        if (!open && onBlur) {
          Object.defineProperty(event, "target", {
            writable: true,
            value: {
              value: value2,
              name
            }
          });
          onBlur(event);
        }
      };
      delete other["aria-invalid"];
      let display;
      let displaySingle;
      const displayMultiple = [];
      let computeDisplay = false;
      if (isFilled({
        value: value2
      }) || displayEmpty) {
        if (renderValue) {
          display = renderValue(value2);
        } else {
          computeDisplay = true;
        }
      }
      const items = childrenArray.map((child) => {
        if (!/* @__PURE__ */ reactExports.isValidElement(child)) {
          return null;
        }
        let selected;
        if (multiple) {
          if (!Array.isArray(value2)) {
            throw new Error(formatMuiErrorMessage(2));
          }
          selected = value2.some((v2) => areEqualValues(v2, child.props.value));
          if (selected && computeDisplay) {
            displayMultiple.push(child.props.children);
          }
        } else {
          selected = areEqualValues(value2, child.props.value);
          if (selected && computeDisplay) {
            displaySingle = child.props.children;
          }
        }
        return /* @__PURE__ */ reactExports.cloneElement(child, {
          "aria-selected": selected ? "true" : "false",
          onClick: handleItemClick(child),
          onKeyUp: (event) => {
            if (event.key === " ") {
              event.preventDefault();
            }
            if (child.props.onKeyUp) {
              child.props.onKeyUp(event);
            }
          },
          role: "option",
          selected,
          value: void 0,
          // The value is most likely not a valid HTML attribute.
          "data-value": child.props.value
          // Instead, we provide it as a data attribute.
        });
      });
      if (computeDisplay) {
        if (multiple) {
          if (displayMultiple.length === 0) {
            display = null;
          } else {
            display = displayMultiple.reduce((output, child, index) => {
              output.push(child);
              if (index < displayMultiple.length - 1) {
                output.push(", ");
              }
              return output;
            }, []);
          }
        } else {
          display = displaySingle;
        }
      }
      let menuMinWidth = menuMinWidthState;
      if (!autoWidth && isOpenControlled && displayNode) {
        menuMinWidth = anchorElement.clientWidth;
      }
      let tabIndex;
      if (typeof tabIndexProp !== "undefined") {
        tabIndex = tabIndexProp;
      } else {
        tabIndex = disabled ? null : 0;
      }
      const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : void 0);
      const ownerState = _extends$1({}, props, {
        variant,
        value: value2,
        open,
        error
      });
      const classes = useUtilityClasses$R(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(SelectSelect, _extends$1({
          ref: handleDisplayRef,
          tabIndex,
          role: "button",
          "aria-disabled": disabled ? "true" : void 0,
          "aria-expanded": open ? "true" : "false",
          "aria-haspopup": "listbox",
          "aria-label": ariaLabel,
          "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
          "aria-describedby": ariaDescribedby,
          onKeyDown: handleKeyDown2,
          onMouseDown: disabled || readOnly ? null : handleMouseDown,
          onBlur: handleBlur,
          onFocus
        }, SelectDisplayProps, {
          ownerState,
          className: clsx(SelectDisplayProps.className, classes.select, className),
          id: buttonId,
          children: isEmpty(display) ? (
            // notranslate needed while Google Translate will not fix zero-width space issue
            _span$1 || (_span$1 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
              className: "notranslate",
              children: "​"
            }))
          ) : display
        })), /* @__PURE__ */ jsxRuntimeExports.jsx(SelectNativeInput, _extends$1({
          "aria-invalid": error,
          value: Array.isArray(value2) ? value2.join(",") : value2,
          name,
          ref: inputRef,
          "aria-hidden": true,
          onChange: handleChange,
          tabIndex: -1,
          disabled,
          className: classes.nativeInput,
          autoFocus,
          ownerState
        }, other)), /* @__PURE__ */ jsxRuntimeExports.jsx(SelectIcon, {
          as: IconComponent,
          className: classes.icon,
          ownerState
        }), /* @__PURE__ */ jsxRuntimeExports.jsx(Menu$1, _extends$1({
          id: `menu-${name || ""}`,
          anchorEl: anchorElement,
          open,
          onClose: handleClose,
          anchorOrigin: {
            vertical: "bottom",
            horizontal: "center"
          },
          transformOrigin: {
            vertical: "top",
            horizontal: "center"
          }
        }, MenuProps, {
          MenuListProps: _extends$1({
            "aria-labelledby": labelId,
            role: "listbox",
            disableListWrap: true
          }, MenuProps.MenuListProps),
          PaperProps: _extends$1({}, MenuProps.PaperProps, {
            style: _extends$1({
              minWidth: menuMinWidth
            }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
          }),
          children: items
        }))]
      });
    });
    const SelectInput$1 = SelectInput;
    function getSvgIconUtilityClass(slot) {
      return generateUtilityClass("MuiSvgIcon", slot);
    }
    generateUtilityClasses("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
    const _excluded$1d = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
    const useUtilityClasses$Q = (ownerState) => {
      const {
        color: color2,
        fontSize,
        classes
      } = ownerState;
      const slots = {
        root: ["root", color2 !== "inherit" && `color${capitalize(color2)}`, `fontSize${capitalize(fontSize)}`]
      };
      return composeClasses(slots, getSvgIconUtilityClass, classes);
    };
    const SvgIconRoot = styled$1("svg", {
      name: "MuiSvgIcon",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.color !== "inherit" && styles2[`color${capitalize(ownerState.color)}`], styles2[`fontSize${capitalize(ownerState.fontSize)}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette$ownerState$c2, _palette2, _palette2$action, _palette3, _palette3$action;
      return {
        userSelect: "none",
        width: "1em",
        height: "1em",
        display: "inline-block",
        fill: "currentColor",
        flexShrink: 0,
        transition: (_theme$transitions = theme.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
          duration: (_theme$transitions2 = theme.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
        }),
        fontSize: {
          inherit: "inherit",
          small: ((_theme$typography = theme.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
          medium: ((_theme$typography2 = theme.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
          large: ((_theme$typography3 = theme.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
        }[ownerState.fontSize],
        // TODO v5 deprecate, v6 remove for sx
        color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null ? void 0 : (_palette$ownerState$c2 = _palette[ownerState.color]) == null ? void 0 : _palette$ownerState$c2.main) != null ? _palette$ownerState$c : {
          action: (_palette2 = (theme.vars || theme).palette) == null ? void 0 : (_palette2$action = _palette2.action) == null ? void 0 : _palette2$action.active,
          disabled: (_palette3 = (theme.vars || theme).palette) == null ? void 0 : (_palette3$action = _palette3.action) == null ? void 0 : _palette3$action.disabled,
          inherit: void 0
        }[ownerState.color]
      };
    });
    const SvgIcon = /* @__PURE__ */ reactExports.forwardRef(function SvgIcon2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiSvgIcon"
      });
      const {
        children,
        className,
        color: color2 = "inherit",
        component = "svg",
        fontSize = "medium",
        htmlColor,
        inheritViewBox = false,
        titleAccess,
        viewBox = "0 0 24 24"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1d);
      const ownerState = _extends$1({}, props, {
        color: color2,
        component,
        fontSize,
        instanceFontSize: inProps.fontSize,
        inheritViewBox,
        viewBox
      });
      const more = {};
      if (!inheritViewBox) {
        more.viewBox = viewBox;
      }
      const classes = useUtilityClasses$Q(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(SvgIconRoot, _extends$1({
        as: component,
        className: clsx(classes.root, className),
        focusable: "false",
        color: htmlColor,
        "aria-hidden": titleAccess ? void 0 : true,
        role: titleAccess ? "img" : void 0,
        ref
      }, more, other, {
        ownerState,
        children: [children, titleAccess ? /* @__PURE__ */ jsxRuntimeExports.jsx("title", {
          children: titleAccess
        }) : null]
      }));
    });
    SvgIcon.muiName = "SvgIcon";
    const SvgIcon$1 = SvgIcon;
    function createSvgIcon$1(path, displayName) {
      function Component(props, ref) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon$1, _extends$1({
          "data-testid": `${displayName}Icon`,
          ref
        }, props, {
          children: path
        }));
      }
      Component.muiName = SvgIcon$1.muiName;
      return /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(Component));
    }
    const ArrowDropDownIcon = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
      d: "M7 10l5 5 5-5z"
    }), "ArrowDropDown");
    const _excluded$1c = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];
    const useUtilityClasses$P = (ownerState) => {
      const {
        classes
      } = ownerState;
      return classes;
    };
    const styledRootConfig = {
      name: "MuiSelect",
      overridesResolver: (props, styles2) => styles2.root,
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) && prop !== "variant",
      slot: "Root"
    };
    const StyledInput = styled$1(Input$1, styledRootConfig)("");
    const StyledOutlinedInput = styled$1(OutlinedInput$1, styledRootConfig)("");
    const StyledFilledInput = styled$1(FilledInput$1, styledRootConfig)("");
    const Select = /* @__PURE__ */ reactExports.forwardRef(function Select2(inProps, ref) {
      const props = useThemeProps({
        name: "MuiSelect",
        props: inProps
      });
      const {
        autoWidth = false,
        children,
        classes: classesProp = {},
        className,
        defaultOpen = false,
        displayEmpty = false,
        IconComponent = ArrowDropDownIcon,
        id: id2,
        input,
        inputProps,
        label,
        labelId,
        MenuProps,
        multiple = false,
        native = false,
        onClose,
        onOpen,
        open,
        renderValue,
        SelectDisplayProps,
        variant: variantProp = "outlined"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1c);
      const inputComponent = native ? NativeSelectInput$1 : SelectInput$1;
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["variant", "error"]
      });
      const variant = fcs.variant || variantProp;
      const ownerState = _extends$1({}, props, {
        variant,
        classes: classesProp
      });
      const classes = useUtilityClasses$P(ownerState);
      const InputComponent = input || {
        standard: /* @__PURE__ */ jsxRuntimeExports.jsx(StyledInput, {
          ownerState
        }),
        outlined: /* @__PURE__ */ jsxRuntimeExports.jsx(StyledOutlinedInput, {
          label,
          ownerState
        }),
        filled: /* @__PURE__ */ jsxRuntimeExports.jsx(StyledFilledInput, {
          ownerState
        })
      }[variant];
      const inputComponentRef = useForkRef$2(ref, InputComponent.ref);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Fragment, {
        children: /* @__PURE__ */ reactExports.cloneElement(InputComponent, _extends$1({
          // Most of the logic is implemented in `SelectInput`.
          // The `Select` component is a simple API wrapper to expose something better to play with.
          inputComponent,
          inputProps: _extends$1({
            children,
            error: fcs.error,
            IconComponent,
            variant,
            type: void 0,
            // We render a select. We can ignore the type provided by the `Input`.
            multiple
          }, native ? {
            id: id2
          } : {
            autoWidth,
            defaultOpen,
            displayEmpty,
            labelId,
            MenuProps,
            onClose,
            onOpen,
            open,
            renderValue,
            SelectDisplayProps: _extends$1({
              id: id2
            }, SelectDisplayProps)
          }, inputProps, {
            classes: inputProps ? deepmerge(classes, inputProps.classes) : classes
          }, input ? input.props.inputProps : {})
        }, multiple && native && variant === "outlined" ? {
          notched: true
        } : {}, {
          ref: inputComponentRef,
          className: clsx(InputComponent.props.className, className)
        }, !input && {
          variant
        }, other))
      });
    });
    Select.muiName = "Select";
    const Select$1 = Select;
    function getTextFieldUtilityClass(slot) {
      return generateUtilityClass("MuiTextField", slot);
    }
    generateUtilityClasses("MuiTextField", ["root"]);
    const _excluded$1b = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
    const variantComponent = {
      standard: Input$1,
      filled: FilledInput$1,
      outlined: OutlinedInput$1
    };
    const useUtilityClasses$O = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getTextFieldUtilityClass, classes);
    };
    const TextFieldRoot = styled$1(FormControl$1, {
      name: "MuiTextField",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({});
    const TextField = /* @__PURE__ */ reactExports.forwardRef(function TextField2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiTextField"
      });
      const {
        autoComplete,
        autoFocus = false,
        children,
        className,
        color: color2 = "primary",
        defaultValue: defaultValue2,
        disabled = false,
        error = false,
        FormHelperTextProps,
        fullWidth = false,
        helperText,
        id: idOverride,
        InputLabelProps,
        inputProps,
        InputProps,
        inputRef,
        label,
        maxRows,
        minRows,
        multiline = false,
        name,
        onBlur,
        onChange,
        onClick,
        onFocus,
        placeholder,
        required = false,
        rows,
        select = false,
        SelectProps,
        type,
        value: value2,
        variant = "outlined"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1b);
      const ownerState = _extends$1({}, props, {
        autoFocus,
        color: color2,
        disabled,
        error,
        fullWidth,
        multiline,
        required,
        select,
        variant
      });
      const classes = useUtilityClasses$O(ownerState);
      const InputMore = {};
      if (variant === "outlined") {
        if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
          InputMore.notched = InputLabelProps.shrink;
        }
        InputMore.label = label;
      }
      if (select) {
        if (!SelectProps || !SelectProps.native) {
          InputMore.id = void 0;
        }
        InputMore["aria-describedby"] = void 0;
      }
      const id2 = useId$2(idOverride);
      const helperTextId = helperText && id2 ? `${id2}-helper-text` : void 0;
      const inputLabelId = label && id2 ? `${id2}-label` : void 0;
      const InputComponent = variantComponent[variant];
      const InputElement = /* @__PURE__ */ jsxRuntimeExports.jsx(InputComponent, _extends$1({
        "aria-describedby": helperTextId,
        autoComplete,
        autoFocus,
        defaultValue: defaultValue2,
        fullWidth,
        multiline,
        name,
        rows,
        maxRows,
        minRows,
        type,
        value: value2,
        id: id2,
        inputRef,
        onBlur,
        onChange,
        onFocus,
        onClick,
        placeholder,
        inputProps
      }, InputMore, InputProps));
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(TextFieldRoot, _extends$1({
        className: clsx(classes.root, className),
        disabled,
        error,
        fullWidth,
        ref,
        required,
        color: color2,
        variant,
        ownerState
      }, other, {
        children: [label != null && label !== "" && /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel$1, _extends$1({
          htmlFor: id2,
          id: inputLabelId
        }, InputLabelProps, {
          children: label
        })), select ? /* @__PURE__ */ jsxRuntimeExports.jsx(Select$1, _extends$1({
          "aria-describedby": helperTextId,
          id: id2,
          labelId: inputLabelId,
          value: value2,
          input: InputElement
        }, SelectProps, {
          children
        })) : InputElement, helperText && /* @__PURE__ */ jsxRuntimeExports.jsx(FormHelperText$1, _extends$1({
          id: helperTextId
        }, FormHelperTextProps, {
          children: helperText
        }))]
      }));
    });
    const TextField$1 = TextField;
    function ownKeys$C(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$C(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$C(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty$1(obj, key, value2) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value2,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _slicedToArray$1(arr, i) {
      return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$h(arr, i) || _nonIterableRest$1();
    }
    function _arrayWithHoles$1(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _iterableToArrayLimit$1(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _unsupportedIterableToArray$h(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$h(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$h(o, minLen);
    }
    function _arrayLikeToArray$h(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function _nonIterableRest$1() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var ConfirmContext = /* @__PURE__ */ reactExports.createContext();
    var ConfirmationDialog = function ConfirmationDialog2(_ref) {
      var open = _ref.open, options = _ref.options, onCancel = _ref.onCancel, onConfirm = _ref.onConfirm, onClose = _ref.onClose;
      var title = options.title, description = options.description, content = options.content, confirmationText = options.confirmationText, cancellationText = options.cancellationText, dialogProps = options.dialogProps, dialogActionsProps = options.dialogActionsProps, confirmationButtonProps = options.confirmationButtonProps, cancellationButtonProps = options.cancellationButtonProps, titleProps = options.titleProps, contentProps = options.contentProps, allowClose = options.allowClose, confirmationKeyword = options.confirmationKeyword, confirmationKeywordTextFieldProps = options.confirmationKeywordTextFieldProps;
      var _React$useState = React$4.useState(""), _React$useState2 = _slicedToArray$1(_React$useState, 2), confirmationKeywordValue = _React$useState2[0], setConfirmationKeywordValue = _React$useState2[1];
      var confirmationButtonDisabled = confirmationKeyword && confirmationKeywordValue !== confirmationKeyword;
      var confirmationContent = /* @__PURE__ */ React$4.createElement(React$4.Fragment, null, confirmationKeyword && /* @__PURE__ */ React$4.createElement(TextField$1, _extends({
        onChange: function onChange(e2) {
          return setConfirmationKeywordValue(e2.target.value);
        },
        value: confirmationKeywordValue,
        fullWidth: true
      }, confirmationKeywordTextFieldProps)));
      return /* @__PURE__ */ React$4.createElement(MuiDialog, _extends({
        fullWidth: true
      }, dialogProps, {
        open,
        onClose: allowClose ? onClose : null
      }), title && /* @__PURE__ */ React$4.createElement(DialogTitle$1, titleProps, title), content ? /* @__PURE__ */ React$4.createElement(DialogContent$1, contentProps, content, confirmationContent) : description ? /* @__PURE__ */ React$4.createElement(DialogContent$1, contentProps, /* @__PURE__ */ React$4.createElement(DialogContentText$1, null, description), confirmationContent) : confirmationKeyword && /* @__PURE__ */ React$4.createElement(DialogContent$1, contentProps, confirmationContent), /* @__PURE__ */ React$4.createElement(DialogActions$1, dialogActionsProps, /* @__PURE__ */ React$4.createElement(Button$1, _extends({}, cancellationButtonProps, {
        onClick: onCancel
      }), cancellationText), /* @__PURE__ */ React$4.createElement(Button$1, _extends({
        color: "primary",
        disabled: confirmationButtonDisabled
      }, confirmationButtonProps, {
        onClick: onConfirm
      }), confirmationText)));
    };
    var DEFAULT_OPTIONS = {
      title: "Are you sure?",
      description: "",
      content: null,
      confirmationText: "Ok",
      cancellationText: "Cancel",
      dialogProps: {},
      dialogActionsProps: {},
      confirmationButtonProps: {},
      cancellationButtonProps: {},
      titleProps: {},
      contentProps: {},
      allowClose: true,
      confirmationKeywordTextFieldProps: {}
    };
    var buildOptions = function buildOptions2(defaultOptions, options) {
      var dialogProps = _objectSpread2(_objectSpread2({}, defaultOptions.dialogProps || DEFAULT_OPTIONS.dialogProps), options.dialogProps || {});
      var dialogActionsProps = _objectSpread2(_objectSpread2({}, defaultOptions.dialogActionsProps || DEFAULT_OPTIONS.dialogActionsProps), options.dialogActionsProps || {});
      var confirmationButtonProps = _objectSpread2(_objectSpread2({}, defaultOptions.confirmationButtonProps || DEFAULT_OPTIONS.confirmationButtonProps), options.confirmationButtonProps || {});
      var cancellationButtonProps = _objectSpread2(_objectSpread2({}, defaultOptions.cancellationButtonProps || DEFAULT_OPTIONS.cancellationButtonProps), options.cancellationButtonProps || {});
      var titleProps = _objectSpread2(_objectSpread2({}, defaultOptions.titleProps || DEFAULT_OPTIONS.titleProps), options.titleProps || {});
      var contentProps = _objectSpread2(_objectSpread2({}, defaultOptions.contentProps || DEFAULT_OPTIONS.contentProps), options.contentProps || {});
      var confirmationKeywordTextFieldProps = _objectSpread2(_objectSpread2({}, defaultOptions.confirmationKeywordTextFieldProps || DEFAULT_OPTIONS.confirmationKeywordTextFieldProps), options.confirmationKeywordTextFieldProps || {});
      return _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, DEFAULT_OPTIONS), defaultOptions), options), {}, {
        dialogProps,
        dialogActionsProps,
        confirmationButtonProps,
        cancellationButtonProps,
        titleProps,
        contentProps,
        confirmationKeywordTextFieldProps
      });
    };
    var ConfirmProvider = function ConfirmProvider2(_ref) {
      var children = _ref.children, _ref$defaultOptions = _ref.defaultOptions, defaultOptions = _ref$defaultOptions === void 0 ? {} : _ref$defaultOptions;
      var _useState = reactExports.useState({}), _useState2 = _slicedToArray$1(_useState, 2), options = _useState2[0], setOptions = _useState2[1];
      var _useState3 = reactExports.useState([]), _useState4 = _slicedToArray$1(_useState3, 2), resolveReject = _useState4[0], setResolveReject = _useState4[1];
      var _resolveReject = _slicedToArray$1(resolveReject, 2), resolve = _resolveReject[0], reject = _resolveReject[1];
      var confirm2 = reactExports.useCallback(function() {
        var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        return new Promise(function(resolve2, reject2) {
          setOptions(options2);
          setResolveReject([resolve2, reject2]);
        });
      }, []);
      var handleClose = reactExports.useCallback(function() {
        setResolveReject([]);
      }, []);
      var handleCancel = reactExports.useCallback(function() {
        if (reject) {
          reject();
          handleClose();
        }
      }, [reject, handleClose]);
      var handleConfirm = reactExports.useCallback(function() {
        if (resolve) {
          resolve();
          handleClose();
        }
      }, [resolve, handleClose]);
      return /* @__PURE__ */ React$4.createElement(reactExports.Fragment, null, /* @__PURE__ */ React$4.createElement(ConfirmContext.Provider, {
        value: confirm2
      }, children), /* @__PURE__ */ React$4.createElement(ConfirmationDialog, {
        open: resolveReject.length === 2,
        options: buildOptions(defaultOptions, options),
        onClose: handleClose,
        onCancel: handleCancel,
        onConfirm: handleConfirm
      }));
    };
    var useConfirm = function useConfirm2() {
      var confirm2 = reactExports.useContext(ConfirmContext);
      return confirm2;
    };
    const _excluded$1a = ["localeText"];
    const MuiPickersAdapterContext = /* @__PURE__ */ reactExports.createContext(null);
    function LocalizationProvider(inProps) {
      var _React$useContext;
      const {
        localeText: inLocaleText
      } = inProps, otherInProps = _objectWithoutPropertiesLoose(inProps, _excluded$1a);
      const {
        utils: parentUtils,
        localeText: parentLocaleText
      } = (_React$useContext = reactExports.useContext(MuiPickersAdapterContext)) != null ? _React$useContext : {
        utils: void 0,
        localeText: void 0
      };
      const props = useThemeProps({
        // We don't want to pass the `localeText` prop to the theme, that way it will always return the theme value,
        // We will then merge this theme value with our value manually
        props: otherInProps,
        name: "MuiLocalizationProvider"
      });
      const {
        children,
        dateAdapter: DateAdapter,
        dateFormats,
        dateLibInstance,
        adapterLocale,
        localeText: themeLocaleText
      } = props;
      const localeText = reactExports.useMemo(() => _extends$1({}, themeLocaleText, parentLocaleText, inLocaleText), [themeLocaleText, parentLocaleText, inLocaleText]);
      const utils2 = reactExports.useMemo(() => {
        if (!DateAdapter) {
          if (parentUtils) {
            return parentUtils;
          }
          return null;
        }
        const adapter = new DateAdapter({
          locale: adapterLocale,
          formats: dateFormats,
          instance: dateLibInstance
        });
        if (!adapter.isMUIAdapter) {
          throw new Error(["MUI: The date adapter should be imported from `@mui/x-date-pickers` or `@mui/x-date-pickers-pro`, not from `@date-io`", "For example, `import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'` instead of `import AdapterDayjs from '@date-io/dayjs'`", "More information on the installation documentation: https://mui.com/x/react-date-pickers/getting-started/#installation"].join(`
`));
        }
        return adapter;
      }, [DateAdapter, adapterLocale, dateFormats, dateLibInstance, parentUtils]);
      const defaultDates = reactExports.useMemo(() => {
        if (!utils2) {
          return null;
        }
        return {
          minDate: utils2.date("1900-01-01T00:00:00.000"),
          maxDate: utils2.date("2099-12-31T00:00:00.000")
        };
      }, [utils2]);
      const contextValue = reactExports.useMemo(() => {
        return {
          utils: utils2,
          defaultDates,
          localeText
        };
      }, [defaultDates, utils2, localeText]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(MuiPickersAdapterContext.Provider, {
        value: contextValue,
        children
      });
    }
    //! moment.js
    //! version : 2.29.4
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com
    var hookCallback;
    function hooks() {
      return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
      hookCallback = callback;
    }
    function isArray$c(input) {
      return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
    }
    function isObject$k(input) {
      return input != null && Object.prototype.toString.call(input) === "[object Object]";
    }
    function hasOwnProp(a, b2) {
      return Object.prototype.hasOwnProperty.call(a, b2);
    }
    function isObjectEmpty(obj) {
      if (Object.getOwnPropertyNames) {
        return Object.getOwnPropertyNames(obj).length === 0;
      } else {
        var k2;
        for (k2 in obj) {
          if (hasOwnProp(obj, k2)) {
            return false;
          }
        }
        return true;
      }
    }
    function isUndefined(input) {
      return input === void 0;
    }
    function isNumber(input) {
      return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
    }
    function isDate(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
    }
    function map(arr, fn) {
      var res = [], i, arrLen = arr.length;
      for (i = 0; i < arrLen; ++i) {
        res.push(fn(arr[i], i));
      }
      return res;
    }
    function extend(a, b2) {
      for (var i in b2) {
        if (hasOwnProp(b2, i)) {
          a[i] = b2[i];
        }
      }
      if (hasOwnProp(b2, "toString")) {
        a.toString = b2.toString;
      }
      if (hasOwnProp(b2, "valueOf")) {
        a.valueOf = b2.valueOf;
      }
      return a;
    }
    function createUTC(input, format2, locale2, strict) {
      return createLocalOrUTC(input, format2, locale2, strict, true).utc();
    }
    function defaultParsingFlags() {
      return {
        empty: false,
        unusedTokens: [],
        unusedInput: [],
        overflow: -2,
        charsLeftOver: 0,
        nullInput: false,
        invalidEra: null,
        invalidMonth: null,
        invalidFormat: false,
        userInvalidated: false,
        iso: false,
        parsedDateParts: [],
        era: null,
        meridiem: null,
        rfc2822: false,
        weekdayMismatch: false
      };
    }
    function getParsingFlags(m2) {
      if (m2._pf == null) {
        m2._pf = defaultParsingFlags();
      }
      return m2._pf;
    }
    var some;
    if (Array.prototype.some) {
      some = Array.prototype.some;
    } else {
      some = function(fun) {
        var t2 = Object(this), len = t2.length >>> 0, i;
        for (i = 0; i < len; i++) {
          if (i in t2 && fun.call(this, t2[i], i, t2)) {
            return true;
          }
        }
        return false;
      };
    }
    function isValid(m2) {
      if (m2._isValid == null) {
        var flags = getParsingFlags(m2), parsedParts = some.call(flags.parsedDateParts, function(i) {
          return i != null;
        }), isNowValid = !isNaN(m2._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
        if (m2._strict) {
          isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
        }
        if (Object.isFrozen == null || !Object.isFrozen(m2)) {
          m2._isValid = isNowValid;
        } else {
          return isNowValid;
        }
      }
      return m2._isValid;
    }
    function createInvalid(flags) {
      var m2 = createUTC(NaN);
      if (flags != null) {
        extend(getParsingFlags(m2), flags);
      } else {
        getParsingFlags(m2).userInvalidated = true;
      }
      return m2;
    }
    var momentProperties = hooks.momentProperties = [], updateInProgress = false;
    function copyConfig(to2, from2) {
      var i, prop, val, momentPropertiesLen = momentProperties.length;
      if (!isUndefined(from2._isAMomentObject)) {
        to2._isAMomentObject = from2._isAMomentObject;
      }
      if (!isUndefined(from2._i)) {
        to2._i = from2._i;
      }
      if (!isUndefined(from2._f)) {
        to2._f = from2._f;
      }
      if (!isUndefined(from2._l)) {
        to2._l = from2._l;
      }
      if (!isUndefined(from2._strict)) {
        to2._strict = from2._strict;
      }
      if (!isUndefined(from2._tzm)) {
        to2._tzm = from2._tzm;
      }
      if (!isUndefined(from2._isUTC)) {
        to2._isUTC = from2._isUTC;
      }
      if (!isUndefined(from2._offset)) {
        to2._offset = from2._offset;
      }
      if (!isUndefined(from2._pf)) {
        to2._pf = getParsingFlags(from2);
      }
      if (!isUndefined(from2._locale)) {
        to2._locale = from2._locale;
      }
      if (momentPropertiesLen > 0) {
        for (i = 0; i < momentPropertiesLen; i++) {
          prop = momentProperties[i];
          val = from2[prop];
          if (!isUndefined(val)) {
            to2[prop] = val;
          }
        }
      }
      return to2;
    }
    function Moment(config2) {
      copyConfig(this, config2);
      this._d = new Date(config2._d != null ? config2._d.getTime() : NaN);
      if (!this.isValid()) {
        this._d = /* @__PURE__ */ new Date(NaN);
      }
      if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
      }
    }
    function isMoment(obj) {
      return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function warn(msg) {
      if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
        console.warn("Deprecation warning: " + msg);
      }
    }
    function deprecate(msg, fn) {
      var firstTime = true;
      return extend(function() {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
          var args = [], arg, i, key, argLen = arguments.length;
          for (i = 0; i < argLen; i++) {
            arg = "";
            if (typeof arguments[i] === "object") {
              arg += "\n[" + i + "] ";
              for (key in arguments[0]) {
                if (hasOwnProp(arguments[0], key)) {
                  arg += key + ": " + arguments[0][key] + ", ";
                }
              }
              arg = arg.slice(0, -2);
            } else {
              arg = arguments[i];
            }
            args.push(arg);
          }
          warn(
            msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
          );
          firstTime = false;
        }
        return fn.apply(this, arguments);
      }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
      if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
      }
      if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
      }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction$4(input) {
      return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
    }
    function set(config2) {
      var prop, i;
      for (i in config2) {
        if (hasOwnProp(config2, i)) {
          prop = config2[i];
          if (isFunction$4(prop)) {
            this[i] = prop;
          } else {
            this["_" + i] = prop;
          }
        }
      }
      this._config = config2;
      this._dayOfMonthOrdinalParseLenient = new RegExp(
        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
      );
    }
    function mergeConfigs(parentConfig, childConfig) {
      var res = extend({}, parentConfig), prop;
      for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
          if (isObject$k(parentConfig[prop]) && isObject$k(childConfig[prop])) {
            res[prop] = {};
            extend(res[prop], parentConfig[prop]);
            extend(res[prop], childConfig[prop]);
          } else if (childConfig[prop] != null) {
            res[prop] = childConfig[prop];
          } else {
            delete res[prop];
          }
        }
      }
      for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject$k(parentConfig[prop])) {
          res[prop] = extend({}, res[prop]);
        }
      }
      return res;
    }
    function Locale(config2) {
      if (config2 != null) {
        this.set(config2);
      }
    }
    var keys$7;
    if (Object.keys) {
      keys$7 = Object.keys;
    } else {
      keys$7 = function(obj) {
        var i, res = [];
        for (i in obj) {
          if (hasOwnProp(obj, i)) {
            res.push(i);
          }
        }
        return res;
      };
    }
    var defaultCalendar = {
      sameDay: "[Today at] LT",
      nextDay: "[Tomorrow at] LT",
      nextWeek: "dddd [at] LT",
      lastDay: "[Yesterday at] LT",
      lastWeek: "[Last] dddd [at] LT",
      sameElse: "L"
    };
    function calendar(key, mom, now2) {
      var output = this._calendar[key] || this._calendar["sameElse"];
      return isFunction$4(output) ? output.call(mom, now2) : output;
    }
    function zeroFill(number, targetLength, forceSign) {
      var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
      return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
    function addFormatToken(token2, padded, ordinal2, callback) {
      var func = callback;
      if (typeof callback === "string") {
        func = function() {
          return this[callback]();
        };
      }
      if (token2) {
        formatTokenFunctions[token2] = func;
      }
      if (padded) {
        formatTokenFunctions[padded[0]] = function() {
          return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
      }
      if (ordinal2) {
        formatTokenFunctions[ordinal2] = function() {
          return this.localeData().ordinal(
            func.apply(this, arguments),
            token2
          );
        };
      }
    }
    function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, "");
      }
      return input.replace(/\\/g, "");
    }
    function makeFormatFunction(format2) {
      var array = format2.match(formattingTokens), i, length2;
      for (i = 0, length2 = array.length; i < length2; i++) {
        if (formatTokenFunctions[array[i]]) {
          array[i] = formatTokenFunctions[array[i]];
        } else {
          array[i] = removeFormattingTokens(array[i]);
        }
      }
      return function(mom) {
        var output = "", i2;
        for (i2 = 0; i2 < length2; i2++) {
          output += isFunction$4(array[i2]) ? array[i2].call(mom, format2) : array[i2];
        }
        return output;
      };
    }
    function formatMoment(m2, format2) {
      if (!m2.isValid()) {
        return m2.localeData().invalidDate();
      }
      format2 = expandFormat(format2, m2.localeData());
      formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
      return formatFunctions[format2](m2);
    }
    function expandFormat(format2, locale2) {
      var i = 5;
      function replaceLongDateFormatTokens(input) {
        return locale2.longDateFormat(input) || input;
      }
      localFormattingTokens.lastIndex = 0;
      while (i >= 0 && localFormattingTokens.test(format2)) {
        format2 = format2.replace(
          localFormattingTokens,
          replaceLongDateFormatTokens
        );
        localFormattingTokens.lastIndex = 0;
        i -= 1;
      }
      return format2;
    }
    var defaultLongDateFormat = {
      LTS: "h:mm:ss A",
      LT: "h:mm A",
      L: "MM/DD/YYYY",
      LL: "MMMM D, YYYY",
      LLL: "MMMM D, YYYY h:mm A",
      LLLL: "dddd, MMMM D, YYYY h:mm A"
    };
    function longDateFormat(key) {
      var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
      if (format2 || !formatUpper) {
        return format2;
      }
      this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
        if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
          return tok.slice(1);
        }
        return tok;
      }).join("");
      return this._longDateFormat[key];
    }
    var defaultInvalidDate = "Invalid date";
    function invalidDate() {
      return this._invalidDate;
    }
    var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
      return this._ordinal.replace("%d", number);
    }
    var defaultRelativeTime = {
      future: "in %s",
      past: "%s ago",
      s: "a few seconds",
      ss: "%d seconds",
      m: "a minute",
      mm: "%d minutes",
      h: "an hour",
      hh: "%d hours",
      d: "a day",
      dd: "%d days",
      w: "a week",
      ww: "%d weeks",
      M: "a month",
      MM: "%d months",
      y: "a year",
      yy: "%d years"
    };
    function relativeTime(number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return isFunction$4(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff2, output) {
      var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
      return isFunction$4(format2) ? format2(output) : format2.replace(/%s/i, output);
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
      var lowerCase = unit.toLowerCase();
      aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
      return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
    }
    function normalizeObjectUnits(inputObject) {
      var normalizedInput = {}, normalizedProp, prop;
      for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
          normalizedProp = normalizeUnits(prop);
          if (normalizedProp) {
            normalizedInput[normalizedProp] = inputObject[prop];
          }
        }
      }
      return normalizedInput;
    }
    var priorities = {};
    function addUnitPriority(unit, priority) {
      priorities[unit] = priority;
    }
    function getPrioritizedUnits(unitsObj) {
      var units = [], u2;
      for (u2 in unitsObj) {
        if (hasOwnProp(unitsObj, u2)) {
          units.push({ unit: u2, priority: priorities[u2] });
        }
      }
      units.sort(function(a, b2) {
        return a.priority - b2.priority;
      });
      return units;
    }
    function isLeapYear(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    function absFloor(number) {
      if (number < 0) {
        return Math.ceil(number) || 0;
      } else {
        return Math.floor(number);
      }
    }
    function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion, value2 = 0;
      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value2 = absFloor(coercedNumber);
      }
      return value2;
    }
    function makeGetSet(unit, keepTime) {
      return function(value2) {
        if (value2 != null) {
          set$1(this, unit, value2);
          hooks.updateOffset(this, keepTime);
          return this;
        } else {
          return get$2(this, unit);
        }
      };
    }
    function get$2(mom, unit) {
      return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
    }
    function set$1(mom, unit, value2) {
      if (mom.isValid() && !isNaN(value2)) {
        if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
          value2 = toInt(value2);
          mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
            value2,
            mom.month(),
            daysInMonth(value2, mom.month())
          );
        } else {
          mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value2);
        }
      }
    }
    function stringGet(units) {
      units = normalizeUnits(units);
      if (isFunction$4(this[units])) {
        return this[units]();
      }
      return this;
    }
    function stringSet(units, value2) {
      if (typeof units === "object") {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
        for (i = 0; i < prioritizedLen; i++) {
          this[prioritized[i].unit](units[prioritized[i].unit]);
        }
      } else {
        units = normalizeUnits(units);
        if (isFunction$4(this[units])) {
          return this[units](value2);
        }
      }
      return this;
    }
    var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
    regexes = {};
    function addRegexToken(token2, regex, strictRegex) {
      regexes[token2] = isFunction$4(regex) ? regex : function(isStrict, localeData2) {
        return isStrict && strictRegex ? strictRegex : regex;
      };
    }
    function getParseRegexForToken(token2, config2) {
      if (!hasOwnProp(regexes, token2)) {
        return new RegExp(unescapeFormat(token2));
      }
      return regexes[token2](config2._strict, config2._locale);
    }
    function unescapeFormat(s) {
      return regexEscape(
        s.replace("\\", "").replace(
          /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
          function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
          }
        )
      );
    }
    function regexEscape(s) {
      return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    var tokens = {};
    function addParseToken(token2, callback) {
      var i, func = callback, tokenLen;
      if (typeof token2 === "string") {
        token2 = [token2];
      }
      if (isNumber(callback)) {
        func = function(input, array) {
          array[callback] = toInt(input);
        };
      }
      tokenLen = token2.length;
      for (i = 0; i < tokenLen; i++) {
        tokens[token2[i]] = func;
      }
    }
    function addWeekParseToken(token2, callback) {
      addParseToken(token2, function(input, array, config2, token3) {
        config2._w = config2._w || {};
        callback(input, config2._w, config2, token3);
      });
    }
    function addTimeToArrayFromToken(token2, input, config2) {
      if (input != null && hasOwnProp(tokens, token2)) {
        tokens[token2](input, config2._a, config2, token2);
      }
    }
    var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
    function mod(n2, x2) {
      return (n2 % x2 + x2) % x2;
    }
    var indexOf;
    if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
    } else {
      indexOf = function(o) {
        var i;
        for (i = 0; i < this.length; ++i) {
          if (this[i] === o) {
            return i;
          }
        }
        return -1;
      };
    }
    function daysInMonth(year, month) {
      if (isNaN(year) || isNaN(month)) {
        return NaN;
      }
      var modMonth = mod(month, 12);
      year += (month - modMonth) / 12;
      return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }
    addFormatToken("M", ["MM", 2], "Mo", function() {
      return this.month() + 1;
    });
    addFormatToken("MMM", 0, 0, function(format2) {
      return this.localeData().monthsShort(this, format2);
    });
    addFormatToken("MMMM", 0, 0, function(format2) {
      return this.localeData().months(this, format2);
    });
    addUnitAlias("month", "M");
    addUnitPriority("month", 8);
    addRegexToken("M", match1to2);
    addRegexToken("MM", match1to2, match2);
    addRegexToken("MMM", function(isStrict, locale2) {
      return locale2.monthsShortRegex(isStrict);
    });
    addRegexToken("MMMM", function(isStrict, locale2) {
      return locale2.monthsRegex(isStrict);
    });
    addParseToken(["M", "MM"], function(input, array) {
      array[MONTH] = toInt(input) - 1;
    });
    addParseToken(["MMM", "MMMM"], function(input, array, config2, token2) {
      var month = config2._locale.monthsParse(input, token2, config2._strict);
      if (month != null) {
        array[MONTH] = month;
      } else {
        getParsingFlags(config2).invalidMonth = input;
      }
    });
    var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
      "_"
    ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
    function localeMonths(m2, format2) {
      if (!m2) {
        return isArray$c(this._months) ? this._months : this._months["standalone"];
      }
      return isArray$c(this._months) ? this._months[m2.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m2.month()];
    }
    function localeMonthsShort(m2, format2) {
      if (!m2) {
        return isArray$c(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
      }
      return isArray$c(this._monthsShort) ? this._monthsShort[m2.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m2.month()];
    }
    function handleStrictParse(monthName, format2, strict) {
      var i, ii2, mom, llc = monthName.toLocaleLowerCase();
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
          mom = createUTC([2e3, i]);
          this._shortMonthsParse[i] = this.monthsShort(
            mom,
            ""
          ).toLocaleLowerCase();
          this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format2 === "MMM") {
          ii2 = indexOf.call(this._shortMonthsParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else {
          ii2 = indexOf.call(this._longMonthsParse, llc);
          return ii2 !== -1 ? ii2 : null;
        }
      } else {
        if (format2 === "MMM") {
          ii2 = indexOf.call(this._shortMonthsParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._longMonthsParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else {
          ii2 = indexOf.call(this._longMonthsParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._shortMonthsParse, llc);
          return ii2 !== -1 ? ii2 : null;
        }
      }
    }
    function localeMonthsParse(monthName, format2, strict) {
      var i, mom, regex;
      if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format2, strict);
      }
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
      }
      for (i = 0; i < 12; i++) {
        mom = createUTC([2e3, i]);
        if (strict && !this._longMonthsParse[i]) {
          this._longMonthsParse[i] = new RegExp(
            "^" + this.months(mom, "").replace(".", "") + "$",
            "i"
          );
          this._shortMonthsParse[i] = new RegExp(
            "^" + this.monthsShort(mom, "").replace(".", "") + "$",
            "i"
          );
        }
        if (!strict && !this._monthsParse[i]) {
          regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
          this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
        }
        if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
          return i;
        } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
          return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
          return i;
        }
      }
    }
    function setMonth(mom, value2) {
      var dayOfMonth;
      if (!mom.isValid()) {
        return mom;
      }
      if (typeof value2 === "string") {
        if (/^\d+$/.test(value2)) {
          value2 = toInt(value2);
        } else {
          value2 = mom.localeData().monthsParse(value2);
          if (!isNumber(value2)) {
            return mom;
          }
        }
      }
      dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value2));
      mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value2, dayOfMonth);
      return mom;
    }
    function getSetMonth(value2) {
      if (value2 != null) {
        setMonth(this, value2);
        hooks.updateOffset(this, true);
        return this;
      } else {
        return get$2(this, "Month");
      }
    }
    function getDaysInMonth() {
      return daysInMonth(this.year(), this.month());
    }
    function monthsShortRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, "_monthsRegex")) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsShortStrictRegex;
        } else {
          return this._monthsShortRegex;
        }
      } else {
        if (!hasOwnProp(this, "_monthsShortRegex")) {
          this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
      }
    }
    function monthsRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, "_monthsRegex")) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsStrictRegex;
        } else {
          return this._monthsRegex;
        }
      } else {
        if (!hasOwnProp(this, "_monthsRegex")) {
          this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
      }
    }
    function computeMonthsParse() {
      function cmpLenRev(a, b2) {
        return b2.length - a.length;
      }
      var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
      for (i = 0; i < 12; i++) {
        mom = createUTC([2e3, i]);
        shortPieces.push(this.monthsShort(mom, ""));
        longPieces.push(this.months(mom, ""));
        mixedPieces.push(this.months(mom, ""));
        mixedPieces.push(this.monthsShort(mom, ""));
      }
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
      }
      for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
      }
      this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._monthsShortRegex = this._monthsRegex;
      this._monthsStrictRegex = new RegExp(
        "^(" + longPieces.join("|") + ")",
        "i"
      );
      this._monthsShortStrictRegex = new RegExp(
        "^(" + shortPieces.join("|") + ")",
        "i"
      );
    }
    addFormatToken("Y", 0, 0, function() {
      var y2 = this.year();
      return y2 <= 9999 ? zeroFill(y2, 4) : "+" + y2;
    });
    addFormatToken(0, ["YY", 2], 0, function() {
      return this.year() % 100;
    });
    addFormatToken(0, ["YYYY", 4], 0, "year");
    addFormatToken(0, ["YYYYY", 5], 0, "year");
    addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
    addUnitAlias("year", "y");
    addUnitPriority("year", 1);
    addRegexToken("Y", matchSigned);
    addRegexToken("YY", match1to2, match2);
    addRegexToken("YYYY", match1to4, match4);
    addRegexToken("YYYYY", match1to6, match6);
    addRegexToken("YYYYYY", match1to6, match6);
    addParseToken(["YYYYY", "YYYYYY"], YEAR);
    addParseToken("YYYY", function(input, array) {
      array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken("YY", function(input, array) {
      array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken("Y", function(input, array) {
      array[YEAR] = parseInt(input, 10);
    });
    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
    }
    hooks.parseTwoDigitYear = function(input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
    };
    var getSetYear = makeGetSet("FullYear", true);
    function getIsLeapYear() {
      return isLeapYear(this.year());
    }
    function createDate(y2, m2, d2, h2, M2, s, ms) {
      var date;
      if (y2 < 100 && y2 >= 0) {
        date = new Date(y2 + 400, m2, d2, h2, M2, s, ms);
        if (isFinite(date.getFullYear())) {
          date.setFullYear(y2);
        }
      } else {
        date = new Date(y2, m2, d2, h2, M2, s, ms);
      }
      return date;
    }
    function createUTCDate(y2) {
      var date, args;
      if (y2 < 100 && y2 >= 0) {
        args = Array.prototype.slice.call(arguments);
        args[0] = y2 + 400;
        date = new Date(Date.UTC.apply(null, args));
        if (isFinite(date.getUTCFullYear())) {
          date.setUTCFullYear(y2);
        }
      } else {
        date = new Date(Date.UTC.apply(null, arguments));
      }
      return date;
    }
    function firstWeekOffset(year, dow, doy) {
      var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
      return -fwdlw + fwd - 1;
    }
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
      var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
      if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
      } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
      } else {
        resYear = year;
        resDayOfYear = dayOfYear;
      }
      return {
        year: resYear,
        dayOfYear: resDayOfYear
      };
    }
    function weekOfYear(mom, dow, doy) {
      var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
      if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
      } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
      } else {
        resYear = mom.year();
        resWeek = week;
      }
      return {
        week: resWeek,
        year: resYear
      };
    }
    function weeksInYear(year, dow, doy) {
      var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
      return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    addFormatToken("w", ["ww", 2], "wo", "week");
    addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
    addUnitAlias("week", "w");
    addUnitAlias("isoWeek", "W");
    addUnitPriority("week", 5);
    addUnitPriority("isoWeek", 5);
    addRegexToken("w", match1to2);
    addRegexToken("ww", match1to2, match2);
    addRegexToken("W", match1to2);
    addRegexToken("WW", match1to2, match2);
    addWeekParseToken(
      ["w", "ww", "W", "WW"],
      function(input, week, config2, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      }
    );
    function localeWeek(mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
      dow: 0,
      // Sunday is the first day of the week.
      doy: 6
      // The week that contains Jan 6th is the first week of the year.
    };
    function localeFirstDayOfWeek() {
      return this._week.dow;
    }
    function localeFirstDayOfYear() {
      return this._week.doy;
    }
    function getSetWeek(input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, "d");
    }
    function getSetISOWeek(input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, "d");
    }
    addFormatToken("d", 0, "do", "day");
    addFormatToken("dd", 0, 0, function(format2) {
      return this.localeData().weekdaysMin(this, format2);
    });
    addFormatToken("ddd", 0, 0, function(format2) {
      return this.localeData().weekdaysShort(this, format2);
    });
    addFormatToken("dddd", 0, 0, function(format2) {
      return this.localeData().weekdays(this, format2);
    });
    addFormatToken("e", 0, 0, "weekday");
    addFormatToken("E", 0, 0, "isoWeekday");
    addUnitAlias("day", "d");
    addUnitAlias("weekday", "e");
    addUnitAlias("isoWeekday", "E");
    addUnitPriority("day", 11);
    addUnitPriority("weekday", 11);
    addUnitPriority("isoWeekday", 11);
    addRegexToken("d", match1to2);
    addRegexToken("e", match1to2);
    addRegexToken("E", match1to2);
    addRegexToken("dd", function(isStrict, locale2) {
      return locale2.weekdaysMinRegex(isStrict);
    });
    addRegexToken("ddd", function(isStrict, locale2) {
      return locale2.weekdaysShortRegex(isStrict);
    });
    addRegexToken("dddd", function(isStrict, locale2) {
      return locale2.weekdaysRegex(isStrict);
    });
    addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config2, token2) {
      var weekday = config2._locale.weekdaysParse(input, token2, config2._strict);
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config2).invalidWeekday = input;
      }
    });
    addWeekParseToken(["d", "e", "E"], function(input, week, config2, token2) {
      week[token2] = toInt(input);
    });
    function parseWeekday(input, locale2) {
      if (typeof input !== "string") {
        return input;
      }
      if (!isNaN(input)) {
        return parseInt(input, 10);
      }
      input = locale2.weekdaysParse(input);
      if (typeof input === "number") {
        return input;
      }
      return null;
    }
    function parseIsoWeekday(input, locale2) {
      if (typeof input === "string") {
        return locale2.weekdaysParse(input) % 7 || 7;
      }
      return isNaN(input) ? null : input;
    }
    function shiftWeekdays(ws, n2) {
      return ws.slice(n2, 7).concat(ws.slice(0, n2));
    }
    var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
    function localeWeekdays(m2, format2) {
      var weekdays = isArray$c(this._weekdays) ? this._weekdays : this._weekdays[m2 && m2 !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
      return m2 === true ? shiftWeekdays(weekdays, this._week.dow) : m2 ? weekdays[m2.day()] : weekdays;
    }
    function localeWeekdaysShort(m2) {
      return m2 === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m2 ? this._weekdaysShort[m2.day()] : this._weekdaysShort;
    }
    function localeWeekdaysMin(m2) {
      return m2 === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m2 ? this._weekdaysMin[m2.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format2, strict) {
      var i, ii2, mom, llc = weekdayName.toLocaleLowerCase();
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];
        for (i = 0; i < 7; ++i) {
          mom = createUTC([2e3, 1]).day(i);
          this._minWeekdaysParse[i] = this.weekdaysMin(
            mom,
            ""
          ).toLocaleLowerCase();
          this._shortWeekdaysParse[i] = this.weekdaysShort(
            mom,
            ""
          ).toLocaleLowerCase();
          this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format2 === "dddd") {
          ii2 = indexOf.call(this._weekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else if (format2 === "ddd") {
          ii2 = indexOf.call(this._shortWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else {
          ii2 = indexOf.call(this._minWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        }
      } else {
        if (format2 === "dddd") {
          ii2 = indexOf.call(this._weekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._minWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else if (format2 === "ddd") {
          ii2 = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._weekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._minWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else {
          ii2 = indexOf.call(this._minWeekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._weekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._shortWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        }
      }
    }
    function localeWeekdaysParse(weekdayName, format2, strict) {
      var i, mom, regex;
      if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format2, strict);
      }
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
      }
      for (i = 0; i < 7; i++) {
        mom = createUTC([2e3, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
          this._fullWeekdaysParse[i] = new RegExp(
            "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
          this._shortWeekdaysParse[i] = new RegExp(
            "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
          this._minWeekdaysParse[i] = new RegExp(
            "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
        }
        if (!this._weekdaysParse[i]) {
          regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
          this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
        }
        if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
          return i;
        }
      }
    }
    function getSetDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, "d");
      } else {
        return day;
      }
    }
    function getSetLocaleDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, "d");
    }
    function getSetISODayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
      } else {
        return this.day() || 7;
      }
    }
    function weekdaysRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysStrictRegex;
        } else {
          return this._weekdaysRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
      }
    }
    function weekdaysShortRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysShortStrictRegex;
        } else {
          return this._weekdaysShortRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysShortRegex")) {
          this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
      }
    }
    function weekdaysMinRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysMinStrictRegex;
        } else {
          return this._weekdaysMinRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysMinRegex")) {
          this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
      }
    }
    function computeWeekdaysParse() {
      function cmpLenRev(a, b2) {
        return b2.length - a.length;
      }
      var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
      for (i = 0; i < 7; i++) {
        mom = createUTC([2e3, 1]).day(i);
        minp = regexEscape(this.weekdaysMin(mom, ""));
        shortp = regexEscape(this.weekdaysShort(mom, ""));
        longp = regexEscape(this.weekdays(mom, ""));
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
      }
      minPieces.sort(cmpLenRev);
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._weekdaysShortRegex = this._weekdaysRegex;
      this._weekdaysMinRegex = this._weekdaysRegex;
      this._weekdaysStrictRegex = new RegExp(
        "^(" + longPieces.join("|") + ")",
        "i"
      );
      this._weekdaysShortStrictRegex = new RegExp(
        "^(" + shortPieces.join("|") + ")",
        "i"
      );
      this._weekdaysMinStrictRegex = new RegExp(
        "^(" + minPieces.join("|") + ")",
        "i"
      );
    }
    function hFormat() {
      return this.hours() % 12 || 12;
    }
    function kFormat() {
      return this.hours() || 24;
    }
    addFormatToken("H", ["HH", 2], 0, "hour");
    addFormatToken("h", ["hh", 2], 0, hFormat);
    addFormatToken("k", ["kk", 2], 0, kFormat);
    addFormatToken("hmm", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken("hmmss", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken("Hmm", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken("Hmmss", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token2, lowercase) {
      addFormatToken(token2, 0, 0, function() {
        return this.localeData().meridiem(
          this.hours(),
          this.minutes(),
          lowercase
        );
      });
    }
    meridiem("a", true);
    meridiem("A", false);
    addUnitAlias("hour", "h");
    addUnitPriority("hour", 13);
    function matchMeridiem(isStrict, locale2) {
      return locale2._meridiemParse;
    }
    addRegexToken("a", matchMeridiem);
    addRegexToken("A", matchMeridiem);
    addRegexToken("H", match1to2);
    addRegexToken("h", match1to2);
    addRegexToken("k", match1to2);
    addRegexToken("HH", match1to2, match2);
    addRegexToken("hh", match1to2, match2);
    addRegexToken("kk", match1to2, match2);
    addRegexToken("hmm", match3to4);
    addRegexToken("hmmss", match5to6);
    addRegexToken("Hmm", match3to4);
    addRegexToken("Hmmss", match5to6);
    addParseToken(["H", "HH"], HOUR);
    addParseToken(["k", "kk"], function(input, array, config2) {
      var kInput = toInt(input);
      array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(["a", "A"], function(input, array, config2) {
      config2._isPm = config2._locale.isPM(input);
      config2._meridiem = input;
    });
    addParseToken(["h", "hh"], function(input, array, config2) {
      array[HOUR] = toInt(input);
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("hmm", function(input, array, config2) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("hmmss", function(input, array, config2) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("Hmm", function(input, array, config2) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken("Hmmss", function(input, array, config2) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
    });
    function localeIsPM(input) {
      return (input + "").toLowerCase().charAt(0) === "p";
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
    function localeMeridiem(hours2, minutes2, isLower) {
      if (hours2 > 11) {
        return isLower ? "pm" : "PM";
      } else {
        return isLower ? "am" : "AM";
      }
    }
    var baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,
      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,
      week: defaultLocaleWeek,
      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,
      meridiemParse: defaultLocaleMeridiemParse
    };
    var locales = {}, localeFamilies = {}, globalLocale;
    function commonPrefix(arr1, arr2) {
      var i, minl = Math.min(arr1.length, arr2.length);
      for (i = 0; i < minl; i += 1) {
        if (arr1[i] !== arr2[i]) {
          return i;
        }
      }
      return minl;
    }
    function normalizeLocale(key) {
      return key ? key.toLowerCase().replace("_", "-") : key;
    }
    function chooseLocale(names) {
      var i = 0, j, next2, locale2, split;
      while (i < names.length) {
        split = normalizeLocale(names[i]).split("-");
        j = split.length;
        next2 = normalizeLocale(names[i + 1]);
        next2 = next2 ? next2.split("-") : null;
        while (j > 0) {
          locale2 = loadLocale(split.slice(0, j).join("-"));
          if (locale2) {
            return locale2;
          }
          if (next2 && next2.length >= j && commonPrefix(split, next2) >= j - 1) {
            break;
          }
          j--;
        }
        i++;
      }
      return globalLocale;
    }
    function isLocaleNameSane(name) {
      return name.match("^[^/\\\\]*$") != null;
    }
    function loadLocale(name) {
      var oldLocale = null, aliasedRequire;
      if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
        try {
          oldLocale = globalLocale._abbr;
          aliasedRequire = require;
          aliasedRequire("./locale/" + name);
          getSetGlobalLocale(oldLocale);
        } catch (e2) {
          locales[name] = null;
        }
      }
      return locales[name];
    }
    function getSetGlobalLocale(key, values2) {
      var data;
      if (key) {
        if (isUndefined(values2)) {
          data = getLocale(key);
        } else {
          data = defineLocale(key, values2);
        }
        if (data) {
          globalLocale = data;
        } else {
          if (typeof console !== "undefined" && console.warn) {
            console.warn(
              "Locale " + key + " not found. Did you forget to load it?"
            );
          }
        }
      }
      return globalLocale._abbr;
    }
    function defineLocale(name, config2) {
      if (config2 !== null) {
        var locale2, parentConfig = baseConfig;
        config2.abbr = name;
        if (locales[name] != null) {
          deprecateSimple(
            "defineLocaleOverride",
            "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
          );
          parentConfig = locales[name]._config;
        } else if (config2.parentLocale != null) {
          if (locales[config2.parentLocale] != null) {
            parentConfig = locales[config2.parentLocale]._config;
          } else {
            locale2 = loadLocale(config2.parentLocale);
            if (locale2 != null) {
              parentConfig = locale2._config;
            } else {
              if (!localeFamilies[config2.parentLocale]) {
                localeFamilies[config2.parentLocale] = [];
              }
              localeFamilies[config2.parentLocale].push({
                name,
                config: config2
              });
              return null;
            }
          }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config2));
        if (localeFamilies[name]) {
          localeFamilies[name].forEach(function(x2) {
            defineLocale(x2.name, x2.config);
          });
        }
        getSetGlobalLocale(name);
        return locales[name];
      } else {
        delete locales[name];
        return null;
      }
    }
    function updateLocale(name, config2) {
      if (config2 != null) {
        var locale2, tmpLocale, parentConfig = baseConfig;
        if (locales[name] != null && locales[name].parentLocale != null) {
          locales[name].set(mergeConfigs(locales[name]._config, config2));
        } else {
          tmpLocale = loadLocale(name);
          if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
          }
          config2 = mergeConfigs(parentConfig, config2);
          if (tmpLocale == null) {
            config2.abbr = name;
          }
          locale2 = new Locale(config2);
          locale2.parentLocale = locales[name];
          locales[name] = locale2;
        }
        getSetGlobalLocale(name);
      } else {
        if (locales[name] != null) {
          if (locales[name].parentLocale != null) {
            locales[name] = locales[name].parentLocale;
            if (name === getSetGlobalLocale()) {
              getSetGlobalLocale(name);
            }
          } else if (locales[name] != null) {
            delete locales[name];
          }
        }
      }
      return locales[name];
    }
    function getLocale(key) {
      var locale2;
      if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
      }
      if (!key) {
        return globalLocale;
      }
      if (!isArray$c(key)) {
        locale2 = loadLocale(key);
        if (locale2) {
          return locale2;
        }
        key = [key];
      }
      return chooseLocale(key);
    }
    function listLocales() {
      return keys$7(locales);
    }
    function checkOverflow(m2) {
      var overflow, a = m2._a;
      if (a && getParsingFlags(m2).overflow === -2) {
        overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
        if (getParsingFlags(m2)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
          overflow = DATE;
        }
        if (getParsingFlags(m2)._overflowWeeks && overflow === -1) {
          overflow = WEEK;
        }
        if (getParsingFlags(m2)._overflowWeekday && overflow === -1) {
          overflow = WEEKDAY;
        }
        getParsingFlags(m2).overflow = overflow;
      }
      return m2;
    }
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
      ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
      ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
      ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
      ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
      ["YYYY-DDD", /\d{4}-\d{3}/],
      ["YYYY-MM", /\d{4}-\d\d/, false],
      ["YYYYYYMMDD", /[+-]\d{10}/],
      ["YYYYMMDD", /\d{8}/],
      ["GGGG[W]WWE", /\d{4}W\d{3}/],
      ["GGGG[W]WW", /\d{4}W\d{2}/, false],
      ["YYYYDDD", /\d{7}/],
      ["YYYYMM", /\d{6}/, false],
      ["YYYY", /\d{4}/, false]
    ], isoTimes = [
      ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
      ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
      ["HH:mm:ss", /\d\d:\d\d:\d\d/],
      ["HH:mm", /\d\d:\d\d/],
      ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
      ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
      ["HHmmss", /\d\d\d\d\d\d/],
      ["HHmm", /\d\d\d\d/],
      ["HH", /\d\d/]
    ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
      UT: 0,
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
    };
    function configFromISO(config2) {
      var i, l2, string = config2._i, match5 = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
      if (match5) {
        getParsingFlags(config2).iso = true;
        for (i = 0, l2 = isoDatesLen; i < l2; i++) {
          if (isoDates[i][1].exec(match5[1])) {
            dateFormat = isoDates[i][0];
            allowTime = isoDates[i][2] !== false;
            break;
          }
        }
        if (dateFormat == null) {
          config2._isValid = false;
          return;
        }
        if (match5[3]) {
          for (i = 0, l2 = isoTimesLen; i < l2; i++) {
            if (isoTimes[i][1].exec(match5[3])) {
              timeFormat = (match5[2] || " ") + isoTimes[i][0];
              break;
            }
          }
          if (timeFormat == null) {
            config2._isValid = false;
            return;
          }
        }
        if (!allowTime && timeFormat != null) {
          config2._isValid = false;
          return;
        }
        if (match5[4]) {
          if (tzRegex.exec(match5[4])) {
            tzFormat = "Z";
          } else {
            config2._isValid = false;
            return;
          }
        }
        config2._f = dateFormat + (timeFormat || "") + (tzFormat || "");
        configFromStringAndFormat(config2);
      } else {
        config2._isValid = false;
      }
    }
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
      var result = [
        untruncateYear(yearStr),
        defaultLocaleMonthsShort.indexOf(monthStr),
        parseInt(dayStr, 10),
        parseInt(hourStr, 10),
        parseInt(minuteStr, 10)
      ];
      if (secondStr) {
        result.push(parseInt(secondStr, 10));
      }
      return result;
    }
    function untruncateYear(yearStr) {
      var year = parseInt(yearStr, 10);
      if (year <= 49) {
        return 2e3 + year;
      } else if (year <= 999) {
        return 1900 + year;
      }
      return year;
    }
    function preprocessRFC2822(s) {
      return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
    }
    function checkWeekday(weekdayStr, parsedInput, config2) {
      if (weekdayStr) {
        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
          parsedInput[0],
          parsedInput[1],
          parsedInput[2]
        ).getDay();
        if (weekdayProvided !== weekdayActual) {
          getParsingFlags(config2).weekdayMismatch = true;
          config2._isValid = false;
          return false;
        }
      }
      return true;
    }
    function calculateOffset(obsOffset, militaryOffset, numOffset) {
      if (obsOffset) {
        return obsOffsets[obsOffset];
      } else if (militaryOffset) {
        return 0;
      } else {
        var hm = parseInt(numOffset, 10), m2 = hm % 100, h2 = (hm - m2) / 100;
        return h2 * 60 + m2;
      }
    }
    function configFromRFC2822(config2) {
      var match5 = rfc2822.exec(preprocessRFC2822(config2._i)), parsedArray;
      if (match5) {
        parsedArray = extractFromRFC2822Strings(
          match5[4],
          match5[3],
          match5[2],
          match5[5],
          match5[6],
          match5[7]
        );
        if (!checkWeekday(match5[1], parsedArray, config2)) {
          return;
        }
        config2._a = parsedArray;
        config2._tzm = calculateOffset(match5[8], match5[9], match5[10]);
        config2._d = createUTCDate.apply(null, config2._a);
        config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
        getParsingFlags(config2).rfc2822 = true;
      } else {
        config2._isValid = false;
      }
    }
    function configFromString(config2) {
      var matched = aspNetJsonRegex.exec(config2._i);
      if (matched !== null) {
        config2._d = /* @__PURE__ */ new Date(+matched[1]);
        return;
      }
      configFromISO(config2);
      if (config2._isValid === false) {
        delete config2._isValid;
      } else {
        return;
      }
      configFromRFC2822(config2);
      if (config2._isValid === false) {
        delete config2._isValid;
      } else {
        return;
      }
      if (config2._strict) {
        config2._isValid = false;
      } else {
        hooks.createFromInputFallback(config2);
      }
    }
    hooks.createFromInputFallback = deprecate(
      "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
      function(config2) {
        config2._d = /* @__PURE__ */ new Date(config2._i + (config2._useUTC ? " UTC" : ""));
      }
    );
    function defaults(a, b2, c2) {
      if (a != null) {
        return a;
      }
      if (b2 != null) {
        return b2;
      }
      return c2;
    }
    function currentDateArray(config2) {
      var nowValue = new Date(hooks.now());
      if (config2._useUTC) {
        return [
          nowValue.getUTCFullYear(),
          nowValue.getUTCMonth(),
          nowValue.getUTCDate()
        ];
      }
      return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }
    function configFromArray(config2) {
      var i, date, input = [], currentDate, expectedWeekday, yearToUse;
      if (config2._d) {
        return;
      }
      currentDate = currentDateArray(config2);
      if (config2._w && config2._a[DATE] == null && config2._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config2);
      }
      if (config2._dayOfYear != null) {
        yearToUse = defaults(config2._a[YEAR], currentDate[YEAR]);
        if (config2._dayOfYear > daysInYear(yearToUse) || config2._dayOfYear === 0) {
          getParsingFlags(config2)._overflowDayOfYear = true;
        }
        date = createUTCDate(yearToUse, 0, config2._dayOfYear);
        config2._a[MONTH] = date.getUTCMonth();
        config2._a[DATE] = date.getUTCDate();
      }
      for (i = 0; i < 3 && config2._a[i] == null; ++i) {
        config2._a[i] = input[i] = currentDate[i];
      }
      for (; i < 7; i++) {
        config2._a[i] = input[i] = config2._a[i] == null ? i === 2 ? 1 : 0 : config2._a[i];
      }
      if (config2._a[HOUR] === 24 && config2._a[MINUTE] === 0 && config2._a[SECOND] === 0 && config2._a[MILLISECOND] === 0) {
        config2._nextDay = true;
        config2._a[HOUR] = 0;
      }
      config2._d = (config2._useUTC ? createUTCDate : createDate).apply(
        null,
        input
      );
      expectedWeekday = config2._useUTC ? config2._d.getUTCDay() : config2._d.getDay();
      if (config2._tzm != null) {
        config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
      }
      if (config2._nextDay) {
        config2._a[HOUR] = 24;
      }
      if (config2._w && typeof config2._w.d !== "undefined" && config2._w.d !== expectedWeekday) {
        getParsingFlags(config2).weekdayMismatch = true;
      }
    }
    function dayOfYearFromWeekInfo(config2) {
      var w2, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
      w2 = config2._w;
      if (w2.GG != null || w2.W != null || w2.E != null) {
        dow = 1;
        doy = 4;
        weekYear = defaults(
          w2.GG,
          config2._a[YEAR],
          weekOfYear(createLocal(), 1, 4).year
        );
        week = defaults(w2.W, 1);
        weekday = defaults(w2.E, 1);
        if (weekday < 1 || weekday > 7) {
          weekdayOverflow = true;
        }
      } else {
        dow = config2._locale._week.dow;
        doy = config2._locale._week.doy;
        curWeek = weekOfYear(createLocal(), dow, doy);
        weekYear = defaults(w2.gg, config2._a[YEAR], curWeek.year);
        week = defaults(w2.w, curWeek.week);
        if (w2.d != null) {
          weekday = w2.d;
          if (weekday < 0 || weekday > 6) {
            weekdayOverflow = true;
          }
        } else if (w2.e != null) {
          weekday = w2.e + dow;
          if (w2.e < 0 || w2.e > 6) {
            weekdayOverflow = true;
          }
        } else {
          weekday = dow;
        }
      }
      if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config2)._overflowWeeks = true;
      } else if (weekdayOverflow != null) {
        getParsingFlags(config2)._overflowWeekday = true;
      } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config2._a[YEAR] = temp.year;
        config2._dayOfYear = temp.dayOfYear;
      }
    }
    hooks.ISO_8601 = function() {
    };
    hooks.RFC_2822 = function() {
    };
    function configFromStringAndFormat(config2) {
      if (config2._f === hooks.ISO_8601) {
        configFromISO(config2);
        return;
      }
      if (config2._f === hooks.RFC_2822) {
        configFromRFC2822(config2);
        return;
      }
      config2._a = [];
      getParsingFlags(config2).empty = true;
      var string = "" + config2._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
      tokens2 = expandFormat(config2._f, config2._locale).match(formattingTokens) || [];
      tokenLen = tokens2.length;
      for (i = 0; i < tokenLen; i++) {
        token2 = tokens2[i];
        parsedInput = (string.match(getParseRegexForToken(token2, config2)) || [])[0];
        if (parsedInput) {
          skipped = string.substr(0, string.indexOf(parsedInput));
          if (skipped.length > 0) {
            getParsingFlags(config2).unusedInput.push(skipped);
          }
          string = string.slice(
            string.indexOf(parsedInput) + parsedInput.length
          );
          totalParsedInputLength += parsedInput.length;
        }
        if (formatTokenFunctions[token2]) {
          if (parsedInput) {
            getParsingFlags(config2).empty = false;
          } else {
            getParsingFlags(config2).unusedTokens.push(token2);
          }
          addTimeToArrayFromToken(token2, parsedInput, config2);
        } else if (config2._strict && !parsedInput) {
          getParsingFlags(config2).unusedTokens.push(token2);
        }
      }
      getParsingFlags(config2).charsLeftOver = stringLength - totalParsedInputLength;
      if (string.length > 0) {
        getParsingFlags(config2).unusedInput.push(string);
      }
      if (config2._a[HOUR] <= 12 && getParsingFlags(config2).bigHour === true && config2._a[HOUR] > 0) {
        getParsingFlags(config2).bigHour = void 0;
      }
      getParsingFlags(config2).parsedDateParts = config2._a.slice(0);
      getParsingFlags(config2).meridiem = config2._meridiem;
      config2._a[HOUR] = meridiemFixWrap(
        config2._locale,
        config2._a[HOUR],
        config2._meridiem
      );
      era = getParsingFlags(config2).era;
      if (era !== null) {
        config2._a[YEAR] = config2._locale.erasConvertYear(era, config2._a[YEAR]);
      }
      configFromArray(config2);
      checkOverflow(config2);
    }
    function meridiemFixWrap(locale2, hour, meridiem2) {
      var isPm;
      if (meridiem2 == null) {
        return hour;
      }
      if (locale2.meridiemHour != null) {
        return locale2.meridiemHour(hour, meridiem2);
      } else if (locale2.isPM != null) {
        isPm = locale2.isPM(meridiem2);
        if (isPm && hour < 12) {
          hour += 12;
        }
        if (!isPm && hour === 12) {
          hour = 0;
        }
        return hour;
      } else {
        return hour;
      }
    }
    function configFromStringAndArray(config2) {
      var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config2._f.length;
      if (configfLen === 0) {
        getParsingFlags(config2).invalidFormat = true;
        config2._d = /* @__PURE__ */ new Date(NaN);
        return;
      }
      for (i = 0; i < configfLen; i++) {
        currentScore = 0;
        validFormatFound = false;
        tempConfig = copyConfig({}, config2);
        if (config2._useUTC != null) {
          tempConfig._useUTC = config2._useUTC;
        }
        tempConfig._f = config2._f[i];
        configFromStringAndFormat(tempConfig);
        if (isValid(tempConfig)) {
          validFormatFound = true;
        }
        currentScore += getParsingFlags(tempConfig).charsLeftOver;
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
        getParsingFlags(tempConfig).score = currentScore;
        if (!bestFormatIsValid) {
          if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
            if (validFormatFound) {
              bestFormatIsValid = true;
            }
          }
        } else {
          if (currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
          }
        }
      }
      extend(config2, bestMoment || tempConfig);
    }
    function configFromObject(config2) {
      if (config2._d) {
        return;
      }
      var i = normalizeObjectUnits(config2._i), dayOrDate = i.day === void 0 ? i.date : i.day;
      config2._a = map(
        [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
        function(obj) {
          return obj && parseInt(obj, 10);
        }
      );
      configFromArray(config2);
    }
    function createFromConfig(config2) {
      var res = new Moment(checkOverflow(prepareConfig(config2)));
      if (res._nextDay) {
        res.add(1, "d");
        res._nextDay = void 0;
      }
      return res;
    }
    function prepareConfig(config2) {
      var input = config2._i, format2 = config2._f;
      config2._locale = config2._locale || getLocale(config2._l);
      if (input === null || format2 === void 0 && input === "") {
        return createInvalid({ nullInput: true });
      }
      if (typeof input === "string") {
        config2._i = input = config2._locale.preparse(input);
      }
      if (isMoment(input)) {
        return new Moment(checkOverflow(input));
      } else if (isDate(input)) {
        config2._d = input;
      } else if (isArray$c(format2)) {
        configFromStringAndArray(config2);
      } else if (format2) {
        configFromStringAndFormat(config2);
      } else {
        configFromInput(config2);
      }
      if (!isValid(config2)) {
        config2._d = null;
      }
      return config2;
    }
    function configFromInput(config2) {
      var input = config2._i;
      if (isUndefined(input)) {
        config2._d = new Date(hooks.now());
      } else if (isDate(input)) {
        config2._d = new Date(input.valueOf());
      } else if (typeof input === "string") {
        configFromString(config2);
      } else if (isArray$c(input)) {
        config2._a = map(input.slice(0), function(obj) {
          return parseInt(obj, 10);
        });
        configFromArray(config2);
      } else if (isObject$k(input)) {
        configFromObject(config2);
      } else if (isNumber(input)) {
        config2._d = new Date(input);
      } else {
        hooks.createFromInputFallback(config2);
      }
    }
    function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
      var c2 = {};
      if (format2 === true || format2 === false) {
        strict = format2;
        format2 = void 0;
      }
      if (locale2 === true || locale2 === false) {
        strict = locale2;
        locale2 = void 0;
      }
      if (isObject$k(input) && isObjectEmpty(input) || isArray$c(input) && input.length === 0) {
        input = void 0;
      }
      c2._isAMomentObject = true;
      c2._useUTC = c2._isUTC = isUTC;
      c2._l = locale2;
      c2._i = input;
      c2._f = format2;
      c2._strict = strict;
      return createFromConfig(c2);
    }
    function createLocal(input, format2, locale2, strict) {
      return createLocalOrUTC(input, format2, locale2, strict, false);
    }
    var prototypeMin = deprecate(
      "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }
    ), prototypeMax = deprecate(
      "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      }
    );
    function pickBy$2(fn, moments) {
      var res, i;
      if (moments.length === 1 && isArray$c(moments[0])) {
        moments = moments[0];
      }
      if (!moments.length) {
        return createLocal();
      }
      res = moments[0];
      for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
          res = moments[i];
        }
      }
      return res;
    }
    function min() {
      var args = [].slice.call(arguments, 0);
      return pickBy$2("isBefore", args);
    }
    function max() {
      var args = [].slice.call(arguments, 0);
      return pickBy$2("isAfter", args);
    }
    var now$2 = function() {
      return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
    };
    var ordering = [
      "year",
      "quarter",
      "month",
      "week",
      "day",
      "hour",
      "minute",
      "second",
      "millisecond"
    ];
    function isDurationValid(m2) {
      var key, unitHasDecimal = false, i, orderLen = ordering.length;
      for (key in m2) {
        if (hasOwnProp(m2, key) && !(indexOf.call(ordering, key) !== -1 && (m2[key] == null || !isNaN(m2[key])))) {
          return false;
        }
      }
      for (i = 0; i < orderLen; ++i) {
        if (m2[ordering[i]]) {
          if (unitHasDecimal) {
            return false;
          }
          if (parseFloat(m2[ordering[i]]) !== toInt(m2[ordering[i]])) {
            unitHasDecimal = true;
          }
        }
      }
      return true;
    }
    function isValid$1() {
      return this._isValid;
    }
    function createInvalid$1() {
      return createDuration(NaN);
    }
    function Duration(duration2) {
      var normalizedInput = normalizeObjectUnits(duration2), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
      this._isValid = isDurationValid(normalizedInput);
      this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
      minutes2 * 6e4 + // 1000 * 60
      hours2 * 1e3 * 60 * 60;
      this._days = +days2 + weeks2 * 7;
      this._months = +months2 + quarters * 3 + years2 * 12;
      this._data = {};
      this._locale = getLocale();
      this._bubble();
    }
    function isDuration(obj) {
      return obj instanceof Duration;
    }
    function absRound(number) {
      if (number < 0) {
        return Math.round(-1 * number) * -1;
      } else {
        return Math.round(number);
      }
    }
    function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
      for (i = 0; i < len; i++) {
        if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
          diffs++;
        }
      }
      return diffs + lengthDiff;
    }
    function offset(token2, separator) {
      addFormatToken(token2, 0, 0, function() {
        var offset2 = this.utcOffset(), sign2 = "+";
        if (offset2 < 0) {
          offset2 = -offset2;
          sign2 = "-";
        }
        return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
      });
    }
    offset("Z", ":");
    offset("ZZ", "");
    addRegexToken("Z", matchShortOffset);
    addRegexToken("ZZ", matchShortOffset);
    addParseToken(["Z", "ZZ"], function(input, array, config2) {
      config2._useUTC = true;
      config2._tzm = offsetFromString(matchShortOffset, input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
      var matches = (string || "").match(matcher), chunk, parts, minutes2;
      if (matches === null) {
        return null;
      }
      chunk = matches[matches.length - 1] || [];
      parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
      minutes2 = +(parts[1] * 60) + toInt(parts[2]);
      return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
    }
    function cloneWithOffset(input, model) {
      var res, diff2;
      if (model._isUTC) {
        res = model.clone();
        diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        res._d.setTime(res._d.valueOf() + diff2);
        hooks.updateOffset(res, false);
        return res;
      } else {
        return createLocal(input).local();
      }
    }
    function getDateOffset(m2) {
      return -Math.round(m2._d.getTimezoneOffset());
    }
    hooks.updateOffset = function() {
    };
    function getSetOffset(input, keepLocalTime, keepMinutes) {
      var offset2 = this._offset || 0, localAdjust;
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        if (typeof input === "string") {
          input = offsetFromString(matchShortOffset, input);
          if (input === null) {
            return this;
          }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
          input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.add(localAdjust, "m");
        }
        if (offset2 !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            addSubtract(
              this,
              createDuration(input - offset2, "m"),
              1,
              false
            );
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            hooks.updateOffset(this, true);
            this._changeInProgress = null;
          }
        }
        return this;
      } else {
        return this._isUTC ? offset2 : getDateOffset(this);
      }
    }
    function getSetZone(input, keepLocalTime) {
      if (input != null) {
        if (typeof input !== "string") {
          input = -input;
        }
        this.utcOffset(input, keepLocalTime);
        return this;
      } else {
        return -this.utcOffset();
      }
    }
    function setOffsetToUTC(keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
      if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
          this.subtract(getDateOffset(this), "m");
        }
      }
      return this;
    }
    function setOffsetToParsedOffset() {
      if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
      } else if (typeof this._i === "string") {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
          this.utcOffset(tZone);
        } else {
          this.utcOffset(0, true);
        }
      }
      return this;
    }
    function hasAlignedHourOffset(input) {
      if (!this.isValid()) {
        return false;
      }
      input = input ? createLocal(input).utcOffset() : 0;
      return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
      return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
      if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
      }
      var c2 = {}, other;
      copyConfig(c2, this);
      c2 = prepareConfig(c2);
      if (c2._a) {
        other = c2._isUTC ? createUTC(c2._a) : createLocal(c2._a);
        this._isDSTShifted = this.isValid() && compareArrays(c2._a, other.toArray()) > 0;
      } else {
        this._isDSTShifted = false;
      }
      return this._isDSTShifted;
    }
    function isLocal() {
      return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
      return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
      return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
      var duration2 = input, match5 = null, sign2, ret, diffRes;
      if (isDuration(input)) {
        duration2 = {
          ms: input._milliseconds,
          d: input._days,
          M: input._months
        };
      } else if (isNumber(input) || !isNaN(+input)) {
        duration2 = {};
        if (key) {
          duration2[key] = +input;
        } else {
          duration2.milliseconds = +input;
        }
      } else if (match5 = aspNetRegex.exec(input)) {
        sign2 = match5[1] === "-" ? -1 : 1;
        duration2 = {
          y: 0,
          d: toInt(match5[DATE]) * sign2,
          h: toInt(match5[HOUR]) * sign2,
          m: toInt(match5[MINUTE]) * sign2,
          s: toInt(match5[SECOND]) * sign2,
          ms: toInt(absRound(match5[MILLISECOND] * 1e3)) * sign2
          // the millisecond decimal point is included in the match
        };
      } else if (match5 = isoRegex.exec(input)) {
        sign2 = match5[1] === "-" ? -1 : 1;
        duration2 = {
          y: parseIso(match5[2], sign2),
          M: parseIso(match5[3], sign2),
          w: parseIso(match5[4], sign2),
          d: parseIso(match5[5], sign2),
          h: parseIso(match5[6], sign2),
          m: parseIso(match5[7], sign2),
          s: parseIso(match5[8], sign2)
        };
      } else if (duration2 == null) {
        duration2 = {};
      } else if (typeof duration2 === "object" && ("from" in duration2 || "to" in duration2)) {
        diffRes = momentsDifference(
          createLocal(duration2.from),
          createLocal(duration2.to)
        );
        duration2 = {};
        duration2.ms = diffRes.milliseconds;
        duration2.M = diffRes.months;
      }
      ret = new Duration(duration2);
      if (isDuration(input) && hasOwnProp(input, "_locale")) {
        ret._locale = input._locale;
      }
      if (isDuration(input) && hasOwnProp(input, "_isValid")) {
        ret._isValid = input._isValid;
      }
      return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign2) {
      var res = inp && parseFloat(inp.replace(",", "."));
      return (isNaN(res) ? 0 : res) * sign2;
    }
    function positiveMomentsDifference(base, other) {
      var res = {};
      res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, "M").isAfter(other)) {
        --res.months;
      }
      res.milliseconds = +other - +base.clone().add(res.months, "M");
      return res;
    }
    function momentsDifference(base, other) {
      var res;
      if (!(base.isValid() && other.isValid())) {
        return { milliseconds: 0, months: 0 };
      }
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
      } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
      }
      return res;
    }
    function createAdder(direction, name) {
      return function(val, period) {
        var dur, tmp;
        if (period !== null && !isNaN(+period)) {
          deprecateSimple(
            name,
            "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
          );
          tmp = val;
          val = period;
          period = tmp;
        }
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
      };
    }
    function addSubtract(mom, duration2, isAdding, updateOffset) {
      var milliseconds2 = duration2._milliseconds, days2 = absRound(duration2._days), months2 = absRound(duration2._months);
      if (!mom.isValid()) {
        return;
      }
      updateOffset = updateOffset == null ? true : updateOffset;
      if (months2) {
        setMonth(mom, get$2(mom, "Month") + months2 * isAdding);
      }
      if (days2) {
        set$1(mom, "Date", get$2(mom, "Date") + days2 * isAdding);
      }
      if (milliseconds2) {
        mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
      }
      if (updateOffset) {
        hooks.updateOffset(mom, days2 || months2);
      }
    }
    var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
    function isString(input) {
      return typeof input === "string" || input instanceof String;
    }
    function isMomentInput(input) {
      return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
    }
    function isMomentInputObject(input) {
      var objectTest = isObject$k(input) && !isObjectEmpty(input), propertyTest = false, properties2 = [
        "years",
        "year",
        "y",
        "months",
        "month",
        "M",
        "days",
        "day",
        "d",
        "dates",
        "date",
        "D",
        "hours",
        "hour",
        "h",
        "minutes",
        "minute",
        "m",
        "seconds",
        "second",
        "s",
        "milliseconds",
        "millisecond",
        "ms"
      ], i, property2, propertyLen = properties2.length;
      for (i = 0; i < propertyLen; i += 1) {
        property2 = properties2[i];
        propertyTest = propertyTest || hasOwnProp(input, property2);
      }
      return objectTest && propertyTest;
    }
    function isNumberOrStringArray(input) {
      var arrayTest = isArray$c(input), dataTypeTest = false;
      if (arrayTest) {
        dataTypeTest = input.filter(function(item) {
          return !isNumber(item) && isString(input);
        }).length === 0;
      }
      return arrayTest && dataTypeTest;
    }
    function isCalendarSpec(input) {
      var objectTest = isObject$k(input) && !isObjectEmpty(input), propertyTest = false, properties2 = [
        "sameDay",
        "nextDay",
        "lastDay",
        "nextWeek",
        "lastWeek",
        "sameElse"
      ], i, property2;
      for (i = 0; i < properties2.length; i += 1) {
        property2 = properties2[i];
        propertyTest = propertyTest || hasOwnProp(input, property2);
      }
      return objectTest && propertyTest;
    }
    function getCalendarFormat(myMoment, now2) {
      var diff2 = myMoment.diff(now2, "days", true);
      return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
    }
    function calendar$1(time, formats) {
      if (arguments.length === 1) {
        if (!arguments[0]) {
          time = void 0;
          formats = void 0;
        } else if (isMomentInput(arguments[0])) {
          time = arguments[0];
          formats = void 0;
        } else if (isCalendarSpec(arguments[0])) {
          formats = arguments[0];
          time = void 0;
        }
      }
      var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction$4(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
      return this.format(
        output || this.localeData().calendar(format2, this, createLocal(now2))
      );
    }
    function clone$5() {
      return new Moment(this);
    }
    function isAfter(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() > localInput.valueOf();
      } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
      }
    }
    function isBefore(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() < localInput.valueOf();
      } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
      }
    }
    function isBetween(from2, to2, units, inclusivity) {
      var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
      if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
        return false;
      }
      inclusivity = inclusivity || "()";
      return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input), inputMs;
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() === localInput.valueOf();
      } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
      }
    }
    function isSameOrAfter(input, units) {
      return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
      return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
      var that, zoneDelta, output;
      if (!this.isValid()) {
        return NaN;
      }
      that = cloneWithOffset(input, this);
      if (!that.isValid()) {
        return NaN;
      }
      zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
      units = normalizeUnits(units);
      switch (units) {
        case "year":
          output = monthDiff(this, that) / 12;
          break;
        case "month":
          output = monthDiff(this, that);
          break;
        case "quarter":
          output = monthDiff(this, that) / 3;
          break;
        case "second":
          output = (this - that) / 1e3;
          break;
        case "minute":
          output = (this - that) / 6e4;
          break;
        case "hour":
          output = (this - that) / 36e5;
          break;
        case "day":
          output = (this - that - zoneDelta) / 864e5;
          break;
        case "week":
          output = (this - that - zoneDelta) / 6048e5;
          break;
        default:
          output = this - that;
      }
      return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b2) {
      if (a.date() < b2.date()) {
        return -monthDiff(b2, a);
      }
      var wholeMonthDiff = (b2.year() - a.year()) * 12 + (b2.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
      if (b2 - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
        adjust = (b2 - anchor) / (anchor - anchor2);
      } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
        adjust = (b2 - anchor) / (anchor2 - anchor);
      }
      return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
    hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
    function toString$3() {
      return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
    }
    function toISOString(keepOffset) {
      if (!this.isValid()) {
        return null;
      }
      var utc = keepOffset !== true, m2 = utc ? this.clone().utc() : this;
      if (m2.year() < 0 || m2.year() > 9999) {
        return formatMoment(
          m2,
          utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
        );
      }
      if (isFunction$4(Date.prototype.toISOString)) {
        if (utc) {
          return this.toDate().toISOString();
        } else {
          return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m2, "Z"));
        }
      }
      return formatMoment(
        m2,
        utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
      );
    }
    function inspect() {
      if (!this.isValid()) {
        return "moment.invalid(/* " + this._i + " */)";
      }
      var func = "moment", zone = "", prefix2, year, datetime, suffix;
      if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
        zone = "Z";
      }
      prefix2 = "[" + func + '("]';
      year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
      datetime = "-MM-DD[T]HH:mm:ss.SSS";
      suffix = zone + '[")]';
      return this.format(prefix2 + year + datetime + suffix);
    }
    function format(inputString) {
      if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
      }
      var output = formatMoment(this, inputString);
      return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
        return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function fromNow(withoutSuffix) {
      return this.from(createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
        return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function toNow(withoutSuffix) {
      return this.to(createLocal(), withoutSuffix);
    }
    function locale(key) {
      var newLocaleData;
      if (key === void 0) {
        return this._locale._abbr;
      } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData;
        }
        return this;
      }
    }
    var lang = deprecate(
      "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
      function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      }
    );
    function localeData() {
      return this._locale;
    }
    var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
    function mod$1(dividend, divisor) {
      return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y2, m2, d2) {
      if (y2 < 100 && y2 >= 0) {
        return new Date(y2 + 400, m2, d2) - MS_PER_400_YEARS;
      } else {
        return new Date(y2, m2, d2).valueOf();
      }
    }
    function utcStartOfDate(y2, m2, d2) {
      if (y2 < 100 && y2 >= 0) {
        return Date.UTC(y2 + 400, m2, d2) - MS_PER_400_YEARS;
      } else {
        return Date.UTC(y2, m2, d2);
      }
    }
    function startOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === void 0 || units === "millisecond" || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case "year":
          time = startOfDate(this.year(), 0, 1);
          break;
        case "quarter":
          time = startOfDate(
            this.year(),
            this.month() - this.month() % 3,
            1
          );
          break;
        case "month":
          time = startOfDate(this.year(), this.month(), 1);
          break;
        case "week":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - this.weekday()
          );
          break;
        case "isoWeek":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - (this.isoWeekday() - 1)
          );
          break;
        case "day":
        case "date":
          time = startOfDate(this.year(), this.month(), this.date());
          break;
        case "hour":
          time = this._d.valueOf();
          time -= mod$1(
            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
            MS_PER_HOUR
          );
          break;
        case "minute":
          time = this._d.valueOf();
          time -= mod$1(time, MS_PER_MINUTE);
          break;
        case "second":
          time = this._d.valueOf();
          time -= mod$1(time, MS_PER_SECOND);
          break;
      }
      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
    }
    function endOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === void 0 || units === "millisecond" || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case "year":
          time = startOfDate(this.year() + 1, 0, 1) - 1;
          break;
        case "quarter":
          time = startOfDate(
            this.year(),
            this.month() - this.month() % 3 + 3,
            1
          ) - 1;
          break;
        case "month":
          time = startOfDate(this.year(), this.month() + 1, 1) - 1;
          break;
        case "week":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - this.weekday() + 7
          ) - 1;
          break;
        case "isoWeek":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - (this.isoWeekday() - 1) + 7
          ) - 1;
          break;
        case "day":
        case "date":
          time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
          break;
        case "hour":
          time = this._d.valueOf();
          time += MS_PER_HOUR - mod$1(
            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
            MS_PER_HOUR
          ) - 1;
          break;
        case "minute":
          time = this._d.valueOf();
          time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
          break;
        case "second":
          time = this._d.valueOf();
          time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
          break;
      }
      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
    }
    function valueOf() {
      return this._d.valueOf() - (this._offset || 0) * 6e4;
    }
    function unix() {
      return Math.floor(this.valueOf() / 1e3);
    }
    function toDate() {
      return new Date(this.valueOf());
    }
    function toArray() {
      var m2 = this;
      return [
        m2.year(),
        m2.month(),
        m2.date(),
        m2.hour(),
        m2.minute(),
        m2.second(),
        m2.millisecond()
      ];
    }
    function toObject() {
      var m2 = this;
      return {
        years: m2.year(),
        months: m2.month(),
        date: m2.date(),
        hours: m2.hours(),
        minutes: m2.minutes(),
        seconds: m2.seconds(),
        milliseconds: m2.milliseconds()
      };
    }
    function toJSON() {
      return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
      return isValid(this);
    }
    function parsingFlags() {
      return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
      return getParsingFlags(this).overflow;
    }
    function creationData() {
      return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
      };
    }
    addFormatToken("N", 0, 0, "eraAbbr");
    addFormatToken("NN", 0, 0, "eraAbbr");
    addFormatToken("NNN", 0, 0, "eraAbbr");
    addFormatToken("NNNN", 0, 0, "eraName");
    addFormatToken("NNNNN", 0, 0, "eraNarrow");
    addFormatToken("y", ["y", 1], "yo", "eraYear");
    addFormatToken("y", ["yy", 2], 0, "eraYear");
    addFormatToken("y", ["yyy", 3], 0, "eraYear");
    addFormatToken("y", ["yyyy", 4], 0, "eraYear");
    addRegexToken("N", matchEraAbbr);
    addRegexToken("NN", matchEraAbbr);
    addRegexToken("NNN", matchEraAbbr);
    addRegexToken("NNNN", matchEraName);
    addRegexToken("NNNNN", matchEraNarrow);
    addParseToken(
      ["N", "NN", "NNN", "NNNN", "NNNNN"],
      function(input, array, config2, token2) {
        var era = config2._locale.erasParse(input, token2, config2._strict);
        if (era) {
          getParsingFlags(config2).era = era;
        } else {
          getParsingFlags(config2).invalidEra = input;
        }
      }
    );
    addRegexToken("y", matchUnsigned);
    addRegexToken("yy", matchUnsigned);
    addRegexToken("yyy", matchUnsigned);
    addRegexToken("yyyy", matchUnsigned);
    addRegexToken("yo", matchEraYearOrdinal);
    addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
    addParseToken(["yo"], function(input, array, config2, token2) {
      var match5;
      if (config2._locale._eraYearOrdinalRegex) {
        match5 = input.match(config2._locale._eraYearOrdinalRegex);
      }
      if (config2._locale.eraYearOrdinalParse) {
        array[YEAR] = config2._locale.eraYearOrdinalParse(input, match5);
      } else {
        array[YEAR] = parseInt(input, 10);
      }
    });
    function localeEras(m2, format2) {
      var i, l2, date, eras = this._eras || getLocale("en")._eras;
      for (i = 0, l2 = eras.length; i < l2; ++i) {
        switch (typeof eras[i].since) {
          case "string":
            date = hooks(eras[i].since).startOf("day");
            eras[i].since = date.valueOf();
            break;
        }
        switch (typeof eras[i].until) {
          case "undefined":
            eras[i].until = Infinity;
            break;
          case "string":
            date = hooks(eras[i].until).startOf("day").valueOf();
            eras[i].until = date.valueOf();
            break;
        }
      }
      return eras;
    }
    function localeErasParse(eraName, format2, strict) {
      var i, l2, eras = this.eras(), name, abbr, narrow;
      eraName = eraName.toUpperCase();
      for (i = 0, l2 = eras.length; i < l2; ++i) {
        name = eras[i].name.toUpperCase();
        abbr = eras[i].abbr.toUpperCase();
        narrow = eras[i].narrow.toUpperCase();
        if (strict) {
          switch (format2) {
            case "N":
            case "NN":
            case "NNN":
              if (abbr === eraName) {
                return eras[i];
              }
              break;
            case "NNNN":
              if (name === eraName) {
                return eras[i];
              }
              break;
            case "NNNNN":
              if (narrow === eraName) {
                return eras[i];
              }
              break;
          }
        } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
          return eras[i];
        }
      }
    }
    function localeErasConvertYear(era, year) {
      var dir = era.since <= era.until ? 1 : -1;
      if (year === void 0) {
        return hooks(era.since).year();
      } else {
        return hooks(era.since).year() + (year - era.offset) * dir;
      }
    }
    function getEraName() {
      var i, l2, val, eras = this.localeData().eras();
      for (i = 0, l2 = eras.length; i < l2; ++i) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].name;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].name;
        }
      }
      return "";
    }
    function getEraNarrow() {
      var i, l2, val, eras = this.localeData().eras();
      for (i = 0, l2 = eras.length; i < l2; ++i) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].narrow;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].narrow;
        }
      }
      return "";
    }
    function getEraAbbr() {
      var i, l2, val, eras = this.localeData().eras();
      for (i = 0, l2 = eras.length; i < l2; ++i) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].abbr;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].abbr;
        }
      }
      return "";
    }
    function getEraYear() {
      var i, l2, dir, val, eras = this.localeData().eras();
      for (i = 0, l2 = eras.length; i < l2; ++i) {
        dir = eras[i].since <= eras[i].until ? 1 : -1;
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
          return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
        }
      }
      return this.year();
    }
    function erasNameRegex(isStrict) {
      if (!hasOwnProp(this, "_erasNameRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNameRegex : this._erasRegex;
    }
    function erasAbbrRegex(isStrict) {
      if (!hasOwnProp(this, "_erasAbbrRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }
    function erasNarrowRegex(isStrict) {
      if (!hasOwnProp(this, "_erasNarrowRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }
    function matchEraAbbr(isStrict, locale2) {
      return locale2.erasAbbrRegex(isStrict);
    }
    function matchEraName(isStrict, locale2) {
      return locale2.erasNameRegex(isStrict);
    }
    function matchEraNarrow(isStrict, locale2) {
      return locale2.erasNarrowRegex(isStrict);
    }
    function matchEraYearOrdinal(isStrict, locale2) {
      return locale2._eraYearOrdinalRegex || matchUnsigned;
    }
    function computeErasParse() {
      var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l2, eras = this.eras();
      for (i = 0, l2 = eras.length; i < l2; ++i) {
        namePieces.push(regexEscape(eras[i].name));
        abbrPieces.push(regexEscape(eras[i].abbr));
        narrowPieces.push(regexEscape(eras[i].narrow));
        mixedPieces.push(regexEscape(eras[i].name));
        mixedPieces.push(regexEscape(eras[i].abbr));
        mixedPieces.push(regexEscape(eras[i].narrow));
      }
      this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
      this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
      this._erasNarrowRegex = new RegExp(
        "^(" + narrowPieces.join("|") + ")",
        "i"
      );
    }
    addFormatToken(0, ["gg", 2], 0, function() {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ["GG", 2], 0, function() {
      return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token2, getter) {
      addFormatToken(0, [token2, token2.length], 0, getter);
    }
    addWeekYearFormatToken("gggg", "weekYear");
    addWeekYearFormatToken("ggggg", "weekYear");
    addWeekYearFormatToken("GGGG", "isoWeekYear");
    addWeekYearFormatToken("GGGGG", "isoWeekYear");
    addUnitAlias("weekYear", "gg");
    addUnitAlias("isoWeekYear", "GG");
    addUnitPriority("weekYear", 1);
    addUnitPriority("isoWeekYear", 1);
    addRegexToken("G", matchSigned);
    addRegexToken("g", matchSigned);
    addRegexToken("GG", match1to2, match2);
    addRegexToken("gg", match1to2, match2);
    addRegexToken("GGGG", match1to4, match4);
    addRegexToken("gggg", match1to4, match4);
    addRegexToken("GGGGG", match1to6, match6);
    addRegexToken("ggggg", match1to6, match6);
    addWeekParseToken(
      ["gggg", "ggggg", "GGGG", "GGGGG"],
      function(input, week, config2, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      }
    );
    addWeekParseToken(["gg", "GG"], function(input, week, config2, token2) {
      week[token2] = hooks.parseTwoDigitYear(input);
    });
    function getSetWeekYear(input) {
      return getSetWeekYearHelper.call(
        this,
        input,
        this.week(),
        this.weekday(),
        this.localeData()._week.dow,
        this.localeData()._week.doy
      );
    }
    function getSetISOWeekYear(input) {
      return getSetWeekYearHelper.call(
        this,
        input,
        this.isoWeek(),
        this.isoWeekday(),
        1,
        4
      );
    }
    function getISOWeeksInYear() {
      return weeksInYear(this.year(), 1, 4);
    }
    function getISOWeeksInISOWeekYear() {
      return weeksInYear(this.isoWeekYear(), 1, 4);
    }
    function getWeeksInYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getWeeksInWeekYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
      var weeksTarget;
      if (input == null) {
        return weekOfYear(this, dow, doy).year;
      } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
          week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
      }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
      var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
      this.year(date.getUTCFullYear());
      this.month(date.getUTCMonth());
      this.date(date.getUTCDate());
      return this;
    }
    addFormatToken("Q", 0, "Qo", "quarter");
    addUnitAlias("quarter", "Q");
    addUnitPriority("quarter", 7);
    addRegexToken("Q", match1);
    addParseToken("Q", function(input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken("D", ["DD", 2], "Do", "date");
    addUnitAlias("date", "D");
    addUnitPriority("date", 9);
    addRegexToken("D", match1to2);
    addRegexToken("DD", match1to2, match2);
    addRegexToken("Do", function(isStrict, locale2) {
      return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
    });
    addParseToken(["D", "DD"], DATE);
    addParseToken("Do", function(input, array) {
      array[DATE] = toInt(input.match(match1to2)[0]);
    });
    var getSetDayOfMonth = makeGetSet("Date", true);
    addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
    addUnitAlias("dayOfYear", "DDD");
    addUnitPriority("dayOfYear", 4);
    addRegexToken("DDD", match1to3);
    addRegexToken("DDDD", match3);
    addParseToken(["DDD", "DDDD"], function(input, array, config2) {
      config2._dayOfYear = toInt(input);
    });
    function getSetDayOfYear(input) {
      var dayOfYear = Math.round(
        (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
      ) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
    }
    addFormatToken("m", ["mm", 2], 0, "minute");
    addUnitAlias("minute", "m");
    addUnitPriority("minute", 14);
    addRegexToken("m", match1to2);
    addRegexToken("mm", match1to2, match2);
    addParseToken(["m", "mm"], MINUTE);
    var getSetMinute = makeGetSet("Minutes", false);
    addFormatToken("s", ["ss", 2], 0, "second");
    addUnitAlias("second", "s");
    addUnitPriority("second", 15);
    addRegexToken("s", match1to2);
    addRegexToken("ss", match1to2, match2);
    addParseToken(["s", "ss"], SECOND);
    var getSetSecond = makeGetSet("Seconds", false);
    addFormatToken("S", 0, 0, function() {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ["SS", 2], 0, function() {
      return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, ["SSS", 3], 0, "millisecond");
    addFormatToken(0, ["SSSS", 4], 0, function() {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ["SSSSS", 5], 0, function() {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ["SSSSSS", 6], 0, function() {
      return this.millisecond() * 1e3;
    });
    addFormatToken(0, ["SSSSSSS", 7], 0, function() {
      return this.millisecond() * 1e4;
    });
    addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
      return this.millisecond() * 1e5;
    });
    addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
      return this.millisecond() * 1e6;
    });
    addUnitAlias("millisecond", "ms");
    addUnitPriority("millisecond", 16);
    addRegexToken("S", match1to3, match1);
    addRegexToken("SS", match1to3, match2);
    addRegexToken("SSS", match1to3, match3);
    var token, getSetMillisecond;
    for (token = "SSSS"; token.length <= 9; token += "S") {
      addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array) {
      array[MILLISECOND] = toInt(("0." + input) * 1e3);
    }
    for (token = "S"; token.length <= 9; token += "S") {
      addParseToken(token, parseMs);
    }
    getSetMillisecond = makeGetSet("Milliseconds", false);
    addFormatToken("z", 0, 0, "zoneAbbr");
    addFormatToken("zz", 0, 0, "zoneName");
    function getZoneAbbr() {
      return this._isUTC ? "UTC" : "";
    }
    function getZoneName() {
      return this._isUTC ? "Coordinated Universal Time" : "";
    }
    var proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone$5;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== "undefined" && Symbol.for != null) {
      proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return "Moment<" + this.format() + ">";
      };
    }
    proto.toJSON = toJSON;
    proto.toString = toString$3;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
      "dates accessor is deprecated. Use date instead.",
      getSetDayOfMonth
    );
    proto.months = deprecate(
      "months accessor is deprecated. Use month instead",
      getSetMonth
    );
    proto.years = deprecate(
      "years accessor is deprecated. Use year instead",
      getSetYear
    );
    proto.zone = deprecate(
      "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
      getSetZone
    );
    proto.isDSTShifted = deprecate(
      "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
      isDaylightSavingTimeShifted
    );
    function createUnix(input) {
      return createLocal(input * 1e3);
    }
    function createInZone() {
      return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
      return string;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1$1(format2, index, field, setter) {
      var locale2 = getLocale(), utc = createUTC().set(setter, index);
      return locale2[field](utc, format2);
    }
    function listMonthsImpl(format2, index, field) {
      if (isNumber(format2)) {
        index = format2;
        format2 = void 0;
      }
      format2 = format2 || "";
      if (index != null) {
        return get$1$1(format2, index, field, "month");
      }
      var i, out = [];
      for (i = 0; i < 12; i++) {
        out[i] = get$1$1(format2, i, field, "month");
      }
      return out;
    }
    function listWeekdaysImpl(localeSorted, format2, index, field) {
      if (typeof localeSorted === "boolean") {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
      } else {
        format2 = localeSorted;
        index = format2;
        localeSorted = false;
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
      }
      var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
      if (index != null) {
        return get$1$1(format2, (index + shift) % 7, field, "day");
      }
      for (i = 0; i < 7; i++) {
        out[i] = get$1$1(format2, (i + shift) % 7, field, "day");
      }
      return out;
    }
    function listMonths(format2, index) {
      return listMonthsImpl(format2, index, "months");
    }
    function listMonthsShort(format2, index) {
      return listMonthsImpl(format2, index, "monthsShort");
    }
    function listWeekdays(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
    }
    function listWeekdaysShort(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
    }
    function listWeekdaysMin(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
    }
    getSetGlobalLocale("en", {
      eras: [
        {
          since: "0001-01-01",
          until: Infinity,
          offset: 1,
          name: "Anno Domini",
          narrow: "AD",
          abbr: "AD"
        },
        {
          since: "0000-12-31",
          until: -Infinity,
          offset: 1,
          name: "Before Christ",
          narrow: "BC",
          abbr: "BC"
        }
      ],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function(number) {
        var b2 = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b2 === 1 ? "st" : b2 === 2 ? "nd" : b2 === 3 ? "rd" : "th";
        return number + output;
      }
    });
    hooks.lang = deprecate(
      "moment.lang is deprecated. Use moment.locale instead.",
      getSetGlobalLocale
    );
    hooks.langData = deprecate(
      "moment.langData is deprecated. Use moment.localeData instead.",
      getLocale
    );
    var mathAbs = Math.abs;
    function abs() {
      var data = this._data;
      this._milliseconds = mathAbs(this._milliseconds);
      this._days = mathAbs(this._days);
      this._months = mathAbs(this._months);
      data.milliseconds = mathAbs(data.milliseconds);
      data.seconds = mathAbs(data.seconds);
      data.minutes = mathAbs(data.minutes);
      data.hours = mathAbs(data.hours);
      data.months = mathAbs(data.months);
      data.years = mathAbs(data.years);
      return this;
    }
    function addSubtract$1(duration2, input, value2, direction) {
      var other = createDuration(input, value2);
      duration2._milliseconds += direction * other._milliseconds;
      duration2._days += direction * other._days;
      duration2._months += direction * other._months;
      return duration2._bubble();
    }
    function add$1(input, value2) {
      return addSubtract$1(this, input, value2, 1);
    }
    function subtract$1(input, value2) {
      return addSubtract$1(this, input, value2, -1);
    }
    function absCeil(number) {
      if (number < 0) {
        return Math.floor(number);
      } else {
        return Math.ceil(number);
      }
    }
    function bubble() {
      var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
      if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
        milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
        days2 = 0;
        months2 = 0;
      }
      data.milliseconds = milliseconds2 % 1e3;
      seconds2 = absFloor(milliseconds2 / 1e3);
      data.seconds = seconds2 % 60;
      minutes2 = absFloor(seconds2 / 60);
      data.minutes = minutes2 % 60;
      hours2 = absFloor(minutes2 / 60);
      data.hours = hours2 % 24;
      days2 += absFloor(hours2 / 24);
      monthsFromDays = absFloor(daysToMonths(days2));
      months2 += monthsFromDays;
      days2 -= absCeil(monthsToDays(monthsFromDays));
      years2 = absFloor(months2 / 12);
      months2 %= 12;
      data.days = days2;
      data.months = months2;
      data.years = years2;
      return this;
    }
    function daysToMonths(days2) {
      return days2 * 4800 / 146097;
    }
    function monthsToDays(months2) {
      return months2 * 146097 / 4800;
    }
    function as(units) {
      if (!this.isValid()) {
        return NaN;
      }
      var days2, months2, milliseconds2 = this._milliseconds;
      units = normalizeUnits(units);
      if (units === "month" || units === "quarter" || units === "year") {
        days2 = this._days + milliseconds2 / 864e5;
        months2 = this._months + daysToMonths(days2);
        switch (units) {
          case "month":
            return months2;
          case "quarter":
            return months2 / 3;
          case "year":
            return months2 / 12;
        }
      } else {
        days2 = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
          case "week":
            return days2 / 7 + milliseconds2 / 6048e5;
          case "day":
            return days2 + milliseconds2 / 864e5;
          case "hour":
            return days2 * 24 + milliseconds2 / 36e5;
          case "minute":
            return days2 * 1440 + milliseconds2 / 6e4;
          case "second":
            return days2 * 86400 + milliseconds2 / 1e3;
          case "millisecond":
            return Math.floor(days2 * 864e5) + milliseconds2;
          default:
            throw new Error("Unknown unit " + units);
        }
      }
    }
    function valueOf$1() {
      if (!this.isValid()) {
        return NaN;
      }
      return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
    }
    function makeAs(alias) {
      return function() {
        return this.as(alias);
      };
    }
    var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
    function clone$1$1() {
      return createDuration(this);
    }
    function get$2$1(units) {
      units = normalizeUnits(units);
      return this.isValid() ? this[units + "s"]() : NaN;
    }
    function makeGetter(name) {
      return function() {
        return this.isValid() ? this._data[name] : NaN;
      };
    }
    var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
    function weeks() {
      return absFloor(this.days() / 7);
    }
    var round = Math.round, thresholds = {
      ss: 44,
      // a few seconds to seconds
      s: 45,
      // seconds to minute
      m: 45,
      // minutes to hour
      h: 22,
      // hours to day
      d: 26,
      // days to month/week
      w: null,
      // weeks to month
      M: 11
      // months to year
    };
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
      return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
      var duration2 = createDuration(posNegDuration).abs(), seconds2 = round(duration2.as("s")), minutes2 = round(duration2.as("m")), hours2 = round(duration2.as("h")), days2 = round(duration2.as("d")), months2 = round(duration2.as("M")), weeks2 = round(duration2.as("w")), years2 = round(duration2.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
      if (thresholds2.w != null) {
        a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
      }
      a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale2;
      return substituteTimeAgo.apply(null, a);
    }
    function getSetRelativeTimeRounding(roundingFunction) {
      if (roundingFunction === void 0) {
        return round;
      }
      if (typeof roundingFunction === "function") {
        round = roundingFunction;
        return true;
      }
      return false;
    }
    function getSetRelativeTimeThreshold(threshold, limit) {
      if (thresholds[threshold] === void 0) {
        return false;
      }
      if (limit === void 0) {
        return thresholds[threshold];
      }
      thresholds[threshold] = limit;
      if (threshold === "s") {
        thresholds.ss = limit - 1;
      }
      return true;
    }
    function humanize(argWithSuffix, argThresholds) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var withSuffix = false, th2 = thresholds, locale2, output;
      if (typeof argWithSuffix === "object") {
        argThresholds = argWithSuffix;
        argWithSuffix = false;
      }
      if (typeof argWithSuffix === "boolean") {
        withSuffix = argWithSuffix;
      }
      if (typeof argThresholds === "object") {
        th2 = Object.assign({}, thresholds, argThresholds);
        if (argThresholds.s != null && argThresholds.ss == null) {
          th2.ss = argThresholds.s - 1;
        }
      }
      locale2 = this.localeData();
      output = relativeTime$1(this, !withSuffix, th2, locale2);
      if (withSuffix) {
        output = locale2.pastFuture(+this, output);
      }
      return locale2.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign(x2) {
      return (x2 > 0) - (x2 < 0) || +x2;
    }
    function toISOString$1() {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
      if (!total) {
        return "P0D";
      }
      minutes2 = absFloor(seconds2 / 60);
      hours2 = absFloor(minutes2 / 60);
      seconds2 %= 60;
      minutes2 %= 60;
      years2 = absFloor(months2 / 12);
      months2 %= 12;
      s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
      totalSign = total < 0 ? "-" : "";
      ymSign = sign(this._months) !== sign(total) ? "-" : "";
      daysSign = sign(this._days) !== sign(total) ? "-" : "";
      hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
      return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1$1;
    proto$2.get = get$2$1;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate(
      "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
      toISOString$1
    );
    proto$2.lang = lang;
    addFormatToken("X", 0, 0, "unix");
    addFormatToken("x", 0, 0, "valueOf");
    addRegexToken("x", matchSigned);
    addRegexToken("X", matchTimestamp);
    addParseToken("X", function(input, array, config2) {
      config2._d = new Date(parseFloat(input) * 1e3);
    });
    addParseToken("x", function(input, array, config2) {
      config2._d = new Date(toInt(input));
    });
    //! moment.js
    hooks.version = "2.29.4";
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now$2;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    hooks.HTML5_FMT = {
      DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
      // <input type="datetime-local" />
      DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
      // <input type="datetime-local" step="1" />
      DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
      // <input type="datetime-local" step="0.001" />
      DATE: "YYYY-MM-DD",
      // <input type="date" />
      TIME: "HH:mm",
      // <input type="time" />
      TIME_SECONDS: "HH:mm:ss",
      // <input type="time" step="1" />
      TIME_MS: "HH:mm:ss.SSS",
      // <input type="time" step="0.001" />
      WEEK: "GGGG-[W]WW",
      // <input type="week" />
      MONTH: "YYYY-MM"
      // <input type="month" />
    };
    const formatTokenMap = {
      // Year
      Y: "year",
      YY: "year",
      YYYY: "year",
      // Month
      M: {
        sectionType: "month",
        contentType: "digit",
        maxLength: 2
      },
      MM: "month",
      MMM: {
        sectionType: "month",
        contentType: "letter"
      },
      MMMM: {
        sectionType: "month",
        contentType: "letter"
      },
      // Day of the month
      D: {
        sectionType: "day",
        contentType: "digit",
        maxLength: 2
      },
      DD: "day",
      Do: {
        sectionType: "day",
        contentType: "digit-with-letter"
      },
      // Day of the week
      E: {
        sectionType: "weekDay",
        contentType: "digit",
        maxLength: 1
      },
      e: {
        sectionType: "weekDay",
        contentType: "digit",
        maxLength: 1
      },
      d: {
        sectionType: "weekDay",
        contentType: "digit",
        maxLength: 1
      },
      dd: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      ddd: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      dddd: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      // Meridiem
      A: "meridiem",
      a: "meridiem",
      // Hours
      H: {
        sectionType: "hours",
        contentType: "digit",
        maxLength: 2
      },
      HH: "hours",
      h: {
        sectionType: "hours",
        contentType: "digit",
        maxLength: 2
      },
      hh: "hours",
      // Minutes
      m: {
        sectionType: "minutes",
        contentType: "digit",
        maxLength: 2
      },
      mm: "minutes",
      // Seconds
      s: {
        sectionType: "seconds",
        contentType: "digit",
        maxLength: 2
      },
      ss: "seconds"
    };
    const defaultFormats = {
      normalDateWithWeekday: "ddd, MMM D",
      normalDate: "D MMMM",
      shortDate: "MMM D",
      monthAndDate: "MMMM D",
      dayOfMonth: "D",
      year: "YYYY",
      month: "MMMM",
      monthShort: "MMM",
      monthAndYear: "MMMM YYYY",
      weekday: "dddd",
      weekdayShort: "ddd",
      minutes: "mm",
      hours12h: "hh",
      hours24h: "HH",
      seconds: "ss",
      fullTime: "LT",
      fullTime12h: "hh:mm A",
      fullTime24h: "HH:mm",
      fullDate: "ll",
      fullDateWithWeekday: "dddd, LL",
      fullDateTime: "lll",
      fullDateTime12h: "ll hh:mm A",
      fullDateTime24h: "ll HH:mm",
      keyboardDate: "L",
      keyboardDateTime: "L LT",
      keyboardDateTime12h: "L hh:mm A",
      keyboardDateTime24h: "L HH:mm"
    };
    class AdapterMoment {
      constructor({
        locale: locale2,
        formats,
        instance
      } = {}) {
        this.isMUIAdapter = true;
        this.lib = "moment";
        this.moment = void 0;
        this.locale = void 0;
        this.formats = void 0;
        this.escapedCharacters = {
          start: "[",
          end: "]"
        };
        this.formatTokenMap = formatTokenMap;
        this.date = (value2) => {
          if (value2 === null) {
            return null;
          }
          const moment2 = this.moment(value2);
          moment2.locale(this.getCurrentLocaleCode());
          return moment2;
        };
        this.toJsDate = (value2) => {
          return value2.toDate();
        };
        this.parseISO = (isoString) => {
          return this.moment(isoString, true);
        };
        this.toISO = (value2) => {
          return value2.toISOString();
        };
        this.parse = (value2, format2) => {
          if (value2 === "") {
            return null;
          }
          if (this.locale) {
            return this.moment(value2, format2, this.locale, true);
          }
          return this.moment(value2, format2, true);
        };
        this.getCurrentLocaleCode = () => {
          return this.locale || hooks.locale();
        };
        this.is12HourCycleInCurrentLocale = () => {
          return /A|a/.test(hooks.localeData(this.getCurrentLocaleCode()).longDateFormat("LT"));
        };
        this.expandFormat = (format2) => {
          const localFormattingTokens2 = /(\[[^[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})|./g;
          return format2.match(localFormattingTokens2).map((token2) => {
            const firstCharacter = token2[0];
            if (firstCharacter === "L" || firstCharacter === ";") {
              return hooks.localeData(this.getCurrentLocaleCode()).longDateFormat(token2);
            }
            return token2;
          }).join("");
        };
        this.getFormatHelperText = (format2) => {
          return this.expandFormat(format2).replace(/a/gi, "(a|p)m").toLocaleLowerCase();
        };
        this.isNull = (value2) => {
          return value2 === null;
        };
        this.isValid = (value2) => {
          return this.moment(value2).isValid();
        };
        this.format = (value2, formatKey) => {
          return this.formatByString(value2, this.formats[formatKey]);
        };
        this.formatByString = (value2, formatString) => {
          const clonedDate = value2.clone();
          clonedDate.locale(this.getCurrentLocaleCode());
          return clonedDate.format(formatString);
        };
        this.formatNumber = (numberToFormat) => {
          return numberToFormat;
        };
        this.getDiff = (value2, comparing, unit) => {
          return value2.diff(comparing, unit);
        };
        this.isEqual = (value2, comparing) => {
          if (value2 === null && comparing === null) {
            return true;
          }
          return this.moment(value2).isSame(comparing);
        };
        this.isSameYear = (value2, comparing) => {
          return value2.isSame(comparing, "year");
        };
        this.isSameMonth = (value2, comparing) => {
          return value2.isSame(comparing, "month");
        };
        this.isSameDay = (value2, comparing) => {
          return value2.isSame(comparing, "day");
        };
        this.isSameHour = (value2, comparing) => {
          return value2.isSame(comparing, "hour");
        };
        this.isAfter = (value2, comparing) => {
          return value2.isAfter(comparing);
        };
        this.isAfterYear = (value2, comparing) => {
          return value2.isAfter(comparing, "year");
        };
        this.isAfterDay = (value2, comparing) => {
          return value2.isAfter(comparing, "day");
        };
        this.isBefore = (value2, comparing) => {
          return value2.isBefore(comparing);
        };
        this.isBeforeYear = (value2, comparing) => {
          return value2.isBefore(comparing, "year");
        };
        this.isBeforeDay = (value2, comparing) => {
          return value2.isBefore(comparing, "day");
        };
        this.isWithinRange = (value2, [start2, end2]) => {
          return value2.isBetween(start2, end2, null, "[]");
        };
        this.startOfYear = (value2) => {
          return value2.clone().startOf("year");
        };
        this.startOfMonth = (value2) => {
          return value2.clone().startOf("month");
        };
        this.startOfWeek = (value2) => {
          return value2.clone().startOf("week");
        };
        this.startOfDay = (value2) => {
          return value2.clone().startOf("day");
        };
        this.endOfYear = (value2) => {
          return value2.clone().endOf("year");
        };
        this.endOfMonth = (value2) => {
          return value2.clone().endOf("month");
        };
        this.endOfWeek = (value2) => {
          return value2.clone().endOf("week");
        };
        this.endOfDay = (value2) => {
          return value2.clone().endOf("day");
        };
        this.addYears = (value2, amount) => {
          return amount < 0 ? value2.clone().subtract(Math.abs(amount), "years") : value2.clone().add(amount, "years");
        };
        this.addMonths = (value2, amount) => {
          return amount < 0 ? value2.clone().subtract(Math.abs(amount), "months") : value2.clone().add(amount, "months");
        };
        this.addWeeks = (value2, amount) => {
          return amount < 0 ? value2.clone().subtract(Math.abs(amount), "weeks") : value2.clone().add(amount, "weeks");
        };
        this.addDays = (value2, amount) => {
          return amount < 0 ? value2.clone().subtract(Math.abs(amount), "days") : value2.clone().add(amount, "days");
        };
        this.addHours = (value2, amount) => {
          return amount < 0 ? value2.clone().subtract(Math.abs(amount), "hours") : value2.clone().add(amount, "hours");
        };
        this.addMinutes = (value2, amount) => {
          return amount < 0 ? value2.clone().subtract(Math.abs(amount), "minutes") : value2.clone().add(amount, "minutes");
        };
        this.addSeconds = (value2, amount) => {
          return amount < 0 ? value2.clone().subtract(Math.abs(amount), "seconds") : value2.clone().add(amount, "seconds");
        };
        this.getYear = (value2) => {
          return value2.get("year");
        };
        this.getMonth = (value2) => {
          return value2.get("month");
        };
        this.getDate = (value2) => {
          return value2.get("date");
        };
        this.getHours = (value2) => {
          return value2.get("hours");
        };
        this.getMinutes = (value2) => {
          return value2.get("minutes");
        };
        this.getSeconds = (value2) => {
          return value2.get("seconds");
        };
        this.setYear = (value2, year) => {
          return value2.clone().year(year);
        };
        this.setMonth = (value2, month) => {
          return value2.clone().month(month);
        };
        this.setDate = (value2, date) => {
          return value2.clone().date(date);
        };
        this.setHours = (value2, hours2) => {
          return value2.clone().hours(hours2);
        };
        this.setMinutes = (value2, minutes2) => {
          return value2.clone().minutes(minutes2);
        };
        this.setSeconds = (value2, seconds2) => {
          return value2.clone().seconds(seconds2);
        };
        this.getDaysInMonth = (value2) => {
          return value2.daysInMonth();
        };
        this.getNextMonth = (value2) => {
          return value2.clone().add(1, "month");
        };
        this.getPreviousMonth = (value2) => {
          return value2.clone().subtract(1, "month");
        };
        this.getMonthArray = (value2) => {
          const firstMonth = value2.clone().startOf("year");
          const monthArray = [firstMonth];
          while (monthArray.length < 12) {
            const prevMonth = monthArray[monthArray.length - 1];
            monthArray.push(this.getNextMonth(prevMonth));
          }
          return monthArray;
        };
        this.mergeDateAndTime = (dateParam, timeParam) => {
          return dateParam.clone().hour(timeParam.hour()).minute(timeParam.minute()).second(timeParam.second());
        };
        this.getWeekdays = () => {
          return hooks.weekdaysShort(true);
        };
        this.getWeekArray = (value2) => {
          const start2 = value2.clone().startOf("month").startOf("week");
          const end2 = value2.clone().endOf("month").endOf("week");
          let count = 0;
          let current = start2;
          const nestedWeeks = [];
          while (current.isBefore(end2)) {
            const weekNumber = Math.floor(count / 7);
            nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
            nestedWeeks[weekNumber].push(current);
            current = current.clone().add(1, "day");
            count += 1;
          }
          return nestedWeeks;
        };
        this.getWeekNumber = (value2) => {
          return value2.week();
        };
        this.getYearRange = (start2, end2) => {
          const startDate = this.moment(start2).startOf("year");
          const endDate = this.moment(end2).endOf("year");
          const years2 = [];
          let current = startDate;
          while (current.isBefore(endDate)) {
            years2.push(current);
            current = current.clone().add(1, "year");
          }
          return years2;
        };
        this.getMeridiemText = (ampm) => {
          if (this.is12HourCycleInCurrentLocale()) {
            return this.moment.localeData(this.getCurrentLocaleCode()).meridiem(ampm === "am" ? 0 : 13, 0, false);
          }
          return ampm === "am" ? "AM" : "PM";
        };
        this.moment = instance || hooks;
        this.locale = locale2;
        this.formats = _extends$1({}, defaultFormats, formats);
      }
    }
    function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
      const [match5, setMatch] = reactExports.useState(() => {
        if (noSsr && matchMedia) {
          return matchMedia(query).matches;
        }
        if (ssrMatchMedia) {
          return ssrMatchMedia(query).matches;
        }
        return defaultMatches;
      });
      useEnhancedEffect$3(() => {
        let active = true;
        if (!matchMedia) {
          return void 0;
        }
        const queryList = matchMedia(query);
        const updateMatch = () => {
          if (active) {
            setMatch(queryList.matches);
          }
        };
        updateMatch();
        queryList.addListener(updateMatch);
        return () => {
          active = false;
          queryList.removeListener(updateMatch);
        };
      }, [query, matchMedia]);
      return match5;
    }
    const maybeReactUseSyncExternalStore = React$5["useSyncExternalStore"];
    function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
      const getDefaultSnapshot = reactExports.useCallback(() => defaultMatches, [defaultMatches]);
      const getServerSnapshot = reactExports.useMemo(() => {
        if (noSsr && matchMedia) {
          return () => matchMedia(query).matches;
        }
        if (ssrMatchMedia !== null) {
          const {
            matches
          } = ssrMatchMedia(query);
          return () => matches;
        }
        return getDefaultSnapshot;
      }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);
      const [getSnapshot, subscribe] = reactExports.useMemo(() => {
        if (matchMedia === null) {
          return [getDefaultSnapshot, () => () => {
          }];
        }
        const mediaQueryList = matchMedia(query);
        return [() => mediaQueryList.matches, (notify) => {
          mediaQueryList.addListener(notify);
          return () => {
            mediaQueryList.removeListener(notify);
          };
        }];
      }, [getDefaultSnapshot, matchMedia, query]);
      const match5 = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      return match5;
    }
    function useMediaQuery(queryInput, options = {}) {
      const theme = useTheme$3();
      const supportMatchMedia = typeof window !== "undefined" && typeof window.matchMedia !== "undefined";
      const {
        defaultMatches = false,
        matchMedia = supportMatchMedia ? window.matchMedia : null,
        ssrMatchMedia = null,
        noSsr = false
      } = getThemeProps({
        name: "MuiUseMediaQuery",
        props: options,
        theme
      });
      let query = typeof queryInput === "function" ? queryInput(theme) : queryInput;
      query = query.replace(/^@media( ?)/m, "");
      const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== void 0 ? useMediaQueryNew : useMediaQueryOld;
      const match5 = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);
      return match5;
    }
    function isHostComponent(element) {
      return typeof element === "string";
    }
    function appendOwnerState(elementType, otherProps, ownerState) {
      if (elementType === void 0 || isHostComponent(elementType)) {
        return otherProps;
      }
      return _extends$1({}, otherProps, {
        ownerState: _extends$1({}, otherProps.ownerState, ownerState)
      });
    }
    function extractEventHandlers(object, excludeKeys = []) {
      if (object === void 0) {
        return {};
      }
      const result = {};
      Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
        result[prop] = object[prop];
      });
      return result;
    }
    function resolveComponentProps(componentProps, ownerState) {
      if (typeof componentProps === "function") {
        return componentProps(ownerState);
      }
      return componentProps;
    }
    function omitEventHandlers(object) {
      if (object === void 0) {
        return {};
      }
      const result = {};
      Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
        result[prop] = object[prop];
      });
      return result;
    }
    function mergeSlotProps(parameters) {
      const {
        getSlotProps,
        additionalProps,
        externalSlotProps,
        externalForwardedProps,
        className
      } = parameters;
      if (!getSlotProps) {
        const joinedClasses2 = clsx(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);
        const mergedStyle2 = _extends$1({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
        const props2 = _extends$1({}, additionalProps, externalForwardedProps, externalSlotProps);
        if (joinedClasses2.length > 0) {
          props2.className = joinedClasses2;
        }
        if (Object.keys(mergedStyle2).length > 0) {
          props2.style = mergedStyle2;
        }
        return {
          props: props2,
          internalRef: void 0
        };
      }
      const eventHandlers = extractEventHandlers(_extends$1({}, externalForwardedProps, externalSlotProps));
      const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
      const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
      const internalSlotProps = getSlotProps(eventHandlers);
      const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
      const mergedStyle = _extends$1({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
      const props = _extends$1({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
      if (joinedClasses.length > 0) {
        props.className = joinedClasses;
      }
      if (Object.keys(mergedStyle).length > 0) {
        props.style = mergedStyle;
      }
      return {
        props,
        internalRef: internalSlotProps.ref
      };
    }
    const _excluded$19 = ["elementType", "externalSlotProps", "ownerState"];
    function useSlotProps(parameters) {
      var _parameters$additiona;
      const {
        elementType,
        externalSlotProps,
        ownerState
      } = parameters, rest = _objectWithoutPropertiesLoose(parameters, _excluded$19);
      const resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);
      const {
        props: mergedProps,
        internalRef
      } = mergeSlotProps(_extends$1({}, rest, {
        externalSlotProps: resolvedComponentsProps
      }));
      const ref = useForkRef$2(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
      const props = appendOwnerState(elementType, _extends$1({}, mergedProps, {
        ref
      }), ownerState);
      return props;
    }
    const findClosestEnabledDate = ({
      date,
      disableFuture,
      disablePast,
      maxDate,
      minDate,
      isDateDisabled,
      utils: utils2
    }) => {
      const today = utils2.startOfDay(utils2.date());
      if (disablePast && utils2.isBefore(minDate, today)) {
        minDate = today;
      }
      if (disableFuture && utils2.isAfter(maxDate, today)) {
        maxDate = today;
      }
      let forward = date;
      let backward = date;
      if (utils2.isBefore(date, minDate)) {
        forward = minDate;
        backward = null;
      }
      if (utils2.isAfter(date, maxDate)) {
        if (backward) {
          backward = maxDate;
        }
        forward = null;
      }
      while (forward || backward) {
        if (forward && utils2.isAfter(forward, maxDate)) {
          forward = null;
        }
        if (backward && utils2.isBefore(backward, minDate)) {
          backward = null;
        }
        if (forward) {
          if (!isDateDisabled(forward)) {
            return forward;
          }
          forward = utils2.addDays(forward, 1);
        }
        if (backward) {
          if (!isDateDisabled(backward)) {
            return backward;
          }
          backward = utils2.addDays(backward, -1);
        }
      }
      return null;
    };
    const clamp = (utils2, value2, minDate, maxDate) => {
      if (utils2.isBefore(value2, minDate)) {
        return minDate;
      }
      if (utils2.isAfter(value2, maxDate)) {
        return maxDate;
      }
      return value2;
    };
    const replaceInvalidDateByNull = (utils2, value2) => value2 == null || !utils2.isValid(value2) ? null : value2;
    const applyDefaultDate = (utils2, value2, defaultValue2) => {
      if (value2 == null || !utils2.isValid(value2)) {
        return defaultValue2;
      }
      return value2;
    };
    const areDatesEqual = (utils2, a, b2) => {
      if (!utils2.isValid(a) && a != null && !utils2.isValid(b2) && b2 != null) {
        return true;
      }
      return utils2.isEqual(a, b2);
    };
    const getDateSectionConfigFromFormatToken = (utils2, formatToken) => {
      const config2 = utils2.formatTokenMap[formatToken];
      if (config2 == null) {
        throw new Error([`MUI: The token "${formatToken}" is not supported by the Date and Time Pickers.`, "Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported."].join("\n"));
      }
      if (typeof config2 === "string") {
        return {
          type: config2,
          contentType: config2 === "meridiem" ? "letter" : "digit",
          maxLength: void 0
        };
      }
      return {
        type: config2.sectionType,
        contentType: config2.contentType,
        maxLength: config2.maxLength
      };
    };
    const getDeltaFromKeyCode = (keyCode) => {
      switch (keyCode) {
        case "ArrowUp":
          return 1;
        case "ArrowDown":
          return -1;
        case "PageUp":
          return 5;
        case "PageDown":
          return -5;
        default:
          return 0;
      }
    };
    const getDaysInWeekStr = (utils2, format2) => {
      const elements = [];
      const now2 = utils2.date();
      const startDate = utils2.startOfWeek(now2);
      const endDate = utils2.endOfWeek(now2);
      let current = startDate;
      while (utils2.isBefore(current, endDate)) {
        elements.push(current);
        current = utils2.addDays(current, 1);
      }
      return elements.map((weekDay) => utils2.formatByString(weekDay, format2));
    };
    const getLetterEditingOptions = (utils2, sectionType, format2) => {
      switch (sectionType) {
        case "month": {
          return utils2.getMonthArray(utils2.date()).map((month) => utils2.formatByString(month, format2));
        }
        case "weekDay": {
          return getDaysInWeekStr(utils2, format2);
        }
        case "meridiem": {
          const now2 = utils2.date();
          return [utils2.startOfDay(now2), utils2.endOfDay(now2)].map((date) => utils2.formatByString(date, format2));
        }
        default: {
          return [];
        }
      }
    };
    const cleanLeadingZeros = (utils2, valueStr, size) => {
      let cleanValueStr = valueStr;
      cleanValueStr = Number(cleanValueStr).toString();
      while (cleanValueStr.length < size) {
        cleanValueStr = `0${cleanValueStr}`;
      }
      return cleanValueStr;
    };
    const cleanDigitSectionValue = (utils2, value2, sectionBoundaries, section) => {
      if (section.type === "day" && section.contentType === "digit-with-letter") {
        const date = utils2.setDate(sectionBoundaries.longestMonth, value2);
        return utils2.formatByString(date, section.format);
      }
      const valueStr = value2.toString();
      if (section.hasLeadingZerosInInput) {
        return cleanLeadingZeros(utils2, valueStr, section.maxLength);
      }
      return valueStr;
    };
    const adjustSectionValue = (utils2, section, keyCode, sectionsValueBoundaries, activeDate) => {
      const delta = getDeltaFromKeyCode(keyCode);
      const isStart = keyCode === "Home";
      const isEnd = keyCode === "End";
      const shouldSetAbsolute = section.value === "" || isStart || isEnd;
      const adjustDigitSection = () => {
        const sectionBoundaries = sectionsValueBoundaries[section.type]({
          currentDate: activeDate,
          format: section.format,
          contentType: section.contentType
        });
        const getCleanValue = (value2) => cleanDigitSectionValue(utils2, value2, sectionBoundaries, section);
        if (shouldSetAbsolute) {
          if (section.type === "year" && !isEnd && !isStart) {
            return utils2.formatByString(utils2.date(), section.format);
          }
          if (delta > 0 || isStart) {
            return getCleanValue(sectionBoundaries.minimum);
          }
          return getCleanValue(sectionBoundaries.maximum);
        }
        const currentSectionValue = parseInt(section.value, 10);
        const newSectionValueNumber = currentSectionValue + delta;
        if (newSectionValueNumber > sectionBoundaries.maximum) {
          return getCleanValue(sectionBoundaries.minimum);
        }
        if (newSectionValueNumber < sectionBoundaries.minimum) {
          return getCleanValue(sectionBoundaries.maximum);
        }
        return getCleanValue(newSectionValueNumber);
      };
      const adjustLetterSection = () => {
        const options = getLetterEditingOptions(utils2, section.type, section.format);
        if (options.length === 0) {
          return section.value;
        }
        if (shouldSetAbsolute) {
          if (delta > 0 || isStart) {
            return options[0];
          }
          return options[options.length - 1];
        }
        const currentOptionIndex = options.indexOf(section.value);
        const newOptionIndex = (currentOptionIndex + options.length + delta) % options.length;
        return options[newOptionIndex];
      };
      if (section.contentType === "digit" || section.contentType === "digit-with-letter") {
        return adjustDigitSection();
      }
      return adjustLetterSection();
    };
    const getSectionVisibleValue = (section, target) => {
      let value2 = section.value || section.placeholder;
      const hasLeadingZeros = target === "non-input" ? section.hasLeadingZerosInFormat : section.hasLeadingZerosInInput;
      if (target === "non-input" && section.hasLeadingZerosInInput && !section.hasLeadingZerosInFormat) {
        value2 = Number(value2).toString();
      }
      const shouldAddInvisibleSpace = ["input-rtl", "input-ltr"].includes(target) && section.contentType === "digit" && !hasLeadingZeros && value2.length === 1;
      if (shouldAddInvisibleSpace) {
        value2 = `${value2}‎`;
      }
      if (target === "input-rtl") {
        value2 = `⁨${value2}⁩`;
      }
      return value2;
    };
    const cleanString = (dirtyString) => dirtyString.replace(/[\u2066\u2067\u2068\u2069]/g, "");
    const addPositionPropertiesToSections = (sections, isRTL) => {
      let position2 = 0;
      let positionInInput = isRTL ? 1 : 0;
      const newSections = [];
      for (let i = 0; i < sections.length; i += 1) {
        const section = sections[i];
        const renderedValue = getSectionVisibleValue(section, isRTL ? "input-rtl" : "input-ltr");
        const sectionStr = `${section.startSeparator}${renderedValue}${section.endSeparator}`;
        const sectionLength = cleanString(sectionStr).length;
        const sectionLengthInInput = sectionStr.length;
        const cleanedValue = cleanString(renderedValue);
        const startInInput = positionInInput + renderedValue.indexOf(cleanedValue[0]) + section.startSeparator.length;
        const endInInput = startInInput + cleanedValue.length;
        newSections.push(_extends$1({}, section, {
          start: position2,
          end: position2 + sectionLength,
          startInInput,
          endInInput
        }));
        position2 += sectionLength;
        positionInInput += sectionLengthInInput;
      }
      return newSections;
    };
    const getSectionPlaceholder = (utils2, localeText, sectionConfig, currentTokenValue) => {
      switch (sectionConfig.type) {
        case "year": {
          return localeText.fieldYearPlaceholder({
            digitAmount: utils2.formatByString(utils2.date(), currentTokenValue).length
          });
        }
        case "month": {
          return localeText.fieldMonthPlaceholder({
            contentType: sectionConfig.contentType
          });
        }
        case "day": {
          return localeText.fieldDayPlaceholder();
        }
        case "weekDay": {
          return localeText.fieldWeekDayPlaceholder({
            contentType: sectionConfig.contentType
          });
        }
        case "hours": {
          return localeText.fieldHoursPlaceholder();
        }
        case "minutes": {
          return localeText.fieldMinutesPlaceholder();
        }
        case "seconds": {
          return localeText.fieldSecondsPlaceholder();
        }
        case "meridiem": {
          return localeText.fieldMeridiemPlaceholder();
        }
        default: {
          return currentTokenValue;
        }
      }
    };
    const changeSectionValueFormat = (utils2, valueStr, currentFormat, newFormat) => {
      return utils2.formatByString(utils2.parse(valueStr, currentFormat), newFormat);
    };
    const isFourDigitYearFormat = (utils2, format2) => utils2.formatByString(utils2.date(), format2).length === 4;
    const doesSectionFormatHaveLeadingZeros = (utils2, contentType, sectionType, format2) => {
      if (contentType !== "digit") {
        return false;
      }
      switch (sectionType) {
        case "year": {
          if (isFourDigitYearFormat(utils2, format2)) {
            const formatted0001 = utils2.formatByString(utils2.setYear(utils2.date(), 1), format2);
            return formatted0001 === "0001";
          }
          const formatted2001 = utils2.formatByString(utils2.setYear(utils2.date(), 2001), format2);
          return formatted2001 === "01";
        }
        case "month": {
          return utils2.formatByString(utils2.startOfYear(utils2.date()), format2).length > 1;
        }
        case "day": {
          return utils2.formatByString(utils2.startOfMonth(utils2.date()), format2).length > 1;
        }
        case "weekDay": {
          return utils2.formatByString(utils2.startOfWeek(utils2.date()), format2).length > 1;
        }
        case "hours": {
          return utils2.formatByString(utils2.setHours(utils2.date(), 1), format2).length > 1;
        }
        case "minutes": {
          return utils2.formatByString(utils2.setMinutes(utils2.date(), 1), format2).length > 1;
        }
        case "seconds": {
          return utils2.formatByString(utils2.setMinutes(utils2.date(), 1), format2).length > 1;
        }
        default: {
          throw new Error("Invalid section type");
        }
      }
    };
    const getEscapedPartsFromFormat = (utils2, format2) => {
      const escapedParts = [];
      const {
        start: startChar,
        end: endChar
      } = utils2.escapedCharacters;
      const regExp = new RegExp(`(\\${startChar}[^\\${endChar}]*\\${endChar})+`, "g");
      let match5 = null;
      while (match5 = regExp.exec(format2)) {
        escapedParts.push({
          start: match5.index,
          end: regExp.lastIndex - 1
        });
      }
      return escapedParts;
    };
    const splitFormatIntoSections = (utils2, localeText, format2, date, formatDensity, shouldRespectLeadingZeros, isRTL) => {
      let startSeparator = "";
      const sections = [];
      const now2 = utils2.date();
      const commitToken = (token2) => {
        if (token2 === "") {
          return null;
        }
        const sectionConfig = getDateSectionConfigFromFormatToken(utils2, token2);
        const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils2, sectionConfig.contentType, sectionConfig.type, token2);
        const hasLeadingZerosInInput = shouldRespectLeadingZeros ? hasLeadingZerosInFormat : sectionConfig.contentType === "digit";
        const isValidDate = date != null && utils2.isValid(date);
        let sectionValue = isValidDate ? utils2.formatByString(date, token2) : "";
        let maxLength = null;
        if (hasLeadingZerosInInput) {
          if (hasLeadingZerosInFormat) {
            maxLength = sectionValue === "" ? utils2.formatByString(now2, token2).length : sectionValue.length;
          } else {
            if (sectionConfig.maxLength == null) {
              throw new Error(`MUI: The token ${token2} should have a 'maxDigitNumber' property on it's adapter`);
            }
            maxLength = sectionConfig.maxLength;
            if (isValidDate) {
              sectionValue = cleanLeadingZeros(utils2, sectionValue, maxLength);
            }
          }
        }
        sections.push(_extends$1({}, sectionConfig, {
          format: token2,
          maxLength,
          value: sectionValue,
          placeholder: getSectionPlaceholder(utils2, localeText, sectionConfig, token2),
          hasLeadingZeros: hasLeadingZerosInFormat,
          hasLeadingZerosInFormat,
          hasLeadingZerosInInput,
          startSeparator: sections.length === 0 ? startSeparator : "",
          endSeparator: "",
          modified: false
        }));
        return null;
      };
      let formatExpansionOverflow = 10;
      let prevFormat = format2;
      let nextFormat = utils2.expandFormat(format2);
      while (nextFormat !== prevFormat) {
        prevFormat = nextFormat;
        nextFormat = utils2.expandFormat(prevFormat);
        formatExpansionOverflow -= 1;
        if (formatExpansionOverflow < 0) {
          throw new Error("MUI: The format expansion seems to be  enter in an infinite loop. Please open an issue with the format passed to the picker component");
        }
      }
      const expandedFormat = nextFormat;
      const escapedParts = getEscapedPartsFromFormat(utils2, expandedFormat);
      const isTokenStartRegExp = new RegExp(`^(${Object.keys(utils2.formatTokenMap).join("|")})`);
      let currentTokenValue = "";
      for (let i = 0; i < expandedFormat.length; i += 1) {
        const escapedPartOfCurrentChar = escapedParts.find((escapeIndex) => escapeIndex.start <= i && escapeIndex.end >= i);
        const char2 = expandedFormat[i];
        const isEscapedChar = escapedPartOfCurrentChar != null;
        const potentialToken = `${currentTokenValue}${expandedFormat.slice(i)}`;
        if (!isEscapedChar && char2.match(/([A-Za-z]+)/) && isTokenStartRegExp.test(potentialToken)) {
          currentTokenValue += char2;
        } else {
          const isEscapeBoundary = isEscapedChar && (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.start) === i || (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.end) === i;
          if (!isEscapeBoundary) {
            commitToken(currentTokenValue);
            currentTokenValue = "";
            if (sections.length === 0) {
              startSeparator += char2;
            } else {
              sections[sections.length - 1].endSeparator += char2;
            }
          }
        }
      }
      commitToken(currentTokenValue);
      return sections.map((section) => {
        const cleanSeparator = (separator) => {
          let cleanedSeparator = separator;
          if (isRTL && cleanedSeparator !== null && cleanedSeparator.includes(" ")) {
            cleanedSeparator = `⁩${cleanedSeparator}⁦`;
          }
          if (formatDensity === "spacious" && ["/", ".", "-"].includes(cleanedSeparator)) {
            cleanedSeparator = ` ${cleanedSeparator} `;
          }
          return cleanedSeparator;
        };
        section.startSeparator = cleanSeparator(section.startSeparator);
        section.endSeparator = cleanSeparator(section.endSeparator);
        return section;
      });
    };
    const getDateFromDateSections = (utils2, sections) => {
      const shouldSkipWeekDays = sections.some((section) => section.type === "day");
      const sectionFormats = [];
      const sectionValues = [];
      for (let i = 0; i < sections.length; i += 1) {
        const section = sections[i];
        const shouldSkip = shouldSkipWeekDays && section.type === "weekDay";
        if (!shouldSkip) {
          sectionFormats.push(section.format);
          sectionValues.push(getSectionVisibleValue(section, "non-input"));
        }
      }
      const formatWithoutSeparator = sectionFormats.join(" ");
      const dateWithoutSeparatorStr = sectionValues.join(" ");
      return utils2.parse(dateWithoutSeparatorStr, formatWithoutSeparator);
    };
    const createDateStrForInputFromSections = (sections, isRTL) => {
      const formattedSections = sections.map((section) => {
        const dateValue = getSectionVisibleValue(section, isRTL ? "input-rtl" : "input-ltr");
        return `${section.startSeparator}${dateValue}${section.endSeparator}`;
      });
      const dateStr = formattedSections.join("");
      if (!isRTL) {
        return dateStr;
      }
      return `⁦${dateStr}⁩`;
    };
    const getSectionsBoundaries = (utils2) => {
      const today = utils2.date();
      const endOfYear = utils2.endOfYear(today);
      const {
        maxDaysInMonth,
        longestMonth
      } = utils2.getMonthArray(today).reduce((acc, month) => {
        const daysInMonth2 = utils2.getDaysInMonth(month);
        if (daysInMonth2 > acc.maxDaysInMonth) {
          return {
            maxDaysInMonth: daysInMonth2,
            longestMonth: month
          };
        }
        return acc;
      }, {
        maxDaysInMonth: 0,
        longestMonth: null
      });
      return {
        year: ({
          format: format2
        }) => ({
          minimum: 0,
          maximum: isFourDigitYearFormat(utils2, format2) ? 9999 : 99
        }),
        month: () => ({
          minimum: 1,
          // Assumption: All years have the same amount of months
          maximum: utils2.getMonth(endOfYear) + 1
        }),
        day: ({
          currentDate
        }) => ({
          minimum: 1,
          maximum: currentDate != null && utils2.isValid(currentDate) ? utils2.getDaysInMonth(currentDate) : maxDaysInMonth,
          longestMonth
        }),
        weekDay: ({
          format: format2,
          contentType
        }) => {
          if (contentType === "digit") {
            const daysInWeek = getDaysInWeekStr(utils2, format2).map(Number);
            return {
              minimum: Math.min(...daysInWeek),
              maximum: Math.max(...daysInWeek)
            };
          }
          return {
            minimum: 1,
            maximum: 7
          };
        },
        hours: ({
          format: format2
        }) => {
          const lastHourInDay = utils2.getHours(endOfYear);
          const hasMeridiem = utils2.formatByString(utils2.endOfDay(today), format2) !== lastHourInDay.toString();
          if (hasMeridiem) {
            return {
              minimum: 1,
              maximum: Number(utils2.formatByString(utils2.startOfDay(today), format2))
            };
          }
          return {
            minimum: 0,
            maximum: lastHourInDay
          };
        },
        minutes: () => ({
          minimum: 0,
          // Assumption: All years have the same amount of minutes
          maximum: utils2.getMinutes(endOfYear)
        }),
        seconds: () => ({
          minimum: 0,
          // Assumption: All years have the same amount of seconds
          maximum: utils2.getSeconds(endOfYear)
        }),
        meridiem: () => ({
          minimum: 0,
          maximum: 0
        })
      };
    };
    const transferDateSectionValue = (utils2, section, dateToTransferFrom, dateToTransferTo) => {
      switch (section.type) {
        case "year": {
          return utils2.setYear(dateToTransferTo, utils2.getYear(dateToTransferFrom));
        }
        case "month": {
          return utils2.setMonth(dateToTransferTo, utils2.getMonth(dateToTransferFrom));
        }
        case "weekDay": {
          const formattedDaysInWeek = getDaysInWeekStr(utils2, section.format);
          const dayInWeekStrOfActiveDate = utils2.formatByString(dateToTransferFrom, section.format);
          const dayInWeekOfActiveDate = formattedDaysInWeek.indexOf(dayInWeekStrOfActiveDate);
          const dayInWeekOfNewSectionValue = formattedDaysInWeek.indexOf(section.value);
          const diff2 = dayInWeekOfNewSectionValue - dayInWeekOfActiveDate;
          return utils2.addDays(dateToTransferFrom, diff2);
        }
        case "day": {
          return utils2.setDate(dateToTransferTo, utils2.getDate(dateToTransferFrom));
        }
        case "meridiem": {
          const isAM = utils2.getHours(dateToTransferFrom) < 12;
          const mergedDateHours = utils2.getHours(dateToTransferTo);
          if (isAM && mergedDateHours >= 12) {
            return utils2.addHours(dateToTransferTo, -12);
          }
          if (!isAM && mergedDateHours < 12) {
            return utils2.addHours(dateToTransferTo, 12);
          }
          return dateToTransferTo;
        }
        case "hours": {
          return utils2.setHours(dateToTransferTo, utils2.getHours(dateToTransferFrom));
        }
        case "minutes": {
          return utils2.setMinutes(dateToTransferTo, utils2.getMinutes(dateToTransferFrom));
        }
        case "seconds": {
          return utils2.setSeconds(dateToTransferTo, utils2.getSeconds(dateToTransferFrom));
        }
        default: {
          return dateToTransferTo;
        }
      }
    };
    const reliableSectionModificationOrder = {
      year: 1,
      month: 2,
      day: 3,
      weekDay: 4,
      hours: 5,
      minutes: 6,
      seconds: 7,
      meridiem: 8
    };
    const mergeDateIntoReferenceDate = (utils2, dateToTransferFrom, sections, referenceDate, shouldLimitToEditedSections) => (
      // cloning sections before sort to avoid mutating it
      [...sections].sort((a, b2) => reliableSectionModificationOrder[a.type] - reliableSectionModificationOrder[b2.type]).reduce((mergedDate, section) => {
        if (!shouldLimitToEditedSections || section.modified) {
          return transferDateSectionValue(utils2, section, dateToTransferFrom, mergedDate);
        }
        return mergedDate;
      }, referenceDate)
    );
    const isAndroid = () => navigator.userAgent.toLowerCase().indexOf("android") > -1;
    const clampDaySectionIfPossible = (utils2, sections, sectionsValueBoundaries) => {
      const canClamp = sections.every((section) => section.type === "weekDay" || section.value !== "") && sections.some((section) => section.type === "day");
      if (!canClamp) {
        return null;
      }
      const sectionsForStartOfMonth = sections.map((section) => {
        if (section.type !== "day") {
          return section;
        }
        const dayBoundaries = sectionsValueBoundaries.day({
          currentDate: null,
          format: section.format,
          contentType: section.contentType
        });
        return _extends$1({}, section, {
          value: cleanDigitSectionValue(utils2, dayBoundaries.minimum, dayBoundaries, section)
        });
      });
      const startOfMonth = getDateFromDateSections(utils2, sectionsForStartOfMonth);
      if (startOfMonth == null || !utils2.isValid(startOfMonth)) {
        return null;
      }
      return sections.map((section) => {
        if (section.type !== "day") {
          return section;
        }
        const dayBoundaries = sectionsValueBoundaries.day({
          currentDate: startOfMonth,
          format: section.format,
          contentType: section.contentType
        });
        if (Number(section.value) <= dayBoundaries.maximum) {
          return section;
        }
        return _extends$1({}, section, {
          value: dayBoundaries.maximum.toString()
        });
      });
    };
    const getSectionOrder = (sections, isRTL) => {
      const neighbors = {};
      if (!isRTL) {
        sections.forEach((_2, index) => {
          const leftIndex = index === 0 ? null : index - 1;
          const rightIndex = index === sections.length - 1 ? null : index + 1;
          neighbors[index] = {
            leftIndex,
            rightIndex
          };
        });
        return {
          neighbors,
          startIndex: 0,
          endIndex: sections.length - 1
        };
      }
      const rtl2ltr = {};
      const ltr2rtl = {};
      let groupedSectionsStart = 0;
      let groupedSectionsEnd = 0;
      let RTLIndex = sections.length - 1;
      while (RTLIndex >= 0) {
        groupedSectionsEnd = sections.findIndex(
          // eslint-disable-next-line @typescript-eslint/no-loop-func
          (section, index) => {
            var _section$endSeparator;
            return index >= groupedSectionsStart && ((_section$endSeparator = section.endSeparator) == null ? void 0 : _section$endSeparator.includes(" ")) && // Special case where the spaces were not there in the initial input
            section.endSeparator !== " / ";
          }
        );
        if (groupedSectionsEnd === -1) {
          groupedSectionsEnd = sections.length - 1;
        }
        for (let i = groupedSectionsEnd; i >= groupedSectionsStart; i -= 1) {
          ltr2rtl[i] = RTLIndex;
          rtl2ltr[RTLIndex] = i;
          RTLIndex -= 1;
        }
        groupedSectionsStart = groupedSectionsEnd + 1;
      }
      sections.forEach((_2, index) => {
        const rtlIndex = ltr2rtl[index];
        const leftIndex = rtlIndex === 0 ? null : rtl2ltr[rtlIndex - 1];
        const rightIndex = rtlIndex === sections.length - 1 ? null : rtl2ltr[rtlIndex + 1];
        neighbors[index] = {
          leftIndex,
          rightIndex
        };
      });
      return {
        neighbors,
        startIndex: rtl2ltr[0],
        endIndex: rtl2ltr[sections.length - 1]
      };
    };
    const singleItemValueManager = {
      emptyValue: null,
      getTodayValue: (utils2, valueType) => valueType === "date" ? utils2.startOfDay(utils2.date()) : utils2.date(),
      cleanValue: replaceInvalidDateByNull,
      areValuesEqual: areDatesEqual,
      isSameError: (a, b2) => a === b2,
      hasError: (error) => error != null,
      defaultErrorState: null
    };
    const singleItemFieldValueManager = {
      updateReferenceValue: (utils2, value2, prevReferenceValue) => value2 == null || !utils2.isValid(value2) ? prevReferenceValue : value2,
      getSectionsFromValue: (utils2, date, prevSections, isRTL, getSectionsFromDate) => {
        const shouldReUsePrevDateSections = !utils2.isValid(date) && !!prevSections;
        if (shouldReUsePrevDateSections) {
          return prevSections;
        }
        return addPositionPropertiesToSections(getSectionsFromDate(date), isRTL);
      },
      getValueStrFromSections: createDateStrForInputFromSections,
      getActiveDateManager: (utils2, state) => ({
        date: state.value,
        referenceDate: state.referenceValue,
        getSections: (sections) => sections,
        getNewValuesFromNewActiveDate: (newActiveDate) => ({
          value: newActiveDate,
          referenceValue: newActiveDate == null || !utils2.isValid(newActiveDate) ? state.referenceValue : newActiveDate
        })
      }),
      parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue)
    };
    const getPickersLocalization = (pickersTranslations) => {
      return {
        components: {
          MuiLocalizationProvider: {
            defaultProps: {
              localeText: _extends$1({}, pickersTranslations)
            }
          }
        }
      };
    };
    const enUSPickers = {
      // Calendar navigation
      previousMonth: "Previous month",
      nextMonth: "Next month",
      // View navigation
      openPreviousView: "open previous view",
      openNextView: "open next view",
      calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "year view is open, switch to calendar view" : "calendar view is open, switch to year view",
      // DateRange placeholders
      start: "Start",
      end: "End",
      // Action bar
      cancelButtonLabel: "Cancel",
      clearButtonLabel: "Clear",
      okButtonLabel: "OK",
      todayButtonLabel: "Today",
      // Toolbar titles
      datePickerToolbarTitle: "Select date",
      dateTimePickerToolbarTitle: "Select date & time",
      timePickerToolbarTitle: "Select time",
      dateRangePickerToolbarTitle: "Select date range",
      // Clock labels
      clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "No time selected" : `Selected time is ${adapter.format(time, "fullTime")}`}`,
      hoursClockNumberText: (hours2) => `${hours2} hours`,
      minutesClockNumberText: (minutes2) => `${minutes2} minutes`,
      secondsClockNumberText: (seconds2) => `${seconds2} seconds`,
      // Digital clock labels
      selectViewText: (view) => `Select ${view}`,
      // Calendar labels
      calendarWeekNumberHeaderLabel: "Week number",
      calendarWeekNumberHeaderText: "#",
      calendarWeekNumberAriaLabelText: (weekNumber) => `Week ${weekNumber}`,
      calendarWeekNumberText: (weekNumber) => `${weekNumber}`,
      // Open picker labels
      openDatePickerDialogue: (value2, utils2) => value2 !== null && utils2.isValid(value2) ? `Choose date, selected date is ${utils2.format(value2, "fullDate")}` : "Choose date",
      openTimePickerDialogue: (value2, utils2) => value2 !== null && utils2.isValid(value2) ? `Choose time, selected time is ${utils2.format(value2, "fullTime")}` : "Choose time",
      // Table labels
      timeTableLabel: "pick time",
      dateTableLabel: "pick date",
      // Field section placeholders
      fieldYearPlaceholder: (params) => "Y".repeat(params.digitAmount),
      fieldMonthPlaceholder: (params) => params.contentType === "letter" ? "MMMM" : "MM",
      fieldDayPlaceholder: () => "DD",
      fieldWeekDayPlaceholder: (params) => params.contentType === "letter" ? "EEEE" : "EE",
      fieldHoursPlaceholder: () => "hh",
      fieldMinutesPlaceholder: () => "mm",
      fieldSecondsPlaceholder: () => "ss",
      fieldMeridiemPlaceholder: () => "aa"
    };
    const DEFAULT_LOCALE = enUSPickers;
    getPickersLocalization(enUSPickers);
    const useLocalizationContext = () => {
      const localization = reactExports.useContext(MuiPickersAdapterContext);
      if (localization === null) {
        throw new Error(["MUI: Can not find the date and time pickers localization context.", "It looks like you forgot to wrap your component in LocalizationProvider.", "This can also happen if you are bundling multiple versions of the `@mui/x-date-pickers` package"].join("\n"));
      }
      if (localization.utils === null) {
        throw new Error(["MUI: Can not find the date and time pickers adapter from its localization context.", "It looks like you forgot to pass a `dateAdapter` to your LocalizationProvider."].join("\n"));
      }
      const localeText = reactExports.useMemo(() => _extends$1({}, DEFAULT_LOCALE, localization.localeText), [localization.localeText]);
      return reactExports.useMemo(() => _extends$1({}, localization, {
        localeText
      }), [localization, localeText]);
    };
    const useUtils = () => useLocalizationContext().utils;
    const useDefaultDates = () => useLocalizationContext().defaultDates;
    const useLocaleText = () => useLocalizationContext().localeText;
    const useNow = () => {
      const utils2 = useUtils();
      const now2 = reactExports.useRef(utils2.date());
      return now2.current;
    };
    const isYearOnlyView = (views) => views.length === 1 && views[0] === "year";
    const isYearAndMonthViews = (views) => views.length === 2 && views.indexOf("month") !== -1 && views.indexOf("year") !== -1;
    const applyDefaultViewProps = ({
      openTo,
      defaultOpenTo,
      views,
      defaultViews
    }) => {
      const viewsWithDefault = views != null ? views : defaultViews;
      let openToWithDefault;
      if (openTo != null) {
        openToWithDefault = openTo;
      } else if (viewsWithDefault.includes(defaultOpenTo)) {
        openToWithDefault = defaultOpenTo;
      } else if (viewsWithDefault.length > 0) {
        openToWithDefault = viewsWithDefault[0];
      } else {
        throw new Error("MUI: The `views` prop must contain at least one view");
      }
      return {
        views: viewsWithDefault,
        openTo: openToWithDefault
      };
    };
    const GridContext = /* @__PURE__ */ reactExports.createContext();
    const GridContext$1 = GridContext;
    function getGridUtilityClass(slot) {
      return generateUtilityClass("MuiGrid", slot);
    }
    const SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    const DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
    const WRAPS = ["nowrap", "wrap-reverse", "wrap"];
    const GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    const gridClasses = generateUtilityClasses("MuiGrid", [
      "root",
      "container",
      "item",
      "zeroMinWidth",
      // spacings
      ...SPACINGS.map((spacing) => `spacing-xs-${spacing}`),
      // direction values
      ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
      // wrap values
      ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
      // grid sizes for all breakpoints
      ...GRID_SIZES.map((size) => `grid-xs-${size}`),
      ...GRID_SIZES.map((size) => `grid-sm-${size}`),
      ...GRID_SIZES.map((size) => `grid-md-${size}`),
      ...GRID_SIZES.map((size) => `grid-lg-${size}`),
      ...GRID_SIZES.map((size) => `grid-xl-${size}`)
    ]);
    const _excluded$18 = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "rowSpacing", "spacing", "wrap", "zeroMinWidth"];
    function getOffset(val) {
      const parse2 = parseFloat(val);
      return `${parse2}${String(val).replace(String(parse2), "") || "px"}`;
    }
    function generateGrid({
      theme,
      ownerState
    }) {
      let size;
      return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {
        let styles2 = {};
        if (ownerState[breakpoint]) {
          size = ownerState[breakpoint];
        }
        if (!size) {
          return globalStyles;
        }
        if (size === true) {
          styles2 = {
            flexBasis: 0,
            flexGrow: 1,
            maxWidth: "100%"
          };
        } else if (size === "auto") {
          styles2 = {
            flexBasis: "auto",
            flexGrow: 0,
            flexShrink: 0,
            maxWidth: "none",
            width: "auto"
          };
        } else {
          const columnsBreakpointValues = resolveBreakpointValues({
            values: ownerState.columns,
            breakpoints: theme.breakpoints.values
          });
          const columnValue = typeof columnsBreakpointValues === "object" ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;
          if (columnValue === void 0 || columnValue === null) {
            return globalStyles;
          }
          const width2 = `${Math.round(size / columnValue * 1e8) / 1e6}%`;
          let more = {};
          if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
            const themeSpacing = theme.spacing(ownerState.columnSpacing);
            if (themeSpacing !== "0px") {
              const fullWidth = `calc(${width2} + ${getOffset(themeSpacing)})`;
              more = {
                flexBasis: fullWidth,
                maxWidth: fullWidth
              };
            }
          }
          styles2 = _extends$1({
            flexBasis: width2,
            flexGrow: 0,
            maxWidth: width2
          }, more);
        }
        if (theme.breakpoints.values[breakpoint] === 0) {
          Object.assign(globalStyles, styles2);
        } else {
          globalStyles[theme.breakpoints.up(breakpoint)] = styles2;
        }
        return globalStyles;
      }, {});
    }
    function generateDirection({
      theme,
      ownerState
    }) {
      const directionValues = resolveBreakpointValues({
        values: ownerState.direction,
        breakpoints: theme.breakpoints.values
      });
      return handleBreakpoints({
        theme
      }, directionValues, (propValue) => {
        const output = {
          flexDirection: propValue
        };
        if (propValue.indexOf("column") === 0) {
          output[`& > .${gridClasses.item}`] = {
            maxWidth: "none"
          };
        }
        return output;
      });
    }
    function extractZeroValueBreakpointKeys({
      breakpoints,
      values: values2
    }) {
      let nonZeroKey = "";
      Object.keys(values2).forEach((key) => {
        if (nonZeroKey !== "") {
          return;
        }
        if (values2[key] !== 0) {
          nonZeroKey = key;
        }
      });
      const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b2) => {
        return breakpoints[a] - breakpoints[b2];
      });
      return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));
    }
    function generateRowGap({
      theme,
      ownerState
    }) {
      const {
        container,
        rowSpacing
      } = ownerState;
      let styles2 = {};
      if (container && rowSpacing !== 0) {
        const rowSpacingValues = resolveBreakpointValues({
          values: rowSpacing,
          breakpoints: theme.breakpoints.values
        });
        let zeroValueBreakpointKeys;
        if (typeof rowSpacingValues === "object") {
          zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
            breakpoints: theme.breakpoints.values,
            values: rowSpacingValues
          });
        }
        styles2 = handleBreakpoints({
          theme
        }, rowSpacingValues, (propValue, breakpoint) => {
          var _zeroValueBreakpointK;
          const themeSpacing = theme.spacing(propValue);
          if (themeSpacing !== "0px") {
            return {
              marginTop: `-${getOffset(themeSpacing)}`,
              [`& > .${gridClasses.item}`]: {
                paddingTop: getOffset(themeSpacing)
              }
            };
          }
          if ((_zeroValueBreakpointK = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK.includes(breakpoint)) {
            return {};
          }
          return {
            marginTop: 0,
            [`& > .${gridClasses.item}`]: {
              paddingTop: 0
            }
          };
        });
      }
      return styles2;
    }
    function generateColumnGap({
      theme,
      ownerState
    }) {
      const {
        container,
        columnSpacing
      } = ownerState;
      let styles2 = {};
      if (container && columnSpacing !== 0) {
        const columnSpacingValues = resolveBreakpointValues({
          values: columnSpacing,
          breakpoints: theme.breakpoints.values
        });
        let zeroValueBreakpointKeys;
        if (typeof columnSpacingValues === "object") {
          zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
            breakpoints: theme.breakpoints.values,
            values: columnSpacingValues
          });
        }
        styles2 = handleBreakpoints({
          theme
        }, columnSpacingValues, (propValue, breakpoint) => {
          var _zeroValueBreakpointK2;
          const themeSpacing = theme.spacing(propValue);
          if (themeSpacing !== "0px") {
            return {
              width: `calc(100% + ${getOffset(themeSpacing)})`,
              marginLeft: `-${getOffset(themeSpacing)}`,
              [`& > .${gridClasses.item}`]: {
                paddingLeft: getOffset(themeSpacing)
              }
            };
          }
          if ((_zeroValueBreakpointK2 = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK2.includes(breakpoint)) {
            return {};
          }
          return {
            width: "100%",
            marginLeft: 0,
            [`& > .${gridClasses.item}`]: {
              paddingLeft: 0
            }
          };
        });
      }
      return styles2;
    }
    function resolveSpacingStyles(spacing, breakpoints, styles2 = {}) {
      if (!spacing || spacing <= 0) {
        return [];
      }
      if (typeof spacing === "string" && !Number.isNaN(Number(spacing)) || typeof spacing === "number") {
        return [styles2[`spacing-xs-${String(spacing)}`]];
      }
      const spacingStyles = [];
      breakpoints.forEach((breakpoint) => {
        const value2 = spacing[breakpoint];
        if (Number(value2) > 0) {
          spacingStyles.push(styles2[`spacing-${breakpoint}-${String(value2)}`]);
        }
      });
      return spacingStyles;
    }
    const GridRoot = styled$1("div", {
      name: "MuiGrid",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        const {
          container,
          direction,
          item,
          spacing,
          wrap,
          zeroMinWidth,
          breakpoints
        } = ownerState;
        let spacingStyles = [];
        if (container) {
          spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles2);
        }
        const breakpointsStyles = [];
        breakpoints.forEach((breakpoint) => {
          const value2 = ownerState[breakpoint];
          if (value2) {
            breakpointsStyles.push(styles2[`grid-${breakpoint}-${String(value2)}`]);
          }
        });
        return [styles2.root, container && styles2.container, item && styles2.item, zeroMinWidth && styles2.zeroMinWidth, ...spacingStyles, direction !== "row" && styles2[`direction-xs-${String(direction)}`], wrap !== "wrap" && styles2[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];
      }
    })(({
      ownerState
    }) => _extends$1({
      boxSizing: "border-box"
    }, ownerState.container && {
      display: "flex",
      flexWrap: "wrap",
      width: "100%"
    }, ownerState.item && {
      margin: 0
      // For instance, it's useful when used with a `figure` element.
    }, ownerState.zeroMinWidth && {
      minWidth: 0
    }, ownerState.wrap !== "wrap" && {
      flexWrap: ownerState.wrap
    }), generateDirection, generateRowGap, generateColumnGap, generateGrid);
    function resolveSpacingClasses(spacing, breakpoints) {
      if (!spacing || spacing <= 0) {
        return [];
      }
      if (typeof spacing === "string" && !Number.isNaN(Number(spacing)) || typeof spacing === "number") {
        return [`spacing-xs-${String(spacing)}`];
      }
      const classes = [];
      breakpoints.forEach((breakpoint) => {
        const value2 = spacing[breakpoint];
        if (Number(value2) > 0) {
          const className = `spacing-${breakpoint}-${String(value2)}`;
          classes.push(className);
        }
      });
      return classes;
    }
    const useUtilityClasses$N = (ownerState) => {
      const {
        classes,
        container,
        direction,
        item,
        spacing,
        wrap,
        zeroMinWidth,
        breakpoints
      } = ownerState;
      let spacingClasses = [];
      if (container) {
        spacingClasses = resolveSpacingClasses(spacing, breakpoints);
      }
      const breakpointsClasses = [];
      breakpoints.forEach((breakpoint) => {
        const value2 = ownerState[breakpoint];
        if (value2) {
          breakpointsClasses.push(`grid-${breakpoint}-${String(value2)}`);
        }
      });
      const slots = {
        root: ["root", container && "container", item && "item", zeroMinWidth && "zeroMinWidth", ...spacingClasses, direction !== "row" && `direction-xs-${String(direction)}`, wrap !== "wrap" && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]
      };
      return composeClasses(slots, getGridUtilityClass, classes);
    };
    const Grid = /* @__PURE__ */ reactExports.forwardRef(function Grid2(inProps, ref) {
      const themeProps = useThemeProps({
        props: inProps,
        name: "MuiGrid"
      });
      const {
        breakpoints
      } = useTheme();
      const props = extendSxProp(themeProps);
      const {
        className,
        columns: columnsProp,
        columnSpacing: columnSpacingProp,
        component = "div",
        container = false,
        direction = "row",
        item = false,
        rowSpacing: rowSpacingProp,
        spacing = 0,
        wrap = "wrap",
        zeroMinWidth = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$18);
      const rowSpacing = rowSpacingProp || spacing;
      const columnSpacing = columnSpacingProp || spacing;
      const columnsContext = reactExports.useContext(GridContext$1);
      const columns = container ? columnsProp || 12 : columnsContext;
      const breakpointsValues = {};
      const otherFiltered = _extends$1({}, other);
      breakpoints.keys.forEach((breakpoint) => {
        if (other[breakpoint] != null) {
          breakpointsValues[breakpoint] = other[breakpoint];
          delete otherFiltered[breakpoint];
        }
      });
      const ownerState = _extends$1({}, props, {
        columns,
        container,
        direction,
        item,
        rowSpacing,
        columnSpacing,
        wrap,
        zeroMinWidth,
        spacing
      }, breakpointsValues, {
        breakpoints: breakpoints.keys
      });
      const classes = useUtilityClasses$N(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(GridContext$1.Provider, {
        value: columns,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(GridRoot, _extends$1({
          ownerState,
          className: clsx(classes.root, className),
          as: component,
          ref
        }, otherFiltered))
      });
    });
    const Grid$1 = Grid;
    function getPickersToolbarUtilityClass(slot) {
      return generateUtilityClass("MuiPickersToolbar", slot);
    }
    const pickersToolbarClasses = generateUtilityClasses("MuiPickersToolbar", ["root", "content", "penIconButton", "penIconButtonLandscape"]);
    const useUtilityClasses$M = (ownerState) => {
      const {
        classes,
        isLandscape
      } = ownerState;
      const slots = {
        root: ["root"],
        content: ["content"],
        penIconButton: ["penIconButton", isLandscape && "penIconButtonLandscape"]
      };
      return composeClasses(slots, getPickersToolbarUtilityClass, classes);
    };
    const PickersToolbarRoot = styled$1("div", {
      name: "MuiPickersToolbar",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })(({
      theme,
      ownerState
    }) => _extends$1({
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-start",
      justifyContent: "space-between",
      padding: theme.spacing(2, 3)
    }, ownerState.isLandscape && {
      height: "auto",
      maxWidth: 160,
      padding: 16,
      justifyContent: "flex-start",
      flexWrap: "wrap"
    }));
    const PickersToolbarContent = styled$1(Grid$1, {
      name: "MuiPickersToolbar",
      slot: "Content",
      overridesResolver: (props, styles2) => styles2.content
    })(({
      ownerState
    }) => _extends$1({
      flex: 1
    }, !ownerState.isLandscape && {
      alignItems: "center"
    }));
    const PickersToolbar = /* @__PURE__ */ reactExports.forwardRef(function PickersToolbar2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersToolbar"
      });
      const {
        children,
        className,
        isLandscape,
        landscapeDirection = "column",
        toolbarTitle,
        hidden,
        titleId
      } = props;
      const ownerState = props;
      const classes = useUtilityClasses$M(ownerState);
      if (hidden) {
        return null;
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(PickersToolbarRoot, {
        ref,
        className: clsx(classes.root, className),
        ownerState,
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Typography$1, {
          color: "text.secondary",
          variant: "overline",
          id: titleId,
          children: toolbarTitle
        }), /* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarContent, {
          container: true,
          justifyContent: isLandscape ? "flex-start" : "space-between",
          className: classes.content,
          ownerState,
          direction: isLandscape ? landscapeDirection : "row",
          alignItems: isLandscape ? "flex-start" : "flex-end",
          children
        })]
      });
    });
    function getDatePickerToolbarUtilityClass(slot) {
      return generateUtilityClass("MuiDatePickerToolbar", slot);
    }
    generateUtilityClasses("MuiDatePickerToolbar", ["root", "title"]);
    const _excluded$17 = ["value", "isLandscape", "onChange", "toolbarFormat", "toolbarPlaceholder", "views"];
    const useUtilityClasses$L = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        title: ["title"]
      };
      return composeClasses(slots, getDatePickerToolbarUtilityClass, classes);
    };
    const DatePickerToolbarRoot = styled$1(PickersToolbar, {
      name: "MuiDatePickerToolbar",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })({});
    const DatePickerToolbarTitle = styled$1(Typography$1, {
      name: "MuiDatePickerToolbar",
      slot: "Title",
      overridesResolver: (_2, styles2) => styles2.title
    })(({
      ownerState
    }) => _extends$1({}, ownerState.isLandscape && {
      margin: "auto 16px auto auto"
    }));
    const DatePickerToolbar = /* @__PURE__ */ reactExports.forwardRef(function DatePickerToolbar2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDatePickerToolbar"
      });
      const {
        value: value2,
        isLandscape,
        toolbarFormat,
        toolbarPlaceholder = "––",
        views
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$17);
      const utils2 = useUtils();
      const localeText = useLocaleText();
      const classes = useUtilityClasses$L(props);
      const dateText = reactExports.useMemo(() => {
        if (!value2) {
          return toolbarPlaceholder;
        }
        if (toolbarFormat) {
          return utils2.formatByString(value2, toolbarFormat);
        }
        if (isYearOnlyView(views)) {
          return utils2.format(value2, "year");
        }
        if (isYearAndMonthViews(views)) {
          return utils2.format(value2, "month");
        }
        return /en/.test(utils2.getCurrentLocaleCode()) ? utils2.format(value2, "normalDateWithWeekday") : utils2.format(value2, "normalDate");
      }, [value2, toolbarFormat, toolbarPlaceholder, utils2, views]);
      const ownerState = props;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(DatePickerToolbarRoot, _extends$1({
        ref,
        toolbarTitle: localeText.datePickerToolbarTitle,
        isLandscape,
        className: classes.root
      }, other, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(DatePickerToolbarTitle, {
          variant: "h4",
          align: isLandscape ? "left" : "center",
          ownerState,
          className: classes.title,
          children: dateText
        })
      }));
    });
    const uncapitalizeObjectKeys = (capitalizedObject) => {
      if (capitalizedObject === void 0) {
        return void 0;
      }
      return Object.keys(capitalizedObject).reduce((acc, key) => _extends$1({}, acc, {
        [`${key.slice(0, 1).toLowerCase()}${key.slice(1)}`]: capitalizedObject[key]
      }), {});
    };
    const getDatePickerFieldFormat = (utils2, {
      format: format2,
      views
    }) => {
      if (format2 != null) {
        return format2;
      }
      if (isYearOnlyView(views)) {
        return utils2.formats.year;
      }
      if (isYearAndMonthViews(views)) {
        return utils2.formats.monthAndYear;
      }
      return void 0;
    };
    function useDatePickerDefaultizedProps(props, name) {
      var _themeProps$slots, _themeProps$disableFu, _themeProps$disablePa, _themeProps$slotProps;
      const utils2 = useUtils();
      const defaultDates = useDefaultDates();
      const themeProps = useThemeProps({
        props,
        name
      });
      const localeText = reactExports.useMemo(() => {
        var _themeProps$localeTex;
        if (((_themeProps$localeTex = themeProps.localeText) == null ? void 0 : _themeProps$localeTex.toolbarTitle) == null) {
          return themeProps.localeText;
        }
        return _extends$1({}, themeProps.localeText, {
          datePickerToolbarTitle: themeProps.localeText.toolbarTitle
        });
      }, [themeProps.localeText]);
      const slots = (_themeProps$slots = themeProps.slots) != null ? _themeProps$slots : uncapitalizeObjectKeys(themeProps.components);
      return _extends$1({}, themeProps, {
        localeText
      }, applyDefaultViewProps({
        views: themeProps.views,
        openTo: themeProps.openTo,
        defaultViews: ["year", "day"],
        defaultOpenTo: "day"
      }), {
        disableFuture: (_themeProps$disableFu = themeProps.disableFuture) != null ? _themeProps$disableFu : false,
        disablePast: (_themeProps$disablePa = themeProps.disablePast) != null ? _themeProps$disablePa : false,
        minDate: applyDefaultDate(utils2, themeProps.minDate, defaultDates.minDate),
        maxDate: applyDefaultDate(utils2, themeProps.maxDate, defaultDates.maxDate),
        slots: _extends$1({
          toolbar: DatePickerToolbar
        }, slots),
        slotProps: (_themeProps$slotProps = themeProps.slotProps) != null ? _themeProps$slotProps : themeProps.componentsProps
      });
    }
    function getIconButtonUtilityClass(slot) {
      return generateUtilityClass("MuiIconButton", slot);
    }
    const iconButtonClasses = generateUtilityClasses("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]);
    const iconButtonClasses$1 = iconButtonClasses;
    const _excluded$16 = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
    const useUtilityClasses$K = (ownerState) => {
      const {
        classes,
        disabled,
        color: color2,
        edge,
        size
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", color2 !== "default" && `color${capitalize(color2)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`]
      };
      return composeClasses(slots, getIconButtonUtilityClass, classes);
    };
    const IconButtonRoot = styled$1(ButtonBase$1, {
      name: "MuiIconButton",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`], ownerState.edge && styles2[`edge${capitalize(ownerState.edge)}`], styles2[`size${capitalize(ownerState.size)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      textAlign: "center",
      flex: "0 0 auto",
      fontSize: theme.typography.pxToRem(24),
      padding: 8,
      borderRadius: "50%",
      overflow: "visible",
      // Explicitly set the default value to solve a bug on IE11.
      color: (theme.vars || theme).palette.action.active,
      transition: theme.transitions.create("background-color", {
        duration: theme.transitions.duration.shortest
      })
    }, !ownerState.disableRipple && {
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }, ownerState.edge === "start" && {
      marginLeft: ownerState.size === "small" ? -3 : -12
    }, ownerState.edge === "end" && {
      marginRight: ownerState.size === "small" ? -3 : -12
    }), ({
      theme,
      ownerState
    }) => {
      var _palette;
      const palette = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
      return _extends$1({}, ownerState.color === "inherit" && {
        color: "inherit"
      }, ownerState.color !== "inherit" && ownerState.color !== "default" && _extends$1({
        color: palette == null ? void 0 : palette.main
      }, !ownerState.disableRipple && {
        "&:hover": _extends$1({}, palette && {
          backgroundColor: theme.vars ? `rgba(${palette.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(palette.main, theme.palette.action.hoverOpacity)
        }, {
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        })
      }), ownerState.size === "small" && {
        padding: 5,
        fontSize: theme.typography.pxToRem(18)
      }, ownerState.size === "large" && {
        padding: 12,
        fontSize: theme.typography.pxToRem(28)
      }, {
        [`&.${iconButtonClasses$1.disabled}`]: {
          backgroundColor: "transparent",
          color: (theme.vars || theme).palette.action.disabled
        }
      });
    });
    const IconButton = /* @__PURE__ */ reactExports.forwardRef(function IconButton2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiIconButton"
      });
      const {
        edge = false,
        children,
        className,
        color: color2 = "default",
        disabled = false,
        disableFocusRipple = false,
        size = "medium"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$16);
      const ownerState = _extends$1({}, props, {
        edge,
        color: color2,
        disabled,
        disableFocusRipple,
        size
      });
      const classes = useUtilityClasses$K(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(IconButtonRoot, _extends$1({
        className: clsx(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled,
        ref,
        ownerState
      }, other, {
        children
      }));
    });
    const IconButton$1 = IconButton;
    const unstable_ClassNameGenerator = {
      configure: (generator) => {
        ClassNameGenerator$1.configure(generator);
      }
    };
    const utils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      capitalize,
      createChainedFunction,
      createSvgIcon: createSvgIcon$1,
      debounce: debounce$4,
      deprecatedPropType,
      isMuiElement,
      ownerDocument,
      ownerWindow,
      requirePropFactory,
      setRef: setRef$1,
      unstable_ClassNameGenerator,
      unstable_useEnhancedEffect: useEnhancedEffect$3,
      unstable_useId: useId$2,
      unsupportedProp,
      useControlled: useControlled$2,
      useEventCallback: useEventCallback$2,
      useForkRef: useForkRef$2,
      useIsFocusVisible
    }, Symbol.toStringTag, { value: "Module" }));
    const ArrowDropDown = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
      d: "M7 10l5 5 5-5z"
    }), "ArrowDropDown");
    const ArrowLeft = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
      d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
    }), "ArrowLeft");
    const ArrowRight = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
      d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
    }), "ArrowRight");
    const Calendar = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
      d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
    }), "Calendar");
    const Clock$1 = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
        d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
      }), /* @__PURE__ */ jsxRuntimeExports.jsx("path", {
        d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
      })]
    }), "Clock");
    const DateRange = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
      d: "M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"
    }), "DateRange");
    const Time = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
        d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
      }), /* @__PURE__ */ jsxRuntimeExports.jsx("path", {
        d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
      })]
    }), "Time");
    function getPickersArrowSwitcherUtilityClass(slot) {
      return generateUtilityClass("MuiPickersArrowSwitcher", slot);
    }
    generateUtilityClasses("MuiPickersArrowSwitcher", ["root", "spacer", "button"]);
    const _excluded$15 = ["children", "className", "slots", "slotProps", "isNextDisabled", "isNextHidden", "onGoToNext", "nextLabel", "isPreviousDisabled", "isPreviousHidden", "onGoToPrevious", "previousLabel"], _excluded2$7 = ["ownerState"], _excluded3$4 = ["ownerState"];
    const PickersArrowSwitcherRoot = styled$1("div", {
      name: "MuiPickersArrowSwitcher",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      display: "flex"
    });
    const PickersArrowSwitcherSpacer = styled$1("div", {
      name: "MuiPickersArrowSwitcher",
      slot: "Spacer",
      overridesResolver: (props, styles2) => styles2.spacer
    })(({
      theme
    }) => ({
      width: theme.spacing(3)
    }));
    const PickersArrowSwitcherButton = styled$1(IconButton$1, {
      name: "MuiPickersArrowSwitcher",
      slot: "Button",
      overridesResolver: (props, styles2) => styles2.button
    })(({
      ownerState
    }) => _extends$1({}, ownerState.hidden && {
      visibility: "hidden"
    }));
    const useUtilityClasses$J = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        spacer: ["spacer"],
        button: ["button"]
      };
      return composeClasses(slots, getPickersArrowSwitcherUtilityClass, classes);
    };
    const PickersArrowSwitcher = /* @__PURE__ */ reactExports.forwardRef(function PickersArrowSwitcher2(inProps, ref) {
      var _slots$previousIconBu, _slots$nextIconButton, _slots$leftArrowIcon, _slots$rightArrowIcon;
      const theme = useTheme();
      const isRTL = theme.direction === "rtl";
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersArrowSwitcher"
      });
      const {
        children,
        className,
        slots,
        slotProps,
        isNextDisabled,
        isNextHidden,
        onGoToNext,
        nextLabel,
        isPreviousDisabled,
        isPreviousHidden,
        onGoToPrevious,
        previousLabel
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$15);
      const ownerState = props;
      const classes = useUtilityClasses$J(ownerState);
      const nextProps = {
        isDisabled: isNextDisabled,
        isHidden: isNextHidden,
        goTo: onGoToNext,
        label: nextLabel
      };
      const previousProps = {
        isDisabled: isPreviousDisabled,
        isHidden: isPreviousHidden,
        goTo: onGoToPrevious,
        label: previousLabel
      };
      const [leftProps, rightProps] = isRTL ? [nextProps, previousProps] : [previousProps, nextProps];
      const PreviousIconButton = (_slots$previousIconBu = slots == null ? void 0 : slots.previousIconButton) != null ? _slots$previousIconBu : PickersArrowSwitcherButton;
      const previousIconButtonProps = useSlotProps({
        elementType: PreviousIconButton,
        externalSlotProps: slotProps == null ? void 0 : slotProps.previousIconButton,
        additionalProps: {
          size: "medium",
          title: leftProps.label,
          "aria-label": leftProps.label,
          disabled: leftProps.isDisabled,
          edge: "end",
          onClick: leftProps.goTo
        },
        ownerState: _extends$1({}, ownerState, {
          hidden: leftProps.isHidden
        }),
        className: classes.button
      });
      const NextIconButton = (_slots$nextIconButton = slots == null ? void 0 : slots.nextIconButton) != null ? _slots$nextIconButton : PickersArrowSwitcherButton;
      const nextIconButtonProps = useSlotProps({
        elementType: NextIconButton,
        externalSlotProps: slotProps == null ? void 0 : slotProps.nextIconButton,
        additionalProps: {
          size: "medium",
          title: rightProps.label,
          "aria-label": rightProps.label,
          disabled: rightProps.isDisabled,
          edge: "start",
          onClick: rightProps.goTo
        },
        ownerState: _extends$1({}, ownerState, {
          hidden: rightProps.isHidden
        }),
        className: classes.button
      });
      const LeftArrowIcon = (_slots$leftArrowIcon = slots == null ? void 0 : slots.leftArrowIcon) != null ? _slots$leftArrowIcon : ArrowLeft;
      const _useSlotProps = useSlotProps({
        elementType: LeftArrowIcon,
        externalSlotProps: slotProps == null ? void 0 : slotProps.leftArrowIcon,
        additionalProps: {
          fontSize: "inherit"
        },
        ownerState: void 0
      }), leftArrowIconProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2$7);
      const RightArrowIcon = (_slots$rightArrowIcon = slots == null ? void 0 : slots.rightArrowIcon) != null ? _slots$rightArrowIcon : ArrowRight;
      const _useSlotProps2 = useSlotProps({
        elementType: RightArrowIcon,
        externalSlotProps: slotProps == null ? void 0 : slotProps.rightArrowIcon,
        additionalProps: {
          fontSize: "inherit"
        },
        ownerState: void 0
      }), rightArrowIconProps = _objectWithoutPropertiesLoose(_useSlotProps2, _excluded3$4);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(PickersArrowSwitcherRoot, _extends$1({
        ref,
        className: clsx(classes.root, className),
        ownerState
      }, other, {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(PreviousIconButton, _extends$1({}, previousIconButtonProps, {
          children: isRTL ? /* @__PURE__ */ jsxRuntimeExports.jsx(RightArrowIcon, _extends$1({}, rightArrowIconProps)) : /* @__PURE__ */ jsxRuntimeExports.jsx(LeftArrowIcon, _extends$1({}, leftArrowIconProps))
        })), children ? /* @__PURE__ */ jsxRuntimeExports.jsx(Typography$1, {
          variant: "subtitle1",
          component: "span",
          children
        }) : /* @__PURE__ */ jsxRuntimeExports.jsx(PickersArrowSwitcherSpacer, {
          className: classes.spacer,
          ownerState
        }), /* @__PURE__ */ jsxRuntimeExports.jsx(NextIconButton, _extends$1({}, nextIconButtonProps, {
          children: isRTL ? /* @__PURE__ */ jsxRuntimeExports.jsx(LeftArrowIcon, _extends$1({}, leftArrowIconProps)) : /* @__PURE__ */ jsxRuntimeExports.jsx(RightArrowIcon, _extends$1({}, rightArrowIconProps))
        }))]
      }));
    });
    const DAY_SIZE = 36;
    const DAY_MARGIN = 2;
    const DIALOG_WIDTH = 320;
    const VIEW_HEIGHT = 358;
    const DIGITAL_CLOCK_VIEW_HEIGHT = 232;
    const PickersModalDialogRoot = styled$1(MuiDialog)({
      [`& .${dialogClasses$1.container}`]: {
        outline: 0
      },
      [`& .${dialogClasses$1.paper}`]: {
        outline: 0,
        minWidth: DIALOG_WIDTH
      }
    });
    const PickersModalDialogContent = styled$1(DialogContent$1)({
      "&:first-of-type": {
        padding: 0
      }
    });
    function PickersModalDialog(props) {
      var _slots$dialog, _slots$mobileTransiti;
      const {
        children,
        onDismiss,
        open,
        slots,
        slotProps
      } = props;
      const Dialog2 = (_slots$dialog = slots == null ? void 0 : slots.dialog) != null ? _slots$dialog : PickersModalDialogRoot;
      const Transition2 = (_slots$mobileTransiti = slots == null ? void 0 : slots.mobileTransition) != null ? _slots$mobileTransiti : Fade$1;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Dialog2, _extends$1({
        open,
        onClose: onDismiss
      }, slotProps == null ? void 0 : slotProps.dialog, {
        TransitionComponent: Transition2,
        TransitionProps: slotProps == null ? void 0 : slotProps.mobileTransition,
        PaperComponent: slots == null ? void 0 : slots.mobilePaper,
        PaperProps: slotProps == null ? void 0 : slotProps.mobilePaper,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(PickersModalDialogContent, {
          children
        })
      }));
    }
    const _excluded$14 = ["anchorEl", "component", "components", "componentsProps", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "transition", "slots", "slotProps"];
    const PopperRoot = styled$1(BasePopper, {
      name: "MuiPopper",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({});
    const Popper = /* @__PURE__ */ reactExports.forwardRef(function Popper2(inProps, ref) {
      var _slots$root;
      const theme = useTheme$3();
      const props = useThemeProps({
        props: inProps,
        name: "MuiPopper"
      });
      const {
        anchorEl,
        component,
        components,
        componentsProps,
        container,
        disablePortal,
        keepMounted,
        modifiers,
        open,
        placement,
        popperOptions,
        popperRef,
        transition,
        slots,
        slotProps
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$14);
      const RootComponent = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components == null ? void 0 : components.Root;
      const otherProps = _extends$1({
        anchorEl,
        container,
        disablePortal,
        keepMounted,
        modifiers,
        open,
        placement,
        popperOptions,
        popperRef,
        transition
      }, other);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PopperRoot, _extends$1({
        as: component,
        direction: theme == null ? void 0 : theme.direction,
        slots: {
          root: RootComponent
        },
        slotProps: slotProps != null ? slotProps : componentsProps
      }, otherProps, {
        ref
      }));
    });
    const Popper$1 = Popper;
    function getPickersPopperUtilityClass(slot) {
      return generateUtilityClass("MuiPickersPopper", slot);
    }
    generateUtilityClasses("MuiPickersPopper", ["root", "paper"]);
    function arrayIncludes(array, itemOrItems) {
      if (Array.isArray(itemOrItems)) {
        return itemOrItems.every((item) => array.indexOf(item) !== -1);
      }
      return array.indexOf(itemOrItems) !== -1;
    }
    const onSpaceOrEnter = (innerFn, externalEvent) => (event) => {
      if (event.key === "Enter" || event.key === " ") {
        innerFn(event);
        event.preventDefault();
        event.stopPropagation();
      }
      if (externalEvent) {
        externalEvent(event);
      }
    };
    const getActiveElement = (root2 = document) => {
      const activeEl = root2.activeElement;
      if (!activeEl) {
        return null;
      }
      if (activeEl.shadowRoot) {
        return getActiveElement(activeEl.shadowRoot);
      }
      return activeEl;
    };
    const DEFAULT_DESKTOP_MODE_MEDIA_QUERY = "@media (pointer: fine)";
    const useUtilityClasses$I = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        paper: ["paper"]
      };
      return composeClasses(slots, getPickersPopperUtilityClass, classes);
    };
    const PickersPopperRoot = styled$1(Popper$1, {
      name: "MuiPickersPopper",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })(({
      theme
    }) => ({
      zIndex: theme.zIndex.modal
    }));
    const PickersPopperPaper = styled$1(Paper$1, {
      name: "MuiPickersPopper",
      slot: "Paper",
      overridesResolver: (_2, styles2) => styles2.paper
    })(({
      ownerState
    }) => _extends$1({
      transformOrigin: "top center",
      outline: 0
    }, ownerState.placement === "top" && {
      transformOrigin: "bottom center"
    }));
    function clickedRootScrollbar(event, doc) {
      return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
    }
    function useClickAwayListener(active, onClickAway) {
      const movedRef = reactExports.useRef(false);
      const syntheticEventRef = reactExports.useRef(false);
      const nodeRef = reactExports.useRef(null);
      const activatedRef = reactExports.useRef(false);
      reactExports.useEffect(() => {
        if (!active) {
          return void 0;
        }
        function armClickAwayListener() {
          activatedRef.current = true;
        }
        document.addEventListener("mousedown", armClickAwayListener, true);
        document.addEventListener("touchstart", armClickAwayListener, true);
        return () => {
          document.removeEventListener("mousedown", armClickAwayListener, true);
          document.removeEventListener("touchstart", armClickAwayListener, true);
          activatedRef.current = false;
        };
      }, [active]);
      const handleClickAway = useEventCallback$2((event) => {
        if (!activatedRef.current) {
          return;
        }
        const insideReactTree = syntheticEventRef.current;
        syntheticEventRef.current = false;
        const doc = ownerDocument(nodeRef.current);
        if (!nodeRef.current || // is a TouchEvent?
        "clientX" in event && clickedRootScrollbar(event, doc)) {
          return;
        }
        if (movedRef.current) {
          movedRef.current = false;
          return;
        }
        let insideDOM;
        if (event.composedPath) {
          insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
        } else {
          insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
        }
        if (!insideDOM && !insideReactTree) {
          onClickAway(event);
        }
      });
      const handleSynthetic = () => {
        syntheticEventRef.current = true;
      };
      reactExports.useEffect(() => {
        if (active) {
          const doc = ownerDocument(nodeRef.current);
          const handleTouchMove = () => {
            movedRef.current = true;
          };
          doc.addEventListener("touchstart", handleClickAway);
          doc.addEventListener("touchmove", handleTouchMove);
          return () => {
            doc.removeEventListener("touchstart", handleClickAway);
            doc.removeEventListener("touchmove", handleTouchMove);
          };
        }
        return void 0;
      }, [active, handleClickAway]);
      reactExports.useEffect(() => {
        if (active) {
          const doc = ownerDocument(nodeRef.current);
          doc.addEventListener("click", handleClickAway);
          return () => {
            doc.removeEventListener("click", handleClickAway);
            syntheticEventRef.current = false;
          };
        }
        return void 0;
      }, [active, handleClickAway]);
      return [nodeRef, handleSynthetic, handleSynthetic];
    }
    function PickersPopper(inProps) {
      var _slots$desktopTransit, _slots$desktopTrapFoc, _slots$desktopPaper, _slots$popper;
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersPopper"
      });
      const {
        anchorEl,
        children,
        containerRef = null,
        shouldRestoreFocus,
        onBlur,
        onDismiss,
        open,
        role,
        placement,
        slots,
        slotProps
      } = props;
      reactExports.useEffect(() => {
        function handleKeyDown3(nativeEvent) {
          if (open && (nativeEvent.key === "Escape" || nativeEvent.key === "Esc")) {
            onDismiss();
          }
        }
        document.addEventListener("keydown", handleKeyDown3);
        return () => {
          document.removeEventListener("keydown", handleKeyDown3);
        };
      }, [onDismiss, open]);
      const lastFocusedElementRef = reactExports.useRef(null);
      reactExports.useEffect(() => {
        if (role === "tooltip" || shouldRestoreFocus && !shouldRestoreFocus()) {
          return;
        }
        if (open) {
          lastFocusedElementRef.current = getActiveElement(document);
        } else if (lastFocusedElementRef.current && lastFocusedElementRef.current instanceof HTMLElement) {
          setTimeout(() => {
            if (lastFocusedElementRef.current instanceof HTMLElement) {
              lastFocusedElementRef.current.focus();
            }
          });
        }
      }, [open, role, shouldRestoreFocus]);
      const [clickAwayRef, onPaperClick, onPaperTouchStart] = useClickAwayListener(open, onBlur != null ? onBlur : onDismiss);
      const paperRef = reactExports.useRef(null);
      const handleRef = useForkRef$2(paperRef, containerRef);
      const handlePaperRef = useForkRef$2(handleRef, clickAwayRef);
      const ownerState = props;
      const classes = useUtilityClasses$I(ownerState);
      const handleKeyDown2 = (event) => {
        if (event.key === "Escape") {
          event.stopPropagation();
          onDismiss();
        }
      };
      const Transition2 = (_slots$desktopTransit = slots == null ? void 0 : slots.desktopTransition) != null ? _slots$desktopTransit : Grow$1;
      const TrapFocus = (_slots$desktopTrapFoc = slots == null ? void 0 : slots.desktopTrapFocus) != null ? _slots$desktopTrapFoc : FocusTrap;
      const Paper2 = (_slots$desktopPaper = slots == null ? void 0 : slots.desktopPaper) != null ? _slots$desktopPaper : PickersPopperPaper;
      const paperProps = useSlotProps({
        elementType: Paper2,
        externalSlotProps: slotProps == null ? void 0 : slotProps.desktopPaper,
        additionalProps: {
          tabIndex: -1,
          elevation: 8,
          ref: handlePaperRef
        },
        className: classes.paper,
        ownerState: {}
        // Is overridden below to use `placement
      });
      const Popper2 = (_slots$popper = slots == null ? void 0 : slots.popper) != null ? _slots$popper : PickersPopperRoot;
      const popperProps = useSlotProps({
        elementType: Popper2,
        externalSlotProps: slotProps == null ? void 0 : slotProps.popper,
        additionalProps: {
          transition: true,
          role,
          open,
          anchorEl,
          placement,
          onKeyDown: handleKeyDown2
        },
        className: classes.root,
        ownerState: props
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Popper2, _extends$1({}, popperProps, {
        children: ({
          TransitionProps,
          placement: popperPlacement
        }) => /* @__PURE__ */ jsxRuntimeExports.jsx(TrapFocus, _extends$1({
          open,
          disableAutoFocus: true,
          disableRestoreFocus: true,
          disableEnforceFocus: role === "tooltip",
          isEnabled: () => true
        }, slotProps == null ? void 0 : slotProps.desktopTrapFocus, {
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Transition2, _extends$1({}, TransitionProps, slotProps == null ? void 0 : slotProps.desktopTransition, {
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Paper2, _extends$1({}, paperProps, {
              onClick: (event) => {
                var _paperProps$onClick;
                onPaperClick(event);
                (_paperProps$onClick = paperProps.onClick) == null ? void 0 : _paperProps$onClick.call(paperProps, event);
              },
              onTouchStart: (event) => {
                var _paperProps$onTouchSt;
                onPaperTouchStart(event);
                (_paperProps$onTouchSt = paperProps.onTouchStart) == null ? void 0 : _paperProps$onTouchSt.call(paperProps, event);
              },
              ownerState: _extends$1({}, ownerState, {
                placement: popperPlacement
              }),
              children
            }))
          }))
        }))
      }));
    }
    function getPickersToolbarTextUtilityClass(slot) {
      return generateUtilityClass("MuiPickersToolbarText", slot);
    }
    const pickersToolbarTextClasses = generateUtilityClasses("MuiPickersToolbarText", ["root", "selected"]);
    const _excluded$13 = ["className", "selected", "value"];
    const useUtilityClasses$H = (ownerState) => {
      const {
        classes,
        selected
      } = ownerState;
      const slots = {
        root: ["root", selected && "selected"]
      };
      return composeClasses(slots, getPickersToolbarTextUtilityClass, classes);
    };
    const PickersToolbarTextRoot = styled$1(Typography$1, {
      name: "MuiPickersToolbarText",
      slot: "Root",
      overridesResolver: (_2, styles2) => [styles2.root, {
        [`&.${pickersToolbarTextClasses.selected}`]: styles2.selected
      }]
    })(({
      theme
    }) => ({
      transition: theme.transitions.create("color"),
      color: (theme.vars || theme).palette.text.secondary,
      [`&.${pickersToolbarTextClasses.selected}`]: {
        color: (theme.vars || theme).palette.text.primary
      }
    }));
    const PickersToolbarText = /* @__PURE__ */ reactExports.forwardRef(function PickersToolbarText2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersToolbarText"
      });
      const {
        className,
        value: value2
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$13);
      const classes = useUtilityClasses$H(props);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarTextRoot, _extends$1({
        ref,
        className: clsx(className, classes.root),
        component: "span"
      }, other, {
        children: value2
      }));
    });
    const _excluded$12 = ["align", "className", "selected", "typographyClassName", "value", "variant"];
    const useUtilityClasses$G = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getPickersToolbarUtilityClass, classes);
    };
    const PickersToolbarButtonRoot = styled$1(Button$1, {
      name: "MuiPickersToolbarButton",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })({
      padding: 0,
      minWidth: 16,
      textTransform: "none"
    });
    const PickersToolbarButton = /* @__PURE__ */ reactExports.forwardRef(function PickersToolbarButton2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersToolbarButton"
      });
      const {
        align,
        className,
        selected,
        typographyClassName,
        value: value2,
        variant
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$12);
      const classes = useUtilityClasses$G(props);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarButtonRoot, _extends$1({
        variant: "text",
        ref,
        className: clsx(className, classes.root)
      }, other, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarText, {
          align,
          className: typographyClassName,
          variant,
          value: value2,
          selected
        })
      }));
    });
    var useEnhancedEffect$1 = {};
    var hasRequiredUseEnhancedEffect;
    function requireUseEnhancedEffect() {
      if (hasRequiredUseEnhancedEffect)
        return useEnhancedEffect$1;
      hasRequiredUseEnhancedEffect = 1;
      Object.defineProperty(useEnhancedEffect$1, "__esModule", {
        value: true
      });
      useEnhancedEffect$1.default = void 0;
      var React2 = _interopRequireWildcard2(reactExports);
      function _getRequireWildcardCache2(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache2 = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard2(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache2(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      const useEnhancedEffect2 = typeof window !== "undefined" ? React2.useLayoutEffect : React2.useEffect;
      var _default2 = useEnhancedEffect2;
      useEnhancedEffect$1.default = _default2;
      return useEnhancedEffect$1;
    }
    var useEnhancedEffectExports = requireUseEnhancedEffect();
    const useEnhancedEffect = /* @__PURE__ */ getDefaultExportFromCjs(useEnhancedEffectExports);
    var useEventCallback$1 = {};
    var interopRequireDefault = { exports: {} };
    (function(module2) {
      function _interopRequireDefault2(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      module2.exports = _interopRequireDefault2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    })(interopRequireDefault);
    var interopRequireDefaultExports = interopRequireDefault.exports;
    var _interopRequireDefault$8 = interopRequireDefaultExports;
    Object.defineProperty(useEventCallback$1, "__esModule", {
      value: true
    });
    var _default$a = useEventCallback$1.default = useEventCallback;
    var React$3 = _interopRequireWildcard$3(reactExports);
    var _useEnhancedEffect = _interopRequireDefault$8(requireUseEnhancedEffect());
    function _getRequireWildcardCache$3(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache$3 = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard$3(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache$3(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function useEventCallback(fn) {
      const ref = React$3.useRef(fn);
      (0, _useEnhancedEffect.default)(() => {
        ref.current = fn;
      });
      return React$3.useCallback((...args) => (
        // @ts-expect-error hide `this`
        // tslint:disable-next-line:ban-comma-operator
        (0, ref.current)(...args)
      ), []);
    }
    var useForkRef$1 = {};
    var setRef = {};
    var hasRequiredSetRef;
    function requireSetRef() {
      if (hasRequiredSetRef)
        return setRef;
      hasRequiredSetRef = 1;
      Object.defineProperty(setRef, "__esModule", {
        value: true
      });
      setRef.default = setRef$12;
      function setRef$12(ref, value2) {
        if (typeof ref === "function") {
          ref(value2);
        } else if (ref) {
          ref.current = value2;
        }
      }
      return setRef;
    }
    var _interopRequireDefault$7 = interopRequireDefaultExports;
    Object.defineProperty(useForkRef$1, "__esModule", {
      value: true
    });
    var _default$9 = useForkRef$1.default = useForkRef;
    var React$2 = _interopRequireWildcard$2(reactExports);
    var _setRef = _interopRequireDefault$7(requireSetRef());
    function _getRequireWildcardCache$2(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache$2 = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard$2(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache$2(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function useForkRef(...refs) {
      return React$2.useMemo(() => {
        if (refs.every((ref) => ref == null)) {
          return null;
        }
        return (instance) => {
          refs.forEach((ref) => {
            (0, _setRef.default)(ref, instance);
          });
        };
      }, refs);
    }
    function useValidation(props, validate, isSameError, defaultErrorState) {
      const {
        value: value2,
        onError
      } = props;
      const adapter = useLocalizationContext();
      const previousValidationErrorRef = reactExports.useRef(defaultErrorState);
      const validationError = validate({
        adapter,
        value: value2,
        props
      });
      reactExports.useEffect(() => {
        if (onError && !isSameError(validationError, previousValidationErrorRef.current)) {
          onError(validationError, value2);
        }
        previousValidationErrorRef.current = validationError;
      }, [isSameError, onError, previousValidationErrorRef, validationError, value2]);
      return validationError;
    }
    var useControlled$1 = {};
    Object.defineProperty(useControlled$1, "__esModule", {
      value: true
    });
    var _default$8 = useControlled$1.default = useControlled;
    var React$1 = _interopRequireWildcard$1(reactExports);
    function _getRequireWildcardCache$1(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache$1 = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard$1(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache$1(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function useControlled({
      controlled,
      default: defaultProp,
      name,
      state = "value"
    }) {
      const {
        current: isControlled
      } = React$1.useRef(controlled !== void 0);
      const [valueState, setValue2] = React$1.useState(defaultProp);
      const value2 = isControlled ? controlled : valueState;
      const setValueIfUncontrolled = React$1.useCallback((newValue) => {
        if (!isControlled) {
          setValue2(newValue);
        }
      }, []);
      return [value2, setValueIfUncontrolled];
    }
    const useFieldState = (params) => {
      var _ref;
      const utils2 = useUtils();
      const localeText = useLocaleText();
      const adapter = useLocalizationContext();
      const theme = useTheme();
      const isRTL = theme.direction === "rtl";
      const {
        valueManager,
        fieldValueManager,
        valueType,
        validator,
        internalProps,
        internalProps: {
          value: valueProp,
          defaultValue: defaultValue2,
          onChange,
          format: format2,
          formatDensity = "dense",
          selectedSections: selectedSectionsProp,
          onSelectedSectionsChange,
          shouldRespectLeadingZeros = false
        }
      } = params;
      const firstDefaultValue = reactExports.useRef(defaultValue2);
      const valueFromTheOutside = (_ref = valueProp != null ? valueProp : firstDefaultValue.current) != null ? _ref : valueManager.emptyValue;
      const sectionsValueBoundaries = reactExports.useMemo(() => getSectionsBoundaries(utils2), [utils2]);
      const getSectionsFromValue = reactExports.useCallback((value2, fallbackSections = null) => fieldValueManager.getSectionsFromValue(utils2, value2, fallbackSections, isRTL, (date) => splitFormatIntoSections(utils2, localeText, format2, date, formatDensity, shouldRespectLeadingZeros, isRTL)), [fieldValueManager, format2, localeText, isRTL, shouldRespectLeadingZeros, utils2, formatDensity]);
      const placeholder = reactExports.useMemo(() => fieldValueManager.getValueStrFromSections(getSectionsFromValue(valueManager.emptyValue), isRTL), [fieldValueManager, getSectionsFromValue, valueManager.emptyValue, isRTL]);
      const [state, setState] = reactExports.useState(() => {
        const sections = getSectionsFromValue(valueFromTheOutside);
        return {
          sections,
          value: valueFromTheOutside,
          referenceValue: fieldValueManager.updateReferenceValue(utils2, valueFromTheOutside, valueManager.getTodayValue(utils2, valueType)),
          tempValueStrAndroid: null
        };
      });
      const [selectedSections, innerSetSelectedSections] = _default$8({
        controlled: selectedSectionsProp,
        default: null,
        name: "useField",
        state: "selectedSectionIndexes"
      });
      const setSelectedSections = (newSelectedSections) => {
        innerSetSelectedSections(newSelectedSections);
        onSelectedSectionsChange == null ? void 0 : onSelectedSectionsChange(newSelectedSections);
        setState((prevState) => _extends$1({}, prevState, {
          selectedSectionQuery: null
        }));
      };
      const selectedSectionIndexes = reactExports.useMemo(() => {
        if (selectedSections == null) {
          return null;
        }
        if (selectedSections === "all") {
          return {
            startIndex: 0,
            endIndex: state.sections.length - 1,
            shouldSelectBoundarySelectors: true
          };
        }
        if (typeof selectedSections === "number") {
          return {
            startIndex: selectedSections,
            endIndex: selectedSections
          };
        }
        if (typeof selectedSections === "string") {
          const selectedSectionIndex = state.sections.findIndex((section) => section.type === selectedSections);
          return {
            startIndex: selectedSectionIndex,
            endIndex: selectedSectionIndex
          };
        }
        return selectedSections;
      }, [selectedSections, state.sections]);
      const publishValue = ({
        value: value2,
        referenceValue,
        sections
      }) => {
        setState((prevState) => _extends$1({}, prevState, {
          sections,
          value: value2,
          referenceValue,
          tempValueStrAndroid: null
        }));
        if (onChange) {
          const context2 = {
            validationError: validator({
              adapter,
              value: value2,
              props: _extends$1({}, internalProps, {
                value: value2
              })
            })
          };
          onChange(value2, context2);
        }
      };
      const setSectionValue = (sectionIndex, newSectionValue) => {
        const newSections = [...state.sections];
        newSections[sectionIndex] = _extends$1({}, newSections[sectionIndex], {
          value: newSectionValue,
          modified: true
        });
        return addPositionPropertiesToSections(newSections, isRTL);
      };
      const clearValue = () => {
        if (valueManager.areValuesEqual(utils2, state.value, valueManager.emptyValue)) {
          return;
        }
        publishValue({
          value: valueManager.emptyValue,
          referenceValue: state.referenceValue,
          sections: getSectionsFromValue(valueManager.emptyValue)
        });
      };
      const clearActiveSection = () => {
        if (selectedSectionIndexes == null) {
          return;
        }
        const activeSection = state.sections[selectedSectionIndexes.startIndex];
        if (activeSection.value === "") {
          return;
        }
        const activeDateManager = fieldValueManager.getActiveDateManager(utils2, state, activeSection);
        const nonEmptySectionCountBefore = activeDateManager.getSections(state.sections).filter((section) => section.value !== "").length;
        const isTheOnlyNonEmptySection = nonEmptySectionCountBefore === 1;
        const newSections = setSectionValue(selectedSectionIndexes.startIndex, "");
        const newActiveDate = isTheOnlyNonEmptySection ? null : utils2.date(/* @__PURE__ */ new Date(""));
        const newValues = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);
        if ((newActiveDate != null && !utils2.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils2.isValid(activeDateManager.date))) {
          publishValue(_extends$1({}, newValues, {
            sections: newSections
          }));
        } else {
          setState((prevState) => _extends$1({}, prevState, newValues, {
            sections: newSections,
            tempValueStrAndroid: null
          }));
        }
      };
      const updateValueFromValueStr = (valueStr) => {
        const parseDateStr = (dateStr, referenceDate) => {
          const date = utils2.parse(dateStr, format2);
          if (date == null || !utils2.isValid(date)) {
            return null;
          }
          const sections = splitFormatIntoSections(utils2, localeText, format2, date, formatDensity, shouldRespectLeadingZeros, isRTL);
          return mergeDateIntoReferenceDate(utils2, date, sections, referenceDate, false);
        };
        const newValue = fieldValueManager.parseValueStr(valueStr, state.referenceValue, parseDateStr);
        const newReferenceValue = fieldValueManager.updateReferenceValue(utils2, newValue, state.referenceValue);
        publishValue({
          value: newValue,
          referenceValue: newReferenceValue,
          sections: getSectionsFromValue(newValue, state.sections)
        });
      };
      const updateSectionValue = ({
        activeSection,
        newSectionValue,
        shouldGoToNextSection
      }) => {
        if (shouldGoToNextSection && selectedSectionIndexes && selectedSectionIndexes.startIndex < state.sections.length - 1) {
          setSelectedSections(selectedSectionIndexes.startIndex + 1);
        } else if (selectedSectionIndexes && selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
          setSelectedSections(selectedSectionIndexes.startIndex);
        }
        const activeDateManager = fieldValueManager.getActiveDateManager(utils2, state, activeSection);
        const newSections = setSectionValue(selectedSectionIndexes.startIndex, newSectionValue);
        const newActiveDateSections = activeDateManager.getSections(newSections);
        let newActiveDate = getDateFromDateSections(utils2, newActiveDateSections);
        let shouldRegenSections = false;
        if (!utils2.isValid(newActiveDate)) {
          const clampedSections = clampDaySectionIfPossible(utils2, newActiveDateSections, sectionsValueBoundaries);
          if (clampedSections != null) {
            shouldRegenSections = true;
            newActiveDate = getDateFromDateSections(utils2, clampedSections);
          }
        }
        let values2;
        let shouldPublish;
        if (newActiveDate != null && utils2.isValid(newActiveDate)) {
          const mergedDate = mergeDateIntoReferenceDate(utils2, newActiveDate, newActiveDateSections, activeDateManager.referenceDate, true);
          values2 = activeDateManager.getNewValuesFromNewActiveDate(mergedDate);
          shouldPublish = true;
        } else {
          values2 = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);
          shouldPublish = (newActiveDate != null && !utils2.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils2.isValid(activeDateManager.date));
        }
        const sections = shouldRegenSections ? getSectionsFromValue(values2.value, state.sections) : newSections;
        if (shouldPublish) {
          return publishValue(_extends$1({}, values2, {
            sections
          }));
        }
        return setState((prevState) => _extends$1({}, prevState, values2, {
          sections,
          tempValueStrAndroid: null
        }));
      };
      const setTempAndroidValueStr = (tempValueStrAndroid) => setState((prev2) => _extends$1({}, prev2, {
        tempValueStrAndroid
      }));
      reactExports.useEffect(() => {
        if (!valueManager.areValuesEqual(utils2, state.value, valueFromTheOutside)) {
          setState((prevState) => _extends$1({}, prevState, {
            value: valueFromTheOutside,
            referenceValue: fieldValueManager.updateReferenceValue(utils2, valueFromTheOutside, prevState.referenceValue),
            sections: getSectionsFromValue(valueFromTheOutside)
          }));
        }
      }, [valueFromTheOutside]);
      reactExports.useEffect(() => {
        const sections = getSectionsFromValue(state.value);
        setState((prevState) => _extends$1({}, prevState, {
          sections
        }));
      }, [format2, utils2.locale]);
      return {
        state,
        selectedSectionIndexes,
        setSelectedSections,
        clearValue,
        clearActiveSection,
        updateSectionValue,
        updateValueFromValueStr,
        setTempAndroidValueStr,
        sectionsValueBoundaries,
        placeholder
      };
    };
    const QUERY_LIFE_DURATION_MS = 5e3;
    const isQueryResponseWithoutValue = (response) => response.saveQuery != null;
    const useFieldCharacterEditing = ({
      sections,
      updateSectionValue,
      sectionsValueBoundaries,
      setTempAndroidValueStr
    }) => {
      const utils2 = useUtils();
      const [query, setQuery] = reactExports.useState(null);
      const resetQuery = _default$a(() => setQuery(null));
      reactExports.useEffect(() => {
        var _sections$query$secti;
        if (query != null && ((_sections$query$secti = sections[query.sectionIndex]) == null ? void 0 : _sections$query$secti.type) !== query.sectionType) {
          resetQuery();
        }
      }, [sections, query, resetQuery]);
      reactExports.useEffect(() => {
        if (query != null) {
          const timeout = setTimeout(() => resetQuery(), QUERY_LIFE_DURATION_MS);
          return () => {
            window.clearTimeout(timeout);
          };
        }
        return () => {
        };
      }, [query, resetQuery]);
      const applyQuery = ({
        keyPressed,
        sectionIndex
      }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {
        const cleanKeyPressed = keyPressed.toLowerCase();
        const activeSection = sections[sectionIndex];
        if (query != null && (!isValidQueryValue || isValidQueryValue(query.value)) && query.sectionIndex === sectionIndex) {
          const concatenatedQueryValue = `${query.value}${cleanKeyPressed}`;
          const queryResponse2 = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);
          if (!isQueryResponseWithoutValue(queryResponse2)) {
            setQuery({
              sectionIndex,
              value: concatenatedQueryValue,
              sectionType: activeSection.type
            });
            return queryResponse2;
          }
        }
        const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);
        if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {
          resetQuery();
          return null;
        }
        setQuery({
          sectionIndex,
          value: cleanKeyPressed,
          sectionType: activeSection.type
        });
        if (isQueryResponseWithoutValue(queryResponse)) {
          return null;
        }
        return queryResponse;
      };
      const applyLetterEditing = (params) => {
        const findMatchingOptions = (format2, options, queryValue) => {
          const matchingValues = options.filter((option) => option.toLowerCase().startsWith(queryValue));
          if (matchingValues.length === 0) {
            return {
              saveQuery: false
            };
          }
          return {
            sectionValue: matchingValues[0],
            shouldGoToNextSection: matchingValues.length === 1
          };
        };
        const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {
          const getOptions = (format2) => getLetterEditingOptions(utils2, activeSection.type, format2);
          if (activeSection.contentType === "letter") {
            return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);
          }
          if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils2, fallbackFormat).contentType === "letter") {
            const fallbackOptions = getOptions(fallbackFormat);
            const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);
            if (isQueryResponseWithoutValue(response)) {
              return {
                saveQuery: false
              };
            }
            return _extends$1({}, response, {
              sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)
            });
          }
          return {
            saveQuery: false
          };
        };
        const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {
          switch (activeSection.type) {
            case "month": {
              const formatFallbackValue = (fallbackValue) => changeSectionValueFormat(utils2, fallbackValue, utils2.formats.month, activeSection.format);
              return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils2.formats.month, formatFallbackValue);
            }
            case "weekDay": {
              const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();
              return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils2.formats.weekday, formatFallbackValue);
            }
            case "meridiem": {
              return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);
            }
            default: {
              return {
                saveQuery: false
              };
            }
          }
        };
        return applyQuery(params, getFirstSectionValueMatchingWithQuery);
      };
      const applyNumericEditing = (params) => {
        const getNewSectionValue = (queryValue, section) => {
          const queryValueNumber = Number(`${queryValue}`);
          const sectionBoundaries = sectionsValueBoundaries[section.type]({
            currentDate: null,
            format: section.format,
            contentType: section.contentType
          });
          if (queryValueNumber > sectionBoundaries.maximum) {
            return {
              saveQuery: false
            };
          }
          if (queryValueNumber < sectionBoundaries.minimum) {
            return {
              saveQuery: true
            };
          }
          const shouldGoToNextSection = Number(`${queryValue}0`) > sectionBoundaries.maximum || queryValue.length === sectionBoundaries.maximum.toString().length;
          const newSectionValue = cleanDigitSectionValue(utils2, queryValueNumber, sectionBoundaries, section);
          return {
            sectionValue: newSectionValue,
            shouldGoToNextSection
          };
        };
        const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {
          if (activeSection.contentType === "digit" || activeSection.contentType === "digit-with-letter") {
            return getNewSectionValue(queryValue, activeSection);
          }
          if (activeSection.type === "month") {
            const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils2, "digit", "month", "MM");
            const response = getNewSectionValue(queryValue, {
              type: activeSection.type,
              format: "MM",
              hasLeadingZerosInFormat,
              hasLeadingZerosInInput: true,
              contentType: "digit",
              maxLength: 2
            });
            if (isQueryResponseWithoutValue(response)) {
              return response;
            }
            const formattedValue = changeSectionValueFormat(utils2, response.sectionValue, "MM", activeSection.format);
            return _extends$1({}, response, {
              sectionValue: formattedValue
            });
          }
          if (activeSection.type === "weekDay") {
            const response = getNewSectionValue(queryValue, activeSection);
            if (isQueryResponseWithoutValue(response)) {
              return response;
            }
            const formattedValue = getDaysInWeekStr(utils2, activeSection.format)[Number(response.sectionValue) - 1];
            return _extends$1({}, response, {
              sectionValue: formattedValue
            });
          }
          return {
            saveQuery: false
          };
        };
        return applyQuery(params, getFirstSectionValueMatchingWithQuery, (queryValue) => !Number.isNaN(Number(queryValue)));
      };
      const applyCharacterEditing = _default$a((params) => {
        const activeSection = sections[params.sectionIndex];
        const isNumericEditing = !Number.isNaN(Number(params.keyPressed));
        const response = isNumericEditing ? applyNumericEditing(params) : applyLetterEditing(params);
        if (response == null) {
          setTempAndroidValueStr(null);
        } else {
          updateSectionValue({
            activeSection,
            newSectionValue: response.sectionValue,
            shouldGoToNextSection: response.shouldGoToNextSection
          });
        }
      });
      return {
        applyCharacterEditing,
        resetCharacterQuery: resetQuery
      };
    };
    const _excluded$11 = ["onClick", "onKeyDown", "onFocus", "onBlur", "onMouseUp", "onPaste", "error"];
    const useField = (params) => {
      const utils2 = useUtils();
      const {
        state,
        selectedSectionIndexes,
        setSelectedSections,
        clearValue,
        clearActiveSection,
        updateSectionValue,
        updateValueFromValueStr,
        setTempAndroidValueStr,
        sectionsValueBoundaries,
        placeholder
      } = useFieldState(params);
      const {
        inputRef: inputRefProp,
        internalProps,
        internalProps: {
          readOnly = false,
          unstableFieldRef
        },
        forwardedProps: {
          onClick,
          onKeyDown,
          onFocus,
          onBlur,
          onMouseUp,
          onPaste,
          error
        },
        fieldValueManager,
        valueManager,
        validator
      } = params, otherForwardedProps = _objectWithoutPropertiesLoose(params.forwardedProps, _excluded$11);
      const {
        applyCharacterEditing,
        resetCharacterQuery
      } = useFieldCharacterEditing({
        sections: state.sections,
        updateSectionValue,
        sectionsValueBoundaries,
        setTempAndroidValueStr
      });
      const inputRef = reactExports.useRef(null);
      const handleRef = _default$9(inputRefProp, inputRef);
      const focusTimeoutRef = reactExports.useRef(void 0);
      const theme = useTheme();
      const isRTL = theme.direction === "rtl";
      const sectionOrder = reactExports.useMemo(() => getSectionOrder(state.sections, isRTL), [state.sections, isRTL]);
      const syncSelectionFromDOM = () => {
        var _selectionStart;
        if (readOnly) {
          setSelectedSections(null);
          return;
        }
        const browserStartIndex = (_selectionStart = inputRef.current.selectionStart) != null ? _selectionStart : 0;
        const nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 : state.sections.findIndex((section) => section.startInInput - section.startSeparator.length > browserStartIndex);
        const sectionIndex = nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;
        setSelectedSections(sectionIndex);
      };
      const handleInputClick = _default$a((...args) => {
        onClick == null ? void 0 : onClick(...args);
        syncSelectionFromDOM();
      });
      const handleInputMouseUp = _default$a((event) => {
        onMouseUp == null ? void 0 : onMouseUp(event);
        event.preventDefault();
      });
      const handleInputFocus = _default$a((...args) => {
        onFocus == null ? void 0 : onFocus(...args);
        const input = inputRef.current;
        clearTimeout(focusTimeoutRef.current);
        focusTimeoutRef.current = setTimeout(() => {
          if (!input || input !== inputRef.current) {
            return;
          }
          if (selectedSectionIndexes != null || readOnly) {
            return;
          }
          if (
            // avoid selecting all sections when focusing empty field without value
            input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length
          ) {
            setSelectedSections("all");
          } else {
            syncSelectionFromDOM();
          }
        });
      });
      const handleInputBlur = _default$a((...args) => {
        onBlur == null ? void 0 : onBlur(...args);
        setSelectedSections(null);
      });
      const handleInputPaste = _default$a((event) => {
        onPaste == null ? void 0 : onPaste(event);
        if (readOnly) {
          event.preventDefault();
          return;
        }
        const pastedValue = event.clipboardData.getData("text");
        if (selectedSectionIndexes && selectedSectionIndexes.startIndex === selectedSectionIndexes.endIndex) {
          const activeSection = state.sections[selectedSectionIndexes.startIndex];
          const lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);
          const digitsOnly = /^[0-9]+$/.test(pastedValue);
          const digitsAndLetterOnly = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(pastedValue);
          const isValidPastedValue = activeSection.contentType === "letter" && lettersOnly || activeSection.contentType === "digit" && digitsOnly || activeSection.contentType === "digit-with-letter" && digitsAndLetterOnly;
          if (isValidPastedValue) {
            return;
          }
          if (lettersOnly || digitsOnly) {
            event.preventDefault();
            return;
          }
        }
        event.preventDefault();
        updateValueFromValueStr(pastedValue);
      });
      const handleInputChange = _default$a((event) => {
        if (readOnly) {
          return;
        }
        const valueStr2 = event.target.value;
        const cleanValueStr = cleanString(valueStr2);
        if (selectedSectionIndexes == null) {
          updateValueFromValueStr(cleanValueStr);
          return;
        }
        let keyPressed;
        if (selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {
          keyPressed = cleanValueStr;
        } else {
          const prevValueStr = cleanString(fieldValueManager.getValueStrFromSections(state.sections, isRTL));
          let startOfDiffIndex = -1;
          let endOfDiffIndex = -1;
          for (let i = 0; i < prevValueStr.length; i += 1) {
            if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {
              startOfDiffIndex = i;
            }
            if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {
              endOfDiffIndex = i;
            }
          }
          const activeSection = state.sections[selectedSectionIndexes.startIndex];
          const hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;
          if (hasDiffOutsideOfActiveSection) {
            return;
          }
          const activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || "").length;
          keyPressed = cleanValueStr.slice(activeSection.start, activeSectionEndRelativeToNewValue);
        }
        if (isAndroid() && keyPressed.length === 0) {
          setTempAndroidValueStr(valueStr2);
          return;
        }
        applyCharacterEditing({
          keyPressed,
          sectionIndex: selectedSectionIndexes.startIndex
        });
      });
      const handleInputKeyDown = _default$a((event) => {
        onKeyDown == null ? void 0 : onKeyDown(event);
        switch (true) {
          case (event.key === "a" && (event.ctrlKey || event.metaKey)): {
            event.preventDefault();
            setSelectedSections("all");
            break;
          }
          case event.key === "ArrowRight": {
            event.preventDefault();
            if (selectedSectionIndexes == null) {
              setSelectedSections(sectionOrder.startIndex);
            } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
              setSelectedSections(selectedSectionIndexes.endIndex);
            } else {
              const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].rightIndex;
              if (nextSectionIndex !== null) {
                setSelectedSections(nextSectionIndex);
              }
            }
            break;
          }
          case event.key === "ArrowLeft": {
            event.preventDefault();
            if (selectedSectionIndexes == null) {
              setSelectedSections(sectionOrder.endIndex);
            } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
              setSelectedSections(selectedSectionIndexes.startIndex);
            } else {
              const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].leftIndex;
              if (nextSectionIndex !== null) {
                setSelectedSections(nextSectionIndex);
              }
            }
            break;
          }
          case ["Backspace", "Delete"].includes(event.key): {
            event.preventDefault();
            if (readOnly) {
              break;
            }
            if (selectedSectionIndexes == null || selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {
              clearValue();
            } else {
              clearActiveSection();
            }
            resetCharacterQuery();
            break;
          }
          case ["ArrowUp", "ArrowDown", "Home", "End", "PageUp", "PageDown"].includes(event.key): {
            event.preventDefault();
            if (readOnly || selectedSectionIndexes == null) {
              break;
            }
            const activeSection = state.sections[selectedSectionIndexes.startIndex];
            const activeDateManager = fieldValueManager.getActiveDateManager(utils2, state, activeSection);
            const newSectionValue = adjustSectionValue(utils2, activeSection, event.key, sectionsValueBoundaries, activeDateManager.date);
            updateSectionValue({
              activeSection,
              newSectionValue,
              shouldGoToNextSection: false
            });
            break;
          }
        }
      });
      useEnhancedEffect(() => {
        if (selectedSectionIndexes == null) {
          if (inputRef.current.scrollLeft) {
            inputRef.current.scrollLeft = 0;
          }
          return;
        }
        const firstSelectedSection = state.sections[selectedSectionIndexes.startIndex];
        const lastSelectedSection = state.sections[selectedSectionIndexes.endIndex];
        let selectionStart = firstSelectedSection.startInInput;
        let selectionEnd = lastSelectedSection.endInInput;
        if (selectedSectionIndexes.shouldSelectBoundarySelectors) {
          selectionStart -= firstSelectedSection.startSeparator.length;
          selectionEnd += lastSelectedSection.endSeparator.length;
        }
        if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {
          const currentScrollTop = inputRef.current.scrollTop;
          inputRef.current.setSelectionRange(selectionStart, selectionEnd);
          inputRef.current.scrollTop = currentScrollTop;
        }
      });
      const validationError = useValidation(_extends$1({}, internalProps, {
        value: state.value
      }), validator, valueManager.isSameError, valueManager.defaultErrorState);
      const inputError = reactExports.useMemo(() => {
        if (error !== void 0) {
          return error;
        }
        return valueManager.hasError(validationError);
      }, [valueManager, validationError, error]);
      reactExports.useEffect(() => {
        if (inputRef.current && inputRef.current === document.activeElement) {
          setSelectedSections("all");
        }
        return () => window.clearTimeout(focusTimeoutRef.current);
      }, []);
      reactExports.useEffect(() => {
        if (state.tempValueStrAndroid != null && selectedSectionIndexes != null) {
          resetCharacterQuery();
          clearActiveSection();
        }
      }, [state.tempValueStrAndroid]);
      const valueStr = reactExports.useMemo(() => {
        var _state$tempValueStrAn;
        return (_state$tempValueStrAn = state.tempValueStrAndroid) != null ? _state$tempValueStrAn : fieldValueManager.getValueStrFromSections(state.sections, isRTL);
      }, [state.sections, fieldValueManager, state.tempValueStrAndroid, isRTL]);
      const inputMode = reactExports.useMemo(() => {
        if (selectedSectionIndexes == null) {
          return "text";
        }
        if (state.sections[selectedSectionIndexes.startIndex].contentType === "letter") {
          return "text";
        }
        return "tel";
      }, [selectedSectionIndexes, state.sections]);
      const inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);
      const shouldShowPlaceholder = !inputHasFocus && valueManager.areValuesEqual(utils2, state.value, valueManager.emptyValue);
      reactExports.useImperativeHandle(unstableFieldRef, () => ({
        getSections: () => state.sections,
        getActiveSectionIndex: () => {
          var _selectionStart2, _selectionEnd;
          const browserStartIndex = (_selectionStart2 = inputRef.current.selectionStart) != null ? _selectionStart2 : 0;
          const browserEndIndex = (_selectionEnd = inputRef.current.selectionEnd) != null ? _selectionEnd : 0;
          if (browserStartIndex === 0 && browserEndIndex === 0) {
            return null;
          }
          const nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 : state.sections.findIndex((section) => section.startInInput - section.startSeparator.length > browserStartIndex);
          return nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;
        },
        setSelectedSections: (activeSectionIndex) => setSelectedSections(activeSectionIndex)
      }));
      return _extends$1({
        placeholder,
        autoComplete: "off"
      }, otherForwardedProps, {
        value: shouldShowPlaceholder ? "" : valueStr,
        inputMode,
        readOnly,
        onClick: handleInputClick,
        onFocus: handleInputFocus,
        onBlur: handleInputBlur,
        onPaste: handleInputPaste,
        onChange: handleInputChange,
        onKeyDown: handleInputKeyDown,
        onMouseUp: handleInputMouseUp,
        error: inputError,
        ref: handleRef
      });
    };
    const useOpenState = ({
      open,
      onOpen,
      onClose
    }) => {
      const isControllingOpenProp = reactExports.useRef(typeof open === "boolean").current;
      const [openState, setIsOpenState] = reactExports.useState(false);
      reactExports.useEffect(() => {
        if (isControllingOpenProp) {
          if (typeof open !== "boolean") {
            throw new Error("You must not mix controlling and uncontrolled mode for `open` prop");
          }
          setIsOpenState(open);
        }
      }, [isControllingOpenProp, open]);
      const setIsOpen = reactExports.useCallback((newIsOpen) => {
        if (!isControllingOpenProp) {
          setIsOpenState(newIsOpen);
        }
        if (newIsOpen && onOpen) {
          onOpen();
        }
        if (!newIsOpen && onClose) {
          onClose();
        }
      }, [isControllingOpenProp, onOpen, onClose]);
      return {
        isOpen: openState,
        setIsOpen
      };
    };
    const shouldPublishValue = (params) => {
      const {
        action,
        hasChanged,
        dateState,
        isControlled
      } = params;
      const isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;
      if (action.name === "setValueFromField") {
        return true;
      }
      if (action.name === "setValueFromAction") {
        if (isCurrentValueTheDefaultValue && ["accept", "today", "clear"].includes(action.pickerAction)) {
          return true;
        }
        return hasChanged(dateState.lastPublishedValue);
      }
      if (action.name === "setValueFromView" && action.selectionState !== "shallow") {
        if (isCurrentValueTheDefaultValue) {
          return true;
        }
        return hasChanged(dateState.lastPublishedValue);
      }
      return false;
    };
    const shouldCommitValue = (params) => {
      const {
        action,
        hasChanged,
        dateState,
        isControlled,
        closeOnSelect
      } = params;
      const isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;
      if (action.name === "setValueFromAction") {
        if (isCurrentValueTheDefaultValue && ["accept", "today", "clear"].includes(action.pickerAction)) {
          return true;
        }
        return hasChanged(dateState.lastCommittedValue);
      }
      if (action.name === "setValueFromView" && action.selectionState === "finish" && closeOnSelect) {
        if (isCurrentValueTheDefaultValue) {
          return true;
        }
        return hasChanged(dateState.lastCommittedValue);
      }
      return false;
    };
    const shouldClosePicker = (params) => {
      const {
        action,
        closeOnSelect
      } = params;
      if (action.name === "setValueFromAction") {
        return true;
      }
      if (action.name === "setValueFromView") {
        return action.selectionState === "finish" && closeOnSelect;
      }
      return false;
    };
    const usePickerValue = ({
      props,
      valueManager,
      valueType,
      wrapperVariant,
      validator
    }) => {
      const {
        onAccept,
        onChange,
        value: inValue,
        defaultValue: inDefaultValue,
        closeOnSelect = wrapperVariant === "desktop",
        selectedSections: selectedSectionsProp,
        onSelectedSectionsChange
      } = props;
      const {
        current: defaultValue2
      } = reactExports.useRef(inDefaultValue);
      const {
        current: isControlled
      } = reactExports.useRef(inValue !== void 0);
      const utils2 = useUtils();
      const adapter = useLocalizationContext();
      const [selectedSections, setSelectedSections] = useControlled$2({
        controlled: selectedSectionsProp,
        default: null,
        name: "usePickerValue",
        state: "selectedSections"
      });
      const {
        isOpen,
        setIsOpen
      } = useOpenState(props);
      const [dateState, setDateState] = reactExports.useState(() => {
        let initialValue;
        if (inValue !== void 0) {
          initialValue = inValue;
        } else if (defaultValue2 !== void 0) {
          initialValue = defaultValue2;
        } else {
          initialValue = valueManager.emptyValue;
        }
        return {
          draft: initialValue,
          lastPublishedValue: initialValue,
          lastCommittedValue: initialValue,
          lastControlledValue: inValue,
          hasBeenModifiedSinceMount: false
        };
      });
      useValidation(_extends$1({}, props, {
        value: dateState.draft
      }), validator, valueManager.isSameError, valueManager.defaultErrorState);
      const updateDate = _default$a((action) => {
        const updaterParams = {
          action,
          dateState,
          hasChanged: (comparison) => !valueManager.areValuesEqual(utils2, action.value, comparison),
          isControlled,
          closeOnSelect
        };
        const shouldPublish = shouldPublishValue(updaterParams);
        const shouldCommit = shouldCommitValue(updaterParams);
        const shouldClose = shouldClosePicker(updaterParams);
        setDateState((prev2) => _extends$1({}, prev2, {
          draft: action.value,
          lastPublishedValue: shouldPublish ? action.value : prev2.lastPublishedValue,
          lastCommittedValue: shouldCommit ? action.value : prev2.lastCommittedValue,
          hasBeenModifiedSinceMount: true
        }));
        if (shouldPublish && onChange) {
          const validationError = action.name === "setValueFromField" ? action.context.validationError : validator({
            adapter,
            value: action.value,
            props: _extends$1({}, props, {
              value: action.value
            })
          });
          const context2 = {
            validationError
          };
          onChange(action.value, context2);
        }
        if (shouldCommit && onAccept) {
          onAccept(action.value);
        }
        if (shouldClose) {
          setIsOpen(false);
        }
      });
      if (inValue !== void 0 && (dateState.lastControlledValue === void 0 || !valueManager.areValuesEqual(utils2, dateState.lastControlledValue, inValue))) {
        const isUpdateComingFromPicker = valueManager.areValuesEqual(utils2, dateState.draft, inValue);
        setDateState((prev2) => _extends$1({}, prev2, {
          lastControlledValue: inValue
        }, isUpdateComingFromPicker ? {} : {
          lastCommittedValue: inValue,
          lastPublishedValue: inValue,
          draft: inValue,
          hasBeenModifiedSinceMount: true
        }));
      }
      const handleClear = _default$a(() => {
        updateDate({
          value: valueManager.emptyValue,
          name: "setValueFromAction",
          pickerAction: "clear"
        });
      });
      const handleAccept = _default$a(() => {
        updateDate({
          value: dateState.lastPublishedValue,
          name: "setValueFromAction",
          pickerAction: "accept"
        });
      });
      const handleDismiss = _default$a(() => {
        updateDate({
          value: dateState.lastPublishedValue,
          name: "setValueFromAction",
          pickerAction: "dismiss"
        });
      });
      const handleCancel = _default$a(() => {
        updateDate({
          value: dateState.lastCommittedValue,
          name: "setValueFromAction",
          pickerAction: "cancel"
        });
      });
      const handleSetToday = _default$a(() => {
        updateDate({
          value: valueManager.getTodayValue(utils2, valueType),
          name: "setValueFromAction",
          pickerAction: "today"
        });
      });
      const handleOpen = _default$a(() => setIsOpen(true));
      const handleClose = _default$a(() => setIsOpen(false));
      const handleChange = _default$a((newValue, selectionState = "partial") => updateDate({
        name: "setValueFromView",
        value: newValue,
        selectionState
      }));
      const handleChangeField = _default$a((newValue, context2) => updateDate({
        name: "setValueFromField",
        value: newValue,
        context: context2
      }));
      const handleFieldSelectedSectionsChange = _default$a((newSelectedSections) => {
        setSelectedSections(newSelectedSections);
        onSelectedSectionsChange == null ? void 0 : onSelectedSectionsChange(newSelectedSections);
      });
      const actions = {
        onClear: handleClear,
        onAccept: handleAccept,
        onDismiss: handleDismiss,
        onCancel: handleCancel,
        onSetToday: handleSetToday,
        onOpen: handleOpen,
        onClose: handleClose
      };
      const fieldResponse = {
        value: dateState.draft,
        onChange: handleChangeField,
        selectedSections,
        onSelectedSectionsChange: handleFieldSelectedSectionsChange
      };
      const viewValue = reactExports.useMemo(() => valueManager.cleanValue(utils2, dateState.draft), [utils2, valueManager, dateState.draft]);
      const viewResponse = {
        value: viewValue,
        onChange: handleChange,
        onClose: handleClose,
        open: isOpen,
        onSelectedSectionsChange: handleFieldSelectedSectionsChange
      };
      const isValid2 = (testedValue) => {
        const error = validator({
          adapter,
          value: testedValue,
          props: _extends$1({}, props, {
            value: testedValue
          })
        });
        return !valueManager.hasError(error);
      };
      const layoutResponse = _extends$1({}, actions, {
        value: viewValue,
        onChange: handleChange,
        isValid: isValid2
      });
      return {
        open: isOpen,
        fieldProps: fieldResponse,
        viewProps: viewResponse,
        layoutProps: layoutResponse,
        actions
      };
    };
    function useViews({
      onChange,
      onViewChange,
      openTo,
      view: inView,
      views,
      autoFocus,
      focusedView: inFocusedView,
      onFocusedViewChange
    }) {
      var _views, _views2;
      const previousOpenTo = reactExports.useRef(openTo);
      const previousViews = reactExports.useRef(views);
      const defaultView = reactExports.useRef(views.includes(openTo) ? openTo : views[0]);
      const [view, setView] = useControlled$2({
        name: "useViews",
        state: "view",
        controlled: inView,
        default: defaultView.current
      });
      const defaultFocusedView = reactExports.useRef(autoFocus ? view : null);
      const [focusedView, setFocusedView] = useControlled$2({
        name: "useViews",
        state: "focusedView",
        controlled: inFocusedView,
        default: defaultFocusedView.current
      });
      reactExports.useEffect(() => {
        if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some((previousView2) => !views.includes(previousView2))) {
          setView(views.includes(openTo) ? openTo : views[0]);
        }
      }, [openTo, setView, view, views]);
      const viewIndex = views.indexOf(view);
      const previousView = (_views = views[viewIndex - 1]) != null ? _views : null;
      const nextView = (_views2 = views[viewIndex + 1]) != null ? _views2 : null;
      const handleChangeView = _default$a((newView) => {
        if (newView === view) {
          return;
        }
        setView(newView);
        if (onViewChange) {
          onViewChange(newView);
        }
      });
      const handleFocusedViewChange = _default$a((viewToFocus, hasFocus) => {
        if (hasFocus) {
          setFocusedView(viewToFocus);
        } else {
          setFocusedView(
            (prevFocusedView) => viewToFocus === prevFocusedView ? null : prevFocusedView
            // If false the blur is due to view switching
          );
        }
        onFocusedViewChange == null ? void 0 : onFocusedViewChange(viewToFocus, hasFocus);
      });
      const goToNextView = _default$a(() => {
        if (nextView) {
          handleChangeView(nextView);
        }
        handleFocusedViewChange(nextView, true);
      });
      const setValueAndGoToNextView = _default$a((value2, currentViewSelectionState, selectedView) => {
        const isSelectionFinishedOnCurrentView = currentViewSelectionState === "finish";
        const hasMoreViews = selectedView ? (
          // handles case like `DateTimePicker`, where a view might return a `finish` selection state
          // but we it's not the final view given all `views` -> overall selection state should be `partial`.
          views.indexOf(selectedView) < views.length - 1
        ) : Boolean(nextView);
        const globalSelectionState = isSelectionFinishedOnCurrentView && hasMoreViews ? "partial" : currentViewSelectionState;
        onChange(value2, globalSelectionState);
        if (isSelectionFinishedOnCurrentView) {
          goToNextView();
        }
      });
      const setValueAndGoToView = _default$a((value2, newView, selectedView) => {
        onChange(value2, newView ? "partial" : "finish", selectedView);
        if (newView) {
          handleChangeView(newView);
          handleFocusedViewChange(newView, true);
        }
      });
      return {
        view,
        setView: handleChangeView,
        focusedView,
        setFocusedView: handleFocusedViewChange,
        nextView,
        previousView,
        defaultView: defaultView.current,
        goToNextView,
        setValueAndGoToNextView,
        setValueAndGoToView
      };
    }
    const timeViews = ["hours", "minutes", "seconds"];
    const isTimeView = (view) => timeViews.includes(view);
    const getMeridiem = (date, utils2) => {
      if (!date) {
        return null;
      }
      return utils2.getHours(date) >= 12 ? "pm" : "am";
    };
    const convertValueToMeridiem = (value2, meridiem2, ampm) => {
      if (ampm) {
        const currentMeridiem = value2 >= 12 ? "pm" : "am";
        if (currentMeridiem !== meridiem2) {
          return meridiem2 === "am" ? value2 - 12 : value2 + 12;
        }
      }
      return value2;
    };
    const convertToMeridiem = (time, meridiem2, ampm, utils2) => {
      const newHoursAmount = convertValueToMeridiem(utils2.getHours(time), meridiem2, ampm);
      return utils2.setHours(time, newHoursAmount);
    };
    const getSecondsInDay = (date, utils2) => {
      return utils2.getHours(date) * 3600 + utils2.getMinutes(date) * 60 + utils2.getSeconds(date);
    };
    const createIsAfterIgnoreDatePart = (disableIgnoringDatePartForTimeValidation, utils2) => (dateLeft, dateRight) => {
      if (disableIgnoringDatePartForTimeValidation) {
        return utils2.isAfter(dateLeft, dateRight);
      }
      return getSecondsInDay(dateLeft, utils2) > getSecondsInDay(dateRight, utils2);
    };
    const _excluded$10 = ["className", "sx"];
    const usePickerViews = ({
      props,
      propsFromPickerValue,
      additionalViewProps,
      inputRef,
      autoFocusView
    }) => {
      const {
        onChange,
        open,
        onSelectedSectionsChange,
        onClose
      } = propsFromPickerValue;
      const {
        views,
        openTo,
        onViewChange,
        disableOpenPicker,
        viewRenderers
      } = props;
      const propsToForwardToView = _objectWithoutPropertiesLoose(props, _excluded$10);
      const {
        view,
        setView,
        defaultView,
        focusedView,
        setFocusedView,
        setValueAndGoToNextView
      } = useViews({
        view: void 0,
        views,
        openTo,
        onChange,
        onViewChange,
        autoFocus: autoFocusView
      });
      const {
        hasUIView,
        viewModeLookup
      } = reactExports.useMemo(() => views.reduce((acc, viewForReduce) => {
        let viewMode;
        if (disableOpenPicker) {
          viewMode = "field";
        } else if (viewRenderers[viewForReduce] != null) {
          viewMode = "UI";
        } else {
          viewMode = "field";
        }
        acc.viewModeLookup[viewForReduce] = viewMode;
        if (viewMode === "UI") {
          acc.hasUIView = true;
        }
        return acc;
      }, {
        hasUIView: false,
        viewModeLookup: {}
      }), [disableOpenPicker, viewRenderers, views]);
      const hasMultipleUITimeView = reactExports.useMemo(() => {
        const numberUITimeViews = views.reduce((acc, viewForReduce) => {
          if (viewRenderers[viewForReduce] != null && isTimeView(viewForReduce)) {
            return acc + 1;
          }
          return acc;
        }, 0);
        return numberUITimeViews > 1;
      }, [viewRenderers, views]);
      const currentViewMode = viewModeLookup[view];
      const shouldRestoreFocus = _default$a(() => currentViewMode === "UI");
      const [popperView, setPopperView] = reactExports.useState(currentViewMode === "UI" ? view : null);
      if (popperView !== view && viewModeLookup[view] === "UI") {
        setPopperView(view);
      }
      useEnhancedEffect(() => {
        if (currentViewMode === "field" && open) {
          onClose();
          onSelectedSectionsChange("hours");
          setTimeout(() => {
            inputRef == null ? void 0 : inputRef.current.focus();
          });
        }
      }, [view]);
      useEnhancedEffect(() => {
        if (!open) {
          return;
        }
        let newView = view;
        if (currentViewMode === "field" && popperView != null) {
          newView = popperView;
        }
        if (newView !== defaultView && viewModeLookup[newView] === "UI" && viewModeLookup[defaultView] === "UI") {
          newView = defaultView;
        }
        if (newView !== view) {
          setView(newView);
        }
        setFocusedView(newView, true);
      }, [open]);
      const layoutProps = {
        views,
        view: popperView,
        onViewChange: setView
      };
      return {
        hasUIView,
        shouldRestoreFocus,
        layoutProps,
        renderCurrentView: () => {
          if (popperView == null) {
            return null;
          }
          const renderer = viewRenderers[popperView];
          if (renderer == null) {
            return null;
          }
          return renderer(_extends$1({}, propsToForwardToView, additionalViewProps, propsFromPickerValue, {
            views,
            onChange: setValueAndGoToNextView,
            view: popperView,
            onViewChange: setView,
            focusedView,
            onFocusedViewChange: setFocusedView,
            showViewSwitcher: hasMultipleUITimeView
          }));
        }
      };
    };
    function getOrientation() {
      if (typeof window === "undefined") {
        return "portrait";
      }
      if (window.screen && window.screen.orientation && window.screen.orientation.angle) {
        return Math.abs(window.screen.orientation.angle) === 90 ? "landscape" : "portrait";
      }
      if (window.orientation) {
        return Math.abs(Number(window.orientation)) === 90 ? "landscape" : "portrait";
      }
      return "portrait";
    }
    const useIsLandscape = (views, customOrientation) => {
      const [orientation, setOrientation] = reactExports.useState(getOrientation);
      useEnhancedEffect$3(() => {
        const eventHandler = () => {
          setOrientation(getOrientation());
        };
        window.addEventListener("orientationchange", eventHandler);
        return () => {
          window.removeEventListener("orientationchange", eventHandler);
        };
      }, []);
      if (arrayIncludes(views, ["hours", "minutes", "seconds"])) {
        return false;
      }
      const orientationToUse = customOrientation || orientation;
      return orientationToUse === "landscape";
    };
    const usePickerLayoutProps = ({
      props,
      propsFromPickerValue,
      propsFromPickerViews,
      wrapperVariant
    }) => {
      const {
        orientation
      } = props;
      const isLandscape = useIsLandscape(propsFromPickerViews.views, orientation);
      const layoutProps = _extends$1({}, propsFromPickerViews, propsFromPickerValue, {
        isLandscape,
        wrapperVariant,
        disabled: props.disabled,
        readOnly: props.readOnly
      });
      return {
        layoutProps
      };
    };
    const buildWarning = (message, gravity = "warning") => {
      let alreadyWarned = false;
      const cleanMessage = Array.isArray(message) ? message.join("\n") : message;
      return () => {
        if (!alreadyWarned) {
          alreadyWarned = true;
          if (gravity === "error") {
            console.error(cleanMessage);
          } else {
            console.warn(cleanMessage);
          }
        }
      };
    };
    buildWarning(["The `renderInput` prop has been removed in version 6.0 of the Date and Time Pickers.", "You can replace it with the `textField` component slot in most cases.", "For more information, please have a look at the migration guide (https://mui.com/x/migration/migration-pickers-v5/#input-renderer-required-in-v5)."]);
    const usePicker = ({
      props,
      valueManager,
      valueType,
      wrapperVariant,
      inputRef,
      additionalViewProps,
      validator,
      autoFocusView
    }) => {
      const pickerValueResponse = usePickerValue({
        props,
        valueManager,
        valueType,
        wrapperVariant,
        validator
      });
      const pickerViewsResponse = usePickerViews({
        props,
        inputRef,
        additionalViewProps,
        autoFocusView,
        propsFromPickerValue: pickerValueResponse.viewProps
      });
      const pickerLayoutResponse = usePickerLayoutProps({
        props,
        wrapperVariant,
        propsFromPickerValue: pickerValueResponse.layoutProps,
        propsFromPickerViews: pickerViewsResponse.layoutProps
      });
      return {
        // Picker value
        open: pickerValueResponse.open,
        actions: pickerValueResponse.actions,
        fieldProps: pickerValueResponse.fieldProps,
        // Picker views
        renderCurrentView: pickerViewsResponse.renderCurrentView,
        hasUIView: pickerViewsResponse.hasUIView,
        shouldRestoreFocus: pickerViewsResponse.shouldRestoreFocus,
        // Picker layout
        layoutProps: pickerLayoutResponse.layoutProps
      };
    };
    function getPickersLayoutUtilityClass(slot) {
      return generateUtilityClass("MuiPickersLayout", slot);
    }
    const pickersLayoutClasses = generateUtilityClasses("MuiPickersLayout", ["root", "landscape", "contentWrapper", "toolbar", "actionBar", "shortcuts"]);
    const _excluded$$ = ["onAccept", "onClear", "onCancel", "onSetToday", "actions"];
    function PickersActionBar(props) {
      const {
        onAccept,
        onClear,
        onCancel,
        onSetToday,
        actions
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$$);
      const localeText = useLocaleText();
      if (actions == null || actions.length === 0) {
        return null;
      }
      const buttons = actions == null ? void 0 : actions.map((actionType) => {
        switch (actionType) {
          case "clear":
            return /* @__PURE__ */ jsxRuntimeExports.jsx(Button$1, {
              onClick: onClear,
              children: localeText.clearButtonLabel
            }, actionType);
          case "cancel":
            return /* @__PURE__ */ jsxRuntimeExports.jsx(Button$1, {
              onClick: onCancel,
              children: localeText.cancelButtonLabel
            }, actionType);
          case "accept":
            return /* @__PURE__ */ jsxRuntimeExports.jsx(Button$1, {
              onClick: onAccept,
              children: localeText.okButtonLabel
            }, actionType);
          case "today":
            return /* @__PURE__ */ jsxRuntimeExports.jsx(Button$1, {
              onClick: onSetToday,
              children: localeText.todayButtonLabel
            }, actionType);
          default:
            return null;
        }
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(DialogActions$1, _extends$1({}, other, {
        children: buttons
      }));
    }
    function getListItemUtilityClass(slot) {
      return generateUtilityClass("MuiListItem", slot);
    }
    const listItemClasses = generateUtilityClasses("MuiListItem", ["root", "container", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "padding", "button", "secondaryAction", "selected"]);
    const listItemClasses$1 = listItemClasses;
    const listItemButtonClasses = generateUtilityClasses("MuiListItemButton", ["root", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "selected"]);
    const listItemButtonClasses$1 = listItemButtonClasses;
    function getListItemSecondaryActionClassesUtilityClass(slot) {
      return generateUtilityClass("MuiListItemSecondaryAction", slot);
    }
    generateUtilityClasses("MuiListItemSecondaryAction", ["root", "disableGutters"]);
    const _excluded$_ = ["className"];
    const useUtilityClasses$F = (ownerState) => {
      const {
        disableGutters,
        classes
      } = ownerState;
      const slots = {
        root: ["root", disableGutters && "disableGutters"]
      };
      return composeClasses(slots, getListItemSecondaryActionClassesUtilityClass, classes);
    };
    const ListItemSecondaryActionRoot = styled$1("div", {
      name: "MuiListItemSecondaryAction",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.disableGutters && styles2.disableGutters];
      }
    })(({
      ownerState
    }) => _extends$1({
      position: "absolute",
      right: 16,
      top: "50%",
      transform: "translateY(-50%)"
    }, ownerState.disableGutters && {
      right: 0
    }));
    const ListItemSecondaryAction = /* @__PURE__ */ reactExports.forwardRef(function ListItemSecondaryAction2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiListItemSecondaryAction"
      });
      const {
        className
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$_);
      const context2 = reactExports.useContext(ListContext$1);
      const ownerState = _extends$1({}, props, {
        disableGutters: context2.disableGutters
      });
      const classes = useUtilityClasses$F(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemSecondaryActionRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref
      }, other));
    });
    ListItemSecondaryAction.muiName = "ListItemSecondaryAction";
    const ListItemSecondaryAction$1 = ListItemSecondaryAction;
    const _excluded$Z = ["className"], _excluded2$6 = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected", "slotProps", "slots"];
    const overridesResolver$4 = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.dense && styles2.dense, ownerState.alignItems === "flex-start" && styles2.alignItemsFlexStart, ownerState.divider && styles2.divider, !ownerState.disableGutters && styles2.gutters, !ownerState.disablePadding && styles2.padding, ownerState.button && styles2.button, ownerState.hasSecondaryAction && styles2.secondaryAction];
    };
    const useUtilityClasses$E = (ownerState) => {
      const {
        alignItems,
        button,
        classes,
        dense,
        disabled,
        disableGutters,
        disablePadding,
        divider,
        hasSecondaryAction,
        selected
      } = ownerState;
      const slots = {
        root: ["root", dense && "dense", !disableGutters && "gutters", !disablePadding && "padding", divider && "divider", disabled && "disabled", button && "button", alignItems === "flex-start" && "alignItemsFlexStart", hasSecondaryAction && "secondaryAction", selected && "selected"],
        container: ["container"]
      };
      return composeClasses(slots, getListItemUtilityClass, classes);
    };
    const ListItemRoot = styled$1("div", {
      name: "MuiListItem",
      slot: "Root",
      overridesResolver: overridesResolver$4
    })(({
      theme,
      ownerState
    }) => _extends$1({
      display: "flex",
      justifyContent: "flex-start",
      alignItems: "center",
      position: "relative",
      textDecoration: "none",
      width: "100%",
      boxSizing: "border-box",
      textAlign: "left"
    }, !ownerState.disablePadding && _extends$1({
      paddingTop: 8,
      paddingBottom: 8
    }, ownerState.dense && {
      paddingTop: 4,
      paddingBottom: 4
    }, !ownerState.disableGutters && {
      paddingLeft: 16,
      paddingRight: 16
    }, !!ownerState.secondaryAction && {
      // Add some space to avoid collision as `ListItemSecondaryAction`
      // is absolutely positioned.
      paddingRight: 48
    }), !!ownerState.secondaryAction && {
      [`& > .${listItemButtonClasses$1.root}`]: {
        paddingRight: 48
      }
    }, {
      [`&.${listItemClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`&.${listItemClasses$1.selected}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${listItemClasses$1.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      },
      [`&.${listItemClasses$1.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      }
    }, ownerState.alignItems === "flex-start" && {
      alignItems: "flex-start"
    }, ownerState.divider && {
      borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
      backgroundClip: "padding-box"
    }, ownerState.button && {
      transition: theme.transitions.create("background-color", {
        duration: theme.transitions.duration.shortest
      }),
      "&:hover": {
        textDecoration: "none",
        backgroundColor: (theme.vars || theme).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${listItemClasses$1.selected}:hover`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
        }
      }
    }, ownerState.hasSecondaryAction && {
      // Add some space to avoid collision as `ListItemSecondaryAction`
      // is absolutely positioned.
      paddingRight: 48
    }));
    const ListItemContainer = styled$1("li", {
      name: "MuiListItem",
      slot: "Container",
      overridesResolver: (props, styles2) => styles2.container
    })({
      position: "relative"
    });
    const ListItem = /* @__PURE__ */ reactExports.forwardRef(function ListItem2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiListItem"
      });
      const {
        alignItems = "center",
        autoFocus = false,
        button = false,
        children: childrenProp,
        className,
        component: componentProp,
        components = {},
        componentsProps = {},
        ContainerComponent = "li",
        ContainerProps: {
          className: ContainerClassName
        } = {},
        dense = false,
        disabled = false,
        disableGutters = false,
        disablePadding = false,
        divider = false,
        focusVisibleClassName,
        secondaryAction,
        selected = false,
        slotProps = {},
        slots = {}
      } = props, ContainerProps = _objectWithoutPropertiesLoose(props.ContainerProps, _excluded$Z), other = _objectWithoutPropertiesLoose(props, _excluded2$6);
      const context2 = reactExports.useContext(ListContext$1);
      const childContext = reactExports.useMemo(() => ({
        dense: dense || context2.dense || false,
        alignItems,
        disableGutters
      }), [alignItems, context2.dense, dense, disableGutters]);
      const listItemRef = reactExports.useRef(null);
      useEnhancedEffect$3(() => {
        if (autoFocus) {
          if (listItemRef.current) {
            listItemRef.current.focus();
          }
        }
      }, [autoFocus]);
      const children = reactExports.Children.toArray(childrenProp);
      const hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ["ListItemSecondaryAction"]);
      const ownerState = _extends$1({}, props, {
        alignItems,
        autoFocus,
        button,
        dense: childContext.dense,
        disabled,
        disableGutters,
        disablePadding,
        divider,
        hasSecondaryAction,
        selected
      });
      const classes = useUtilityClasses$E(ownerState);
      const handleRef = useForkRef$2(listItemRef, ref);
      const Root = slots.root || components.Root || ListItemRoot;
      const rootProps = slotProps.root || componentsProps.root || {};
      const componentProps = _extends$1({
        className: clsx(classes.root, rootProps.className, className),
        disabled
      }, other);
      let Component = componentProp || "li";
      if (button) {
        componentProps.component = componentProp || "div";
        componentProps.focusVisibleClassName = clsx(listItemClasses$1.focusVisible, focusVisibleClassName);
        Component = ButtonBase$1;
      }
      if (hasSecondaryAction) {
        Component = !componentProps.component && !componentProp ? "div" : Component;
        if (ContainerComponent === "li") {
          if (Component === "li") {
            Component = "div";
          } else if (componentProps.component === "li") {
            componentProps.component = "div";
          }
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext$1.Provider, {
          value: childContext,
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs(ListItemContainer, _extends$1({
            as: ContainerComponent,
            className: clsx(classes.container, ContainerClassName),
            ref: handleRef,
            ownerState
          }, ContainerProps, {
            children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends$1({}, rootProps, !isHostComponent$1(Root) && {
              as: Component,
              ownerState: _extends$1({}, ownerState, rootProps.ownerState)
            }, componentProps, {
              children
            })), children.pop()]
          }))
        });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext$1.Provider, {
        value: childContext,
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends$1({}, rootProps, {
          as: Component,
          ref: handleRef
        }, !isHostComponent$1(Root) && {
          ownerState: _extends$1({}, ownerState, rootProps.ownerState)
        }, componentProps, {
          children: [children, secondaryAction && /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemSecondaryAction$1, {
            children: secondaryAction
          })]
        }))
      });
    });
    const ListItem$1 = ListItem;
    const CancelIcon = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
      d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
    }), "Cancel");
    function getChipUtilityClass(slot) {
      return generateUtilityClass("MuiChip", slot);
    }
    const chipClasses = generateUtilityClasses("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]);
    const chipClasses$1 = chipClasses;
    const _excluded$Y = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant", "tabIndex", "skipFocusWhenDisabled"];
    const useUtilityClasses$D = (ownerState) => {
      const {
        classes,
        disabled,
        size,
        color: color2,
        iconColor,
        onDelete,
        clickable,
        variant
      } = ownerState;
      const slots = {
        root: ["root", variant, disabled && "disabled", `size${capitalize(size)}`, `color${capitalize(color2)}`, clickable && "clickable", clickable && `clickableColor${capitalize(color2)}`, onDelete && "deletable", onDelete && `deletableColor${capitalize(color2)}`, `${variant}${capitalize(color2)}`],
        label: ["label", `label${capitalize(size)}`],
        avatar: ["avatar", `avatar${capitalize(size)}`, `avatarColor${capitalize(color2)}`],
        icon: ["icon", `icon${capitalize(size)}`, `iconColor${capitalize(iconColor)}`],
        deleteIcon: ["deleteIcon", `deleteIcon${capitalize(size)}`, `deleteIconColor${capitalize(color2)}`, `deleteIcon${capitalize(variant)}Color${capitalize(color2)}`]
      };
      return composeClasses(slots, getChipUtilityClass, classes);
    };
    const ChipRoot = styled$1("div", {
      name: "MuiChip",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        const {
          color: color2,
          iconColor,
          clickable,
          onDelete,
          size,
          variant
        } = ownerState;
        return [{
          [`& .${chipClasses$1.avatar}`]: styles2.avatar
        }, {
          [`& .${chipClasses$1.avatar}`]: styles2[`avatar${capitalize(size)}`]
        }, {
          [`& .${chipClasses$1.avatar}`]: styles2[`avatarColor${capitalize(color2)}`]
        }, {
          [`& .${chipClasses$1.icon}`]: styles2.icon
        }, {
          [`& .${chipClasses$1.icon}`]: styles2[`icon${capitalize(size)}`]
        }, {
          [`& .${chipClasses$1.icon}`]: styles2[`iconColor${capitalize(iconColor)}`]
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles2.deleteIcon
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles2[`deleteIcon${capitalize(size)}`]
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles2[`deleteIconColor${capitalize(color2)}`]
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles2[`deleteIcon${capitalize(variant)}Color${capitalize(color2)}`]
        }, styles2.root, styles2[`size${capitalize(size)}`], styles2[`color${capitalize(color2)}`], clickable && styles2.clickable, clickable && color2 !== "default" && styles2[`clickableColor${capitalize(color2)})`], onDelete && styles2.deletable, onDelete && color2 !== "default" && styles2[`deletableColor${capitalize(color2)}`], styles2[variant], styles2[`${variant}${capitalize(color2)}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      const textColor = theme.palette.mode === "light" ? theme.palette.grey[700] : theme.palette.grey[300];
      return _extends$1({
        maxWidth: "100%",
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.typography.pxToRem(13),
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        height: 32,
        color: (theme.vars || theme).palette.text.primary,
        backgroundColor: (theme.vars || theme).palette.action.selected,
        borderRadius: 32 / 2,
        whiteSpace: "nowrap",
        transition: theme.transitions.create(["background-color", "box-shadow"]),
        // label will inherit this from root, then `clickable` class overrides this for both
        cursor: "default",
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
        textDecoration: "none",
        border: 0,
        // Remove `button` border
        padding: 0,
        // Remove `button` padding
        verticalAlign: "middle",
        boxSizing: "border-box",
        [`&.${chipClasses$1.disabled}`]: {
          opacity: (theme.vars || theme).palette.action.disabledOpacity,
          pointerEvents: "none"
        },
        [`& .${chipClasses$1.avatar}`]: {
          marginLeft: 5,
          marginRight: -6,
          width: 24,
          height: 24,
          color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
          fontSize: theme.typography.pxToRem(12)
        },
        [`& .${chipClasses$1.avatarColorPrimary}`]: {
          color: (theme.vars || theme).palette.primary.contrastText,
          backgroundColor: (theme.vars || theme).palette.primary.dark
        },
        [`& .${chipClasses$1.avatarColorSecondary}`]: {
          color: (theme.vars || theme).palette.secondary.contrastText,
          backgroundColor: (theme.vars || theme).palette.secondary.dark
        },
        [`& .${chipClasses$1.avatarSmall}`]: {
          marginLeft: 4,
          marginRight: -4,
          width: 18,
          height: 18,
          fontSize: theme.typography.pxToRem(10)
        },
        [`& .${chipClasses$1.icon}`]: _extends$1({
          marginLeft: 5,
          marginRight: -6
        }, ownerState.size === "small" && {
          fontSize: 18,
          marginLeft: 4,
          marginRight: -4
        }, ownerState.iconColor === ownerState.color && _extends$1({
          color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
        }, ownerState.color !== "default" && {
          color: "inherit"
        })),
        [`& .${chipClasses$1.deleteIcon}`]: _extends$1({
          WebkitTapHighlightColor: "transparent",
          color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : alpha(theme.palette.text.primary, 0.26),
          fontSize: 22,
          cursor: "pointer",
          margin: "0 5px 0 -6px",
          "&:hover": {
            color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : alpha(theme.palette.text.primary, 0.4)
          }
        }, ownerState.size === "small" && {
          fontSize: 16,
          marginRight: 4,
          marginLeft: -4
        }, ownerState.color !== "default" && {
          color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : alpha(theme.palette[ownerState.color].contrastText, 0.7),
          "&:hover, &:active": {
            color: (theme.vars || theme).palette[ownerState.color].contrastText
          }
        })
      }, ownerState.size === "small" && {
        height: 24
      }, ownerState.color !== "default" && {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
        color: (theme.vars || theme).palette[ownerState.color].contrastText
      }, ownerState.onDelete && {
        [`&.${chipClasses$1.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      }, ownerState.onDelete && ownerState.color !== "default" && {
        [`&.${chipClasses$1.focusVisible}`]: {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
        }
      });
    }, ({
      theme,
      ownerState
    }) => _extends$1({}, ownerState.clickable && {
      userSelect: "none",
      WebkitTapHighlightColor: "transparent",
      cursor: "pointer",
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
      },
      [`&.${chipClasses$1.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      },
      "&:active": {
        boxShadow: (theme.vars || theme).shadows[1]
      }
    }, ownerState.clickable && ownerState.color !== "default" && {
      [`&:hover, &.${chipClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
      }
    }), ({
      theme,
      ownerState
    }) => _extends$1({}, ownerState.variant === "outlined" && {
      backgroundColor: "transparent",
      border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[700]}`,
      [`&.${chipClasses$1.clickable}:hover`]: {
        backgroundColor: (theme.vars || theme).palette.action.hover
      },
      [`&.${chipClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`& .${chipClasses$1.avatar}`]: {
        marginLeft: 4
      },
      [`& .${chipClasses$1.avatarSmall}`]: {
        marginLeft: 2
      },
      [`& .${chipClasses$1.icon}`]: {
        marginLeft: 4
      },
      [`& .${chipClasses$1.iconSmall}`]: {
        marginLeft: 2
      },
      [`& .${chipClasses$1.deleteIcon}`]: {
        marginRight: 5
      },
      [`& .${chipClasses$1.deleteIconSmall}`]: {
        marginRight: 3
      }
    }, ownerState.variant === "outlined" && ownerState.color !== "default" && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7)}`,
      [`&.${chipClasses$1.clickable}:hover`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
      },
      [`&.${chipClasses$1.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
      },
      [`& .${chipClasses$1.deleteIcon}`]: {
        color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7),
        "&:hover, &:active": {
          color: (theme.vars || theme).palette[ownerState.color].main
        }
      }
    }));
    const ChipLabel = styled$1("span", {
      name: "MuiChip",
      slot: "Label",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        const {
          size
        } = ownerState;
        return [styles2.label, styles2[`label${capitalize(size)}`]];
      }
    })(({
      ownerState
    }) => _extends$1({
      overflow: "hidden",
      textOverflow: "ellipsis",
      paddingLeft: 12,
      paddingRight: 12,
      whiteSpace: "nowrap"
    }, ownerState.size === "small" && {
      paddingLeft: 8,
      paddingRight: 8
    }));
    function isDeleteKeyboardEvent(keyboardEvent) {
      return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
    }
    const Chip = /* @__PURE__ */ reactExports.forwardRef(function Chip2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiChip"
      });
      const {
        avatar: avatarProp,
        className,
        clickable: clickableProp,
        color: color2 = "default",
        component: ComponentProp,
        deleteIcon: deleteIconProp,
        disabled = false,
        icon: iconProp,
        label,
        onClick,
        onDelete,
        onKeyDown,
        onKeyUp,
        size = "medium",
        variant = "filled",
        tabIndex,
        skipFocusWhenDisabled = false
        // TODO v6: Rename to `focusableWhenDisabled`.
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$Y);
      const chipRef = reactExports.useRef(null);
      const handleRef = useForkRef$2(chipRef, ref);
      const handleDeleteIconClick = (event) => {
        event.stopPropagation();
        if (onDelete) {
          onDelete(event);
        }
      };
      const handleKeyDown2 = (event) => {
        if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
          event.preventDefault();
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
      };
      const handleKeyUp = (event) => {
        if (event.currentTarget === event.target) {
          if (onDelete && isDeleteKeyboardEvent(event)) {
            onDelete(event);
          } else if (event.key === "Escape" && chipRef.current) {
            chipRef.current.blur();
          }
        }
        if (onKeyUp) {
          onKeyUp(event);
        }
      };
      const clickable = clickableProp !== false && onClick ? true : clickableProp;
      const component = clickable || onDelete ? ButtonBase$1 : ComponentProp || "div";
      const ownerState = _extends$1({}, props, {
        component,
        disabled,
        size,
        color: color2,
        iconColor: /* @__PURE__ */ reactExports.isValidElement(iconProp) ? iconProp.props.color || color2 : color2,
        onDelete: !!onDelete,
        clickable,
        variant
      });
      const classes = useUtilityClasses$D(ownerState);
      const moreProps = component === ButtonBase$1 ? _extends$1({
        component: ComponentProp || "div",
        focusVisibleClassName: classes.focusVisible
      }, onDelete && {
        disableRipple: true
      }) : {};
      let deleteIcon = null;
      if (onDelete) {
        deleteIcon = deleteIconProp && /* @__PURE__ */ reactExports.isValidElement(deleteIconProp) ? /* @__PURE__ */ reactExports.cloneElement(deleteIconProp, {
          className: clsx(deleteIconProp.props.className, classes.deleteIcon),
          onClick: handleDeleteIconClick
        }) : /* @__PURE__ */ jsxRuntimeExports.jsx(CancelIcon, {
          className: clsx(classes.deleteIcon),
          onClick: handleDeleteIconClick
        });
      }
      let avatar = null;
      if (avatarProp && /* @__PURE__ */ reactExports.isValidElement(avatarProp)) {
        avatar = /* @__PURE__ */ reactExports.cloneElement(avatarProp, {
          className: clsx(classes.avatar, avatarProp.props.className)
        });
      }
      let icon = null;
      if (iconProp && /* @__PURE__ */ reactExports.isValidElement(iconProp)) {
        icon = /* @__PURE__ */ reactExports.cloneElement(iconProp, {
          className: clsx(classes.icon, iconProp.props.className)
        });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(ChipRoot, _extends$1({
        as: component,
        className: clsx(classes.root, className),
        disabled: clickable && disabled ? true : void 0,
        onClick,
        onKeyDown: handleKeyDown2,
        onKeyUp: handleKeyUp,
        ref: handleRef,
        tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
        ownerState
      }, moreProps, other, {
        children: [avatar || icon, /* @__PURE__ */ jsxRuntimeExports.jsx(ChipLabel, {
          className: clsx(classes.label),
          ownerState,
          children: label
        }), deleteIcon]
      }));
    });
    const Chip$1 = Chip;
    const _excluded$X = ["items", "isLandscape", "onChange", "isValid"];
    function PickersShortcuts(props) {
      const {
        items,
        onChange,
        isValid: isValid2
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$X);
      if (items == null || items.length === 0) {
        return null;
      }
      const resolvedItems = items.map((item) => {
        const newValue = item.getValue({
          isValid: isValid2
        });
        return {
          label: item.label,
          onClick: () => {
            onChange(newValue);
          },
          disabled: !isValid2(newValue)
        };
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(List$1, _extends$1({
        dense: true,
        sx: [{
          maxHeight: VIEW_HEIGHT,
          maxWidth: 200,
          overflow: "auto"
        }, ...Array.isArray(other.sx) ? other.sx : [other.sx]]
      }, other, {
        children: resolvedItems.map((item) => {
          return /* @__PURE__ */ jsxRuntimeExports.jsx(ListItem$1, {
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Chip$1, _extends$1({}, item))
          }, item.label);
        })
      }));
    }
    function toolbarHasView(toolbarProps) {
      return toolbarProps.view !== null;
    }
    const useUtilityClasses$C = (ownerState) => {
      const {
        classes,
        isLandscape
      } = ownerState;
      const slots = {
        root: ["root", isLandscape && "landscape"],
        contentWrapper: ["contentWrapper"],
        toolbar: ["toolbar"],
        actionBar: ["actionBar"],
        tabs: ["tabs"],
        landscape: ["landscape"],
        shortcuts: ["shortcuts"]
      };
      return composeClasses(slots, getPickersLayoutUtilityClass, classes);
    };
    const usePickerLayout = (props) => {
      var _slots$actionBar, _slots$shortcuts;
      const {
        wrapperVariant,
        onAccept,
        onClear,
        onCancel,
        onSetToday,
        view,
        views,
        onViewChange,
        value: value2,
        onChange,
        isValid: isValid2,
        isLandscape,
        disabled,
        readOnly,
        children,
        components,
        componentsProps,
        slots: innerSlots,
        slotProps: innerSlotProps
        // TODO: Remove this "as" hack. It get introduced to mark `value` prop in PickersLayoutProps as not required.
        // The true type should be
        // - For pickers value: TDate | null
        // - For rangepickers value: [TDate | null, TDate | null]
      } = props;
      const slots = innerSlots != null ? innerSlots : uncapitalizeObjectKeys(components);
      const slotProps = innerSlotProps != null ? innerSlotProps : componentsProps;
      const classes = useUtilityClasses$C(props);
      const ActionBar = (_slots$actionBar = slots == null ? void 0 : slots.actionBar) != null ? _slots$actionBar : PickersActionBar;
      const actionBarProps = useSlotProps({
        elementType: ActionBar,
        externalSlotProps: slotProps == null ? void 0 : slotProps.actionBar,
        additionalProps: {
          onAccept,
          onClear,
          onCancel,
          onSetToday,
          actions: wrapperVariant === "desktop" ? [] : ["cancel", "accept"],
          className: classes.actionBar
        },
        ownerState: _extends$1({}, props, {
          wrapperVariant
        })
      });
      const actionBar = /* @__PURE__ */ jsxRuntimeExports.jsx(ActionBar, _extends$1({}, actionBarProps));
      const Toolbar = slots == null ? void 0 : slots.toolbar;
      const toolbarProps = useSlotProps({
        elementType: Toolbar,
        externalSlotProps: slotProps == null ? void 0 : slotProps.toolbar,
        additionalProps: {
          isLandscape,
          onChange,
          value: value2,
          view,
          onViewChange,
          views,
          disabled,
          readOnly,
          className: classes.toolbar
        },
        ownerState: _extends$1({}, props, {
          wrapperVariant
        })
      });
      const toolbar = toolbarHasView(toolbarProps) && !!Toolbar ? /* @__PURE__ */ jsxRuntimeExports.jsx(Toolbar, _extends$1({}, toolbarProps)) : null;
      const content = children;
      const Tabs2 = slots == null ? void 0 : slots.tabs;
      const tabs = view && Tabs2 ? /* @__PURE__ */ jsxRuntimeExports.jsx(Tabs2, _extends$1({
        view,
        onViewChange
      }, slotProps == null ? void 0 : slotProps.tabs)) : null;
      const Shortcuts = (_slots$shortcuts = slots == null ? void 0 : slots.shortcuts) != null ? _slots$shortcuts : PickersShortcuts;
      const shortcutsProps = useSlotProps({
        elementType: Shortcuts,
        externalSlotProps: slotProps == null ? void 0 : slotProps.shortcuts,
        additionalProps: {
          isValid: isValid2,
          isLandscape,
          onChange,
          className: classes.shortcuts
        },
        ownerState: {
          isValid: isValid2,
          isLandscape,
          onChange,
          className: classes.shortcuts,
          wrapperVariant
        }
      });
      const shortcuts = view && !!Shortcuts ? /* @__PURE__ */ jsxRuntimeExports.jsx(Shortcuts, _extends$1({}, shortcutsProps)) : null;
      return {
        toolbar,
        content,
        tabs,
        actionBar,
        shortcuts
      };
    };
    const usePickerLayout$1 = usePickerLayout;
    const useUtilityClasses$B = (ownerState) => {
      const {
        isLandscape,
        classes
      } = ownerState;
      const slots = {
        root: ["root", isLandscape && "landscape"],
        contentWrapper: ["contentWrapper"]
      };
      return composeClasses(slots, getPickersLayoutUtilityClass, classes);
    };
    const PickersLayoutRoot = styled$1("div", {
      name: "MuiPickersLayout",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })(({
      theme,
      ownerState
    }) => ({
      display: "grid",
      gridAutoColumns: "max-content auto max-content",
      gridAutoRows: "max-content auto max-content",
      [`& .${pickersLayoutClasses.toolbar}`]: ownerState.isLandscape ? {
        gridColumn: theme.direction === "rtl" ? 3 : 1,
        gridRow: "2 / 3"
      } : {
        gridColumn: "2 / 4",
        gridRow: 1
      },
      [`.${pickersLayoutClasses.shortcuts}`]: ownerState.isLandscape ? {
        gridColumn: "2 / 4",
        gridRow: 1
      } : {
        gridColumn: theme.direction === "rtl" ? 3 : 1,
        gridRow: "2 / 3"
      },
      [`& .${pickersLayoutClasses.actionBar}`]: {
        gridColumn: "1 / 4",
        gridRow: 3
      }
    }));
    PickersLayoutRoot.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      as: PropTypes.elementType,
      ownerState: PropTypes.shape({
        isLandscape: PropTypes.bool.isRequired
      }).isRequired,
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    };
    const PickersLayoutContentWrapper = styled$1("div", {
      name: "MuiPickersLayout",
      slot: "ContentWrapper",
      overridesResolver: (props, styles2) => styles2.contentWrapper
    })({
      gridColumn: 2,
      gridRow: 2,
      display: "flex",
      flexDirection: "column"
    });
    const PickersLayout = function PickersLayout2(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersLayout"
      });
      const {
        toolbar,
        content,
        tabs,
        actionBar,
        shortcuts
      } = usePickerLayout$1(props);
      const {
        sx,
        className,
        isLandscape,
        ref,
        wrapperVariant
      } = props;
      const ownerState = props;
      const classes = useUtilityClasses$B(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(PickersLayoutRoot, {
        ref,
        sx,
        className: clsx(className, classes.root),
        ownerState,
        children: [isLandscape ? shortcuts : toolbar, isLandscape ? toolbar : shortcuts, /* @__PURE__ */ jsxRuntimeExports.jsx(PickersLayoutContentWrapper, {
          className: classes.contentWrapper,
          children: wrapperVariant === "desktop" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
            children: [content, tabs]
          }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
            children: [tabs, content]
          })
        }), actionBar]
      });
    };
    function useNextMonthDisabled(month, {
      disableFuture,
      maxDate
    }) {
      const utils2 = useUtils();
      return reactExports.useMemo(() => {
        const now2 = utils2.date();
        const lastEnabledMonth = utils2.startOfMonth(disableFuture && utils2.isBefore(now2, maxDate) ? now2 : maxDate);
        return !utils2.isAfter(lastEnabledMonth, month);
      }, [disableFuture, maxDate, month, utils2]);
    }
    function usePreviousMonthDisabled(month, {
      disablePast,
      minDate
    }) {
      const utils2 = useUtils();
      return reactExports.useMemo(() => {
        const now2 = utils2.date();
        const firstEnabledMonth = utils2.startOfMonth(disablePast && utils2.isAfter(now2, minDate) ? now2 : minDate);
        return !utils2.isBefore(firstEnabledMonth, month);
      }, [disablePast, minDate, month, utils2]);
    }
    function useMeridiemMode(date, ampm, onChange, selectionState) {
      const utils2 = useUtils();
      const meridiemMode = getMeridiem(date, utils2);
      const handleMeridiemChange = reactExports.useCallback((mode) => {
        const timeWithMeridiem = date == null ? null : convertToMeridiem(date, mode, Boolean(ampm), utils2);
        onChange(timeWithMeridiem, selectionState != null ? selectionState : "partial");
      }, [ampm, date, onChange, selectionState, utils2]);
      return {
        meridiemMode,
        handleMeridiemChange
      };
    }
    const defaultReduceAnimations = typeof navigator !== "undefined" && /(android)/i.test(navigator.userAgent);
    const VALIDATION_PROP_NAMES = ["disablePast", "disableFuture", "minDate", "maxDate", "minTime", "maxTime", "minDateTime", "maxDateTime", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear", "shouldDisableClock", "shouldDisableTime", "minutesStep"];
    const extractValidationProps = (props) => VALIDATION_PROP_NAMES.reduce((extractedProps, propName) => {
      if (props.hasOwnProperty(propName)) {
        extractedProps[propName] = props[propName];
      }
      return extractedProps;
    }, {});
    const validateDate = ({
      props,
      value: value2,
      adapter
    }) => {
      if (value2 === null) {
        return null;
      }
      const now2 = adapter.utils.date();
      const minDate = applyDefaultDate(adapter.utils, props.minDate, adapter.defaultDates.minDate);
      const maxDate = applyDefaultDate(adapter.utils, props.maxDate, adapter.defaultDates.maxDate);
      switch (true) {
        case !adapter.utils.isValid(value2):
          return "invalidDate";
        case Boolean(props.shouldDisableDate && props.shouldDisableDate(value2)):
          return "shouldDisableDate";
        case Boolean(props.shouldDisableMonth && props.shouldDisableMonth(value2)):
          return "shouldDisableMonth";
        case Boolean(props.shouldDisableYear && props.shouldDisableYear(value2)):
          return "shouldDisableYear";
        case Boolean(props.disableFuture && adapter.utils.isAfterDay(value2, now2)):
          return "disableFuture";
        case Boolean(props.disablePast && adapter.utils.isBeforeDay(value2, now2)):
          return "disablePast";
        case Boolean(minDate && adapter.utils.isBeforeDay(value2, minDate)):
          return "minDate";
        case Boolean(maxDate && adapter.utils.isAfterDay(value2, maxDate)):
          return "maxDate";
        default:
          return null;
      }
    };
    const validateTime = ({
      adapter,
      value: value2,
      props
    }) => {
      const {
        minTime,
        maxTime,
        minutesStep,
        shouldDisableClock,
        shouldDisableTime,
        disableIgnoringDatePartForTimeValidation = false,
        disablePast,
        disableFuture
      } = props;
      const now2 = adapter.utils.date();
      const date = adapter.utils.date(value2);
      const isAfter2 = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, adapter.utils);
      if (value2 === null) {
        return null;
      }
      switch (true) {
        case !adapter.utils.isValid(value2):
          return "invalidDate";
        case Boolean(minTime && isAfter2(minTime, value2)):
          return "minTime";
        case Boolean(maxTime && isAfter2(value2, maxTime)):
          return "maxTime";
        case Boolean(disableFuture && adapter.utils.isAfter(date, now2)):
          return "disableFuture";
        case Boolean(disablePast && adapter.utils.isBefore(date, now2)):
          return "disablePast";
        case Boolean(shouldDisableTime && shouldDisableTime(value2, "hours")):
          return "shouldDisableTime-hours";
        case Boolean(shouldDisableTime && shouldDisableTime(value2, "minutes")):
          return "shouldDisableTime-minutes";
        case Boolean(shouldDisableTime && shouldDisableTime(value2, "seconds")):
          return "shouldDisableTime-seconds";
        case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getHours(value2), "hours")):
          return "shouldDisableClock-hours";
        case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getMinutes(value2), "minutes")):
          return "shouldDisableClock-minutes";
        case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getSeconds(value2), "seconds")):
          return "shouldDisableClock-seconds";
        case Boolean(minutesStep && adapter.utils.getMinutes(value2) % minutesStep !== 0):
          return "minutesStep";
        default:
          return null;
      }
    };
    const validateDateTime = ({
      props,
      value: value2,
      adapter
    }) => {
      const dateValidationResult = validateDate({
        adapter,
        value: value2,
        props
      });
      if (dateValidationResult !== null) {
        return dateValidationResult;
      }
      return validateTime({
        adapter,
        value: value2,
        props
      });
    };
    const getPickersFadeTransitionGroupUtilityClass = (slot) => generateUtilityClass("MuiPickersFadeTransitionGroup", slot);
    generateUtilityClasses("MuiPickersFadeTransitionGroup", ["root"]);
    const useUtilityClasses$A = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getPickersFadeTransitionGroupUtilityClass, classes);
    };
    const animationDuration = 500;
    const PickersFadeTransitionGroupRoot = styled$1(TransitionGroup$1, {
      name: "MuiPickersFadeTransitionGroup",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })({
      display: "block",
      position: "relative"
    });
    function PickersFadeTransitionGroup(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersFadeTransitionGroup"
      });
      const {
        children,
        className,
        reduceAnimations,
        transKey
      } = props;
      const classes = useUtilityClasses$A(props);
      if (reduceAnimations) {
        return children;
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PickersFadeTransitionGroupRoot, {
        className: clsx(classes.root, className),
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Fade$1, {
          appear: false,
          mountOnEnter: true,
          unmountOnExit: true,
          timeout: {
            appear: animationDuration,
            enter: animationDuration / 2,
            exit: 0
          },
          children
        }, transKey)
      });
    }
    const getPickersCalendarHeaderUtilityClass = (slot) => generateUtilityClass("MuiPickersCalendarHeader", slot);
    const pickersCalendarHeaderClasses = generateUtilityClasses("MuiPickersCalendarHeader", ["root", "labelContainer", "label", "switchViewButton", "switchViewIcon"]);
    const _excluded$W = ["ownerState"];
    const useUtilityClasses$z = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        labelContainer: ["labelContainer"],
        label: ["label"],
        switchViewButton: ["switchViewButton"],
        switchViewIcon: ["switchViewIcon"]
      };
      return composeClasses(slots, getPickersCalendarHeaderUtilityClass, classes);
    };
    const PickersCalendarHeaderRoot = styled$1("div", {
      name: "MuiPickersCalendarHeader",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })({
      display: "flex",
      alignItems: "center",
      marginTop: 16,
      marginBottom: 8,
      paddingLeft: 24,
      paddingRight: 12,
      // prevent jumping in safari
      maxHeight: 30,
      minHeight: 30
    });
    const PickersCalendarHeaderLabelContainer = styled$1("div", {
      name: "MuiPickersCalendarHeader",
      slot: "LabelContainer",
      overridesResolver: (_2, styles2) => styles2.labelContainer
    })(({
      theme
    }) => _extends$1({
      display: "flex",
      overflow: "hidden",
      alignItems: "center",
      cursor: "pointer",
      marginRight: "auto"
    }, theme.typography.body1, {
      fontWeight: theme.typography.fontWeightMedium
    }));
    const PickersCalendarHeaderLabel = styled$1("div", {
      name: "MuiPickersCalendarHeader",
      slot: "Label",
      overridesResolver: (_2, styles2) => styles2.label
    })({
      marginRight: 6
    });
    const PickersCalendarHeaderSwitchViewButton = styled$1(IconButton$1, {
      name: "MuiPickersCalendarHeader",
      slot: "SwitchViewButton",
      overridesResolver: (_2, styles2) => styles2.switchViewButton
    })(({
      ownerState
    }) => _extends$1({
      marginRight: "auto"
    }, ownerState.view === "year" && {
      [`.${pickersCalendarHeaderClasses.switchViewIcon}`]: {
        transform: "rotate(180deg)"
      }
    }));
    const PickersCalendarHeaderSwitchViewIcon = styled$1(ArrowDropDown, {
      name: "MuiPickersCalendarHeader",
      slot: "SwitchViewIcon",
      overridesResolver: (_2, styles2) => styles2.switchViewIcon
    })(({
      theme
    }) => ({
      willChange: "transform",
      transition: theme.transitions.create("transform"),
      transform: "rotate(0deg)"
    }));
    function PickersCalendarHeader(inProps) {
      var _slots$switchViewButt, _slots$switchViewIcon;
      const localeText = useLocaleText();
      const utils2 = useUtils();
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersCalendarHeader"
      });
      const {
        slots,
        slotProps,
        currentMonth: month,
        disabled,
        disableFuture,
        disablePast,
        maxDate,
        minDate,
        onMonthChange,
        onViewChange,
        view,
        reduceAnimations,
        views,
        labelId
      } = props;
      const ownerState = props;
      const classes = useUtilityClasses$z(props);
      const SwitchViewButton = (_slots$switchViewButt = slots == null ? void 0 : slots.switchViewButton) != null ? _slots$switchViewButt : PickersCalendarHeaderSwitchViewButton;
      const switchViewButtonProps = useSlotProps({
        elementType: SwitchViewButton,
        externalSlotProps: slotProps == null ? void 0 : slotProps.switchViewButton,
        additionalProps: {
          size: "small",
          "aria-label": localeText.calendarViewSwitchingButtonAriaLabel(view)
        },
        ownerState,
        className: classes.switchViewButton
      });
      const SwitchViewIcon = (_slots$switchViewIcon = slots == null ? void 0 : slots.switchViewIcon) != null ? _slots$switchViewIcon : PickersCalendarHeaderSwitchViewIcon;
      const _useSlotProps = useSlotProps({
        elementType: SwitchViewIcon,
        externalSlotProps: slotProps == null ? void 0 : slotProps.switchViewIcon,
        ownerState: void 0,
        className: classes.switchViewIcon
      }), switchViewIconProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded$W);
      const selectNextMonth = () => onMonthChange(utils2.getNextMonth(month), "left");
      const selectPreviousMonth = () => onMonthChange(utils2.getPreviousMonth(month), "right");
      const isNextMonthDisabled = useNextMonthDisabled(month, {
        disableFuture,
        maxDate
      });
      const isPreviousMonthDisabled = usePreviousMonthDisabled(month, {
        disablePast,
        minDate
      });
      const handleToggleView = () => {
        if (views.length === 1 || !onViewChange || disabled) {
          return;
        }
        if (views.length === 2) {
          onViewChange(views.find((el) => el !== view) || views[0]);
        } else {
          const nextIndexToOpen = views.indexOf(view) !== 0 ? 0 : 1;
          onViewChange(views[nextIndexToOpen]);
        }
      };
      if (views.length === 1 && views[0] === "year") {
        return null;
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(PickersCalendarHeaderRoot, {
        ownerState,
        className: classes.root,
        children: [/* @__PURE__ */ jsxRuntimeExports.jsxs(PickersCalendarHeaderLabelContainer, {
          role: "presentation",
          onClick: handleToggleView,
          ownerState,
          "aria-live": "polite",
          className: classes.labelContainer,
          children: [/* @__PURE__ */ jsxRuntimeExports.jsx(PickersFadeTransitionGroup, {
            reduceAnimations,
            transKey: utils2.format(month, "monthAndYear"),
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(PickersCalendarHeaderLabel, {
              id: labelId,
              ownerState,
              className: classes.label,
              children: utils2.format(month, "monthAndYear")
            })
          }), views.length > 1 && !disabled && /* @__PURE__ */ jsxRuntimeExports.jsx(SwitchViewButton, _extends$1({}, switchViewButtonProps, {
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(SwitchViewIcon, _extends$1({}, switchViewIconProps))
          }))]
        }), /* @__PURE__ */ jsxRuntimeExports.jsx(Fade$1, {
          in: view === "day",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(PickersArrowSwitcher, {
            slots,
            slotProps,
            onGoToPrevious: selectPreviousMonth,
            isPreviousDisabled: isPreviousMonthDisabled,
            previousLabel: localeText.previousMonth,
            onGoToNext: selectNextMonth,
            isNextDisabled: isNextMonthDisabled,
            nextLabel: localeText.nextMonth
          })
        })]
      });
    }
    function getPickersDayUtilityClass(slot) {
      return generateUtilityClass("MuiPickersDay", slot);
    }
    const pickersDayClasses = generateUtilityClasses("MuiPickersDay", ["root", "dayWithMargin", "dayOutsideMonth", "hiddenDaySpacingFiller", "today", "selected", "disabled"]);
    const _excluded$V = ["autoFocus", "className", "day", "disabled", "disableHighlightToday", "disableMargin", "hidden", "isAnimating", "onClick", "onDaySelect", "onFocus", "onBlur", "onKeyDown", "onMouseDown", "onMouseEnter", "outsideCurrentMonth", "selected", "showDaysOutsideCurrentMonth", "children", "today", "isFirstVisibleCell", "isLastVisibleCell"];
    const useUtilityClasses$y = (ownerState) => {
      const {
        selected,
        disableMargin,
        disableHighlightToday,
        today,
        disabled,
        outsideCurrentMonth,
        showDaysOutsideCurrentMonth,
        classes
      } = ownerState;
      const slots = {
        root: ["root", selected && "selected", disabled && "disabled", !disableMargin && "dayWithMargin", !disableHighlightToday && today && "today", outsideCurrentMonth && showDaysOutsideCurrentMonth && "dayOutsideMonth", outsideCurrentMonth && !showDaysOutsideCurrentMonth && "hiddenDaySpacingFiller"],
        hiddenDaySpacingFiller: ["hiddenDaySpacingFiller"]
      };
      return composeClasses(slots, getPickersDayUtilityClass, classes);
    };
    const styleArg = ({
      theme,
      ownerState
    }) => _extends$1({}, theme.typography.caption, {
      width: DAY_SIZE,
      height: DAY_SIZE,
      borderRadius: "50%",
      padding: 0,
      // explicitly setting to `transparent` to avoid potentially getting impacted by change from the overridden component
      backgroundColor: "transparent",
      color: (theme.vars || theme).palette.text.primary,
      "@media (pointer: fine)": {
        "&:hover": {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
        }
      },
      "&:focus": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.focusOpacity),
        [`&.${pickersDayClasses.selected}`]: {
          willChange: "background-color",
          backgroundColor: (theme.vars || theme).palette.primary.dark
        }
      },
      [`&.${pickersDayClasses.selected}`]: {
        color: (theme.vars || theme).palette.primary.contrastText,
        backgroundColor: (theme.vars || theme).palette.primary.main,
        fontWeight: theme.typography.fontWeightMedium,
        transition: theme.transitions.create("background-color", {
          duration: theme.transitions.duration.short
        }),
        "&:hover": {
          willChange: "background-color",
          backgroundColor: (theme.vars || theme).palette.primary.dark
        }
      },
      [`&.${pickersDayClasses.disabled}:not(.${pickersDayClasses.selected})`]: {
        color: (theme.vars || theme).palette.text.disabled
      },
      [`&.${pickersDayClasses.disabled}&.${pickersDayClasses.selected}`]: {
        opacity: 0.6
      }
    }, !ownerState.disableMargin && {
      margin: `0 ${DAY_MARGIN}px`
    }, ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && {
      color: (theme.vars || theme).palette.text.secondary
    }, !ownerState.disableHighlightToday && ownerState.today && {
      [`&:not(.${pickersDayClasses.selected})`]: {
        border: `1px solid ${(theme.vars || theme).palette.text.secondary}`
      }
    });
    const overridesResolver$3 = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, !ownerState.disableMargin && styles2.dayWithMargin, !ownerState.disableHighlightToday && ownerState.today && styles2.today, !ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && styles2.dayOutsideMonth, ownerState.outsideCurrentMonth && !ownerState.showDaysOutsideCurrentMonth && styles2.hiddenDaySpacingFiller];
    };
    const PickersDayRoot = styled$1(ButtonBase$1, {
      name: "MuiPickersDay",
      slot: "Root",
      overridesResolver: overridesResolver$3
    })(styleArg);
    const PickersDayFiller = styled$1("div", {
      name: "MuiPickersDay",
      slot: "Root",
      overridesResolver: overridesResolver$3
    })(({
      theme,
      ownerState
    }) => _extends$1({}, styleArg({
      theme,
      ownerState
    }), {
      // visibility: 'hidden' does not work here as it hides the element from screen readers as well
      opacity: 0,
      pointerEvents: "none"
    }));
    const noop = () => {
    };
    const PickersDayRaw = /* @__PURE__ */ reactExports.forwardRef(function PickersDay2(inProps, forwardedRef) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersDay"
      });
      const {
        autoFocus = false,
        className,
        day,
        disabled = false,
        disableHighlightToday = false,
        disableMargin = false,
        isAnimating,
        onClick,
        onDaySelect,
        onFocus = noop,
        onBlur = noop,
        onKeyDown = noop,
        onMouseDown = noop,
        onMouseEnter = noop,
        outsideCurrentMonth,
        selected = false,
        showDaysOutsideCurrentMonth = false,
        children,
        today: isToday = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$V);
      const ownerState = _extends$1({}, props, {
        autoFocus,
        disabled,
        disableHighlightToday,
        disableMargin,
        selected,
        showDaysOutsideCurrentMonth,
        today: isToday
      });
      const classes = useUtilityClasses$y(ownerState);
      const utils2 = useUtils();
      const ref = reactExports.useRef(null);
      const handleRef = useForkRef$2(ref, forwardedRef);
      useEnhancedEffect$3(() => {
        if (autoFocus && !disabled && !isAnimating && !outsideCurrentMonth) {
          ref.current.focus();
        }
      }, [autoFocus, disabled, isAnimating, outsideCurrentMonth]);
      const handleMouseDown = (event) => {
        onMouseDown(event);
        if (outsideCurrentMonth) {
          event.preventDefault();
        }
      };
      const handleClick = (event) => {
        if (!disabled) {
          onDaySelect(day);
        }
        if (outsideCurrentMonth) {
          event.currentTarget.focus();
        }
        if (onClick) {
          onClick(event);
        }
      };
      if (outsideCurrentMonth && !showDaysOutsideCurrentMonth) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(PickersDayFiller, {
          className: clsx(classes.root, classes.hiddenDaySpacingFiller, className),
          ownerState,
          role: other.role
        });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PickersDayRoot, _extends$1({
        className: clsx(classes.root, className),
        ref: handleRef,
        centerRipple: true,
        disabled,
        tabIndex: selected ? 0 : -1,
        onKeyDown: (event) => onKeyDown(event, day),
        onFocus: (event) => onFocus(event, day),
        onBlur: (event) => onBlur(event, day),
        onMouseEnter: (event) => onMouseEnter(event, day),
        onClick: handleClick,
        onMouseDown: handleMouseDown
      }, other, {
        ownerState,
        children: !children ? utils2.format(day, "dayOfMonth") : children
      }));
    });
    const PickersDay = /* @__PURE__ */ reactExports.memo(PickersDayRaw);
    const getPickersSlideTransitionUtilityClass = (slot) => generateUtilityClass("MuiPickersSlideTransition", slot);
    const pickersSlideTransitionClasses = generateUtilityClasses("MuiPickersSlideTransition", ["root", "slideEnter-left", "slideEnter-right", "slideEnterActive", "slideExit", "slideExitActiveLeft-left", "slideExitActiveLeft-right"]);
    const _excluded$U = ["children", "className", "reduceAnimations", "slideDirection", "transKey", "classes"];
    const useUtilityClasses$x = (ownerState) => {
      const {
        classes,
        slideDirection
      } = ownerState;
      const slots = {
        root: ["root"],
        exit: ["slideExit"],
        enterActive: ["slideEnterActive"],
        enter: [`slideEnter-${slideDirection}`],
        exitActive: [`slideExitActiveLeft-${slideDirection}`]
      };
      return composeClasses(slots, getPickersSlideTransitionUtilityClass, classes);
    };
    const slideAnimationDuration = 350;
    const PickersSlideTransitionRoot = styled$1(TransitionGroup$1, {
      name: "MuiPickersSlideTransition",
      slot: "Root",
      overridesResolver: (_2, styles2) => [styles2.root, {
        [`.${pickersSlideTransitionClasses["slideEnter-left"]}`]: styles2["slideEnter-left"]
      }, {
        [`.${pickersSlideTransitionClasses["slideEnter-right"]}`]: styles2["slideEnter-right"]
      }, {
        [`.${pickersSlideTransitionClasses.slideEnterActive}`]: styles2.slideEnterActive
      }, {
        [`.${pickersSlideTransitionClasses.slideExit}`]: styles2.slideExit
      }, {
        [`.${pickersSlideTransitionClasses["slideExitActiveLeft-left"]}`]: styles2["slideExitActiveLeft-left"]
      }, {
        [`.${pickersSlideTransitionClasses["slideExitActiveLeft-right"]}`]: styles2["slideExitActiveLeft-right"]
      }]
    })(({
      theme
    }) => {
      const slideTransition = theme.transitions.create("transform", {
        duration: slideAnimationDuration,
        easing: "cubic-bezier(0.35, 0.8, 0.4, 1)"
      });
      return {
        display: "block",
        position: "relative",
        overflowX: "hidden",
        "& > *": {
          position: "absolute",
          top: 0,
          right: 0,
          left: 0
        },
        [`& .${pickersSlideTransitionClasses["slideEnter-left"]}`]: {
          willChange: "transform",
          transform: "translate(100%)",
          zIndex: 1
        },
        [`& .${pickersSlideTransitionClasses["slideEnter-right"]}`]: {
          willChange: "transform",
          transform: "translate(-100%)",
          zIndex: 1
        },
        [`& .${pickersSlideTransitionClasses.slideEnterActive}`]: {
          transform: "translate(0%)",
          transition: slideTransition
        },
        [`& .${pickersSlideTransitionClasses.slideExit}`]: {
          transform: "translate(0%)"
        },
        [`& .${pickersSlideTransitionClasses["slideExitActiveLeft-left"]}`]: {
          willChange: "transform",
          transform: "translate(-100%)",
          transition: slideTransition,
          zIndex: 0
        },
        [`& .${pickersSlideTransitionClasses["slideExitActiveLeft-right"]}`]: {
          willChange: "transform",
          transform: "translate(100%)",
          transition: slideTransition,
          zIndex: 0
        }
      };
    });
    function PickersSlideTransition(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersSlideTransition"
      });
      const {
        children,
        className,
        reduceAnimations,
        transKey
        // extracting `classes` from `other`
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$U);
      const classes = useUtilityClasses$x(props);
      if (reduceAnimations) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
          className: clsx(classes.root, className),
          children
        });
      }
      const transitionClasses = {
        exit: classes.exit,
        enterActive: classes.enterActive,
        enter: classes.enter,
        exitActive: classes.exitActive
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PickersSlideTransitionRoot, {
        className: clsx(classes.root, className),
        childFactory: (element) => /* @__PURE__ */ reactExports.cloneElement(element, {
          classNames: transitionClasses
        }),
        role: "presentation",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(CSSTransition$1, _extends$1({
          mountOnEnter: true,
          unmountOnExit: true,
          timeout: slideAnimationDuration,
          classNames: transitionClasses
        }, other, {
          children
        }), transKey)
      });
    }
    const useIsDateDisabled = ({
      shouldDisableDate,
      shouldDisableMonth,
      shouldDisableYear,
      minDate,
      maxDate,
      disableFuture,
      disablePast
    }) => {
      const adapter = useLocalizationContext();
      return reactExports.useCallback((day) => validateDate({
        adapter,
        value: day,
        props: {
          shouldDisableDate,
          shouldDisableMonth,
          shouldDisableYear,
          minDate,
          maxDate,
          disableFuture,
          disablePast
        }
      }) !== null, [adapter, shouldDisableDate, shouldDisableMonth, shouldDisableYear, minDate, maxDate, disableFuture, disablePast]);
    };
    const getDayCalendarUtilityClass = (slot) => generateUtilityClass("MuiDayCalendar", slot);
    generateUtilityClasses("MuiDayCalendar", ["header", "weekDayLabel", "loadingContainer", "slideTransition", "monthContainer", "weekContainer", "weekNumberLabel", "weekNumber"]);
    const _excluded$T = ["parentProps", "day", "focusableDay", "selectedDays", "isDateDisabled", "currentMonthNumber", "isViewFocused"], _excluded2$5 = ["ownerState"];
    const useUtilityClasses$w = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        header: ["header"],
        weekDayLabel: ["weekDayLabel"],
        loadingContainer: ["loadingContainer"],
        slideTransition: ["slideTransition"],
        monthContainer: ["monthContainer"],
        weekContainer: ["weekContainer"],
        weekNumberLabel: ["weekNumberLabel"],
        weekNumber: ["weekNumber"]
      };
      return composeClasses(slots, getDayCalendarUtilityClass, classes);
    };
    const defaultDayOfWeekFormatter = (day) => day.charAt(0).toUpperCase();
    const weeksContainerHeight = (DAY_SIZE + DAY_MARGIN * 2) * 6;
    const PickersCalendarDayHeader = styled$1("div", {
      name: "MuiDayCalendar",
      slot: "Header",
      overridesResolver: (_2, styles2) => styles2.header
    })({
      display: "flex",
      justifyContent: "center",
      alignItems: "center"
    });
    const PickersCalendarWeekDayLabel = styled$1(Typography$1, {
      name: "MuiDayCalendar",
      slot: "WeekDayLabel",
      overridesResolver: (_2, styles2) => styles2.weekDayLabel
    })(({
      theme
    }) => ({
      width: 36,
      height: 40,
      margin: "0 2px",
      textAlign: "center",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      color: (theme.vars || theme).palette.text.secondary
    }));
    const PickersCalendarWeekNumberLabel = styled$1(Typography$1, {
      name: "MuiDayPicker",
      slot: "WeekNumberLabel",
      overridesResolver: (_2, styles2) => styles2.weekNumberLabel
    })(({
      theme
    }) => ({
      width: 36,
      height: 40,
      margin: "0 2px",
      textAlign: "center",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      color: theme.palette.text.disabled
    }));
    const PickersCalendarWeekNumber = styled$1(Typography$1, {
      name: "MuiDayPicker",
      slot: "WeekNumber",
      overridesResolver: (_2, styles2) => styles2.weekNumber
    })(({
      theme
    }) => _extends$1({}, theme.typography.caption, {
      width: DAY_SIZE,
      height: DAY_SIZE,
      padding: 0,
      margin: `0 ${DAY_MARGIN}px`,
      color: theme.palette.text.disabled,
      fontSize: "0.75rem",
      alignItems: "center",
      justifyContent: "center",
      display: "inline-flex"
    }));
    const PickersCalendarLoadingContainer = styled$1("div", {
      name: "MuiDayCalendar",
      slot: "LoadingContainer",
      overridesResolver: (_2, styles2) => styles2.loadingContainer
    })({
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      minHeight: weeksContainerHeight
    });
    const PickersCalendarSlideTransition = styled$1(PickersSlideTransition, {
      name: "MuiDayCalendar",
      slot: "SlideTransition",
      overridesResolver: (_2, styles2) => styles2.slideTransition
    })({
      minHeight: weeksContainerHeight
    });
    const PickersCalendarWeekContainer = styled$1("div", {
      name: "MuiDayCalendar",
      slot: "MonthContainer",
      overridesResolver: (_2, styles2) => styles2.monthContainer
    })({
      overflow: "hidden"
    });
    const PickersCalendarWeek = styled$1("div", {
      name: "MuiDayCalendar",
      slot: "WeekContainer",
      overridesResolver: (_2, styles2) => styles2.weekContainer
    })({
      margin: `${DAY_MARGIN}px 0`,
      display: "flex",
      justifyContent: "center"
    });
    function WrappedDay(_ref) {
      var _ref2, _slots$day, _slotProps$day;
      let {
        parentProps,
        day,
        focusableDay,
        selectedDays,
        isDateDisabled,
        currentMonthNumber,
        isViewFocused
      } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded$T);
      const utils2 = useUtils();
      const now2 = useNow();
      const {
        disabled,
        disableHighlightToday,
        isMonthSwitchingAnimating,
        showDaysOutsideCurrentMonth,
        components,
        componentsProps,
        slots,
        slotProps
      } = parentProps;
      const isFocusableDay = focusableDay !== null && utils2.isSameDay(day, focusableDay);
      const isSelected = selectedDays.some((selectedDay) => utils2.isSameDay(selectedDay, day));
      const isToday = utils2.isSameDay(day, now2);
      const Day = (_ref2 = (_slots$day = slots == null ? void 0 : slots.day) != null ? _slots$day : components == null ? void 0 : components.Day) != null ? _ref2 : PickersDay;
      const _useSlotProps = useSlotProps({
        elementType: Day,
        externalSlotProps: (_slotProps$day = slotProps == null ? void 0 : slotProps.day) != null ? _slotProps$day : componentsProps == null ? void 0 : componentsProps.day,
        additionalProps: _extends$1({
          disableHighlightToday,
          showDaysOutsideCurrentMonth,
          role: "gridcell",
          isAnimating: isMonthSwitchingAnimating,
          // it is used in date range dragging logic by accessing `dataset.timestamp`
          "data-timestamp": utils2.toJsDate(day).valueOf()
        }, other),
        ownerState: _extends$1({}, parentProps, {
          day,
          selected: isSelected
        })
      }), dayProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2$5);
      const isDisabled = reactExports.useMemo(() => disabled || isDateDisabled(day), [disabled, isDateDisabled, day]);
      const outsideCurrentMonth = reactExports.useMemo(() => utils2.getMonth(day) !== currentMonthNumber, [utils2, day, currentMonthNumber]);
      const isFirstVisibleCell = reactExports.useMemo(() => {
        const startOfMonth = utils2.startOfMonth(utils2.setMonth(day, currentMonthNumber));
        if (!showDaysOutsideCurrentMonth) {
          return utils2.isSameDay(day, startOfMonth);
        }
        return utils2.isSameDay(day, utils2.startOfWeek(startOfMonth));
      }, [currentMonthNumber, day, showDaysOutsideCurrentMonth, utils2]);
      const isLastVisibleCell = reactExports.useMemo(() => {
        const endOfMonth = utils2.endOfMonth(utils2.setMonth(day, currentMonthNumber));
        if (!showDaysOutsideCurrentMonth) {
          return utils2.isSameDay(day, endOfMonth);
        }
        return utils2.isSameDay(day, utils2.endOfWeek(endOfMonth));
      }, [currentMonthNumber, day, showDaysOutsideCurrentMonth, utils2]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Day, _extends$1({}, dayProps, {
        day,
        disabled: isDisabled,
        autoFocus: isViewFocused && isFocusableDay,
        today: isToday,
        outsideCurrentMonth,
        isFirstVisibleCell,
        isLastVisibleCell,
        selected: isSelected,
        tabIndex: isFocusableDay ? 0 : -1,
        "aria-selected": isSelected,
        "aria-current": isToday ? "date" : void 0
      }));
    }
    function DayCalendar(inProps) {
      const now2 = useNow();
      const utils2 = useUtils();
      const props = useThemeProps({
        props: inProps,
        name: "MuiDayCalendar"
      });
      const classes = useUtilityClasses$w(props);
      const theme = useTheme();
      const {
        onFocusedDayChange,
        className,
        currentMonth,
        selectedDays,
        focusedDay,
        loading,
        onSelectedDaysChange,
        onMonthSwitchingAnimationEnd,
        readOnly,
        reduceAnimations,
        renderLoading = () => /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
          children: "..."
        }),
        slideDirection,
        TransitionProps,
        disablePast,
        disableFuture,
        minDate,
        maxDate,
        shouldDisableDate,
        shouldDisableMonth,
        shouldDisableYear,
        dayOfWeekFormatter = defaultDayOfWeekFormatter,
        hasFocus,
        onFocusedViewChange,
        gridLabelId,
        displayWeekNumber,
        fixedWeekNumber,
        autoFocus
      } = props;
      const isDateDisabled = useIsDateDisabled({
        shouldDisableDate,
        shouldDisableMonth,
        shouldDisableYear,
        minDate,
        maxDate,
        disablePast,
        disableFuture
      });
      const localeText = useLocaleText();
      const [internalHasFocus, setInternalHasFocus] = useControlled$2({
        name: "DayCalendar",
        state: "hasFocus",
        controlled: hasFocus,
        default: autoFocus != null ? autoFocus : false
      });
      const [internalFocusedDay, setInternalFocusedDay] = reactExports.useState(() => focusedDay || now2);
      const handleDaySelect = _default$a((day) => {
        if (readOnly) {
          return;
        }
        onSelectedDaysChange(day);
      });
      const focusDay = (day) => {
        if (!isDateDisabled(day)) {
          onFocusedDayChange(day);
          setInternalFocusedDay(day);
          onFocusedViewChange == null ? void 0 : onFocusedViewChange(true);
          setInternalHasFocus(true);
        }
      };
      const handleKeyDown2 = _default$a((event, day) => {
        switch (event.key) {
          case "ArrowUp":
            focusDay(utils2.addDays(day, -7));
            event.preventDefault();
            break;
          case "ArrowDown":
            focusDay(utils2.addDays(day, 7));
            event.preventDefault();
            break;
          case "ArrowLeft": {
            const newFocusedDayDefault = utils2.addDays(day, theme.direction === "ltr" ? -1 : 1);
            const nextAvailableMonth = theme.direction === "ltr" ? utils2.getPreviousMonth(day) : utils2.getNextMonth(day);
            const closestDayToFocus = findClosestEnabledDate({
              utils: utils2,
              date: newFocusedDayDefault,
              minDate: theme.direction === "ltr" ? utils2.startOfMonth(nextAvailableMonth) : newFocusedDayDefault,
              maxDate: theme.direction === "ltr" ? newFocusedDayDefault : utils2.endOfMonth(nextAvailableMonth),
              isDateDisabled
            });
            focusDay(closestDayToFocus || newFocusedDayDefault);
            event.preventDefault();
            break;
          }
          case "ArrowRight": {
            const newFocusedDayDefault = utils2.addDays(day, theme.direction === "ltr" ? 1 : -1);
            const nextAvailableMonth = theme.direction === "ltr" ? utils2.getNextMonth(day) : utils2.getPreviousMonth(day);
            const closestDayToFocus = findClosestEnabledDate({
              utils: utils2,
              date: newFocusedDayDefault,
              minDate: theme.direction === "ltr" ? newFocusedDayDefault : utils2.startOfMonth(nextAvailableMonth),
              maxDate: theme.direction === "ltr" ? utils2.endOfMonth(nextAvailableMonth) : newFocusedDayDefault,
              isDateDisabled
            });
            focusDay(closestDayToFocus || newFocusedDayDefault);
            event.preventDefault();
            break;
          }
          case "Home":
            focusDay(utils2.startOfWeek(day));
            event.preventDefault();
            break;
          case "End":
            focusDay(utils2.endOfWeek(day));
            event.preventDefault();
            break;
          case "PageUp":
            focusDay(utils2.getNextMonth(day));
            event.preventDefault();
            break;
          case "PageDown":
            focusDay(utils2.getPreviousMonth(day));
            event.preventDefault();
            break;
        }
      });
      const handleFocus = _default$a((event, day) => focusDay(day));
      const handleBlur = _default$a((event, day) => {
        if (internalHasFocus && utils2.isSameDay(internalFocusedDay, day)) {
          onFocusedViewChange == null ? void 0 : onFocusedViewChange(false);
        }
      });
      const currentMonthNumber = utils2.getMonth(currentMonth);
      const validSelectedDays = reactExports.useMemo(() => selectedDays.filter((day) => !!day).map((day) => utils2.startOfDay(day)), [utils2, selectedDays]);
      const transitionKey = currentMonthNumber;
      const slideNodeRef = reactExports.useMemo(() => /* @__PURE__ */ reactExports.createRef(), [transitionKey]);
      const startOfCurrentWeek = utils2.startOfWeek(now2);
      const focusableDay = reactExports.useMemo(() => {
        const startOfMonth = utils2.startOfMonth(currentMonth);
        const endOfMonth = utils2.endOfMonth(currentMonth);
        if (isDateDisabled(internalFocusedDay) || utils2.isAfterDay(internalFocusedDay, endOfMonth) || utils2.isBeforeDay(internalFocusedDay, startOfMonth)) {
          return findClosestEnabledDate({
            utils: utils2,
            date: internalFocusedDay,
            minDate: startOfMonth,
            maxDate: endOfMonth,
            disablePast,
            disableFuture,
            isDateDisabled
          });
        }
        return internalFocusedDay;
      }, [currentMonth, disableFuture, disablePast, internalFocusedDay, isDateDisabled, utils2]);
      const weeksToDisplay = reactExports.useMemo(() => {
        const toDisplay = utils2.getWeekArray(currentMonth);
        let nextMonth = utils2.addMonths(currentMonth, 1);
        while (fixedWeekNumber && toDisplay.length < fixedWeekNumber) {
          const additionalWeeks = utils2.getWeekArray(nextMonth);
          const hasCommonWeek = utils2.isSameDay(toDisplay[toDisplay.length - 1][0], additionalWeeks[0][0]);
          additionalWeeks.slice(hasCommonWeek ? 1 : 0).forEach((week) => {
            if (toDisplay.length < fixedWeekNumber) {
              toDisplay.push(week);
            }
          });
          nextMonth = utils2.addMonths(nextMonth, 1);
        }
        return toDisplay;
      }, [currentMonth, fixedWeekNumber, utils2]);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
        role: "grid",
        "aria-labelledby": gridLabelId,
        children: [/* @__PURE__ */ jsxRuntimeExports.jsxs(PickersCalendarDayHeader, {
          role: "row",
          className: classes.header,
          children: [displayWeekNumber && /* @__PURE__ */ jsxRuntimeExports.jsx(PickersCalendarWeekNumberLabel, {
            variant: "caption",
            role: "columnheader",
            "aria-label": localeText.calendarWeekNumberHeaderLabel,
            className: classes.weekNumberLabel,
            children: localeText.calendarWeekNumberHeaderText
          }), utils2.getWeekdays().map((day, i) => {
            var _dayOfWeekFormatter;
            return /* @__PURE__ */ jsxRuntimeExports.jsx(PickersCalendarWeekDayLabel, {
              variant: "caption",
              role: "columnheader",
              "aria-label": utils2.format(utils2.addDays(startOfCurrentWeek, i), "weekday"),
              className: classes.weekDayLabel,
              children: (_dayOfWeekFormatter = dayOfWeekFormatter == null ? void 0 : dayOfWeekFormatter(day)) != null ? _dayOfWeekFormatter : day
            }, day + i.toString());
          })]
        }), loading ? /* @__PURE__ */ jsxRuntimeExports.jsx(PickersCalendarLoadingContainer, {
          className: classes.loadingContainer,
          children: renderLoading()
        }) : /* @__PURE__ */ jsxRuntimeExports.jsx(PickersCalendarSlideTransition, _extends$1({
          transKey: transitionKey,
          onExited: onMonthSwitchingAnimationEnd,
          reduceAnimations,
          slideDirection,
          className: clsx(className, classes.slideTransition)
        }, TransitionProps, {
          nodeRef: slideNodeRef,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(PickersCalendarWeekContainer, {
            ref: slideNodeRef,
            role: "rowgroup",
            className: classes.monthContainer,
            children: weeksToDisplay.map((week, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs(PickersCalendarWeek, {
              role: "row",
              className: classes.weekContainer,
              "aria-rowindex": index + 1,
              children: [displayWeekNumber && /* @__PURE__ */ jsxRuntimeExports.jsx(PickersCalendarWeekNumber, {
                className: classes.weekNumber,
                role: "rowheader",
                "aria-label": localeText.calendarWeekNumberAriaLabelText(utils2.getWeekNumber(week[0])),
                children: localeText.calendarWeekNumberText(utils2.getWeekNumber(week[0]))
              }), week.map((day, dayIndex) => /* @__PURE__ */ jsxRuntimeExports.jsx(WrappedDay, {
                parentProps: props,
                day,
                selectedDays: validSelectedDays,
                focusableDay,
                onKeyDown: handleKeyDown2,
                onFocus: handleFocus,
                onBlur: handleBlur,
                onDaySelect: handleDaySelect,
                isDateDisabled,
                currentMonthNumber,
                isViewFocused: internalHasFocus,
                "aria-colindex": dayIndex + 1
              }, day.toString()))]
            }, `week-${week[0]}`))
          })
        }))]
      });
    }
    const createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils2) => (state, action) => {
      switch (action.type) {
        case "changeMonth":
          return _extends$1({}, state, {
            slideDirection: action.direction,
            currentMonth: action.newMonth,
            isMonthSwitchingAnimating: !reduceAnimations
          });
        case "finishMonthSwitchingAnimation":
          return _extends$1({}, state, {
            isMonthSwitchingAnimating: false
          });
        case "changeFocusedDay": {
          if (state.focusedDay != null && action.focusedDay != null && utils2.isSameDay(action.focusedDay, state.focusedDay)) {
            return state;
          }
          const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils2.isSameMonth(state.currentMonth, action.focusedDay);
          return _extends$1({}, state, {
            focusedDay: action.focusedDay,
            isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,
            currentMonth: needMonthSwitch ? utils2.startOfMonth(action.focusedDay) : state.currentMonth,
            slideDirection: action.focusedDay != null && utils2.isAfterDay(action.focusedDay, state.currentMonth) ? "left" : "right"
          });
        }
        default:
          throw new Error("missing support");
      }
    };
    const useCalendarState = ({
      value: value2,
      defaultCalendarMonth,
      disableFuture,
      disablePast,
      disableSwitchToMonthOnDayFocus = false,
      maxDate,
      minDate,
      onMonthChange,
      reduceAnimations,
      shouldDisableDate
    }) => {
      var _ref;
      const now2 = useNow();
      const utils2 = useUtils();
      const reducerFn = reactExports.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils2)).current;
      const [calendarState, dispatch] = reactExports.useReducer(reducerFn, {
        isMonthSwitchingAnimating: false,
        focusedDay: value2 || now2,
        currentMonth: utils2.startOfMonth((_ref = value2 != null ? value2 : defaultCalendarMonth) != null ? _ref : clamp(utils2, now2, minDate, maxDate)),
        slideDirection: "left"
      });
      const handleChangeMonth = reactExports.useCallback((payload) => {
        dispatch(_extends$1({
          type: "changeMonth"
        }, payload));
        if (onMonthChange) {
          onMonthChange(payload.newMonth);
        }
      }, [onMonthChange]);
      const changeMonth = reactExports.useCallback((newDate) => {
        const newDateRequested = newDate;
        if (utils2.isSameMonth(newDateRequested, calendarState.currentMonth)) {
          return;
        }
        handleChangeMonth({
          newMonth: utils2.startOfMonth(newDateRequested),
          direction: utils2.isAfterDay(newDateRequested, calendarState.currentMonth) ? "left" : "right"
        });
      }, [calendarState.currentMonth, handleChangeMonth, utils2]);
      const isDateDisabled = useIsDateDisabled({
        shouldDisableDate,
        minDate,
        maxDate,
        disableFuture,
        disablePast
      });
      const onMonthSwitchingAnimationEnd = reactExports.useCallback(() => {
        dispatch({
          type: "finishMonthSwitchingAnimation"
        });
      }, []);
      const changeFocusedDay = _default$a((newFocusedDate, withoutMonthSwitchingAnimation) => {
        if (!isDateDisabled(newFocusedDate)) {
          dispatch({
            type: "changeFocusedDay",
            focusedDay: newFocusedDate,
            withoutMonthSwitchingAnimation
          });
        }
      });
      return {
        calendarState,
        changeMonth,
        changeFocusedDay,
        isDateDisabled,
        onMonthSwitchingAnimationEnd,
        handleChangeMonth
      };
    };
    function getInputAdornmentUtilityClass(slot) {
      return generateUtilityClass("MuiInputAdornment", slot);
    }
    const inputAdornmentClasses = generateUtilityClasses("MuiInputAdornment", ["root", "filled", "standard", "outlined", "positionStart", "positionEnd", "disablePointerEvents", "hiddenLabel", "sizeSmall"]);
    const inputAdornmentClasses$1 = inputAdornmentClasses;
    var _span;
    const _excluded$S = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"];
    const overridesResolver$2 = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles2.disablePointerEvents, styles2[ownerState.variant]];
    };
    const useUtilityClasses$v = (ownerState) => {
      const {
        classes,
        disablePointerEvents,
        hiddenLabel,
        position: position2,
        size,
        variant
      } = ownerState;
      const slots = {
        root: ["root", disablePointerEvents && "disablePointerEvents", position2 && `position${capitalize(position2)}`, variant, hiddenLabel && "hiddenLabel", size && `size${capitalize(size)}`]
      };
      return composeClasses(slots, getInputAdornmentUtilityClass, classes);
    };
    const InputAdornmentRoot = styled$1("div", {
      name: "MuiInputAdornment",
      slot: "Root",
      overridesResolver: overridesResolver$2
    })(({
      theme,
      ownerState
    }) => _extends$1({
      display: "flex",
      height: "0.01em",
      // Fix IE11 flexbox alignment. To remove at some point.
      maxHeight: "2em",
      alignItems: "center",
      whiteSpace: "nowrap",
      color: (theme.vars || theme).palette.action.active
    }, ownerState.variant === "filled" && {
      // Styles applied to the root element if `variant="filled"`.
      [`&.${inputAdornmentClasses$1.positionStart}&:not(.${inputAdornmentClasses$1.hiddenLabel})`]: {
        marginTop: 16
      }
    }, ownerState.position === "start" && {
      // Styles applied to the root element if `position="start"`.
      marginRight: 8
    }, ownerState.position === "end" && {
      // Styles applied to the root element if `position="end"`.
      marginLeft: 8
    }, ownerState.disablePointerEvents === true && {
      // Styles applied to the root element if `disablePointerEvents={true}`.
      pointerEvents: "none"
    }));
    const InputAdornment = /* @__PURE__ */ reactExports.forwardRef(function InputAdornment2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiInputAdornment"
      });
      const {
        children,
        className,
        component = "div",
        disablePointerEvents = false,
        disableTypography = false,
        position: position2,
        variant: variantProp
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$S);
      const muiFormControl = useFormControl() || {};
      let variant = variantProp;
      if (variantProp && muiFormControl.variant)
        ;
      if (muiFormControl && !variant) {
        variant = muiFormControl.variant;
      }
      const ownerState = _extends$1({}, props, {
        hiddenLabel: muiFormControl.hiddenLabel,
        size: muiFormControl.size,
        disablePointerEvents,
        position: position2,
        variant
      });
      const classes = useUtilityClasses$v(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlContext$1.Provider, {
        value: null,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(InputAdornmentRoot, _extends$1({
          as: component,
          ownerState,
          className: clsx(classes.root, className),
          ref
        }, other, {
          children: typeof children === "string" && !disableTypography ? /* @__PURE__ */ jsxRuntimeExports.jsx(Typography$1, {
            color: "text.secondary",
            children
          }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
            children: [position2 === "start" ? (
              /* notranslate needed while Google Translate will not fix zero-width space issue */
              _span || (_span = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
                className: "notranslate",
                children: "​"
              }))
            ) : null, children]
          })
        }))
      });
    });
    const MuiInputAdornment = InputAdornment;
    var useId$1 = {};
    Object.defineProperty(useId$1, "__esModule", {
      value: true
    });
    var _default$7 = useId$1.default = useId;
    var React = _interopRequireWildcard(reactExports);
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    let globalId = 0;
    function useGlobalId(idOverride) {
      const [defaultId, setDefaultId] = React.useState(idOverride);
      const id2 = idOverride || defaultId;
      React.useEffect(() => {
        if (defaultId == null) {
          globalId += 1;
          setDefaultId(`mui-${globalId}`);
        }
      }, [defaultId]);
      return id2;
    }
    const maybeReactUseId = React["useId"];
    function useId(idOverride) {
      if (maybeReactUseId !== void 0) {
        const reactId = maybeReactUseId();
        return idOverride != null ? idOverride : reactId;
      }
      return useGlobalId(idOverride);
    }
    const _excluded$R = ["props", "getOpenDialogAriaText"], _excluded2$4 = ["ownerState"], _excluded3$3 = ["ownerState"];
    const useDesktopPicker = (_ref) => {
      var _innerSlotProps$toolb, _innerSlotProps$toolb2, _slots$inputAdornment, _slots$openPickerButt, _slots$layout;
      let {
        props,
        getOpenDialogAriaText
      } = _ref, pickerParams = _objectWithoutPropertiesLoose(_ref, _excluded$R);
      const {
        slots,
        slotProps: innerSlotProps,
        className,
        sx,
        format: format2,
        formatDensity,
        label,
        inputRef,
        readOnly,
        disabled,
        autoFocus,
        localeText
      } = props;
      const utils2 = useUtils();
      const internalInputRef = reactExports.useRef(null);
      const containerRef = reactExports.useRef(null);
      const labelId = _default$7();
      const isToolbarHidden = (_innerSlotProps$toolb = innerSlotProps == null ? void 0 : (_innerSlotProps$toolb2 = innerSlotProps.toolbar) == null ? void 0 : _innerSlotProps$toolb2.hidden) != null ? _innerSlotProps$toolb : false;
      const {
        open,
        actions,
        hasUIView,
        layoutProps,
        renderCurrentView,
        shouldRestoreFocus,
        fieldProps: pickerFieldProps
      } = usePicker(_extends$1({}, pickerParams, {
        props,
        inputRef: internalInputRef,
        autoFocusView: true,
        additionalViewProps: {},
        wrapperVariant: "desktop"
      }));
      const InputAdornment2 = (_slots$inputAdornment = slots.inputAdornment) != null ? _slots$inputAdornment : MuiInputAdornment;
      const _useSlotProps = useSlotProps({
        elementType: InputAdornment2,
        externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.inputAdornment,
        additionalProps: {
          position: "end"
        },
        ownerState: props
      }), inputAdornmentProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2$4);
      const OpenPickerButton = (_slots$openPickerButt = slots.openPickerButton) != null ? _slots$openPickerButt : IconButton$1;
      const _useSlotProps2 = useSlotProps({
        elementType: OpenPickerButton,
        externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.openPickerButton,
        additionalProps: {
          disabled: disabled || readOnly,
          onClick: actions.onOpen,
          "aria-label": getOpenDialogAriaText(pickerFieldProps.value, utils2),
          edge: inputAdornmentProps.position
        },
        ownerState: props
      }), openPickerButtonProps = _objectWithoutPropertiesLoose(_useSlotProps2, _excluded3$3);
      const OpenPickerIcon = slots.openPickerIcon;
      const Field2 = slots.field;
      const fieldProps = useSlotProps({
        elementType: Field2,
        externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.field,
        additionalProps: _extends$1({}, pickerFieldProps, isToolbarHidden && {
          id: labelId
        }, {
          readOnly,
          disabled,
          className,
          sx,
          format: format2,
          formatDensity,
          label,
          autoFocus: autoFocus && !props.open,
          focused: open ? true : void 0
        }),
        ownerState: props
      });
      if (hasUIView) {
        fieldProps.InputProps = _extends$1({}, fieldProps.InputProps, {
          ref: containerRef,
          [`${inputAdornmentProps.position}Adornment`]: /* @__PURE__ */ jsxRuntimeExports.jsx(InputAdornment2, _extends$1({}, inputAdornmentProps, {
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(OpenPickerButton, _extends$1({}, openPickerButtonProps, {
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(OpenPickerIcon, _extends$1({}, innerSlotProps == null ? void 0 : innerSlotProps.openPickerIcon))
            }))
          }))
        });
      }
      const slotsForField = _extends$1({
        textField: slots.textField
      }, fieldProps.slots);
      const Layout = (_slots$layout = slots.layout) != null ? _slots$layout : PickersLayout;
      const handleInputRef = _default$9(internalInputRef, fieldProps.inputRef, inputRef);
      let labelledById = labelId;
      if (isToolbarHidden) {
        if (label) {
          labelledById = `${labelId}-label`;
        } else {
          labelledById = void 0;
        }
      }
      const slotProps = _extends$1({}, innerSlotProps, {
        toolbar: _extends$1({}, innerSlotProps == null ? void 0 : innerSlotProps.toolbar, {
          titleId: labelId
        }),
        popper: _extends$1({
          "aria-labelledby": labelledById
        }, innerSlotProps == null ? void 0 : innerSlotProps.popper)
      });
      const renderPicker = () => /* @__PURE__ */ jsxRuntimeExports.jsxs(LocalizationProvider, {
        localeText,
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Field2, _extends$1({}, fieldProps, {
          slots: slotsForField,
          slotProps,
          inputRef: handleInputRef
        })), /* @__PURE__ */ jsxRuntimeExports.jsx(PickersPopper, _extends$1({
          role: "dialog",
          placement: "bottom-start",
          anchorEl: containerRef.current
        }, actions, {
          open,
          slots,
          slotProps,
          shouldRestoreFocus,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Layout, _extends$1({}, layoutProps, slotProps == null ? void 0 : slotProps.layout, {
            slots,
            slotProps,
            children: renderCurrentView()
          }))
        }))]
      });
      return {
        renderPicker
      };
    };
    const _excluded$Q = ["value", "defaultValue", "format", "formatDensity", "shouldRespectLeadingZeros", "onChange", "readOnly", "onError", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear", "minDate", "maxDate", "disableFuture", "disablePast", "selectedSections", "onSelectedSectionsChange", "unstableFieldRef"];
    const useDefaultizedDateField = (props) => {
      var _props$disablePast, _props$disableFuture, _props$format;
      const utils2 = useUtils();
      const defaultDates = useDefaultDates();
      return _extends$1({}, props, {
        disablePast: (_props$disablePast = props.disablePast) != null ? _props$disablePast : false,
        disableFuture: (_props$disableFuture = props.disableFuture) != null ? _props$disableFuture : false,
        format: (_props$format = props.format) != null ? _props$format : utils2.formats.keyboardDate,
        minDate: applyDefaultDate(utils2, props.minDate, defaultDates.minDate),
        maxDate: applyDefaultDate(utils2, props.maxDate, defaultDates.maxDate)
      });
    };
    const useDateField = ({
      props,
      inputRef
    }) => {
      const _useDefaultizedDateFi = useDefaultizedDateField(props), {
        value: value2,
        defaultValue: defaultValue2,
        format: format2,
        formatDensity,
        shouldRespectLeadingZeros,
        onChange,
        readOnly,
        onError,
        shouldDisableDate,
        shouldDisableMonth,
        shouldDisableYear,
        minDate,
        maxDate,
        disableFuture,
        disablePast,
        selectedSections,
        onSelectedSectionsChange,
        unstableFieldRef
      } = _useDefaultizedDateFi, other = _objectWithoutPropertiesLoose(_useDefaultizedDateFi, _excluded$Q);
      return useField({
        inputRef,
        forwardedProps: other,
        internalProps: {
          value: value2,
          defaultValue: defaultValue2,
          format: format2,
          formatDensity,
          shouldRespectLeadingZeros,
          onChange,
          readOnly,
          onError,
          shouldDisableDate,
          shouldDisableMonth,
          shouldDisableYear,
          minDate,
          maxDate,
          disableFuture,
          disablePast,
          selectedSections,
          onSelectedSectionsChange,
          unstableFieldRef
        },
        valueManager: singleItemValueManager,
        fieldValueManager: singleItemFieldValueManager,
        validator: validateDate,
        valueType: "date"
      });
    };
    const _excluded$P = ["components", "componentsProps", "slots", "slotProps", "InputProps", "inputProps"], _excluded2$3 = ["inputRef"], _excluded3$2 = ["ref", "onPaste", "inputMode", "readOnly"];
    const DateField = /* @__PURE__ */ reactExports.forwardRef(function DateField2(inProps, ref) {
      var _ref, _slots$textField, _slotProps$textField;
      const themeProps = useThemeProps({
        props: inProps,
        name: "MuiDateField"
      });
      const {
        components,
        componentsProps,
        slots,
        slotProps,
        InputProps,
        inputProps
      } = themeProps, other = _objectWithoutPropertiesLoose(themeProps, _excluded$P);
      const ownerState = themeProps;
      const TextField2 = (_ref = (_slots$textField = slots == null ? void 0 : slots.textField) != null ? _slots$textField : components == null ? void 0 : components.TextField) != null ? _ref : TextField$1;
      const _useSlotProps = useSlotProps({
        elementType: TextField2,
        externalSlotProps: (_slotProps$textField = slotProps == null ? void 0 : slotProps.textField) != null ? _slotProps$textField : componentsProps == null ? void 0 : componentsProps.textField,
        externalForwardedProps: other,
        ownerState
      }), {
        inputRef: externalInputRef
      } = _useSlotProps, textFieldProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2$3);
      textFieldProps.inputProps = _extends$1({}, textFieldProps.inputProps, inputProps);
      textFieldProps.InputProps = _extends$1({}, textFieldProps.InputProps, InputProps);
      const _useDateField = useDateField({
        props: textFieldProps,
        inputRef: externalInputRef
      }), {
        ref: inputRef,
        onPaste,
        inputMode,
        readOnly
      } = _useDateField, fieldProps = _objectWithoutPropertiesLoose(_useDateField, _excluded3$2);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(TextField2, _extends$1({
        ref
      }, fieldProps, {
        InputProps: _extends$1({}, fieldProps.InputProps, {
          readOnly
        }),
        inputProps: _extends$1({}, fieldProps.inputProps, {
          inputMode,
          onPaste,
          ref: inputRef
        })
      }));
    });
    function getPickersMonthUtilityClass(slot) {
      return generateUtilityClass("MuiPickersMonth", slot);
    }
    const pickersMonthClasses = generateUtilityClasses("MuiPickersMonth", ["root", "monthButton", "disabled", "selected"]);
    const _excluded$O = ["autoFocus", "children", "disabled", "selected", "value", "tabIndex", "onClick", "onKeyDown", "onFocus", "onBlur", "aria-current", "monthsPerRow"];
    const useUtilityClasses$u = (ownerState) => {
      const {
        disabled,
        selected,
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        monthButton: ["monthButton", disabled && "disabled", selected && "selected"]
      };
      return composeClasses(slots, getPickersMonthUtilityClass, classes);
    };
    const PickersMonthRoot = styled$1("div", {
      name: "MuiPickersMonth",
      slot: "Root",
      overridesResolver: (_2, styles2) => [styles2.root]
    })(({
      ownerState
    }) => ({
      flexBasis: ownerState.monthsPerRow === 3 ? "33.3%" : "25%",
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    }));
    const PickersMonthButton = styled$1("button", {
      name: "MuiPickersMonth",
      slot: "MonthButton",
      overridesResolver: (_2, styles2) => [styles2.monthButton, {
        [`&.${pickersMonthClasses.disabled}`]: styles2.disabled
      }, {
        [`&.${pickersMonthClasses.selected}`]: styles2.selected
      }]
    })(({
      theme
    }) => _extends$1({
      color: "unset",
      backgroundColor: "transparent",
      border: 0,
      outline: 0
    }, theme.typography.subtitle1, {
      margin: "8px 0",
      height: 36,
      width: 72,
      borderRadius: 18,
      cursor: "pointer",
      "&:focus": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
      },
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
      },
      "&:disabled": {
        cursor: "auto",
        pointerEvents: "none"
      },
      [`&.${pickersMonthClasses.disabled}`]: {
        color: (theme.vars || theme).palette.text.secondary
      },
      [`&.${pickersMonthClasses.selected}`]: {
        color: (theme.vars || theme).palette.primary.contrastText,
        backgroundColor: (theme.vars || theme).palette.primary.main,
        "&:focus, &:hover": {
          backgroundColor: (theme.vars || theme).palette.primary.dark
        }
      }
    }));
    const PickersMonth = /* @__PURE__ */ reactExports.memo(function PickersMonth2(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersMonth"
      });
      const {
        autoFocus,
        children,
        disabled,
        value: value2,
        tabIndex,
        onClick,
        onKeyDown,
        onFocus,
        onBlur,
        "aria-current": ariaCurrent
        // We don't want to forward this prop to the root element
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$O);
      const ref = reactExports.useRef(null);
      const classes = useUtilityClasses$u(props);
      useEnhancedEffect$3(() => {
        if (autoFocus) {
          var _ref$current;
          (_ref$current = ref.current) == null ? void 0 : _ref$current.focus();
        }
      }, [autoFocus]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PickersMonthRoot, _extends$1({
        className: classes.root,
        ownerState: props
      }, other, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(PickersMonthButton, {
          ref,
          disabled,
          type: "button",
          tabIndex: disabled ? -1 : tabIndex,
          "aria-current": ariaCurrent,
          onClick: (event) => onClick(event, value2),
          onKeyDown: (event) => onKeyDown(event, value2),
          onFocus: (event) => onFocus(event, value2),
          onBlur: (event) => onBlur(event, value2),
          className: classes.monthButton,
          ownerState: props,
          children
        })
      }));
    });
    function getMonthCalendarUtilityClass(slot) {
      return generateUtilityClass("MuiMonthCalendar", slot);
    }
    generateUtilityClasses("MuiMonthCalendar", ["root"]);
    const _excluded$N = ["className", "value", "defaultValue", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "shouldDisableMonth", "readOnly", "disableHighlightToday", "autoFocus", "onMonthFocus", "hasFocus", "onFocusedViewChange", "monthsPerRow"];
    const useUtilityClasses$t = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getMonthCalendarUtilityClass, classes);
    };
    function useMonthCalendarDefaultizedProps(props, name) {
      const utils2 = useUtils();
      const defaultDates = useDefaultDates();
      const themeProps = useThemeProps({
        props,
        name
      });
      return _extends$1({
        disableFuture: false,
        disablePast: false
      }, themeProps, {
        minDate: applyDefaultDate(utils2, themeProps.minDate, defaultDates.minDate),
        maxDate: applyDefaultDate(utils2, themeProps.maxDate, defaultDates.maxDate)
      });
    }
    const MonthCalendarRoot = styled$1("div", {
      name: "MuiMonthCalendar",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      display: "flex",
      flexWrap: "wrap",
      alignContent: "stretch",
      padding: "0 4px",
      width: 320
    });
    const MonthCalendar = /* @__PURE__ */ reactExports.forwardRef(function MonthCalendar2(inProps, ref) {
      const now2 = useNow();
      const theme = useTheme$2();
      const utils2 = useUtils();
      const props = useMonthCalendarDefaultizedProps(inProps, "MuiMonthCalendar");
      const {
        className,
        value: valueProp,
        defaultValue: defaultValue2,
        disabled,
        disableFuture,
        disablePast,
        maxDate,
        minDate,
        onChange,
        shouldDisableMonth,
        readOnly,
        disableHighlightToday,
        autoFocus = false,
        onMonthFocus,
        hasFocus,
        onFocusedViewChange,
        monthsPerRow = 3
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$N);
      const ownerState = props;
      const classes = useUtilityClasses$t(ownerState);
      const [value2, setValue2] = useControlled$2({
        name: "MonthCalendar",
        state: "value",
        controlled: valueProp,
        default: defaultValue2 != null ? defaultValue2 : null
      });
      const todayMonth = reactExports.useMemo(() => utils2.getMonth(now2), [utils2, now2]);
      const selectedDateOrStartOfMonth = reactExports.useMemo(() => value2 != null ? value2 : utils2.startOfMonth(now2), [now2, utils2, value2]);
      const selectedMonth = reactExports.useMemo(() => {
        if (value2 != null) {
          return utils2.getMonth(value2);
        }
        if (disableHighlightToday) {
          return null;
        }
        return utils2.getMonth(now2);
      }, [now2, value2, utils2, disableHighlightToday]);
      const [focusedMonth, setFocusedMonth] = reactExports.useState(() => selectedMonth || todayMonth);
      const [internalHasFocus, setInternalHasFocus] = useControlled$2({
        name: "MonthCalendar",
        state: "hasFocus",
        controlled: hasFocus,
        default: autoFocus != null ? autoFocus : false
      });
      const changeHasFocus = useEventCallback$2((newHasFocus) => {
        setInternalHasFocus(newHasFocus);
        if (onFocusedViewChange) {
          onFocusedViewChange(newHasFocus);
        }
      });
      const isMonthDisabled = useEventCallback$2((month) => {
        const firstEnabledMonth = utils2.startOfMonth(disablePast && utils2.isAfter(now2, minDate) ? now2 : minDate);
        const lastEnabledMonth = utils2.startOfMonth(disableFuture && utils2.isBefore(now2, maxDate) ? now2 : maxDate);
        if (utils2.isBefore(month, firstEnabledMonth)) {
          return true;
        }
        if (utils2.isAfter(month, lastEnabledMonth)) {
          return true;
        }
        if (!shouldDisableMonth) {
          return false;
        }
        return shouldDisableMonth(month);
      });
      const handleMonthSelection = useEventCallback$2((event, month) => {
        if (readOnly) {
          return;
        }
        const newDate = utils2.setMonth(selectedDateOrStartOfMonth, month);
        setValue2(newDate);
        onChange == null ? void 0 : onChange(newDate);
      });
      const focusMonth = useEventCallback$2((month) => {
        if (!isMonthDisabled(utils2.setMonth(selectedDateOrStartOfMonth, month))) {
          setFocusedMonth(month);
          changeHasFocus(true);
          if (onMonthFocus) {
            onMonthFocus(month);
          }
        }
      });
      reactExports.useEffect(() => {
        setFocusedMonth((prevFocusedMonth) => selectedMonth !== null && prevFocusedMonth !== selectedMonth ? selectedMonth : prevFocusedMonth);
      }, [selectedMonth]);
      const handleKeyDown2 = useEventCallback$2((event, month) => {
        const monthsInYear = 12;
        const monthsInRow = 3;
        switch (event.key) {
          case "ArrowUp":
            focusMonth((monthsInYear + month - monthsInRow) % monthsInYear);
            event.preventDefault();
            break;
          case "ArrowDown":
            focusMonth((monthsInYear + month + monthsInRow) % monthsInYear);
            event.preventDefault();
            break;
          case "ArrowLeft":
            focusMonth((monthsInYear + month + (theme.direction === "ltr" ? -1 : 1)) % monthsInYear);
            event.preventDefault();
            break;
          case "ArrowRight":
            focusMonth((monthsInYear + month + (theme.direction === "ltr" ? 1 : -1)) % monthsInYear);
            event.preventDefault();
            break;
        }
      });
      const handleMonthFocus = useEventCallback$2((event, month) => {
        focusMonth(month);
      });
      const handleMonthBlur = useEventCallback$2((event, month) => {
        if (focusedMonth === month) {
          changeHasFocus(false);
        }
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(MonthCalendarRoot, _extends$1({
        ref,
        className: clsx(classes.root, className),
        ownerState
      }, other, {
        children: utils2.getMonthArray(selectedDateOrStartOfMonth).map((month) => {
          const monthNumber = utils2.getMonth(month);
          const monthText = utils2.format(month, "monthShort");
          const isSelected = monthNumber === selectedMonth;
          const isDisabled = disabled || isMonthDisabled(month);
          return /* @__PURE__ */ jsxRuntimeExports.jsx(PickersMonth, {
            selected: isSelected,
            value: monthNumber,
            onClick: handleMonthSelection,
            onKeyDown: handleKeyDown2,
            autoFocus: internalHasFocus && monthNumber === focusedMonth,
            disabled: isDisabled,
            tabIndex: monthNumber === focusedMonth ? 0 : -1,
            onFocus: handleMonthFocus,
            onBlur: handleMonthBlur,
            "aria-current": todayMonth === monthNumber ? "date" : void 0,
            monthsPerRow,
            children: monthText
          }, monthText);
        })
      }));
    });
    function getPickersYearUtilityClass(slot) {
      return generateUtilityClass("MuiPickersYear", slot);
    }
    const pickersYearClasses = generateUtilityClasses("MuiPickersYear", ["root", "yearButton", "selected", "disabled"]);
    const _excluded$M = ["autoFocus", "className", "children", "disabled", "selected", "value", "tabIndex", "onClick", "onKeyDown", "onFocus", "onBlur", "aria-current", "yearsPerRow"];
    const useUtilityClasses$s = (ownerState) => {
      const {
        disabled,
        selected,
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        yearButton: ["yearButton", disabled && "disabled", selected && "selected"]
      };
      return composeClasses(slots, getPickersYearUtilityClass, classes);
    };
    const PickersYearRoot = styled$1("div", {
      name: "MuiPickersYear",
      slot: "Root",
      overridesResolver: (_2, styles2) => [styles2.root]
    })(({
      ownerState
    }) => ({
      flexBasis: ownerState.yearsPerRow === 3 ? "33.3%" : "25%",
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    }));
    const PickersYearButton = styled$1("button", {
      name: "MuiPickersYear",
      slot: "YearButton",
      overridesResolver: (_2, styles2) => [styles2.yearButton, {
        [`&.${pickersYearClasses.disabled}`]: styles2.disabled
      }, {
        [`&.${pickersYearClasses.selected}`]: styles2.selected
      }]
    })(({
      theme
    }) => _extends$1({
      color: "unset",
      backgroundColor: "transparent",
      border: 0,
      outline: 0
    }, theme.typography.subtitle1, {
      margin: "8px 0",
      height: 36,
      width: 72,
      borderRadius: 18,
      cursor: "pointer",
      "&:focus": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.action.active, theme.palette.action.focusOpacity)
      },
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
      },
      "&:disabled": {
        cursor: "auto",
        pointerEvents: "none"
      },
      [`&.${pickersYearClasses.disabled}`]: {
        color: (theme.vars || theme).palette.text.secondary
      },
      [`&.${pickersYearClasses.selected}`]: {
        color: (theme.vars || theme).palette.primary.contrastText,
        backgroundColor: (theme.vars || theme).palette.primary.main,
        "&:focus, &:hover": {
          backgroundColor: (theme.vars || theme).palette.primary.dark
        }
      }
    }));
    const PickersYear = /* @__PURE__ */ reactExports.memo(function PickersYear2(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersYear"
      });
      const {
        autoFocus,
        className,
        children,
        disabled,
        value: value2,
        tabIndex,
        onClick,
        onKeyDown,
        onFocus,
        onBlur,
        "aria-current": ariaCurrent
        // We don't want to forward this prop to the root element
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$M);
      const ref = reactExports.useRef(null);
      const classes = useUtilityClasses$s(props);
      reactExports.useEffect(() => {
        if (autoFocus) {
          ref.current.focus();
        }
      }, [autoFocus]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PickersYearRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState: props
      }, other, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(PickersYearButton, {
          ref,
          disabled,
          type: "button",
          tabIndex: disabled ? -1 : tabIndex,
          "aria-current": ariaCurrent,
          onClick: (event) => onClick(event, value2),
          onKeyDown: (event) => onKeyDown(event, value2),
          onFocus: (event) => onFocus(event, value2),
          onBlur: (event) => onBlur(event, value2),
          className: classes.yearButton,
          ownerState: props,
          children
        })
      }));
    });
    function getYearCalendarUtilityClass(slot) {
      return generateUtilityClass("MuiYearCalendar", slot);
    }
    generateUtilityClasses("MuiYearCalendar", ["root"]);
    const _excluded$L = ["autoFocus", "className", "value", "defaultValue", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "readOnly", "shouldDisableYear", "disableHighlightToday", "onYearFocus", "hasFocus", "onFocusedViewChange", "yearsPerRow"];
    const useUtilityClasses$r = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getYearCalendarUtilityClass, classes);
    };
    function useYearCalendarDefaultizedProps(props, name) {
      const utils2 = useUtils();
      const defaultDates = useDefaultDates();
      const themeProps = useThemeProps({
        props,
        name
      });
      return _extends$1({
        disablePast: false,
        disableFuture: false
      }, themeProps, {
        minDate: applyDefaultDate(utils2, themeProps.minDate, defaultDates.minDate),
        maxDate: applyDefaultDate(utils2, themeProps.maxDate, defaultDates.maxDate)
      });
    }
    const YearCalendarRoot = styled$1("div", {
      name: "MuiYearCalendar",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      display: "flex",
      flexDirection: "row",
      flexWrap: "wrap",
      overflowY: "auto",
      height: "100%",
      padding: "0 4px",
      width: 320,
      maxHeight: 304
    });
    const YearCalendar = /* @__PURE__ */ reactExports.forwardRef(function YearCalendar2(inProps, ref) {
      const now2 = useNow();
      const theme = useTheme$2();
      const utils2 = useUtils();
      const props = useYearCalendarDefaultizedProps(inProps, "MuiYearCalendar");
      const {
        autoFocus,
        className,
        value: valueProp,
        defaultValue: defaultValue2,
        disabled,
        disableFuture,
        disablePast,
        maxDate,
        minDate,
        onChange,
        readOnly,
        shouldDisableYear,
        disableHighlightToday,
        onYearFocus,
        hasFocus,
        onFocusedViewChange,
        yearsPerRow = 3
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$L);
      const ownerState = props;
      const classes = useUtilityClasses$r(ownerState);
      const [value2, setValue2] = useControlled$2({
        name: "YearCalendar",
        state: "value",
        controlled: valueProp,
        default: defaultValue2 != null ? defaultValue2 : null
      });
      const selectedDateOrStartOfYear = reactExports.useMemo(() => value2 != null ? value2 : utils2.startOfYear(now2), [now2, utils2, value2]);
      const todayYear = reactExports.useMemo(() => utils2.getYear(now2), [utils2, now2]);
      const selectedYear = reactExports.useMemo(() => {
        if (value2 != null) {
          return utils2.getYear(value2);
        }
        if (disableHighlightToday) {
          return null;
        }
        return utils2.getYear(now2);
      }, [now2, value2, utils2, disableHighlightToday]);
      const [focusedYear, setFocusedYear] = reactExports.useState(() => selectedYear || todayYear);
      const [internalHasFocus, setInternalHasFocus] = useControlled$2({
        name: "YearCalendar",
        state: "hasFocus",
        controlled: hasFocus,
        default: autoFocus != null ? autoFocus : false
      });
      const changeHasFocus = useEventCallback$2((newHasFocus) => {
        setInternalHasFocus(newHasFocus);
        if (onFocusedViewChange) {
          onFocusedViewChange(newHasFocus);
        }
      });
      const isYearDisabled = useEventCallback$2((dateToValidate) => {
        if (disablePast && utils2.isBeforeYear(dateToValidate, now2)) {
          return true;
        }
        if (disableFuture && utils2.isAfterYear(dateToValidate, now2)) {
          return true;
        }
        if (minDate && utils2.isBeforeYear(dateToValidate, minDate)) {
          return true;
        }
        if (maxDate && utils2.isAfterYear(dateToValidate, maxDate)) {
          return true;
        }
        if (shouldDisableYear && shouldDisableYear(dateToValidate)) {
          return true;
        }
        return false;
      });
      const handleYearSelection = useEventCallback$2((event, year) => {
        if (readOnly) {
          return;
        }
        const newDate = utils2.setYear(selectedDateOrStartOfYear, year);
        setValue2(newDate);
        onChange == null ? void 0 : onChange(newDate);
      });
      const focusYear = useEventCallback$2((year) => {
        if (!isYearDisabled(utils2.setYear(selectedDateOrStartOfYear, year))) {
          setFocusedYear(year);
          changeHasFocus(true);
          onYearFocus == null ? void 0 : onYearFocus(year);
        }
      });
      reactExports.useEffect(() => {
        setFocusedYear((prevFocusedYear) => selectedYear !== null && prevFocusedYear !== selectedYear ? selectedYear : prevFocusedYear);
      }, [selectedYear]);
      const handleKeyDown2 = useEventCallback$2((event, year) => {
        switch (event.key) {
          case "ArrowUp":
            focusYear(year - yearsPerRow);
            event.preventDefault();
            break;
          case "ArrowDown":
            focusYear(year + yearsPerRow);
            event.preventDefault();
            break;
          case "ArrowLeft":
            focusYear(year + (theme.direction === "ltr" ? -1 : 1));
            event.preventDefault();
            break;
          case "ArrowRight":
            focusYear(year + (theme.direction === "ltr" ? 1 : -1));
            event.preventDefault();
            break;
        }
      });
      const handleYearFocus = useEventCallback$2((event, year) => {
        focusYear(year);
      });
      const handleYearBlur = useEventCallback$2((event, year) => {
        if (focusedYear === year) {
          changeHasFocus(false);
        }
      });
      const scrollerRef = reactExports.useRef(null);
      const handleRef = useForkRef$2(ref, scrollerRef);
      reactExports.useEffect(() => {
        if (autoFocus || scrollerRef.current === null) {
          return;
        }
        const tabbableButton = scrollerRef.current.querySelector('[tabindex="0"]');
        if (!tabbableButton) {
          return;
        }
        const offsetHeight = tabbableButton.offsetHeight;
        const offsetTop = tabbableButton.offsetTop;
        const clientHeight = scrollerRef.current.clientHeight;
        const scrollTop = scrollerRef.current.scrollTop;
        const elementBottom = offsetTop + offsetHeight;
        if (offsetHeight > clientHeight || offsetTop < scrollTop) {
          return;
        }
        scrollerRef.current.scrollTop = elementBottom - clientHeight / 2 - offsetHeight / 2;
      }, [autoFocus]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(YearCalendarRoot, _extends$1({
        ref: handleRef,
        className: clsx(classes.root, className),
        ownerState
      }, other, {
        children: utils2.getYearRange(minDate, maxDate).map((year) => {
          const yearNumber = utils2.getYear(year);
          const isSelected = yearNumber === selectedYear;
          const isDisabled = disabled || isYearDisabled(year);
          return /* @__PURE__ */ jsxRuntimeExports.jsx(PickersYear, {
            selected: isSelected,
            value: yearNumber,
            onClick: handleYearSelection,
            onKeyDown: handleKeyDown2,
            autoFocus: internalHasFocus && yearNumber === focusedYear,
            disabled: isDisabled,
            tabIndex: yearNumber === focusedYear ? 0 : -1,
            onFocus: handleYearFocus,
            onBlur: handleYearBlur,
            "aria-current": todayYear === yearNumber ? "date" : void 0,
            yearsPerRow,
            children: utils2.format(year, "year")
          }, utils2.format(year, "year"));
        })
      }));
    });
    const PickerViewRoot = styled$1("div")({
      overflow: "hidden",
      width: DIALOG_WIDTH,
      maxHeight: VIEW_HEIGHT,
      display: "flex",
      flexDirection: "column",
      margin: "0 auto"
    });
    const getDateCalendarUtilityClass = (slot) => generateUtilityClass("MuiDateCalendar", slot);
    generateUtilityClasses("MuiDateCalendar", ["root", "viewTransitionContainer"]);
    const _excluded$K = ["autoFocus", "onViewChange", "value", "defaultValue", "disableFuture", "disablePast", "defaultCalendarMonth", "onChange", "onYearChange", "onMonthChange", "reduceAnimations", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear", "view", "views", "openTo", "className", "disabled", "readOnly", "minDate", "maxDate", "disableHighlightToday", "focusedView", "onFocusedViewChange", "showDaysOutsideCurrentMonth", "fixedWeekNumber", "dayOfWeekFormatter", "components", "componentsProps", "slots", "slotProps", "loading", "renderLoading", "displayWeekNumber", "yearsPerRow", "monthsPerRow"];
    const useUtilityClasses$q = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        viewTransitionContainer: ["viewTransitionContainer"]
      };
      return composeClasses(slots, getDateCalendarUtilityClass, classes);
    };
    function useDateCalendarDefaultizedProps(props, name) {
      const utils2 = useUtils();
      const defaultDates = useDefaultDates();
      const themeProps = useThemeProps({
        props,
        name
      });
      return _extends$1({
        loading: false,
        disablePast: false,
        disableFuture: false,
        openTo: "day",
        views: ["year", "day"],
        reduceAnimations: defaultReduceAnimations,
        renderLoading: () => /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
          children: "..."
        })
      }, themeProps, {
        minDate: applyDefaultDate(utils2, themeProps.minDate, defaultDates.minDate),
        maxDate: applyDefaultDate(utils2, themeProps.maxDate, defaultDates.maxDate)
      });
    }
    const DateCalendarRoot = styled$1(PickerViewRoot, {
      name: "MuiDateCalendar",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      display: "flex",
      flexDirection: "column"
    });
    const DateCalendarViewTransitionContainer = styled$1(PickersFadeTransitionGroup, {
      name: "MuiDateCalendar",
      slot: "ViewTransitionContainer",
      overridesResolver: (props, styles2) => styles2.viewTransitionContainer
    })({});
    const DateCalendar = /* @__PURE__ */ reactExports.forwardRef(function DateCalendar2(inProps, ref) {
      const utils2 = useUtils();
      const id2 = useId$2();
      const props = useDateCalendarDefaultizedProps(inProps, "MuiDateCalendar");
      const {
        autoFocus,
        onViewChange,
        value: valueProp,
        defaultValue: defaultValue2,
        disableFuture,
        disablePast,
        defaultCalendarMonth,
        onChange,
        onYearChange,
        onMonthChange,
        reduceAnimations,
        shouldDisableDate,
        shouldDisableMonth,
        shouldDisableYear,
        view: inView,
        views,
        openTo,
        className,
        disabled,
        readOnly,
        minDate,
        maxDate,
        disableHighlightToday,
        focusedView: inFocusedView,
        onFocusedViewChange,
        showDaysOutsideCurrentMonth,
        fixedWeekNumber,
        dayOfWeekFormatter,
        components,
        componentsProps,
        slots,
        slotProps,
        loading,
        renderLoading,
        displayWeekNumber,
        yearsPerRow,
        monthsPerRow
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$K);
      const [value2, setValue2] = useControlled$2({
        name: "DateCalendar",
        state: "value",
        controlled: valueProp,
        default: defaultValue2 != null ? defaultValue2 : null
      });
      const handleValueChange = useEventCallback$2((newValue, selectionState) => {
        setValue2(newValue);
        onChange == null ? void 0 : onChange(newValue, selectionState);
      });
      const {
        view,
        setView,
        focusedView,
        setFocusedView,
        goToNextView,
        setValueAndGoToNextView
      } = useViews({
        view: inView,
        views,
        openTo,
        onChange: handleValueChange,
        onViewChange,
        autoFocus,
        focusedView: inFocusedView,
        onFocusedViewChange
      });
      const {
        calendarState,
        changeFocusedDay,
        changeMonth,
        handleChangeMonth,
        isDateDisabled,
        onMonthSwitchingAnimationEnd
      } = useCalendarState({
        value: value2,
        defaultCalendarMonth,
        reduceAnimations,
        onMonthChange,
        minDate,
        maxDate,
        shouldDisableDate,
        disablePast,
        disableFuture
      });
      const handleDateMonthChange = useEventCallback$2((newDate) => {
        const startOfMonth = utils2.startOfMonth(newDate);
        const endOfMonth = utils2.endOfMonth(newDate);
        const closestEnabledDate = isDateDisabled(newDate) ? findClosestEnabledDate({
          utils: utils2,
          date: newDate,
          minDate: utils2.isBefore(minDate, startOfMonth) ? startOfMonth : minDate,
          maxDate: utils2.isAfter(maxDate, endOfMonth) ? endOfMonth : maxDate,
          disablePast,
          disableFuture,
          isDateDisabled
        }) : newDate;
        if (closestEnabledDate) {
          setValueAndGoToNextView(closestEnabledDate, "finish");
          onMonthChange == null ? void 0 : onMonthChange(startOfMonth);
        } else {
          goToNextView();
          changeMonth(startOfMonth);
        }
        changeFocusedDay(closestEnabledDate, true);
      });
      const handleDateYearChange = useEventCallback$2((newDate) => {
        const startOfYear = utils2.startOfYear(newDate);
        const endOfYear = utils2.endOfYear(newDate);
        const closestEnabledDate = isDateDisabled(newDate) ? findClosestEnabledDate({
          utils: utils2,
          date: newDate,
          minDate: utils2.isBefore(minDate, startOfYear) ? startOfYear : minDate,
          maxDate: utils2.isAfter(maxDate, endOfYear) ? endOfYear : maxDate,
          disablePast,
          disableFuture,
          isDateDisabled
        }) : newDate;
        if (closestEnabledDate) {
          setValueAndGoToNextView(closestEnabledDate, "finish");
          onYearChange == null ? void 0 : onYearChange(closestEnabledDate);
        } else {
          goToNextView();
          changeMonth(startOfYear);
        }
        changeFocusedDay(closestEnabledDate, true);
      });
      const handleSelectedDayChange = useEventCallback$2((day) => {
        if (value2 && day) {
          return setValueAndGoToNextView(utils2.mergeDateAndTime(day, value2), "finish");
        }
        return setValueAndGoToNextView(day, "finish");
      });
      reactExports.useEffect(() => {
        if (value2 != null && utils2.isValid(value2)) {
          changeMonth(value2);
        }
      }, [value2]);
      const ownerState = props;
      const classes = useUtilityClasses$q(ownerState);
      const baseDateValidationProps = {
        disablePast,
        disableFuture,
        maxDate,
        minDate
      };
      const minDateWithDisabled = disabled && value2 || minDate;
      const maxDateWithDisabled = disabled && value2 || maxDate;
      const commonViewProps = {
        disableHighlightToday,
        readOnly,
        disabled
      };
      const gridLabelId = `${id2}-grid-label`;
      const hasFocus = focusedView !== null;
      const prevOpenViewRef = reactExports.useRef(view);
      reactExports.useEffect(() => {
        if (prevOpenViewRef.current === view) {
          return;
        }
        if (focusedView === prevOpenViewRef.current) {
          setFocusedView(view, true);
        }
        prevOpenViewRef.current = view;
      }, [focusedView, setFocusedView, view]);
      const selectedDays = reactExports.useMemo(() => [value2], [value2]);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(DateCalendarRoot, _extends$1({
        ref,
        className: clsx(classes.root, className),
        ownerState
      }, other, {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(PickersCalendarHeader, {
          views,
          view,
          currentMonth: calendarState.currentMonth,
          onViewChange: setView,
          onMonthChange: (newMonth, direction) => handleChangeMonth({
            newMonth,
            direction
          }),
          minDate: minDateWithDisabled,
          maxDate: maxDateWithDisabled,
          disabled,
          disablePast,
          disableFuture,
          reduceAnimations,
          labelId: gridLabelId,
          slots,
          slotProps
        }), /* @__PURE__ */ jsxRuntimeExports.jsx(DateCalendarViewTransitionContainer, {
          reduceAnimations,
          className: classes.viewTransitionContainer,
          transKey: view,
          ownerState,
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", {
            children: [view === "year" && /* @__PURE__ */ jsxRuntimeExports.jsx(YearCalendar, _extends$1({}, baseDateValidationProps, commonViewProps, {
              value: value2,
              onChange: handleDateYearChange,
              shouldDisableYear,
              hasFocus,
              onFocusedViewChange: (isViewFocused) => setFocusedView("year", isViewFocused),
              yearsPerRow
            })), view === "month" && /* @__PURE__ */ jsxRuntimeExports.jsx(MonthCalendar, _extends$1({}, baseDateValidationProps, commonViewProps, {
              hasFocus,
              className,
              value: value2,
              onChange: handleDateMonthChange,
              shouldDisableMonth,
              onFocusedViewChange: (isViewFocused) => setFocusedView("month", isViewFocused),
              monthsPerRow
            })), view === "day" && /* @__PURE__ */ jsxRuntimeExports.jsx(DayCalendar, _extends$1({}, calendarState, baseDateValidationProps, commonViewProps, {
              onMonthSwitchingAnimationEnd,
              onFocusedDayChange: changeFocusedDay,
              reduceAnimations,
              selectedDays,
              onSelectedDaysChange: handleSelectedDayChange,
              shouldDisableDate,
              shouldDisableMonth,
              shouldDisableYear,
              hasFocus,
              onFocusedViewChange: (isViewFocused) => setFocusedView("day", isViewFocused),
              gridLabelId,
              showDaysOutsideCurrentMonth,
              fixedWeekNumber,
              dayOfWeekFormatter,
              displayWeekNumber,
              components,
              componentsProps,
              slots,
              slotProps,
              loading,
              renderLoading
            }))]
          })
        })]
      }));
    });
    const isDatePickerView = (view) => view === "year" || view === "month" || view === "day";
    const renderDateViewCalendar = ({
      view,
      onViewChange,
      views,
      focusedView,
      onFocusedViewChange,
      value: value2,
      defaultValue: defaultValue2,
      onChange,
      className,
      classes,
      disableFuture,
      disablePast,
      minDate,
      maxDate,
      shouldDisableDate,
      shouldDisableMonth,
      shouldDisableYear,
      reduceAnimations,
      onMonthChange,
      monthsPerRow,
      onYearChange,
      yearsPerRow,
      defaultCalendarMonth,
      components,
      componentsProps,
      slots,
      slotProps,
      loading,
      renderLoading,
      disableHighlightToday,
      readOnly,
      disabled,
      showDaysOutsideCurrentMonth,
      dayOfWeekFormatter,
      sx,
      autoFocus,
      fixedWeekNumber,
      displayWeekNumber
    }) => /* @__PURE__ */ jsxRuntimeExports.jsx(DateCalendar, {
      view,
      onViewChange,
      views: views.filter(isDatePickerView),
      focusedView,
      onFocusedViewChange,
      value: value2,
      defaultValue: defaultValue2,
      onChange,
      className,
      classes,
      disableFuture,
      disablePast,
      minDate,
      maxDate,
      shouldDisableDate,
      shouldDisableMonth,
      shouldDisableYear,
      reduceAnimations,
      onMonthChange,
      monthsPerRow,
      onYearChange,
      yearsPerRow,
      defaultCalendarMonth,
      components,
      componentsProps,
      slots,
      slotProps,
      loading,
      renderLoading,
      disableHighlightToday,
      readOnly,
      disabled,
      showDaysOutsideCurrentMonth,
      dayOfWeekFormatter,
      sx,
      autoFocus,
      fixedWeekNumber,
      displayWeekNumber
    });
    const DesktopDatePicker = /* @__PURE__ */ reactExports.forwardRef(function DesktopDatePicker2(inProps, ref) {
      var _defaultizedProps$yea, _defaultizedProps$slo2;
      const localeText = useLocaleText();
      const utils2 = useUtils();
      const defaultizedProps = useDatePickerDefaultizedProps(inProps, "MuiDesktopDatePicker");
      const viewRenderers = _extends$1({
        day: renderDateViewCalendar,
        month: renderDateViewCalendar,
        year: renderDateViewCalendar
      }, defaultizedProps.viewRenderers);
      const props = _extends$1({}, defaultizedProps, {
        viewRenderers,
        format: getDatePickerFieldFormat(utils2, defaultizedProps),
        yearsPerRow: (_defaultizedProps$yea = defaultizedProps.yearsPerRow) != null ? _defaultizedProps$yea : 4,
        slots: _extends$1({
          openPickerIcon: Calendar,
          field: DateField
        }, defaultizedProps.slots),
        slotProps: _extends$1({}, defaultizedProps.slotProps, {
          field: (ownerState) => {
            var _defaultizedProps$slo;
            return _extends$1({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
              ref
            });
          },
          toolbar: _extends$1({
            hidden: true
          }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)
        })
      });
      const {
        renderPicker
      } = useDesktopPicker({
        props,
        valueManager: singleItemValueManager,
        valueType: "date",
        getOpenDialogAriaText: localeText.openDatePickerDialogue,
        validator: validateDate
      });
      return renderPicker();
    });
    DesktopDatePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * If `true`, the main element is focused during the first mount.
       * This main element is:
       * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
       * - the `input` element if there is a field rendered.
       */
      autoFocus: PropTypes.bool,
      /**
       * Class name applied to the root element.
       */
      className: PropTypes.string,
      /**
       * If `true`, the popover or modal will close after submitting the full date.
       * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,
      /**
       * Overridable components.
       * @default {}
       * @deprecated Please use `slots`.
       */
      components: PropTypes.object,
      /**
       * The props used for each component slot.
       * @default {}
       * @deprecated Please use `slotProps`.
       */
      componentsProps: PropTypes.object,
      /**
       * Formats the day of week displayed in the calendar header.
       * @param {string} day The day of week provided by the adapter's method `getWeekdays`.
       * @returns {string} The name to display.
       * @default (day) => day.charAt(0).toUpperCase()
       */
      dayOfWeekFormatter: PropTypes.func,
      /**
       * Default calendar month displayed when `value={null}`.
       */
      defaultCalendarMonth: PropTypes.any,
      /**
       * The default value.
       * Used when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, disable values after the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disableFuture: PropTypes.bool,
      /**
       * If `true`, today's date is rendering without highlighting with circle.
       * @default false
       */
      disableHighlightToday: PropTypes.bool,
      /**
       * If `true`, the open picker button will not be rendered (renders only the field).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,
      /**
       * If `true`, disable values before the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disablePast: PropTypes.bool,
      /**
       * If `true`, the week number will be display in the calendar.
       */
      displayWeekNumber: PropTypes.bool,
      /**
       * Calendar will show more weeks in order to match this value.
       * Put it to 6 for having fix number of week in Gregorian calendars
       * @default undefined
       */
      fixedWeekNumber: PropTypes.number,
      /**
       * Format of the date when rendered in the input(s).
       * Defaults to localized format based on the used `views`.
       */
      format: PropTypes.string,
      /**
       * Density of the format when rendered in the input.
       * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
       * @default "dense"
       */
      formatDensity: PropTypes.oneOf(["dense", "spacious"]),
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      /**
       * The label content.
       */
      label: PropTypes.node,
      /**
       * If `true`, calls `renderLoading` instead of rendering the day calendar.
       * Can be used to preload information and show it in calendar.
       * @default false
       */
      loading: PropTypes.bool,
      /**
       * Locale for components texts.
       * Allows overriding texts coming from `LocalizationProvider` and `theme`.
       */
      localeText: PropTypes.object,
      /**
       * Maximal selectable date.
       */
      maxDate: PropTypes.any,
      /**
       * Minimal selectable date.
       */
      minDate: PropTypes.any,
      /**
       * Months rendered per row.
       * @default 3
       */
      monthsPerRow: PropTypes.oneOf([3, 4]),
      /**
       * Callback fired when the value is accepted.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,
      /**
       * Callback fired when the value changes.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The new value.
       * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
       */
      onChange: PropTypes.func,
      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see `open`).
       */
      onClose: PropTypes.func,
      /**
       * Callback fired when the error associated to the current value changes.
       * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
       *
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TError} error The new error describing why the current value is not valid.
       * @param {TValue} value The value associated to the error.
       */
      onError: PropTypes.func,
      /**
       * Callback fired on month change.
       * @template TDate
       * @param {TDate} month The new month.
       */
      onMonthChange: PropTypes.func,
      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see `open`).
       */
      onOpen: PropTypes.func,
      /**
       * Callback fired when the selected sections change.
       * @param {FieldSelectedSections} newValue The new selected sections.
       */
      onSelectedSectionsChange: PropTypes.func,
      /**
       * Callback fired on view change.
       * @template TView
       * @param {TView} view The new view.
       */
      onViewChange: PropTypes.func,
      /**
       * Callback fired on year change.
       * @template TDate
       * @param {TDate} year The new year.
       */
      onYearChange: PropTypes.func,
      /**
       * Control the popup or dialog open state.
       * @default false
       */
      open: PropTypes.bool,
      /**
       * The default visible view.
       * Used when the component view is not controlled.
       * Must be a valid option from `views` list.
       */
      openTo: PropTypes.oneOf(["day", "month", "year"]),
      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(["landscape", "portrait"]),
      readOnly: PropTypes.bool,
      /**
       * Disable heavy animations.
       * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
       */
      reduceAnimations: PropTypes.bool,
      /**
       * Component displaying when passed `loading` true.
       * @returns {React.ReactNode} The node to render when loading.
       * @default () => <span data-mui-test="loading-progress">...</span>
       */
      renderLoading: PropTypes.func,
      /**
       * The currently selected sections.
       * This prop accept four formats:
       * 1. If a number is provided, the section at this index will be selected.
       * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.
       * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
       * 4. If `null` is provided, no section will be selected
       * If not provided, the selected sections will be handled internally.
       */
      selectedSections: PropTypes.oneOfType([PropTypes.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), PropTypes.number, PropTypes.shape({
        endIndex: PropTypes.number.isRequired,
        startIndex: PropTypes.number.isRequired
      })]),
      /**
       * Disable specific date.
       * @template TDate
       * @param {TDate} day The date to test.
       * @returns {boolean} If `true` the date will be disabled.
       */
      shouldDisableDate: PropTypes.func,
      /**
       * Disable specific month.
       * @template TDate
       * @param {TDate} month The month to test.
       * @returns {boolean} If `true`, the month will be disabled.
       */
      shouldDisableMonth: PropTypes.func,
      /**
       * Disable specific year.
       * @template TDate
       * @param {TDate} year The year to test.
       * @returns {boolean} If `true`, the year will be disabled.
       */
      shouldDisableYear: PropTypes.func,
      /**
       * If `true`, days outside the current month are rendered:
       *
       * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
       *
       * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
       *
       * - ignored if `calendars` equals more than `1` on range pickers.
       * @default false
       */
      showDaysOutsideCurrentMonth: PropTypes.bool,
      /**
       * The props used for each component slot.
       * @default {}
       */
      slotProps: PropTypes.object,
      /**
       * Overridable component slots.
       * @default {}
       */
      slots: PropTypes.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The selected value.
       * Used when the component is controlled.
       */
      value: PropTypes.any,
      /**
       * The visible view.
       * Used when the component view is controlled.
       * Must be a valid option from `views` list.
       */
      view: PropTypes.oneOf(["day", "month", "year"]),
      /**
       * Define custom view renderers for each section.
       * If `null`, the section will only have field editing.
       * If `undefined`, internally defined view will be the used.
       */
      viewRenderers: PropTypes.shape({
        day: PropTypes.func,
        month: PropTypes.func,
        year: PropTypes.func
      }),
      /**
       * Available views.
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(["day", "month", "year"]).isRequired),
      /**
       * Years rendered per row.
       * @default 4
       */
      yearsPerRow: PropTypes.oneOf([3, 4])
    };
    const _excluded$J = ["props", "getOpenDialogAriaText"];
    const useMobilePicker = (_ref) => {
      var _innerSlotProps$toolb, _innerSlotProps$toolb2, _slots$layout;
      let {
        props,
        getOpenDialogAriaText
      } = _ref, pickerParams = _objectWithoutPropertiesLoose(_ref, _excluded$J);
      const {
        slots,
        slotProps: innerSlotProps,
        className,
        sx,
        format: format2,
        formatDensity,
        label,
        inputRef,
        readOnly,
        disabled,
        localeText
      } = props;
      const utils2 = useUtils();
      const internalInputRef = reactExports.useRef(null);
      const labelId = _default$7();
      const isToolbarHidden = (_innerSlotProps$toolb = innerSlotProps == null ? void 0 : (_innerSlotProps$toolb2 = innerSlotProps.toolbar) == null ? void 0 : _innerSlotProps$toolb2.hidden) != null ? _innerSlotProps$toolb : false;
      const {
        open,
        actions,
        layoutProps,
        renderCurrentView,
        fieldProps: pickerFieldProps
      } = usePicker(_extends$1({}, pickerParams, {
        props,
        inputRef: internalInputRef,
        autoFocusView: true,
        additionalViewProps: {},
        wrapperVariant: "mobile"
      }));
      const Field2 = slots.field;
      const fieldProps = useSlotProps({
        elementType: Field2,
        externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.field,
        additionalProps: _extends$1({}, pickerFieldProps, isToolbarHidden && {
          id: labelId
        }, !(disabled || readOnly) && {
          onClick: actions.onOpen,
          onKeyDown: onSpaceOrEnter(actions.onOpen)
        }, {
          readOnly: readOnly != null ? readOnly : true,
          disabled,
          className,
          sx,
          format: format2,
          formatDensity,
          label
        }),
        ownerState: props
      });
      fieldProps.inputProps = _extends$1({}, fieldProps.inputProps, {
        "aria-label": getOpenDialogAriaText(pickerFieldProps.value, utils2)
      });
      const slotsForField = _extends$1({
        textField: slots.textField
      }, fieldProps.slots);
      const Layout = (_slots$layout = slots.layout) != null ? _slots$layout : PickersLayout;
      const handleInputRef = _default$9(internalInputRef, fieldProps.inputRef, inputRef);
      let labelledById = labelId;
      if (isToolbarHidden) {
        if (label) {
          labelledById = `${labelId}-label`;
        } else {
          labelledById = void 0;
        }
      }
      const slotProps = _extends$1({}, innerSlotProps, {
        toolbar: _extends$1({}, innerSlotProps == null ? void 0 : innerSlotProps.toolbar, {
          titleId: labelId
        }),
        mobilePaper: _extends$1({
          "aria-labelledby": labelledById
        }, innerSlotProps == null ? void 0 : innerSlotProps.mobilePaper)
      });
      const renderPicker = () => /* @__PURE__ */ jsxRuntimeExports.jsxs(LocalizationProvider, {
        localeText,
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Field2, _extends$1({}, fieldProps, {
          slots: slotsForField,
          slotProps,
          inputRef: handleInputRef
        })), /* @__PURE__ */ jsxRuntimeExports.jsx(PickersModalDialog, _extends$1({}, actions, {
          open,
          slots,
          slotProps,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Layout, _extends$1({}, layoutProps, slotProps == null ? void 0 : slotProps.layout, {
            slots,
            slotProps,
            children: renderCurrentView()
          }))
        }))]
      });
      return {
        renderPicker
      };
    };
    const MobileDatePicker = /* @__PURE__ */ reactExports.forwardRef(function MobileDatePicker2(inProps, ref) {
      var _defaultizedProps$slo2;
      const localeText = useLocaleText();
      const utils2 = useUtils();
      const defaultizedProps = useDatePickerDefaultizedProps(inProps, "MuiMobileDatePicker");
      const viewRenderers = _extends$1({
        day: renderDateViewCalendar,
        month: renderDateViewCalendar,
        year: renderDateViewCalendar
      }, defaultizedProps.viewRenderers);
      const props = _extends$1({}, defaultizedProps, {
        viewRenderers,
        format: getDatePickerFieldFormat(utils2, defaultizedProps),
        slots: _extends$1({
          field: DateField
        }, defaultizedProps.slots),
        slotProps: _extends$1({}, defaultizedProps.slotProps, {
          field: (ownerState) => {
            var _defaultizedProps$slo;
            return _extends$1({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
              ref
            });
          },
          toolbar: _extends$1({
            hidden: false
          }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)
        })
      });
      const {
        renderPicker
      } = useMobilePicker({
        props,
        valueManager: singleItemValueManager,
        valueType: "date",
        getOpenDialogAriaText: localeText.openDatePickerDialogue,
        validator: validateDate
      });
      return renderPicker();
    });
    MobileDatePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * If `true`, the main element is focused during the first mount.
       * This main element is:
       * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
       * - the `input` element if there is a field rendered.
       */
      autoFocus: PropTypes.bool,
      /**
       * Class name applied to the root element.
       */
      className: PropTypes.string,
      /**
       * If `true`, the popover or modal will close after submitting the full date.
       * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,
      /**
       * Overridable components.
       * @default {}
       * @deprecated Please use `slots`.
       */
      components: PropTypes.object,
      /**
       * The props used for each component slot.
       * @default {}
       * @deprecated Please use `slotProps`.
       */
      componentsProps: PropTypes.object,
      /**
       * Formats the day of week displayed in the calendar header.
       * @param {string} day The day of week provided by the adapter's method `getWeekdays`.
       * @returns {string} The name to display.
       * @default (day) => day.charAt(0).toUpperCase()
       */
      dayOfWeekFormatter: PropTypes.func,
      /**
       * Default calendar month displayed when `value={null}`.
       */
      defaultCalendarMonth: PropTypes.any,
      /**
       * The default value.
       * Used when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, disable values after the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disableFuture: PropTypes.bool,
      /**
       * If `true`, today's date is rendering without highlighting with circle.
       * @default false
       */
      disableHighlightToday: PropTypes.bool,
      /**
       * If `true`, the open picker button will not be rendered (renders only the field).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,
      /**
       * If `true`, disable values before the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disablePast: PropTypes.bool,
      /**
       * If `true`, the week number will be display in the calendar.
       */
      displayWeekNumber: PropTypes.bool,
      /**
       * Calendar will show more weeks in order to match this value.
       * Put it to 6 for having fix number of week in Gregorian calendars
       * @default undefined
       */
      fixedWeekNumber: PropTypes.number,
      /**
       * Format of the date when rendered in the input(s).
       * Defaults to localized format based on the used `views`.
       */
      format: PropTypes.string,
      /**
       * Density of the format when rendered in the input.
       * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
       * @default "dense"
       */
      formatDensity: PropTypes.oneOf(["dense", "spacious"]),
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      /**
       * The label content.
       */
      label: PropTypes.node,
      /**
       * If `true`, calls `renderLoading` instead of rendering the day calendar.
       * Can be used to preload information and show it in calendar.
       * @default false
       */
      loading: PropTypes.bool,
      /**
       * Locale for components texts.
       * Allows overriding texts coming from `LocalizationProvider` and `theme`.
       */
      localeText: PropTypes.object,
      /**
       * Maximal selectable date.
       */
      maxDate: PropTypes.any,
      /**
       * Minimal selectable date.
       */
      minDate: PropTypes.any,
      /**
       * Months rendered per row.
       * @default 3
       */
      monthsPerRow: PropTypes.oneOf([3, 4]),
      /**
       * Callback fired when the value is accepted.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,
      /**
       * Callback fired when the value changes.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The new value.
       * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
       */
      onChange: PropTypes.func,
      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see `open`).
       */
      onClose: PropTypes.func,
      /**
       * Callback fired when the error associated to the current value changes.
       * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
       *
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TError} error The new error describing why the current value is not valid.
       * @param {TValue} value The value associated to the error.
       */
      onError: PropTypes.func,
      /**
       * Callback fired on month change.
       * @template TDate
       * @param {TDate} month The new month.
       */
      onMonthChange: PropTypes.func,
      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see `open`).
       */
      onOpen: PropTypes.func,
      /**
       * Callback fired when the selected sections change.
       * @param {FieldSelectedSections} newValue The new selected sections.
       */
      onSelectedSectionsChange: PropTypes.func,
      /**
       * Callback fired on view change.
       * @template TView
       * @param {TView} view The new view.
       */
      onViewChange: PropTypes.func,
      /**
       * Callback fired on year change.
       * @template TDate
       * @param {TDate} year The new year.
       */
      onYearChange: PropTypes.func,
      /**
       * Control the popup or dialog open state.
       * @default false
       */
      open: PropTypes.bool,
      /**
       * The default visible view.
       * Used when the component view is not controlled.
       * Must be a valid option from `views` list.
       */
      openTo: PropTypes.oneOf(["day", "month", "year"]),
      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(["landscape", "portrait"]),
      readOnly: PropTypes.bool,
      /**
       * Disable heavy animations.
       * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
       */
      reduceAnimations: PropTypes.bool,
      /**
       * Component displaying when passed `loading` true.
       * @returns {React.ReactNode} The node to render when loading.
       * @default () => <span data-mui-test="loading-progress">...</span>
       */
      renderLoading: PropTypes.func,
      /**
       * The currently selected sections.
       * This prop accept four formats:
       * 1. If a number is provided, the section at this index will be selected.
       * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.
       * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
       * 4. If `null` is provided, no section will be selected
       * If not provided, the selected sections will be handled internally.
       */
      selectedSections: PropTypes.oneOfType([PropTypes.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), PropTypes.number, PropTypes.shape({
        endIndex: PropTypes.number.isRequired,
        startIndex: PropTypes.number.isRequired
      })]),
      /**
       * Disable specific date.
       * @template TDate
       * @param {TDate} day The date to test.
       * @returns {boolean} If `true` the date will be disabled.
       */
      shouldDisableDate: PropTypes.func,
      /**
       * Disable specific month.
       * @template TDate
       * @param {TDate} month The month to test.
       * @returns {boolean} If `true`, the month will be disabled.
       */
      shouldDisableMonth: PropTypes.func,
      /**
       * Disable specific year.
       * @template TDate
       * @param {TDate} year The year to test.
       * @returns {boolean} If `true`, the year will be disabled.
       */
      shouldDisableYear: PropTypes.func,
      /**
       * If `true`, days outside the current month are rendered:
       *
       * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
       *
       * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
       *
       * - ignored if `calendars` equals more than `1` on range pickers.
       * @default false
       */
      showDaysOutsideCurrentMonth: PropTypes.bool,
      /**
       * The props used for each component slot.
       * @default {}
       */
      slotProps: PropTypes.object,
      /**
       * Overridable component slots.
       * @default {}
       */
      slots: PropTypes.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The selected value.
       * Used when the component is controlled.
       */
      value: PropTypes.any,
      /**
       * The visible view.
       * Used when the component view is controlled.
       * Must be a valid option from `views` list.
       */
      view: PropTypes.oneOf(["day", "month", "year"]),
      /**
       * Define custom view renderers for each section.
       * If `null`, the section will only have field editing.
       * If `undefined`, internally defined view will be the used.
       */
      viewRenderers: PropTypes.shape({
        day: PropTypes.func,
        month: PropTypes.func,
        year: PropTypes.func
      }),
      /**
       * Available views.
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(["day", "month", "year"]).isRequired),
      /**
       * Years rendered per row.
       * @default 3
       */
      yearsPerRow: PropTypes.oneOf([3, 4])
    };
    const _excluded$I = ["desktopModeMediaQuery"];
    const DatePicker = /* @__PURE__ */ reactExports.forwardRef(function DatePicker2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDatePicker"
      });
      const {
        desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$I);
      const isDesktop = useMediaQuery(desktopModeMediaQuery, {
        defaultMatches: true
      });
      if (isDesktop) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(DesktopDatePicker, _extends$1({
          ref
        }, other));
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(MobileDatePicker, _extends$1({
        ref
      }, other));
    });
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
      if (null != _i) {
        var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
        try {
          if (_x = (_i = _i.call(arr)).next, 0 === i) {
            if (Object(_i) !== _i)
              return;
            _n = false;
          } else
            for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
              ;
        } catch (err) {
          _d = true, _e = err;
        } finally {
          try {
            if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r))
              return;
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
    }
    function _arrayLikeToArray$g(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function _unsupportedIterableToArray$g(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$g(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$g(o, minLen);
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$g(arr, i) || _nonIterableRest();
    }
    var __isInternal = true;
    const MuiTextWidget = function(props) {
      var value2 = props.value, setValue2 = props.setValue, config2 = props.config, readonly = props.readonly, placeholder = props.placeholder, customProps = props.customProps, maxLength = props.maxLength, valueError = props.valueError;
      var _useState = reactExports.useState(value2), _useState2 = _slicedToArray(_useState, 2), internalValue = _useState2[0], setInternalValue = _useState2[1];
      reactExports.useEffect(function() {
        if (value2 !== internalValue)
          setInternalValue(value2);
      }, [value2]);
      var onChange = function onChange2(e2) {
        var val = e2.target.value;
        if (val === "")
          val = void 0;
        setInternalValue(val);
        setValue2(val, void 0, __isInternal);
      };
      var showErrorMessage = config2.settings.showErrorMessage;
      var canUseInternal = showErrorMessage ? true : !valueError;
      var textValue = (canUseInternal ? internalValue : value2) || "";
      return /* @__PURE__ */ React$4.createElement(FormControl$1, null, /* @__PURE__ */ React$4.createElement(TextField$1, _extends$1({
        variant: "standard",
        value: textValue,
        placeholder: !readonly ? placeholder : "",
        InputProps: {
          readOnly: readonly
        },
        inputProps: {
          maxLength
        },
        disabled: readonly,
        onChange,
        size: "small"
      }, customProps)));
    };
    const MuiTextAreaWidget = function(props) {
      var value2 = props.value, setValue2 = props.setValue, config2 = props.config, readonly = props.readonly, placeholder = props.placeholder, customProps = props.customProps, maxLength = props.maxLength, maxRows = props.maxRows, fullWidth = props.fullWidth;
      var defaultMaxRows = config2.settings.defaultMaxRows;
      var onChange = function onChange2(e2) {
        var val = e2.target.value;
        if (val === "")
          val = void 0;
        setValue2(val);
      };
      var textValue = value2 || "";
      return /* @__PURE__ */ React$4.createElement(FormControl$1, {
        fullWidth
      }, /* @__PURE__ */ React$4.createElement(TextField$1, _extends$1({
        variant: "standard",
        fullWidth,
        maxRows: maxRows || defaultMaxRows,
        multiline: true,
        value: textValue,
        placeholder: !readonly ? placeholder : "",
        InputProps: {
          readOnly: readonly
        },
        inputProps: {
          maxLength
        },
        disabled: readonly,
        onChange,
        size: "small"
      }, customProps)));
    };
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray$g(arr);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$g(arr) || _nonIterableSpread();
    }
    var regeneratorRuntime$1 = { exports: {} };
    var _typeof = { exports: {} };
    (function(module2) {
      function _typeof2(obj) {
        "@babel/helpers - typeof";
        return module2.exports = _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _typeof2(obj);
      }
      module2.exports = _typeof2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    })(_typeof);
    var _typeofExports = _typeof.exports;
    (function(module2) {
      var _typeof2 = _typeofExports["default"];
      function _regeneratorRuntime2() {
        module2.exports = _regeneratorRuntime2 = function _regeneratorRuntime3() {
          return exports2;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
        var exports2 = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty2 = Object.defineProperty || function(obj, key, desc) {
          obj[key] = desc.value;
        }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
        function define(obj, key, value2) {
          return Object.defineProperty(obj, key, {
            value: value2,
            enumerable: true,
            configurable: true,
            writable: true
          }), obj[key];
        }
        try {
          define({}, "");
        } catch (err) {
          define = function define2(obj, key, value2) {
            return obj[key] = value2;
          };
        }
        function wrap(innerFn, outerFn, self2, tryLocsList) {
          var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context2 = new Context(tryLocsList || []);
          return defineProperty2(generator, "_invoke", {
            value: makeInvokeMethod(innerFn, self2, context2)
          }), generator;
        }
        function tryCatch(fn, obj, arg) {
          try {
            return {
              type: "normal",
              arg: fn.call(obj, arg)
            };
          } catch (err) {
            return {
              type: "throw",
              arg: err
            };
          }
        }
        exports2.wrap = wrap;
        var ContinueSentinel = {};
        function Generator() {
        }
        function GeneratorFunction() {
        }
        function GeneratorFunctionPrototype() {
        }
        var IteratorPrototype = {};
        define(IteratorPrototype, iteratorSymbol, function() {
          return this;
        });
        var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values2([])));
        NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function(method) {
            define(prototype, method, function(arg) {
              return this._invoke(method, arg);
            });
          });
        }
        function AsyncIterator(generator, PromiseImpl) {
          function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if ("throw" !== record.type) {
              var result = record.arg, value2 = result.value;
              return value2 && "object" == _typeof2(value2) && hasOwn.call(value2, "__await") ? PromiseImpl.resolve(value2.__await).then(function(value3) {
                invoke("next", value3, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              }) : PromiseImpl.resolve(value2).then(function(unwrapped) {
                result.value = unwrapped, resolve(result);
              }, function(error) {
                return invoke("throw", error, resolve, reject);
              });
            }
            reject(record.arg);
          }
          var previousPromise;
          defineProperty2(this, "_invoke", {
            value: function value2(method, arg) {
              function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                  invoke(method, arg, resolve, reject);
                });
              }
              return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
            }
          });
        }
        function makeInvokeMethod(innerFn, self2, context2) {
          var state = "suspendedStart";
          return function(method, arg) {
            if ("executing" === state)
              throw new Error("Generator is already running");
            if ("completed" === state) {
              if ("throw" === method)
                throw arg;
              return doneResult();
            }
            for (context2.method = method, context2.arg = arg; ; ) {
              var delegate = context2.delegate;
              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context2);
                if (delegateResult) {
                  if (delegateResult === ContinueSentinel)
                    continue;
                  return delegateResult;
                }
              }
              if ("next" === context2.method)
                context2.sent = context2._sent = context2.arg;
              else if ("throw" === context2.method) {
                if ("suspendedStart" === state)
                  throw state = "completed", context2.arg;
                context2.dispatchException(context2.arg);
              } else
                "return" === context2.method && context2.abrupt("return", context2.arg);
              state = "executing";
              var record = tryCatch(innerFn, self2, context2);
              if ("normal" === record.type) {
                if (state = context2.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
                  continue;
                return {
                  value: record.arg,
                  done: context2.done
                };
              }
              "throw" === record.type && (state = "completed", context2.method = "throw", context2.arg = record.arg);
            }
          };
        }
        function maybeInvokeDelegate(delegate, context2) {
          var methodName = context2.method, method = delegate.iterator[methodName];
          if (void 0 === method)
            return context2.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context2.method = "return", context2.arg = void 0, maybeInvokeDelegate(delegate, context2), "throw" === context2.method) || "return" !== methodName && (context2.method = "throw", context2.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
          var record = tryCatch(method, delegate.iterator, context2.arg);
          if ("throw" === record.type)
            return context2.method = "throw", context2.arg = record.arg, context2.delegate = null, ContinueSentinel;
          var info = record.arg;
          return info ? info.done ? (context2[delegate.resultName] = info.value, context2.next = delegate.nextLoc, "return" !== context2.method && (context2.method = "next", context2.arg = void 0), context2.delegate = null, ContinueSentinel) : info : (context2.method = "throw", context2.arg = new TypeError("iterator result is not an object"), context2.delegate = null, ContinueSentinel);
        }
        function pushTryEntry(locs) {
          var entry = {
            tryLoc: locs[0]
          };
          1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
        }
        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal", delete record.arg, entry.completion = record;
        }
        function Context(tryLocsList) {
          this.tryEntries = [{
            tryLoc: "root"
          }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
        }
        function values2(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod)
              return iteratorMethod.call(iterable);
            if ("function" == typeof iterable.next)
              return iterable;
            if (!isNaN(iterable.length)) {
              var i = -1, next2 = function next3() {
                for (; ++i < iterable.length; )
                  if (hasOwn.call(iterable, i))
                    return next3.value = iterable[i], next3.done = false, next3;
                return next3.value = void 0, next3.done = true, next3;
              };
              return next2.next = next2;
            }
          }
          return {
            next: doneResult
          };
        }
        function doneResult() {
          return {
            value: void 0,
            done: true
          };
        }
        return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty2(Gp, "constructor", {
          value: GeneratorFunctionPrototype,
          configurable: true
        }), defineProperty2(GeneratorFunctionPrototype, "constructor", {
          value: GeneratorFunction,
          configurable: true
        }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports2.isGeneratorFunction = function(genFun) {
          var ctor = "function" == typeof genFun && genFun.constructor;
          return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
        }, exports2.mark = function(genFun) {
          return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
        }, exports2.awrap = function(arg) {
          return {
            __await: arg
          };
        }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
          return this;
        }), exports2.AsyncIterator = AsyncIterator, exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
          void 0 === PromiseImpl && (PromiseImpl = Promise);
          var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
          return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
        }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
          return this;
        }), define(Gp, "toString", function() {
          return "[object Generator]";
        }), exports2.keys = function(val) {
          var object = Object(val), keys2 = [];
          for (var key in object)
            keys2.push(key);
          return keys2.reverse(), function next2() {
            for (; keys2.length; ) {
              var key2 = keys2.pop();
              if (key2 in object)
                return next2.value = key2, next2.done = false, next2;
            }
            return next2.done = true, next2;
          };
        }, exports2.values = values2, Context.prototype = {
          constructor: Context,
          reset: function reset(skipTempReset) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
              for (var name in this)
                "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
          },
          stop: function stop() {
            this.done = true;
            var rootRecord = this.tryEntries[0].completion;
            if ("throw" === rootRecord.type)
              throw rootRecord.arg;
            return this.rval;
          },
          dispatchException: function dispatchException(exception) {
            if (this.done)
              throw exception;
            var context2 = this;
            function handle(loc, caught) {
              return record.type = "throw", record.arg = exception, context2.next = loc, caught && (context2.method = "next", context2.arg = void 0), !!caught;
            }
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i], record = entry.completion;
              if ("root" === entry.tryLoc)
                return handle("end");
              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc)
                    return handle(entry.catchLoc, true);
                  if (this.prev < entry.finallyLoc)
                    return handle(entry.finallyLoc);
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc)
                    return handle(entry.catchLoc, true);
                } else {
                  if (!hasFinally)
                    throw new Error("try statement without catch or finally");
                  if (this.prev < entry.finallyLoc)
                    return handle(entry.finallyLoc);
                }
              }
            }
          },
          abrupt: function abrupt(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }
            finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
            var record = finallyEntry ? finallyEntry.completion : {};
            return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
          },
          complete: function complete(record, afterLoc) {
            if ("throw" === record.type)
              throw record.arg;
            return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
          },
          finish: function finish(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.finallyLoc === finallyLoc)
                return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
            }
          },
          "catch": function _catch(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;
                if ("throw" === record.type) {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }
                return thrown;
              }
            }
            throw new Error("illegal catch attempt");
          },
          delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            return this.delegate = {
              iterator: values2(iterable),
              resultName,
              nextLoc
            }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
          }
        }, exports2;
      }
      module2.exports = _regeneratorRuntime2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    })(regeneratorRuntime$1);
    var regeneratorRuntimeExports = regeneratorRuntime$1.exports;
    var runtime = regeneratorRuntimeExports();
    var regenerator = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
    const _regeneratorRuntime = /* @__PURE__ */ getDefaultExportFromCjs(regenerator);
    function listCacheClear$1() {
      this.__data__ = [];
      this.size = 0;
    }
    var _listCacheClear = listCacheClear$1;
    function eq$5(value2, other) {
      return value2 === other || value2 !== value2 && other !== other;
    }
    var eq_1 = eq$5;
    var eq$4 = eq_1;
    function assocIndexOf$4(array, key) {
      var length2 = array.length;
      while (length2--) {
        if (eq$4(array[length2][0], key)) {
          return length2;
        }
      }
      return -1;
    }
    var _assocIndexOf = assocIndexOf$4;
    var assocIndexOf$3 = _assocIndexOf;
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete$1(key) {
      var data = this.__data__, index = assocIndexOf$3(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    var _listCacheDelete = listCacheDelete$1;
    var assocIndexOf$2 = _assocIndexOf;
    function listCacheGet$1(key) {
      var data = this.__data__, index = assocIndexOf$2(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    var _listCacheGet = listCacheGet$1;
    var assocIndexOf$1 = _assocIndexOf;
    function listCacheHas$1(key) {
      return assocIndexOf$1(this.__data__, key) > -1;
    }
    var _listCacheHas = listCacheHas$1;
    var assocIndexOf = _assocIndexOf;
    function listCacheSet$1(key, value2) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value2]);
      } else {
        data[index][1] = value2;
      }
      return this;
    }
    var _listCacheSet = listCacheSet$1;
    var listCacheClear = _listCacheClear, listCacheDelete = _listCacheDelete, listCacheGet = _listCacheGet, listCacheHas = _listCacheHas, listCacheSet = _listCacheSet;
    function ListCache$4(entries) {
      var index = -1, length2 = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length2) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache$4.prototype.clear = listCacheClear;
    ListCache$4.prototype["delete"] = listCacheDelete;
    ListCache$4.prototype.get = listCacheGet;
    ListCache$4.prototype.has = listCacheHas;
    ListCache$4.prototype.set = listCacheSet;
    var _ListCache = ListCache$4;
    var ListCache$3 = _ListCache;
    function stackClear$1() {
      this.__data__ = new ListCache$3();
      this.size = 0;
    }
    var _stackClear = stackClear$1;
    function stackDelete$1(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    var _stackDelete = stackDelete$1;
    function stackGet$1(key) {
      return this.__data__.get(key);
    }
    var _stackGet = stackGet$1;
    function stackHas$1(key) {
      return this.__data__.has(key);
    }
    var _stackHas = stackHas$1;
    var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
    var _freeGlobal = freeGlobal$1;
    var freeGlobal = _freeGlobal;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root$9 = freeGlobal || freeSelf || Function("return this")();
    var _root = root$9;
    var root$8 = _root;
    var Symbol$7 = root$8.Symbol;
    var _Symbol = Symbol$7;
    var Symbol$6 = _Symbol;
    var objectProto$f = Object.prototype;
    var hasOwnProperty$c = objectProto$f.hasOwnProperty;
    var nativeObjectToString$1 = objectProto$f.toString;
    var symToStringTag$1 = Symbol$6 ? Symbol$6.toStringTag : void 0;
    function getRawTag$1(value2) {
      var isOwn = hasOwnProperty$c.call(value2, symToStringTag$1), tag = value2[symToStringTag$1];
      try {
        value2[symToStringTag$1] = void 0;
        var unmasked = true;
      } catch (e2) {
      }
      var result = nativeObjectToString$1.call(value2);
      if (unmasked) {
        if (isOwn) {
          value2[symToStringTag$1] = tag;
        } else {
          delete value2[symToStringTag$1];
        }
      }
      return result;
    }
    var _getRawTag = getRawTag$1;
    var objectProto$e = Object.prototype;
    var nativeObjectToString = objectProto$e.toString;
    function objectToString$1(value2) {
      return nativeObjectToString.call(value2);
    }
    var _objectToString = objectToString$1;
    var Symbol$5 = _Symbol, getRawTag = _getRawTag, objectToString = _objectToString;
    var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol$5 ? Symbol$5.toStringTag : void 0;
    function baseGetTag$6(value2) {
      if (value2 == null) {
        return value2 === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value2) ? getRawTag(value2) : objectToString(value2);
    }
    var _baseGetTag = baseGetTag$6;
    function isObject$j(value2) {
      var type = typeof value2;
      return value2 != null && (type == "object" || type == "function");
    }
    var isObject_1 = isObject$j;
    var baseGetTag$5 = _baseGetTag, isObject$i = isObject_1;
    var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
    function isFunction$3(value2) {
      if (!isObject$i(value2)) {
        return false;
      }
      var tag = baseGetTag$5(value2);
      return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
    }
    var isFunction_1 = isFunction$3;
    var root$7 = _root;
    var coreJsData$1 = root$7["__core-js_shared__"];
    var _coreJsData = coreJsData$1;
    var coreJsData = _coreJsData;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked$1(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var _isMasked = isMasked$1;
    var funcProto$2 = Function.prototype;
    var funcToString$2 = funcProto$2.toString;
    function toSource$2(func) {
      if (func != null) {
        try {
          return funcToString$2.call(func);
        } catch (e2) {
        }
        try {
          return func + "";
        } catch (e2) {
        }
      }
      return "";
    }
    var _toSource = toSource$2;
    var isFunction$2 = isFunction_1, isMasked = _isMasked, isObject$h = isObject_1, toSource$1 = _toSource;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto$1 = Function.prototype, objectProto$d = Object.prototype;
    var funcToString$1 = funcProto$1.toString;
    var hasOwnProperty$b = objectProto$d.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString$1.call(hasOwnProperty$b).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative$1(value2) {
      if (!isObject$h(value2) || isMasked(value2)) {
        return false;
      }
      var pattern = isFunction$2(value2) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource$1(value2));
    }
    var _baseIsNative = baseIsNative$1;
    function getValue$1(object, key) {
      return object == null ? void 0 : object[key];
    }
    var _getValue = getValue$1;
    var baseIsNative = _baseIsNative, getValue = _getValue;
    function getNative$7(object, key) {
      var value2 = getValue(object, key);
      return baseIsNative(value2) ? value2 : void 0;
    }
    var _getNative = getNative$7;
    var getNative$6 = _getNative, root$6 = _root;
    var Map$4 = getNative$6(root$6, "Map");
    var _Map = Map$4;
    var getNative$5 = _getNative;
    var nativeCreate$4 = getNative$5(Object, "create");
    var _nativeCreate = nativeCreate$4;
    var nativeCreate$3 = _nativeCreate;
    function hashClear$1() {
      this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
      this.size = 0;
    }
    var _hashClear = hashClear$1;
    function hashDelete$1(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    var _hashDelete = hashDelete$1;
    var nativeCreate$2 = _nativeCreate;
    var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
    var objectProto$c = Object.prototype;
    var hasOwnProperty$a = objectProto$c.hasOwnProperty;
    function hashGet$1(key) {
      var data = this.__data__;
      if (nativeCreate$2) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? void 0 : result;
      }
      return hasOwnProperty$a.call(data, key) ? data[key] : void 0;
    }
    var _hashGet = hashGet$1;
    var nativeCreate$1 = _nativeCreate;
    var objectProto$b = Object.prototype;
    var hasOwnProperty$9 = objectProto$b.hasOwnProperty;
    function hashHas$1(key) {
      var data = this.__data__;
      return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$9.call(data, key);
    }
    var _hashHas = hashHas$1;
    var nativeCreate = _nativeCreate;
    var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
    function hashSet$1(key, value2) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value2 === void 0 ? HASH_UNDEFINED$1 : value2;
      return this;
    }
    var _hashSet = hashSet$1;
    var hashClear = _hashClear, hashDelete = _hashDelete, hashGet = _hashGet, hashHas = _hashHas, hashSet = _hashSet;
    function Hash$1(entries) {
      var index = -1, length2 = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length2) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash$1.prototype.clear = hashClear;
    Hash$1.prototype["delete"] = hashDelete;
    Hash$1.prototype.get = hashGet;
    Hash$1.prototype.has = hashHas;
    Hash$1.prototype.set = hashSet;
    var _Hash = Hash$1;
    var Hash = _Hash, ListCache$2 = _ListCache, Map$3 = _Map;
    function mapCacheClear$1() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map$3 || ListCache$2)(),
        "string": new Hash()
      };
    }
    var _mapCacheClear = mapCacheClear$1;
    function isKeyable$1(value2) {
      var type = typeof value2;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
    }
    var _isKeyable = isKeyable$1;
    var isKeyable = _isKeyable;
    function getMapData$4(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    var _getMapData = getMapData$4;
    var getMapData$3 = _getMapData;
    function mapCacheDelete$1(key) {
      var result = getMapData$3(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    var _mapCacheDelete = mapCacheDelete$1;
    var getMapData$2 = _getMapData;
    function mapCacheGet$1(key) {
      return getMapData$2(this, key).get(key);
    }
    var _mapCacheGet = mapCacheGet$1;
    var getMapData$1 = _getMapData;
    function mapCacheHas$1(key) {
      return getMapData$1(this, key).has(key);
    }
    var _mapCacheHas = mapCacheHas$1;
    var getMapData = _getMapData;
    function mapCacheSet$1(key, value2) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value2);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    var _mapCacheSet = mapCacheSet$1;
    var mapCacheClear = _mapCacheClear, mapCacheDelete = _mapCacheDelete, mapCacheGet = _mapCacheGet, mapCacheHas = _mapCacheHas, mapCacheSet = _mapCacheSet;
    function MapCache$3(entries) {
      var index = -1, length2 = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length2) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache$3.prototype.clear = mapCacheClear;
    MapCache$3.prototype["delete"] = mapCacheDelete;
    MapCache$3.prototype.get = mapCacheGet;
    MapCache$3.prototype.has = mapCacheHas;
    MapCache$3.prototype.set = mapCacheSet;
    var _MapCache = MapCache$3;
    var ListCache$1 = _ListCache, Map$2 = _Map, MapCache$2 = _MapCache;
    var LARGE_ARRAY_SIZE = 200;
    function stackSet$1(key, value2) {
      var data = this.__data__;
      if (data instanceof ListCache$1) {
        var pairs = data.__data__;
        if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value2]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache$2(pairs);
      }
      data.set(key, value2);
      this.size = data.size;
      return this;
    }
    var _stackSet = stackSet$1;
    var ListCache = _ListCache, stackClear = _stackClear, stackDelete = _stackDelete, stackGet = _stackGet, stackHas = _stackHas, stackSet = _stackSet;
    function Stack$4(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack$4.prototype.clear = stackClear;
    Stack$4.prototype["delete"] = stackDelete;
    Stack$4.prototype.get = stackGet;
    Stack$4.prototype.has = stackHas;
    Stack$4.prototype.set = stackSet;
    var _Stack = Stack$4;
    var getNative$4 = _getNative;
    var defineProperty$2 = function() {
      try {
        var func = getNative$4(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e2) {
      }
    }();
    var _defineProperty = defineProperty$2;
    var defineProperty$1 = _defineProperty;
    function baseAssignValue$4(object, key, value2) {
      if (key == "__proto__" && defineProperty$1) {
        defineProperty$1(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value2,
          "writable": true
        });
      } else {
        object[key] = value2;
      }
    }
    var _baseAssignValue = baseAssignValue$4;
    var baseAssignValue$3 = _baseAssignValue, eq$3 = eq_1;
    function assignMergeValue$2(object, key, value2) {
      if (value2 !== void 0 && !eq$3(object[key], value2) || value2 === void 0 && !(key in object)) {
        baseAssignValue$3(object, key, value2);
      }
    }
    var _assignMergeValue = assignMergeValue$2;
    function createBaseFor$1(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length2 = props.length;
        while (length2--) {
          var key = props[fromRight ? length2 : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    var _createBaseFor = createBaseFor$1;
    var createBaseFor = _createBaseFor;
    var baseFor$2 = createBaseFor();
    var _baseFor = baseFor$2;
    var _cloneBuffer = { exports: {} };
    _cloneBuffer.exports;
    (function(module2, exports2) {
      var root2 = _root;
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root2.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
      function cloneBuffer2(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length2 = buffer.length, result = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
        buffer.copy(result);
        return result;
      }
      module2.exports = cloneBuffer2;
    })(_cloneBuffer, _cloneBuffer.exports);
    var _cloneBufferExports = _cloneBuffer.exports;
    var root$5 = _root;
    var Uint8Array$2 = root$5.Uint8Array;
    var _Uint8Array = Uint8Array$2;
    var Uint8Array$1 = _Uint8Array;
    function cloneArrayBuffer$3(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
      return result;
    }
    var _cloneArrayBuffer = cloneArrayBuffer$3;
    var cloneArrayBuffer$2 = _cloneArrayBuffer;
    function cloneTypedArray$2(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$2(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    var _cloneTypedArray = cloneTypedArray$2;
    function copyArray$2(source, array) {
      var index = -1, length2 = source.length;
      array || (array = Array(length2));
      while (++index < length2) {
        array[index] = source[index];
      }
      return array;
    }
    var _copyArray = copyArray$2;
    var isObject$g = isObject_1;
    var objectCreate = Object.create;
    var baseCreate$1 = function() {
      function object() {
      }
      return function(proto2) {
        if (!isObject$g(proto2)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto2);
        }
        object.prototype = proto2;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    var _baseCreate = baseCreate$1;
    function overArg$2(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var _overArg = overArg$2;
    var overArg$1 = _overArg;
    var getPrototype$3 = overArg$1(Object.getPrototypeOf, Object);
    var _getPrototype = getPrototype$3;
    var objectProto$a = Object.prototype;
    function isPrototype$3(value2) {
      var Ctor = value2 && value2.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto$a;
      return value2 === proto2;
    }
    var _isPrototype = isPrototype$3;
    var baseCreate = _baseCreate, getPrototype$2 = _getPrototype, isPrototype$2 = _isPrototype;
    function initCloneObject$2(object) {
      return typeof object.constructor == "function" && !isPrototype$2(object) ? baseCreate(getPrototype$2(object)) : {};
    }
    var _initCloneObject = initCloneObject$2;
    function isObjectLike$9(value2) {
      return value2 != null && typeof value2 == "object";
    }
    var isObjectLike_1 = isObjectLike$9;
    var baseGetTag$4 = _baseGetTag, isObjectLike$8 = isObjectLike_1;
    var argsTag$3 = "[object Arguments]";
    function baseIsArguments$1(value2) {
      return isObjectLike$8(value2) && baseGetTag$4(value2) == argsTag$3;
    }
    var _baseIsArguments = baseIsArguments$1;
    var baseIsArguments = _baseIsArguments, isObjectLike$7 = isObjectLike_1;
    var objectProto$9 = Object.prototype;
    var hasOwnProperty$8 = objectProto$9.hasOwnProperty;
    var propertyIsEnumerable$1 = objectProto$9.propertyIsEnumerable;
    var isArguments$4 = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value2) {
      return isObjectLike$7(value2) && hasOwnProperty$8.call(value2, "callee") && !propertyIsEnumerable$1.call(value2, "callee");
    };
    var isArguments_1 = isArguments$4;
    var isArray$b = Array.isArray;
    var isArray_1 = isArray$b;
    var MAX_SAFE_INTEGER$1 = 9007199254740991;
    function isLength$3(value2) {
      return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER$1;
    }
    var isLength_1 = isLength$3;
    var isFunction$1 = isFunction_1, isLength$2 = isLength_1;
    function isArrayLike$4(value2) {
      return value2 != null && isLength$2(value2.length) && !isFunction$1(value2);
    }
    var isArrayLike_1 = isArrayLike$4;
    var isArrayLike$3 = isArrayLike_1, isObjectLike$6 = isObjectLike_1;
    function isArrayLikeObject$1(value2) {
      return isObjectLike$6(value2) && isArrayLike$3(value2);
    }
    var isArrayLikeObject_1 = isArrayLikeObject$1;
    var isBuffer$4 = { exports: {} };
    function stubFalse() {
      return false;
    }
    var stubFalse_1 = stubFalse;
    isBuffer$4.exports;
    (function(module2, exports2) {
      var root2 = _root, stubFalse2 = stubFalse_1;
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root2.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer2 = nativeIsBuffer || stubFalse2;
      module2.exports = isBuffer2;
    })(isBuffer$4, isBuffer$4.exports);
    var isBufferExports = isBuffer$4.exports;
    var baseGetTag$3 = _baseGetTag, getPrototype$1 = _getPrototype, isObjectLike$5 = isObjectLike_1;
    var objectTag$4 = "[object Object]";
    var funcProto = Function.prototype, objectProto$8 = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty$7 = objectProto$8.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject$3(value2) {
      if (!isObjectLike$5(value2) || baseGetTag$3(value2) != objectTag$4) {
        return false;
      }
      var proto2 = getPrototype$1(value2);
      if (proto2 === null) {
        return true;
      }
      var Ctor = hasOwnProperty$7.call(proto2, "constructor") && proto2.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isPlainObject_1 = isPlainObject$3;
    var baseGetTag$2 = _baseGetTag, isLength$1 = isLength_1, isObjectLike$4 = isObjectLike_1;
    var argsTag$2 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$3 = "[object Boolean]", dateTag$3 = "[object Date]", errorTag$2 = "[object Error]", funcTag$1 = "[object Function]", mapTag$5 = "[object Map]", numberTag$3 = "[object Number]", objectTag$3 = "[object Object]", regexpTag$3 = "[object RegExp]", setTag$5 = "[object Set]", stringTag$3 = "[object String]", weakMapTag$2 = "[object WeakMap]";
    var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
    typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$5] = typedArrayTags[numberTag$3] = typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$5] = typedArrayTags[stringTag$3] = typedArrayTags[weakMapTag$2] = false;
    function baseIsTypedArray$1(value2) {
      return isObjectLike$4(value2) && isLength$1(value2.length) && !!typedArrayTags[baseGetTag$2(value2)];
    }
    var _baseIsTypedArray = baseIsTypedArray$1;
    function baseUnary$3(func) {
      return function(value2) {
        return func(value2);
      };
    }
    var _baseUnary = baseUnary$3;
    var _nodeUtil = { exports: {} };
    _nodeUtil.exports;
    (function(module2, exports2) {
      var freeGlobal2 = _freeGlobal;
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal2.process;
      var nodeUtil2 = function() {
        try {
          var types2 = freeModule && freeModule.require && freeModule.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e2) {
        }
      }();
      module2.exports = nodeUtil2;
    })(_nodeUtil, _nodeUtil.exports);
    var _nodeUtilExports = _nodeUtil.exports;
    var baseIsTypedArray = _baseIsTypedArray, baseUnary$2 = _baseUnary, nodeUtil$2 = _nodeUtilExports;
    var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;
    var isTypedArray$3 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;
    var isTypedArray_1 = isTypedArray$3;
    function safeGet$2(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var _safeGet = safeGet$2;
    var baseAssignValue$2 = _baseAssignValue, eq$2 = eq_1;
    var objectProto$7 = Object.prototype;
    var hasOwnProperty$6 = objectProto$7.hasOwnProperty;
    function assignValue$3(object, key, value2) {
      var objValue = object[key];
      if (!(hasOwnProperty$6.call(object, key) && eq$2(objValue, value2)) || value2 === void 0 && !(key in object)) {
        baseAssignValue$2(object, key, value2);
      }
    }
    var _assignValue = assignValue$3;
    var assignValue$2 = _assignValue, baseAssignValue$1 = _baseAssignValue;
    function copyObject$6(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length2 = props.length;
      while (++index < length2) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue$1(object, key, newValue);
        } else {
          assignValue$2(object, key, newValue);
        }
      }
      return object;
    }
    var _copyObject = copyObject$6;
    function baseTimes$1(n2, iteratee) {
      var index = -1, result = Array(n2);
      while (++index < n2) {
        result[index] = iteratee(index);
      }
      return result;
    }
    var _baseTimes = baseTimes$1;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex$4(value2, length2) {
      var type = typeof value2;
      length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
      return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length2);
    }
    var _isIndex = isIndex$4;
    var baseTimes = _baseTimes, isArguments$3 = isArguments_1, isArray$a = isArray_1, isBuffer$3 = isBufferExports, isIndex$3 = _isIndex, isTypedArray$2 = isTypedArray_1;
    var objectProto$6 = Object.prototype;
    var hasOwnProperty$5 = objectProto$6.hasOwnProperty;
    function arrayLikeKeys$2(value2, inherited) {
      var isArr = isArray$a(value2), isArg = !isArr && isArguments$3(value2), isBuff = !isArr && !isArg && isBuffer$3(value2), isType = !isArr && !isArg && !isBuff && isTypedArray$2(value2), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value2.length, String) : [], length2 = result.length;
      for (var key in value2) {
        if ((inherited || hasOwnProperty$5.call(value2, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex$3(key, length2)))) {
          result.push(key);
        }
      }
      return result;
    }
    var _arrayLikeKeys = arrayLikeKeys$2;
    function nativeKeysIn$1(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    var _nativeKeysIn = nativeKeysIn$1;
    var isObject$f = isObject_1, isPrototype$1 = _isPrototype, nativeKeysIn = _nativeKeysIn;
    var objectProto$5 = Object.prototype;
    var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
    function baseKeysIn$1(object) {
      if (!isObject$f(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype$1(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty$4.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    var _baseKeysIn = baseKeysIn$1;
    var arrayLikeKeys$1 = _arrayLikeKeys, baseKeysIn = _baseKeysIn, isArrayLike$2 = isArrayLike_1;
    function keysIn$5(object) {
      return isArrayLike$2(object) ? arrayLikeKeys$1(object, true) : baseKeysIn(object);
    }
    var keysIn_1 = keysIn$5;
    var copyObject$5 = _copyObject, keysIn$4 = keysIn_1;
    function toPlainObject$1(value2) {
      return copyObject$5(value2, keysIn$4(value2));
    }
    var toPlainObject_1 = toPlainObject$1;
    var assignMergeValue$1 = _assignMergeValue, cloneBuffer$1 = _cloneBufferExports, cloneTypedArray$1 = _cloneTypedArray, copyArray$1 = _copyArray, initCloneObject$1 = _initCloneObject, isArguments$2 = isArguments_1, isArray$9 = isArray_1, isArrayLikeObject = isArrayLikeObject_1, isBuffer$2 = isBufferExports, isFunction = isFunction_1, isObject$e = isObject_1, isPlainObject$2 = isPlainObject_1, isTypedArray$1 = isTypedArray_1, safeGet$1 = _safeGet, toPlainObject = toPlainObject_1;
    function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet$1(object, key), srcValue = safeGet$1(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue$1(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray$9(srcValue), isBuff = !isArr && isBuffer$2(srcValue), isTyped = !isArr && !isBuff && isTypedArray$1(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray$9(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray$1(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer$1(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray$1(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject$2(srcValue) || isArguments$2(srcValue)) {
          newValue = objValue;
          if (isArguments$2(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject$e(objValue) || isFunction(objValue)) {
            newValue = initCloneObject$1(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue$1(object, key, newValue);
    }
    var _baseMergeDeep = baseMergeDeep$1;
    var Stack$3 = _Stack, assignMergeValue = _assignMergeValue, baseFor$1 = _baseFor, baseMergeDeep = _baseMergeDeep, isObject$d = isObject_1, keysIn$3 = keysIn_1, safeGet = _safeGet;
    function baseMerge$2(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor$1(source, function(srcValue, key) {
        stack || (stack = new Stack$3());
        if (isObject$d(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge$2, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn$3);
    }
    var _baseMerge = baseMerge$2;
    function identity$3(value2) {
      return value2;
    }
    var identity_1 = identity$3;
    function apply$1(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    var _apply = apply$1;
    var apply = _apply;
    var nativeMax$2 = Math.max;
    function overRest$2(func, start2, transform) {
      start2 = nativeMax$2(start2 === void 0 ? func.length - 1 : start2, 0);
      return function() {
        var args = arguments, index = -1, length2 = nativeMax$2(args.length - start2, 0), array = Array(length2);
        while (++index < length2) {
          array[index] = args[start2 + index];
        }
        index = -1;
        var otherArgs = Array(start2 + 1);
        while (++index < start2) {
          otherArgs[index] = args[index];
        }
        otherArgs[start2] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    var _overRest = overRest$2;
    function constant$1(value2) {
      return function() {
        return value2;
      };
    }
    var constant_1 = constant$1;
    var constant = constant_1, defineProperty = _defineProperty, identity$2 = identity_1;
    var baseSetToString$1 = !defineProperty ? identity$2 : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    var _baseSetToString = baseSetToString$1;
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut$1(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    var _shortOut = shortOut$1;
    var baseSetToString = _baseSetToString, shortOut = _shortOut;
    var setToString$2 = shortOut(baseSetToString);
    var _setToString = setToString$2;
    var identity$1 = identity_1, overRest$1 = _overRest, setToString$1 = _setToString;
    function baseRest$1(func, start2) {
      return setToString$1(overRest$1(func, start2, identity$1), func + "");
    }
    var _baseRest = baseRest$1;
    var eq$1 = eq_1, isArrayLike$1 = isArrayLike_1, isIndex$2 = _isIndex, isObject$c = isObject_1;
    function isIterateeCall$2(value2, index, object) {
      if (!isObject$c(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike$1(object) && isIndex$2(index, object.length) : type == "string" && index in object) {
        return eq$1(object[index], value2);
      }
      return false;
    }
    var _isIterateeCall = isIterateeCall$2;
    var baseRest = _baseRest, isIterateeCall$1 = _isIterateeCall;
    function createAssigner$2(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length2 = sources.length, customizer = length2 > 1 ? sources[length2 - 1] : void 0, guard = length2 > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : void 0;
        if (guard && isIterateeCall$1(sources[0], sources[1], guard)) {
          customizer = length2 < 3 ? void 0 : customizer;
          length2 = 1;
        }
        object = Object(object);
        while (++index < length2) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    var _createAssigner = createAssigner$2;
    var baseMerge$1 = _baseMerge, createAssigner$1 = _createAssigner;
    var merge = createAssigner$1(function(object, source, srcIndex) {
      baseMerge$1(object, source, srcIndex);
    });
    var merge_1 = merge;
    const merge$1 = /* @__PURE__ */ getDefaultExportFromCjs(merge_1);
    var baseGetTag$1 = _baseGetTag, isObjectLike$3 = isObjectLike_1;
    var symbolTag$3 = "[object Symbol]";
    function isSymbol$4(value2) {
      return typeof value2 == "symbol" || isObjectLike$3(value2) && baseGetTag$1(value2) == symbolTag$3;
    }
    var isSymbol_1 = isSymbol$4;
    var isArray$8 = isArray_1, isSymbol$3 = isSymbol_1;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
    function isKey$3(value2, object) {
      if (isArray$8(value2)) {
        return false;
      }
      var type = typeof value2;
      if (type == "number" || type == "symbol" || type == "boolean" || value2 == null || isSymbol$3(value2)) {
        return true;
      }
      return reIsPlainProp.test(value2) || !reIsDeepProp.test(value2) || object != null && value2 in Object(object);
    }
    var _isKey = isKey$3;
    var MapCache$1 = _MapCache;
    var FUNC_ERROR_TEXT$2 = "Expected a function";
    function memoize$1(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT$2);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize$1.Cache || MapCache$1)();
      return memoized;
    }
    memoize$1.Cache = MapCache$1;
    var memoize_1 = memoize$1;
    var memoize = memoize_1;
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped$1(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    var _memoizeCapped = memoizeCapped$1;
    var memoizeCapped = _memoizeCapped;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath$1 = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match5, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match5);
      });
      return result;
    });
    var _stringToPath = stringToPath$1;
    function arrayMap$3(array, iteratee) {
      var index = -1, length2 = array == null ? 0 : array.length, result = Array(length2);
      while (++index < length2) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    var _arrayMap = arrayMap$3;
    var Symbol$4 = _Symbol, arrayMap$2 = _arrayMap, isArray$7 = isArray_1, isSymbol$2 = isSymbol_1;
    var INFINITY$2 = 1 / 0;
    var symbolProto$2 = Symbol$4 ? Symbol$4.prototype : void 0, symbolToString = symbolProto$2 ? symbolProto$2.toString : void 0;
    function baseToString$2(value2) {
      if (typeof value2 == "string") {
        return value2;
      }
      if (isArray$7(value2)) {
        return arrayMap$2(value2, baseToString$2) + "";
      }
      if (isSymbol$2(value2)) {
        return symbolToString ? symbolToString.call(value2) : "";
      }
      var result = value2 + "";
      return result == "0" && 1 / value2 == -INFINITY$2 ? "-0" : result;
    }
    var _baseToString = baseToString$2;
    var baseToString$1 = _baseToString;
    function toString$2(value2) {
      return value2 == null ? "" : baseToString$1(value2);
    }
    var toString_1 = toString$2;
    var isArray$6 = isArray_1, isKey$2 = _isKey, stringToPath = _stringToPath, toString$1 = toString_1;
    function castPath$6(value2, object) {
      if (isArray$6(value2)) {
        return value2;
      }
      return isKey$2(value2, object) ? [value2] : stringToPath(toString$1(value2));
    }
    var _castPath = castPath$6;
    var isSymbol$1 = isSymbol_1;
    var INFINITY$1 = 1 / 0;
    function toKey$6(value2) {
      if (typeof value2 == "string" || isSymbol$1(value2)) {
        return value2;
      }
      var result = value2 + "";
      return result == "0" && 1 / value2 == -INFINITY$1 ? "-0" : result;
    }
    var _toKey = toKey$6;
    var castPath$5 = _castPath, toKey$5 = _toKey;
    function baseGet$4(object, path) {
      path = castPath$5(path, object);
      var index = 0, length2 = path.length;
      while (object != null && index < length2) {
        object = object[toKey$5(path[index++])];
      }
      return index && index == length2 ? object : void 0;
    }
    var _baseGet = baseGet$4;
    var assignValue$1 = _assignValue, castPath$4 = _castPath, isIndex$1 = _isIndex, isObject$b = isObject_1, toKey$4 = _toKey;
    function baseSet$1(object, path, value2, customizer) {
      if (!isObject$b(object)) {
        return object;
      }
      path = castPath$4(path, object);
      var index = -1, length2 = path.length, lastIndex = length2 - 1, nested2 = object;
      while (nested2 != null && ++index < length2) {
        var key = toKey$4(path[index]), newValue = value2;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object;
        }
        if (index != lastIndex) {
          var objValue = nested2[key];
          newValue = customizer ? customizer(objValue, key, nested2) : void 0;
          if (newValue === void 0) {
            newValue = isObject$b(objValue) ? objValue : isIndex$1(path[index + 1]) ? [] : {};
          }
        }
        assignValue$1(nested2, key, newValue);
        nested2 = nested2[key];
      }
      return object;
    }
    var _baseSet = baseSet$1;
    var baseGet$3 = _baseGet, baseSet = _baseSet, castPath$3 = _castPath;
    function basePickBy$2(object, paths, predicate) {
      var index = -1, length2 = paths.length, result = {};
      while (++index < length2) {
        var path = paths[index], value2 = baseGet$3(object, path);
        if (predicate(value2, path)) {
          baseSet(result, castPath$3(path, object), value2);
        }
      }
      return result;
    }
    var _basePickBy = basePickBy$2;
    function baseHasIn$1(object, key) {
      return object != null && key in Object(object);
    }
    var _baseHasIn = baseHasIn$1;
    var castPath$2 = _castPath, isArguments$1 = isArguments_1, isArray$5 = isArray_1, isIndex = _isIndex, isLength = isLength_1, toKey$3 = _toKey;
    function hasPath$1(object, path, hasFunc) {
      path = castPath$2(path, object);
      var index = -1, length2 = path.length, result = false;
      while (++index < length2) {
        var key = toKey$3(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length2) {
        return result;
      }
      length2 = object == null ? 0 : object.length;
      return !!length2 && isLength(length2) && isIndex(key, length2) && (isArray$5(object) || isArguments$1(object));
    }
    var _hasPath = hasPath$1;
    var baseHasIn = _baseHasIn, hasPath = _hasPath;
    function hasIn$2(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    var hasIn_1 = hasIn$2;
    var basePickBy$1 = _basePickBy, hasIn$1 = hasIn_1;
    function basePick$1(object, paths) {
      return basePickBy$1(object, paths, function(value2, path) {
        return hasIn$1(object, path);
      });
    }
    var _basePick = basePick$1;
    function arrayPush$3(array, values2) {
      var index = -1, length2 = values2.length, offset2 = array.length;
      while (++index < length2) {
        array[offset2 + index] = values2[index];
      }
      return array;
    }
    var _arrayPush = arrayPush$3;
    var Symbol$3 = _Symbol, isArguments = isArguments_1, isArray$4 = isArray_1;
    var spreadableSymbol = Symbol$3 ? Symbol$3.isConcatSpreadable : void 0;
    function isFlattenable$1(value2) {
      return isArray$4(value2) || isArguments(value2) || !!(spreadableSymbol && value2 && value2[spreadableSymbol]);
    }
    var _isFlattenable = isFlattenable$1;
    var arrayPush$2 = _arrayPush, isFlattenable = _isFlattenable;
    function baseFlatten$1(array, depth, predicate, isStrict, result) {
      var index = -1, length2 = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length2) {
        var value2 = array[index];
        if (depth > 0 && predicate(value2)) {
          if (depth > 1) {
            baseFlatten$1(value2, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush$2(result, value2);
          }
        } else if (!isStrict) {
          result[result.length] = value2;
        }
      }
      return result;
    }
    var _baseFlatten = baseFlatten$1;
    var baseFlatten = _baseFlatten;
    function flatten$1(array) {
      var length2 = array == null ? 0 : array.length;
      return length2 ? baseFlatten(array, 1) : [];
    }
    var flatten_1 = flatten$1;
    var flatten = flatten_1, overRest = _overRest, setToString = _setToString;
    function flatRest$2(func) {
      return setToString(overRest(func, void 0, flatten), func + "");
    }
    var _flatRest = flatRest$2;
    var basePick = _basePick, flatRest$1 = _flatRest;
    var pick = flatRest$1(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });
    var pick_1 = pick;
    const pick$1 = /* @__PURE__ */ getDefaultExportFromCjs(pick_1);
    var query_builder_seed = 0;
    const uuid$1 = function() {
      var timePart = ((/* @__PURE__ */ new Date()).getTime().toString(16) + "FF").substr(0, 11);
      var s = "ssssssss-xxxx-4xxx-yxxx-x".replace(/[xys]/g, function(c2) {
        var r2 = c2 === "s" ? Math.floor(Math.random() * 16) : query_builder_seed++ & 15;
        var v2 = c2 === "x" ? r2 : r2 & 3 | 8;
        return v2.toString(16);
      });
      return s + timePart;
    };
    var baseMerge = _baseMerge, createAssigner = _createAssigner;
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    var mergeWith_1 = mergeWith;
    const mergeWith$1 = /* @__PURE__ */ getDefaultExportFromCjs(mergeWith_1);
    var settings$3 = {
      formatField: function formatField2(field, parts, label2, fieldDefinition, config2, isForDisplay) {
        if (isForDisplay)
          return label2;
        else
          return field;
      },
      fieldSources: ["field"],
      keepInputOnChangeFieldSrc: true,
      fieldItemKeysForSearch: ["label", "path", "altLabel", "grouplabel"],
      listKeysForSearch: ["title", "value"],
      valueSourcesInfo: {
        value: {}
      },
      fieldSeparator: ".",
      fieldSeparatorDisplay: ".",
      canReorder: true,
      canRegroup: true,
      canDeleteLocked: false,
      canLeaveEmptyGroup: true,
      shouldCreateEmptyGroup: false,
      canShortMongoQuery: true,
      removeEmptyGroupsOnLoad: true,
      removeIncompleteRulesOnLoad: true,
      removeInvalidMultiSelectValuesOnLoad: true,
      setOpOnChangeField: ["keep", "default"],
      // 'default' (default if present), 'keep' (keep prev from last field), 'first', 'none'
      groupOperators: ["some", "all", "none"],
      defaultGroupConjunction: "AND",
      // localization
      locale: {
        moment: "en"
      },
      valueLabel: "Value",
      valuePlaceholder: "Value",
      fieldLabel: "Field",
      operatorLabel: "Operator",
      funcLabel: "Function",
      fieldPlaceholder: "Select field",
      funcPlaceholder: "Select function",
      operatorPlaceholder: "Select operator",
      lockLabel: "Lock",
      lockedLabel: "Locked",
      deleteLabel: "Delete",
      addGroupLabel: "Add group",
      addCaseLabel: "Add condition",
      addDefaultCaseLabel: "Add default condition",
      defaultCaseLabel: "Default:",
      addRuleLabel: "Add rule",
      addSubRuleLabel: "Add sub rule",
      delGroupLabel: "Delete",
      notLabel: "Not",
      fieldSourcesPopupTitle: "Select source",
      valueSourcesPopupTitle: "Select value source",
      removeRuleConfirmOptions: null,
      removeGroupConfirmOptions: null
    };
    var immutable = { exports: {} };
    (function(module2, exports2) {
      (function(global2, factory) {
        module2.exports = factory();
      })(commonjsGlobal, function() {
        var SLICE$0 = Array.prototype.slice;
        function createClass(ctor, superClass) {
          if (superClass) {
            ctor.prototype = Object.create(superClass.prototype);
          }
          ctor.prototype.constructor = ctor;
        }
        function Iterable(value2) {
          return isIterable(value2) ? value2 : Seq(value2);
        }
        createClass(KeyedIterable, Iterable);
        function KeyedIterable(value2) {
          return isKeyed(value2) ? value2 : KeyedSeq(value2);
        }
        createClass(IndexedIterable, Iterable);
        function IndexedIterable(value2) {
          return isIndexed(value2) ? value2 : IndexedSeq(value2);
        }
        createClass(SetIterable, Iterable);
        function SetIterable(value2) {
          return isIterable(value2) && !isAssociative(value2) ? value2 : SetSeq(value2);
        }
        function isIterable(maybeIterable) {
          return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
        }
        function isKeyed(maybeKeyed) {
          return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
        }
        function isIndexed(maybeIndexed) {
          return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
        }
        function isAssociative(maybeAssociative) {
          return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
        }
        function isOrdered(maybeOrdered) {
          return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
        }
        Iterable.isIterable = isIterable;
        Iterable.isKeyed = isKeyed;
        Iterable.isIndexed = isIndexed;
        Iterable.isAssociative = isAssociative;
        Iterable.isOrdered = isOrdered;
        Iterable.Keyed = KeyedIterable;
        Iterable.Indexed = IndexedIterable;
        Iterable.Set = SetIterable;
        var IS_ITERABLE_SENTINEL = "@@__IMMUTABLE_ITERABLE__@@";
        var IS_KEYED_SENTINEL = "@@__IMMUTABLE_KEYED__@@";
        var IS_INDEXED_SENTINEL = "@@__IMMUTABLE_INDEXED__@@";
        var IS_ORDERED_SENTINEL = "@@__IMMUTABLE_ORDERED__@@";
        var DELETE = "delete";
        var SHIFT = 5;
        var SIZE2 = 1 << SHIFT;
        var MASK = SIZE2 - 1;
        var NOT_SET = {};
        var CHANGE_LENGTH = { value: false };
        var DID_ALTER = { value: false };
        function MakeRef(ref) {
          ref.value = false;
          return ref;
        }
        function SetRef(ref) {
          ref && (ref.value = true);
        }
        function OwnerID() {
        }
        function arrCopy(arr, offset2) {
          offset2 = offset2 || 0;
          var len = Math.max(0, arr.length - offset2);
          var newArr = new Array(len);
          for (var ii2 = 0; ii2 < len; ii2++) {
            newArr[ii2] = arr[ii2 + offset2];
          }
          return newArr;
        }
        function ensureSize(iter) {
          if (iter.size === void 0) {
            iter.size = iter.__iterate(returnTrue);
          }
          return iter.size;
        }
        function wrapIndex(iter, index) {
          if (typeof index !== "number") {
            var uint32Index = index >>> 0;
            if ("" + uint32Index !== index || uint32Index === 4294967295) {
              return NaN;
            }
            index = uint32Index;
          }
          return index < 0 ? ensureSize(iter) + index : index;
        }
        function returnTrue() {
          return true;
        }
        function wholeSlice(begin, end2, size) {
          return (begin === 0 || size !== void 0 && begin <= -size) && (end2 === void 0 || size !== void 0 && end2 >= size);
        }
        function resolveBegin(begin, size) {
          return resolveIndex(begin, size, 0);
        }
        function resolveEnd(end2, size) {
          return resolveIndex(end2, size, size);
        }
        function resolveIndex(index, size, defaultIndex) {
          return index === void 0 ? defaultIndex : index < 0 ? Math.max(0, size + index) : size === void 0 ? index : Math.min(size, index);
        }
        var ITERATE_KEYS = 0;
        var ITERATE_VALUES = 1;
        var ITERATE_ENTRIES = 2;
        var REAL_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;
        function Iterator(next2) {
          this.next = next2;
        }
        Iterator.prototype.toString = function() {
          return "[Iterator]";
        };
        Iterator.KEYS = ITERATE_KEYS;
        Iterator.VALUES = ITERATE_VALUES;
        Iterator.ENTRIES = ITERATE_ENTRIES;
        Iterator.prototype.inspect = Iterator.prototype.toSource = function() {
          return this.toString();
        };
        Iterator.prototype[ITERATOR_SYMBOL] = function() {
          return this;
        };
        function iteratorValue(type, k2, v2, iteratorResult) {
          var value2 = type === 0 ? k2 : type === 1 ? v2 : [k2, v2];
          iteratorResult ? iteratorResult.value = value2 : iteratorResult = {
            value: value2,
            done: false
          };
          return iteratorResult;
        }
        function iteratorDone() {
          return { value: void 0, done: true };
        }
        function hasIterator(maybeIterable) {
          return !!getIteratorFn(maybeIterable);
        }
        function isIterator(maybeIterator) {
          return maybeIterator && typeof maybeIterator.next === "function";
        }
        function getIterator(iterable) {
          var iteratorFn = getIteratorFn(iterable);
          return iteratorFn && iteratorFn.call(iterable);
        }
        function getIteratorFn(iterable) {
          var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        function isArrayLike2(value2) {
          return value2 && typeof value2.length === "number";
        }
        createClass(Seq, Iterable);
        function Seq(value2) {
          return value2 === null || value2 === void 0 ? emptySequence() : isIterable(value2) ? value2.toSeq() : seqFromValue(value2);
        }
        Seq.of = function() {
          return Seq(arguments);
        };
        Seq.prototype.toSeq = function() {
          return this;
        };
        Seq.prototype.toString = function() {
          return this.__toString("Seq {", "}");
        };
        Seq.prototype.cacheResult = function() {
          if (!this._cache && this.__iterateUncached) {
            this._cache = this.entrySeq().toArray();
            this.size = this._cache.length;
          }
          return this;
        };
        Seq.prototype.__iterate = function(fn, reverse) {
          return seqIterate(this, fn, reverse, true);
        };
        Seq.prototype.__iterator = function(type, reverse) {
          return seqIterator(this, type, reverse, true);
        };
        createClass(KeyedSeq, Seq);
        function KeyedSeq(value2) {
          return value2 === null || value2 === void 0 ? emptySequence().toKeyedSeq() : isIterable(value2) ? isKeyed(value2) ? value2.toSeq() : value2.fromEntrySeq() : keyedSeqFromValue(value2);
        }
        KeyedSeq.prototype.toKeyedSeq = function() {
          return this;
        };
        createClass(IndexedSeq, Seq);
        function IndexedSeq(value2) {
          return value2 === null || value2 === void 0 ? emptySequence() : !isIterable(value2) ? indexedSeqFromValue(value2) : isKeyed(value2) ? value2.entrySeq() : value2.toIndexedSeq();
        }
        IndexedSeq.of = function() {
          return IndexedSeq(arguments);
        };
        IndexedSeq.prototype.toIndexedSeq = function() {
          return this;
        };
        IndexedSeq.prototype.toString = function() {
          return this.__toString("Seq [", "]");
        };
        IndexedSeq.prototype.__iterate = function(fn, reverse) {
          return seqIterate(this, fn, reverse, false);
        };
        IndexedSeq.prototype.__iterator = function(type, reverse) {
          return seqIterator(this, type, reverse, false);
        };
        createClass(SetSeq, Seq);
        function SetSeq(value2) {
          return (value2 === null || value2 === void 0 ? emptySequence() : !isIterable(value2) ? indexedSeqFromValue(value2) : isKeyed(value2) ? value2.entrySeq() : value2).toSetSeq();
        }
        SetSeq.of = function() {
          return SetSeq(arguments);
        };
        SetSeq.prototype.toSetSeq = function() {
          return this;
        };
        Seq.isSeq = isSeq;
        Seq.Keyed = KeyedSeq;
        Seq.Set = SetSeq;
        Seq.Indexed = IndexedSeq;
        var IS_SEQ_SENTINEL = "@@__IMMUTABLE_SEQ__@@";
        Seq.prototype[IS_SEQ_SENTINEL] = true;
        createClass(ArraySeq, IndexedSeq);
        function ArraySeq(array) {
          this._array = array;
          this.size = array.length;
        }
        ArraySeq.prototype.get = function(index, notSetValue) {
          return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
        };
        ArraySeq.prototype.__iterate = function(fn, reverse) {
          var array = this._array;
          var maxIndex = array.length - 1;
          for (var ii2 = 0; ii2 <= maxIndex; ii2++) {
            if (fn(array[reverse ? maxIndex - ii2 : ii2], ii2, this) === false) {
              return ii2 + 1;
            }
          }
          return ii2;
        };
        ArraySeq.prototype.__iterator = function(type, reverse) {
          var array = this._array;
          var maxIndex = array.length - 1;
          var ii2 = 0;
          return new Iterator(
            function() {
              return ii2 > maxIndex ? iteratorDone() : iteratorValue(type, ii2, array[reverse ? maxIndex - ii2++ : ii2++]);
            }
          );
        };
        createClass(ObjectSeq, KeyedSeq);
        function ObjectSeq(object) {
          var keys2 = Object.keys(object);
          this._object = object;
          this._keys = keys2;
          this.size = keys2.length;
        }
        ObjectSeq.prototype.get = function(key, notSetValue) {
          if (notSetValue !== void 0 && !this.has(key)) {
            return notSetValue;
          }
          return this._object[key];
        };
        ObjectSeq.prototype.has = function(key) {
          return this._object.hasOwnProperty(key);
        };
        ObjectSeq.prototype.__iterate = function(fn, reverse) {
          var object = this._object;
          var keys2 = this._keys;
          var maxIndex = keys2.length - 1;
          for (var ii2 = 0; ii2 <= maxIndex; ii2++) {
            var key = keys2[reverse ? maxIndex - ii2 : ii2];
            if (fn(object[key], key, this) === false) {
              return ii2 + 1;
            }
          }
          return ii2;
        };
        ObjectSeq.prototype.__iterator = function(type, reverse) {
          var object = this._object;
          var keys2 = this._keys;
          var maxIndex = keys2.length - 1;
          var ii2 = 0;
          return new Iterator(function() {
            var key = keys2[reverse ? maxIndex - ii2 : ii2];
            return ii2++ > maxIndex ? iteratorDone() : iteratorValue(type, key, object[key]);
          });
        };
        ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;
        createClass(IterableSeq, IndexedSeq);
        function IterableSeq(iterable) {
          this._iterable = iterable;
          this.size = iterable.length || iterable.size;
        }
        IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterable = this._iterable;
          var iterator = getIterator(iterable);
          var iterations = 0;
          if (isIterator(iterator)) {
            var step;
            while (!(step = iterator.next()).done) {
              if (fn(step.value, iterations++, this) === false) {
                break;
              }
            }
          }
          return iterations;
        };
        IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterable = this._iterable;
          var iterator = getIterator(iterable);
          if (!isIterator(iterator)) {
            return new Iterator(iteratorDone);
          }
          var iterations = 0;
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, iterations++, step.value);
          });
        };
        createClass(IteratorSeq, IndexedSeq);
        function IteratorSeq(iterator) {
          this._iterator = iterator;
          this._iteratorCache = [];
        }
        IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterator = this._iterator;
          var cache = this._iteratorCache;
          var iterations = 0;
          while (iterations < cache.length) {
            if (fn(cache[iterations], iterations++, this) === false) {
              return iterations;
            }
          }
          var step;
          while (!(step = iterator.next()).done) {
            var val = step.value;
            cache[iterations] = val;
            if (fn(val, iterations++, this) === false) {
              break;
            }
          }
          return iterations;
        };
        IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = this._iterator;
          var cache = this._iteratorCache;
          var iterations = 0;
          return new Iterator(function() {
            if (iterations >= cache.length) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              cache[iterations] = step.value;
            }
            return iteratorValue(type, iterations, cache[iterations++]);
          });
        };
        function isSeq(maybeSeq) {
          return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
        }
        var EMPTY_SEQ;
        function emptySequence() {
          return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
        }
        function keyedSeqFromValue(value2) {
          var seq = Array.isArray(value2) ? new ArraySeq(value2).fromEntrySeq() : isIterator(value2) ? new IteratorSeq(value2).fromEntrySeq() : hasIterator(value2) ? new IterableSeq(value2).fromEntrySeq() : typeof value2 === "object" ? new ObjectSeq(value2) : void 0;
          if (!seq) {
            throw new TypeError(
              "Expected Array or iterable object of [k, v] entries, or keyed object: " + value2
            );
          }
          return seq;
        }
        function indexedSeqFromValue(value2) {
          var seq = maybeIndexedSeqFromValue(value2);
          if (!seq) {
            throw new TypeError(
              "Expected Array or iterable object of values: " + value2
            );
          }
          return seq;
        }
        function seqFromValue(value2) {
          var seq = maybeIndexedSeqFromValue(value2) || typeof value2 === "object" && new ObjectSeq(value2);
          if (!seq) {
            throw new TypeError(
              "Expected Array or iterable object of values, or keyed object: " + value2
            );
          }
          return seq;
        }
        function maybeIndexedSeqFromValue(value2) {
          return isArrayLike2(value2) ? new ArraySeq(value2) : isIterator(value2) ? new IteratorSeq(value2) : hasIterator(value2) ? new IterableSeq(value2) : void 0;
        }
        function seqIterate(seq, fn, reverse, useKeys) {
          var cache = seq._cache;
          if (cache) {
            var maxIndex = cache.length - 1;
            for (var ii2 = 0; ii2 <= maxIndex; ii2++) {
              var entry = cache[reverse ? maxIndex - ii2 : ii2];
              if (fn(entry[1], useKeys ? entry[0] : ii2, seq) === false) {
                return ii2 + 1;
              }
            }
            return ii2;
          }
          return seq.__iterateUncached(fn, reverse);
        }
        function seqIterator(seq, type, reverse, useKeys) {
          var cache = seq._cache;
          if (cache) {
            var maxIndex = cache.length - 1;
            var ii2 = 0;
            return new Iterator(function() {
              var entry = cache[reverse ? maxIndex - ii2 : ii2];
              return ii2++ > maxIndex ? iteratorDone() : iteratorValue(type, useKeys ? entry[0] : ii2 - 1, entry[1]);
            });
          }
          return seq.__iteratorUncached(type, reverse);
        }
        function fromJS(json, converter) {
          return converter ? fromJSWith(converter, json, "", { "": json }) : fromJSDefault(json);
        }
        function fromJSWith(converter, json, key, parentJSON) {
          if (Array.isArray(json)) {
            return converter.call(parentJSON, key, IndexedSeq(json).map(function(v2, k2) {
              return fromJSWith(converter, v2, k2, json);
            }));
          }
          if (isPlainObj(json)) {
            return converter.call(parentJSON, key, KeyedSeq(json).map(function(v2, k2) {
              return fromJSWith(converter, v2, k2, json);
            }));
          }
          return json;
        }
        function fromJSDefault(json) {
          if (Array.isArray(json)) {
            return IndexedSeq(json).map(fromJSDefault).toList();
          }
          if (isPlainObj(json)) {
            return KeyedSeq(json).map(fromJSDefault).toMap();
          }
          return json;
        }
        function isPlainObj(value2) {
          return value2 && (value2.constructor === Object || value2.constructor === void 0);
        }
        function is2(valueA, valueB) {
          if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
            return true;
          }
          if (!valueA || !valueB) {
            return false;
          }
          if (typeof valueA.valueOf === "function" && typeof valueB.valueOf === "function") {
            valueA = valueA.valueOf();
            valueB = valueB.valueOf();
            if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
              return true;
            }
            if (!valueA || !valueB) {
              return false;
            }
          }
          if (typeof valueA.equals === "function" && typeof valueB.equals === "function" && valueA.equals(valueB)) {
            return true;
          }
          return false;
        }
        function deepEqual2(a, b2) {
          if (a === b2) {
            return true;
          }
          if (!isIterable(b2) || a.size !== void 0 && b2.size !== void 0 && a.size !== b2.size || a.__hash !== void 0 && b2.__hash !== void 0 && a.__hash !== b2.__hash || isKeyed(a) !== isKeyed(b2) || isIndexed(a) !== isIndexed(b2) || isOrdered(a) !== isOrdered(b2)) {
            return false;
          }
          if (a.size === 0 && b2.size === 0) {
            return true;
          }
          var notAssociative = !isAssociative(a);
          if (isOrdered(a)) {
            var entries = a.entries();
            return b2.every(function(v2, k2) {
              var entry = entries.next().value;
              return entry && is2(entry[1], v2) && (notAssociative || is2(entry[0], k2));
            }) && entries.next().done;
          }
          var flipped = false;
          if (a.size === void 0) {
            if (b2.size === void 0) {
              if (typeof a.cacheResult === "function") {
                a.cacheResult();
              }
            } else {
              flipped = true;
              var _2 = a;
              a = b2;
              b2 = _2;
            }
          }
          var allEqual = true;
          var bSize = b2.__iterate(function(v2, k2) {
            if (notAssociative ? !a.has(v2) : flipped ? !is2(v2, a.get(k2, NOT_SET)) : !is2(a.get(k2, NOT_SET), v2)) {
              allEqual = false;
              return false;
            }
          });
          return allEqual && a.size === bSize;
        }
        createClass(Repeat, IndexedSeq);
        function Repeat(value2, times) {
          if (!(this instanceof Repeat)) {
            return new Repeat(value2, times);
          }
          this._value = value2;
          this.size = times === void 0 ? Infinity : Math.max(0, times);
          if (this.size === 0) {
            if (EMPTY_REPEAT) {
              return EMPTY_REPEAT;
            }
            EMPTY_REPEAT = this;
          }
        }
        Repeat.prototype.toString = function() {
          if (this.size === 0) {
            return "Repeat []";
          }
          return "Repeat [ " + this._value + " " + this.size + " times ]";
        };
        Repeat.prototype.get = function(index, notSetValue) {
          return this.has(index) ? this._value : notSetValue;
        };
        Repeat.prototype.includes = function(searchValue) {
          return is2(this._value, searchValue);
        };
        Repeat.prototype.slice = function(begin, end2) {
          var size = this.size;
          return wholeSlice(begin, end2, size) ? this : new Repeat(this._value, resolveEnd(end2, size) - resolveBegin(begin, size));
        };
        Repeat.prototype.reverse = function() {
          return this;
        };
        Repeat.prototype.indexOf = function(searchValue) {
          if (is2(this._value, searchValue)) {
            return 0;
          }
          return -1;
        };
        Repeat.prototype.lastIndexOf = function(searchValue) {
          if (is2(this._value, searchValue)) {
            return this.size;
          }
          return -1;
        };
        Repeat.prototype.__iterate = function(fn, reverse) {
          for (var ii2 = 0; ii2 < this.size; ii2++) {
            if (fn(this._value, ii2, this) === false) {
              return ii2 + 1;
            }
          }
          return ii2;
        };
        Repeat.prototype.__iterator = function(type, reverse) {
          var this$0 = this;
          var ii2 = 0;
          return new Iterator(
            function() {
              return ii2 < this$0.size ? iteratorValue(type, ii2++, this$0._value) : iteratorDone();
            }
          );
        };
        Repeat.prototype.equals = function(other) {
          return other instanceof Repeat ? is2(this._value, other._value) : deepEqual2(other);
        };
        var EMPTY_REPEAT;
        function invariant(condition, error) {
          if (!condition)
            throw new Error(error);
        }
        createClass(Range, IndexedSeq);
        function Range(start2, end2, step) {
          if (!(this instanceof Range)) {
            return new Range(start2, end2, step);
          }
          invariant(step !== 0, "Cannot step a Range by 0");
          start2 = start2 || 0;
          if (end2 === void 0) {
            end2 = Infinity;
          }
          step = step === void 0 ? 1 : Math.abs(step);
          if (end2 < start2) {
            step = -step;
          }
          this._start = start2;
          this._end = end2;
          this._step = step;
          this.size = Math.max(0, Math.ceil((end2 - start2) / step - 1) + 1);
          if (this.size === 0) {
            if (EMPTY_RANGE) {
              return EMPTY_RANGE;
            }
            EMPTY_RANGE = this;
          }
        }
        Range.prototype.toString = function() {
          if (this.size === 0) {
            return "Range []";
          }
          return "Range [ " + this._start + "..." + this._end + (this._step !== 1 ? " by " + this._step : "") + " ]";
        };
        Range.prototype.get = function(index, notSetValue) {
          return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;
        };
        Range.prototype.includes = function(searchValue) {
          var possibleIndex = (searchValue - this._start) / this._step;
          return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
        };
        Range.prototype.slice = function(begin, end2) {
          if (wholeSlice(begin, end2, this.size)) {
            return this;
          }
          begin = resolveBegin(begin, this.size);
          end2 = resolveEnd(end2, this.size);
          if (end2 <= begin) {
            return new Range(0, 0);
          }
          return new Range(this.get(begin, this._end), this.get(end2, this._end), this._step);
        };
        Range.prototype.indexOf = function(searchValue) {
          var offsetValue = searchValue - this._start;
          if (offsetValue % this._step === 0) {
            var index = offsetValue / this._step;
            if (index >= 0 && index < this.size) {
              return index;
            }
          }
          return -1;
        };
        Range.prototype.lastIndexOf = function(searchValue) {
          return this.indexOf(searchValue);
        };
        Range.prototype.__iterate = function(fn, reverse) {
          var maxIndex = this.size - 1;
          var step = this._step;
          var value2 = reverse ? this._start + maxIndex * step : this._start;
          for (var ii2 = 0; ii2 <= maxIndex; ii2++) {
            if (fn(value2, ii2, this) === false) {
              return ii2 + 1;
            }
            value2 += reverse ? -step : step;
          }
          return ii2;
        };
        Range.prototype.__iterator = function(type, reverse) {
          var maxIndex = this.size - 1;
          var step = this._step;
          var value2 = reverse ? this._start + maxIndex * step : this._start;
          var ii2 = 0;
          return new Iterator(function() {
            var v2 = value2;
            value2 += reverse ? -step : step;
            return ii2 > maxIndex ? iteratorDone() : iteratorValue(type, ii2++, v2);
          });
        };
        Range.prototype.equals = function(other) {
          return other instanceof Range ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual2(this, other);
        };
        var EMPTY_RANGE;
        createClass(Collection, Iterable);
        function Collection() {
          throw TypeError("Abstract");
        }
        createClass(KeyedCollection, Collection);
        function KeyedCollection() {
        }
        createClass(IndexedCollection, Collection);
        function IndexedCollection() {
        }
        createClass(SetCollection, Collection);
        function SetCollection() {
        }
        Collection.Keyed = KeyedCollection;
        Collection.Indexed = IndexedCollection;
        Collection.Set = SetCollection;
        var imul = typeof Math.imul === "function" && Math.imul(4294967295, 2) === -2 ? Math.imul : function imul2(a, b2) {
          a = a | 0;
          b2 = b2 | 0;
          var c2 = a & 65535;
          var d2 = b2 & 65535;
          return c2 * d2 + ((a >>> 16) * d2 + c2 * (b2 >>> 16) << 16 >>> 0) | 0;
        };
        function smi(i32) {
          return i32 >>> 1 & 1073741824 | i32 & 3221225471;
        }
        function hash2(o) {
          if (o === false || o === null || o === void 0) {
            return 0;
          }
          if (typeof o.valueOf === "function") {
            o = o.valueOf();
            if (o === false || o === null || o === void 0) {
              return 0;
            }
          }
          if (o === true) {
            return 1;
          }
          var type = typeof o;
          if (type === "number") {
            if (o !== o || o === Infinity) {
              return 0;
            }
            var h2 = o | 0;
            if (h2 !== o) {
              h2 ^= o * 4294967295;
            }
            while (o > 4294967295) {
              o /= 4294967295;
              h2 ^= o;
            }
            return smi(h2);
          }
          if (type === "string") {
            return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
          }
          if (typeof o.hashCode === "function") {
            return o.hashCode();
          }
          if (type === "object") {
            return hashJSObj(o);
          }
          if (typeof o.toString === "function") {
            return hashString(o.toString());
          }
          throw new Error("Value type " + type + " cannot be hashed.");
        }
        function cachedHashString(string) {
          var hash3 = stringHashCache[string];
          if (hash3 === void 0) {
            hash3 = hashString(string);
            if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
              STRING_HASH_CACHE_SIZE = 0;
              stringHashCache = {};
            }
            STRING_HASH_CACHE_SIZE++;
            stringHashCache[string] = hash3;
          }
          return hash3;
        }
        function hashString(string) {
          var hash3 = 0;
          for (var ii2 = 0; ii2 < string.length; ii2++) {
            hash3 = 31 * hash3 + string.charCodeAt(ii2) | 0;
          }
          return smi(hash3);
        }
        function hashJSObj(obj) {
          var hash3;
          if (usingWeakMap) {
            hash3 = weakMap.get(obj);
            if (hash3 !== void 0) {
              return hash3;
            }
          }
          hash3 = obj[UID_HASH_KEY];
          if (hash3 !== void 0) {
            return hash3;
          }
          if (!canDefineProperty) {
            hash3 = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
            if (hash3 !== void 0) {
              return hash3;
            }
            hash3 = getIENodeHash(obj);
            if (hash3 !== void 0) {
              return hash3;
            }
          }
          hash3 = ++objHashUID;
          if (objHashUID & 1073741824) {
            objHashUID = 0;
          }
          if (usingWeakMap) {
            weakMap.set(obj, hash3);
          } else if (isExtensible !== void 0 && isExtensible(obj) === false) {
            throw new Error("Non-extensible objects are not allowed as keys.");
          } else if (canDefineProperty) {
            Object.defineProperty(obj, UID_HASH_KEY, {
              "enumerable": false,
              "configurable": false,
              "writable": false,
              "value": hash3
            });
          } else if (obj.propertyIsEnumerable !== void 0 && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
            obj.propertyIsEnumerable = function() {
              return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
            };
            obj.propertyIsEnumerable[UID_HASH_KEY] = hash3;
          } else if (obj.nodeType !== void 0) {
            obj[UID_HASH_KEY] = hash3;
          } else {
            throw new Error("Unable to set a non-enumerable property on object.");
          }
          return hash3;
        }
        var isExtensible = Object.isExtensible;
        var canDefineProperty = function() {
          try {
            Object.defineProperty({}, "@", {});
            return true;
          } catch (e2) {
            return false;
          }
        }();
        function getIENodeHash(node2) {
          if (node2 && node2.nodeType > 0) {
            switch (node2.nodeType) {
              case 1:
                return node2.uniqueID;
              case 9:
                return node2.documentElement && node2.documentElement.uniqueID;
            }
          }
        }
        var usingWeakMap = typeof WeakMap === "function";
        var weakMap;
        if (usingWeakMap) {
          weakMap = /* @__PURE__ */ new WeakMap();
        }
        var objHashUID = 0;
        var UID_HASH_KEY = "__immutablehash__";
        if (typeof Symbol === "function") {
          UID_HASH_KEY = Symbol(UID_HASH_KEY);
        }
        var STRING_HASH_CACHE_MIN_STRLEN = 16;
        var STRING_HASH_CACHE_MAX_SIZE = 255;
        var STRING_HASH_CACHE_SIZE = 0;
        var stringHashCache = {};
        function assertNotInfinite(size) {
          invariant(
            size !== Infinity,
            "Cannot perform this action with an infinite size."
          );
        }
        createClass(Map2, KeyedCollection);
        function Map2(value2) {
          return value2 === null || value2 === void 0 ? emptyMap() : isMap2(value2) && !isOrdered(value2) ? value2 : emptyMap().withMutations(function(map2) {
            var iter = KeyedIterable(value2);
            assertNotInfinite(iter.size);
            iter.forEach(function(v2, k2) {
              return map2.set(k2, v2);
            });
          });
        }
        Map2.of = function() {
          var keyValues = SLICE$0.call(arguments, 0);
          return emptyMap().withMutations(function(map2) {
            for (var i = 0; i < keyValues.length; i += 2) {
              if (i + 1 >= keyValues.length) {
                throw new Error("Missing value for key: " + keyValues[i]);
              }
              map2.set(keyValues[i], keyValues[i + 1]);
            }
          });
        };
        Map2.prototype.toString = function() {
          return this.__toString("Map {", "}");
        };
        Map2.prototype.get = function(k2, notSetValue) {
          return this._root ? this._root.get(0, void 0, k2, notSetValue) : notSetValue;
        };
        Map2.prototype.set = function(k2, v2) {
          return updateMap(this, k2, v2);
        };
        Map2.prototype.setIn = function(keyPath, v2) {
          return this.updateIn(keyPath, NOT_SET, function() {
            return v2;
          });
        };
        Map2.prototype.remove = function(k2) {
          return updateMap(this, k2, NOT_SET);
        };
        Map2.prototype.deleteIn = function(keyPath) {
          return this.updateIn(keyPath, function() {
            return NOT_SET;
          });
        };
        Map2.prototype.update = function(k2, notSetValue, updater) {
          return arguments.length === 1 ? k2(this) : this.updateIn([k2], notSetValue, updater);
        };
        Map2.prototype.updateIn = function(keyPath, notSetValue, updater) {
          if (!updater) {
            updater = notSetValue;
            notSetValue = void 0;
          }
          var updatedValue = updateInDeepMap(
            this,
            forceIterator(keyPath),
            notSetValue,
            updater
          );
          return updatedValue === NOT_SET ? void 0 : updatedValue;
        };
        Map2.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._root = null;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyMap();
        };
        Map2.prototype.merge = function() {
          return mergeIntoMapWith(this, void 0, arguments);
        };
        Map2.prototype.mergeWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoMapWith(this, merger, iters);
        };
        Map2.prototype.mergeIn = function(keyPath) {
          var iters = SLICE$0.call(arguments, 1);
          return this.updateIn(
            keyPath,
            emptyMap(),
            function(m2) {
              return typeof m2.merge === "function" ? m2.merge.apply(m2, iters) : iters[iters.length - 1];
            }
          );
        };
        Map2.prototype.mergeDeep = function() {
          return mergeIntoMapWith(this, deepMerger, arguments);
        };
        Map2.prototype.mergeDeepWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoMapWith(this, deepMergerWith(merger), iters);
        };
        Map2.prototype.mergeDeepIn = function(keyPath) {
          var iters = SLICE$0.call(arguments, 1);
          return this.updateIn(
            keyPath,
            emptyMap(),
            function(m2) {
              return typeof m2.mergeDeep === "function" ? m2.mergeDeep.apply(m2, iters) : iters[iters.length - 1];
            }
          );
        };
        Map2.prototype.sort = function(comparator) {
          return OrderedMap(sortFactory(this, comparator));
        };
        Map2.prototype.sortBy = function(mapper, comparator) {
          return OrderedMap(sortFactory(this, comparator, mapper));
        };
        Map2.prototype.withMutations = function(fn) {
          var mutable = this.asMutable();
          fn(mutable);
          return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
        };
        Map2.prototype.asMutable = function() {
          return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
        };
        Map2.prototype.asImmutable = function() {
          return this.__ensureOwner();
        };
        Map2.prototype.wasAltered = function() {
          return this.__altered;
        };
        Map2.prototype.__iterator = function(type, reverse) {
          return new MapIterator(this, type, reverse);
        };
        Map2.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          var iterations = 0;
          this._root && this._root.iterate(function(entry) {
            iterations++;
            return fn(entry[1], entry[0], this$0);
          }, reverse);
          return iterations;
        };
        Map2.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeMap(this.size, this._root, ownerID, this.__hash);
        };
        function isMap2(maybeMap) {
          return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
        }
        Map2.isMap = isMap2;
        var IS_MAP_SENTINEL = "@@__IMMUTABLE_MAP__@@";
        var MapPrototype = Map2.prototype;
        MapPrototype[IS_MAP_SENTINEL] = true;
        MapPrototype[DELETE] = MapPrototype.remove;
        MapPrototype.removeIn = MapPrototype.deleteIn;
        function ArrayMapNode(ownerID, entries) {
          this.ownerID = ownerID;
          this.entries = entries;
        }
        ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          var entries = this.entries;
          for (var ii2 = 0, len = entries.length; ii2 < len; ii2++) {
            if (is2(key, entries[ii2][0])) {
              return entries[ii2][1];
            }
          }
          return notSetValue;
        };
        ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          var removed = value2 === NOT_SET;
          var entries = this.entries;
          var idx = 0;
          for (var len = entries.length; idx < len; idx++) {
            if (is2(key, entries[idx][0])) {
              break;
            }
          }
          var exists = idx < len;
          if (exists ? entries[idx][1] === value2 : removed) {
            return this;
          }
          SetRef(didAlter);
          (removed || !exists) && SetRef(didChangeSize);
          if (removed && entries.length === 1) {
            return;
          }
          if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
            return createNodes(ownerID, entries, key, value2);
          }
          var isEditable = ownerID && ownerID === this.ownerID;
          var newEntries = isEditable ? entries : arrCopy(entries);
          if (exists) {
            if (removed) {
              idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
            } else {
              newEntries[idx] = [key, value2];
            }
          } else {
            newEntries.push([key, value2]);
          }
          if (isEditable) {
            this.entries = newEntries;
            return this;
          }
          return new ArrayMapNode(ownerID, newEntries);
        };
        function BitmapIndexedNode(ownerID, bitmap, nodes) {
          this.ownerID = ownerID;
          this.bitmap = bitmap;
          this.nodes = nodes;
        }
        BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          if (keyHash === void 0) {
            keyHash = hash2(key);
          }
          var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
          var bitmap = this.bitmap;
          return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(shift + SHIFT, keyHash, key, notSetValue);
        };
        BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          if (keyHash === void 0) {
            keyHash = hash2(key);
          }
          var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var bit = 1 << keyHashFrag;
          var bitmap = this.bitmap;
          var exists = (bitmap & bit) !== 0;
          if (!exists && value2 === NOT_SET) {
            return this;
          }
          var idx = popCount(bitmap & bit - 1);
          var nodes = this.nodes;
          var node2 = exists ? nodes[idx] : void 0;
          var newNode = updateNode(node2, ownerID, shift + SHIFT, keyHash, key, value2, didChangeSize, didAlter);
          if (newNode === node2) {
            return this;
          }
          if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
            return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
          }
          if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
            return nodes[idx ^ 1];
          }
          if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
            return newNode;
          }
          var isEditable = ownerID && ownerID === this.ownerID;
          var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
          var newNodes = exists ? newNode ? setIn(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);
          if (isEditable) {
            this.bitmap = newBitmap;
            this.nodes = newNodes;
            return this;
          }
          return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
        };
        function HashArrayMapNode(ownerID, count, nodes) {
          this.ownerID = ownerID;
          this.count = count;
          this.nodes = nodes;
        }
        HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          if (keyHash === void 0) {
            keyHash = hash2(key);
          }
          var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var node2 = this.nodes[idx];
          return node2 ? node2.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
        };
        HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          if (keyHash === void 0) {
            keyHash = hash2(key);
          }
          var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var removed = value2 === NOT_SET;
          var nodes = this.nodes;
          var node2 = nodes[idx];
          if (removed && !node2) {
            return this;
          }
          var newNode = updateNode(node2, ownerID, shift + SHIFT, keyHash, key, value2, didChangeSize, didAlter);
          if (newNode === node2) {
            return this;
          }
          var newCount = this.count;
          if (!node2) {
            newCount++;
          } else if (!newNode) {
            newCount--;
            if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
              return packNodes(ownerID, nodes, newCount, idx);
            }
          }
          var isEditable = ownerID && ownerID === this.ownerID;
          var newNodes = setIn(nodes, idx, newNode, isEditable);
          if (isEditable) {
            this.count = newCount;
            this.nodes = newNodes;
            return this;
          }
          return new HashArrayMapNode(ownerID, newCount, newNodes);
        };
        function HashCollisionNode(ownerID, keyHash, entries) {
          this.ownerID = ownerID;
          this.keyHash = keyHash;
          this.entries = entries;
        }
        HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          var entries = this.entries;
          for (var ii2 = 0, len = entries.length; ii2 < len; ii2++) {
            if (is2(key, entries[ii2][0])) {
              return entries[ii2][1];
            }
          }
          return notSetValue;
        };
        HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          if (keyHash === void 0) {
            keyHash = hash2(key);
          }
          var removed = value2 === NOT_SET;
          if (keyHash !== this.keyHash) {
            if (removed) {
              return this;
            }
            SetRef(didAlter);
            SetRef(didChangeSize);
            return mergeIntoNode(this, ownerID, shift, keyHash, [key, value2]);
          }
          var entries = this.entries;
          var idx = 0;
          for (var len = entries.length; idx < len; idx++) {
            if (is2(key, entries[idx][0])) {
              break;
            }
          }
          var exists = idx < len;
          if (exists ? entries[idx][1] === value2 : removed) {
            return this;
          }
          SetRef(didAlter);
          (removed || !exists) && SetRef(didChangeSize);
          if (removed && len === 2) {
            return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
          }
          var isEditable = ownerID && ownerID === this.ownerID;
          var newEntries = isEditable ? entries : arrCopy(entries);
          if (exists) {
            if (removed) {
              idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
            } else {
              newEntries[idx] = [key, value2];
            }
          } else {
            newEntries.push([key, value2]);
          }
          if (isEditable) {
            this.entries = newEntries;
            return this;
          }
          return new HashCollisionNode(ownerID, this.keyHash, newEntries);
        };
        function ValueNode(ownerID, keyHash, entry) {
          this.ownerID = ownerID;
          this.keyHash = keyHash;
          this.entry = entry;
        }
        ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          return is2(key, this.entry[0]) ? this.entry[1] : notSetValue;
        };
        ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          var removed = value2 === NOT_SET;
          var keyMatch = is2(key, this.entry[0]);
          if (keyMatch ? value2 === this.entry[1] : removed) {
            return this;
          }
          SetRef(didAlter);
          if (removed) {
            SetRef(didChangeSize);
            return;
          }
          if (keyMatch) {
            if (ownerID && ownerID === this.ownerID) {
              this.entry[1] = value2;
              return this;
            }
            return new ValueNode(ownerID, this.keyHash, [key, value2]);
          }
          SetRef(didChangeSize);
          return mergeIntoNode(this, ownerID, shift, hash2(key), [key, value2]);
        };
        ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(fn, reverse) {
          var entries = this.entries;
          for (var ii2 = 0, maxIndex = entries.length - 1; ii2 <= maxIndex; ii2++) {
            if (fn(entries[reverse ? maxIndex - ii2 : ii2]) === false) {
              return false;
            }
          }
        };
        BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(fn, reverse) {
          var nodes = this.nodes;
          for (var ii2 = 0, maxIndex = nodes.length - 1; ii2 <= maxIndex; ii2++) {
            var node2 = nodes[reverse ? maxIndex - ii2 : ii2];
            if (node2 && node2.iterate(fn, reverse) === false) {
              return false;
            }
          }
        };
        ValueNode.prototype.iterate = function(fn, reverse) {
          return fn(this.entry);
        };
        createClass(MapIterator, Iterator);
        function MapIterator(map2, type, reverse) {
          this._type = type;
          this._reverse = reverse;
          this._stack = map2._root && mapIteratorFrame(map2._root);
        }
        MapIterator.prototype.next = function() {
          var type = this._type;
          var stack = this._stack;
          while (stack) {
            var node2 = stack.node;
            var index = stack.index++;
            var maxIndex;
            if (node2.entry) {
              if (index === 0) {
                return mapIteratorValue(type, node2.entry);
              }
            } else if (node2.entries) {
              maxIndex = node2.entries.length - 1;
              if (index <= maxIndex) {
                return mapIteratorValue(type, node2.entries[this._reverse ? maxIndex - index : index]);
              }
            } else {
              maxIndex = node2.nodes.length - 1;
              if (index <= maxIndex) {
                var subNode = node2.nodes[this._reverse ? maxIndex - index : index];
                if (subNode) {
                  if (subNode.entry) {
                    return mapIteratorValue(type, subNode.entry);
                  }
                  stack = this._stack = mapIteratorFrame(subNode, stack);
                }
                continue;
              }
            }
            stack = this._stack = this._stack.__prev;
          }
          return iteratorDone();
        };
        function mapIteratorValue(type, entry) {
          return iteratorValue(type, entry[0], entry[1]);
        }
        function mapIteratorFrame(node2, prev2) {
          return {
            node: node2,
            index: 0,
            __prev: prev2
          };
        }
        function makeMap(size, root2, ownerID, hash3) {
          var map2 = Object.create(MapPrototype);
          map2.size = size;
          map2._root = root2;
          map2.__ownerID = ownerID;
          map2.__hash = hash3;
          map2.__altered = false;
          return map2;
        }
        var EMPTY_MAP;
        function emptyMap() {
          return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
        }
        function updateMap(map2, k2, v2) {
          var newRoot;
          var newSize;
          if (!map2._root) {
            if (v2 === NOT_SET) {
              return map2;
            }
            newSize = 1;
            newRoot = new ArrayMapNode(map2.__ownerID, [[k2, v2]]);
          } else {
            var didChangeSize = MakeRef(CHANGE_LENGTH);
            var didAlter = MakeRef(DID_ALTER);
            newRoot = updateNode(map2._root, map2.__ownerID, 0, void 0, k2, v2, didChangeSize, didAlter);
            if (!didAlter.value) {
              return map2;
            }
            newSize = map2.size + (didChangeSize.value ? v2 === NOT_SET ? -1 : 1 : 0);
          }
          if (map2.__ownerID) {
            map2.size = newSize;
            map2._root = newRoot;
            map2.__hash = void 0;
            map2.__altered = true;
            return map2;
          }
          return newRoot ? makeMap(newSize, newRoot) : emptyMap();
        }
        function updateNode(node2, ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          if (!node2) {
            if (value2 === NOT_SET) {
              return node2;
            }
            SetRef(didAlter);
            SetRef(didChangeSize);
            return new ValueNode(ownerID, keyHash, [key, value2]);
          }
          return node2.update(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter);
        }
        function isLeafNode(node2) {
          return node2.constructor === ValueNode || node2.constructor === HashCollisionNode;
        }
        function mergeIntoNode(node2, ownerID, shift, keyHash, entry) {
          if (node2.keyHash === keyHash) {
            return new HashCollisionNode(ownerID, keyHash, [node2.entry, entry]);
          }
          var idx1 = (shift === 0 ? node2.keyHash : node2.keyHash >>> shift) & MASK;
          var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var newNode;
          var nodes = idx1 === idx2 ? [mergeIntoNode(node2, ownerID, shift + SHIFT, keyHash, entry)] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node2, newNode] : [newNode, node2]);
          return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);
        }
        function createNodes(ownerID, entries, key, value2) {
          if (!ownerID) {
            ownerID = new OwnerID();
          }
          var node2 = new ValueNode(ownerID, hash2(key), [key, value2]);
          for (var ii2 = 0; ii2 < entries.length; ii2++) {
            var entry = entries[ii2];
            node2 = node2.update(ownerID, 0, void 0, entry[0], entry[1]);
          }
          return node2;
        }
        function packNodes(ownerID, nodes, count, excluding) {
          var bitmap = 0;
          var packedII = 0;
          var packedNodes = new Array(count);
          for (var ii2 = 0, bit = 1, len = nodes.length; ii2 < len; ii2++, bit <<= 1) {
            var node2 = nodes[ii2];
            if (node2 !== void 0 && ii2 !== excluding) {
              bitmap |= bit;
              packedNodes[packedII++] = node2;
            }
          }
          return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
        }
        function expandNodes(ownerID, nodes, bitmap, including, node2) {
          var count = 0;
          var expandedNodes = new Array(SIZE2);
          for (var ii2 = 0; bitmap !== 0; ii2++, bitmap >>>= 1) {
            expandedNodes[ii2] = bitmap & 1 ? nodes[count++] : void 0;
          }
          expandedNodes[including] = node2;
          return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
        }
        function mergeIntoMapWith(map2, merger, iterables) {
          var iters = [];
          for (var ii2 = 0; ii2 < iterables.length; ii2++) {
            var value2 = iterables[ii2];
            var iter = KeyedIterable(value2);
            if (!isIterable(value2)) {
              iter = iter.map(function(v2) {
                return fromJS(v2);
              });
            }
            iters.push(iter);
          }
          return mergeIntoCollectionWith(map2, merger, iters);
        }
        function deepMerger(existing, value2, key) {
          return existing && existing.mergeDeep && isIterable(value2) ? existing.mergeDeep(value2) : is2(existing, value2) ? existing : value2;
        }
        function deepMergerWith(merger) {
          return function(existing, value2, key) {
            if (existing && existing.mergeDeepWith && isIterable(value2)) {
              return existing.mergeDeepWith(merger, value2);
            }
            var nextValue = merger(existing, value2, key);
            return is2(existing, nextValue) ? existing : nextValue;
          };
        }
        function mergeIntoCollectionWith(collection, merger, iters) {
          iters = iters.filter(function(x2) {
            return x2.size !== 0;
          });
          if (iters.length === 0) {
            return collection;
          }
          if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
            return collection.constructor(iters[0]);
          }
          return collection.withMutations(function(collection2) {
            var mergeIntoMap = merger ? function(value2, key) {
              collection2.update(
                key,
                NOT_SET,
                function(existing) {
                  return existing === NOT_SET ? value2 : merger(existing, value2, key);
                }
              );
            } : function(value2, key) {
              collection2.set(key, value2);
            };
            for (var ii2 = 0; ii2 < iters.length; ii2++) {
              iters[ii2].forEach(mergeIntoMap);
            }
          });
        }
        function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
          var isNotSet = existing === NOT_SET;
          var step = keyPathIter.next();
          if (step.done) {
            var existingValue = isNotSet ? notSetValue : existing;
            var newValue = updater(existingValue);
            return newValue === existingValue ? existing : newValue;
          }
          invariant(
            isNotSet || existing && existing.set,
            "invalid keyPath"
          );
          var key = step.value;
          var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
          var nextUpdated = updateInDeepMap(
            nextExisting,
            keyPathIter,
            notSetValue,
            updater
          );
          return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? existing.remove(key) : (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
        }
        function popCount(x2) {
          x2 = x2 - (x2 >> 1 & 1431655765);
          x2 = (x2 & 858993459) + (x2 >> 2 & 858993459);
          x2 = x2 + (x2 >> 4) & 252645135;
          x2 = x2 + (x2 >> 8);
          x2 = x2 + (x2 >> 16);
          return x2 & 127;
        }
        function setIn(array, idx, val, canEdit) {
          var newArray = canEdit ? array : arrCopy(array);
          newArray[idx] = val;
          return newArray;
        }
        function spliceIn(array, idx, val, canEdit) {
          var newLen = array.length + 1;
          if (canEdit && idx + 1 === newLen) {
            array[idx] = val;
            return array;
          }
          var newArray = new Array(newLen);
          var after = 0;
          for (var ii2 = 0; ii2 < newLen; ii2++) {
            if (ii2 === idx) {
              newArray[ii2] = val;
              after = -1;
            } else {
              newArray[ii2] = array[ii2 + after];
            }
          }
          return newArray;
        }
        function spliceOut(array, idx, canEdit) {
          var newLen = array.length - 1;
          if (canEdit && idx === newLen) {
            array.pop();
            return array;
          }
          var newArray = new Array(newLen);
          var after = 0;
          for (var ii2 = 0; ii2 < newLen; ii2++) {
            if (ii2 === idx) {
              after = 1;
            }
            newArray[ii2] = array[ii2 + after];
          }
          return newArray;
        }
        var MAX_ARRAY_MAP_SIZE = SIZE2 / 4;
        var MAX_BITMAP_INDEXED_SIZE = SIZE2 / 2;
        var MIN_HASH_ARRAY_MAP_SIZE = SIZE2 / 4;
        createClass(List2, IndexedCollection);
        function List2(value2) {
          var empty = emptyList();
          if (value2 === null || value2 === void 0) {
            return empty;
          }
          if (isList(value2)) {
            return value2;
          }
          var iter = IndexedIterable(value2);
          var size = iter.size;
          if (size === 0) {
            return empty;
          }
          assertNotInfinite(size);
          if (size > 0 && size < SIZE2) {
            return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
          }
          return empty.withMutations(function(list) {
            list.setSize(size);
            iter.forEach(function(v2, i) {
              return list.set(i, v2);
            });
          });
        }
        List2.of = function() {
          return this(arguments);
        };
        List2.prototype.toString = function() {
          return this.__toString("List [", "]");
        };
        List2.prototype.get = function(index, notSetValue) {
          index = wrapIndex(this, index);
          if (index >= 0 && index < this.size) {
            index += this._origin;
            var node2 = listNodeFor(this, index);
            return node2 && node2.array[index & MASK];
          }
          return notSetValue;
        };
        List2.prototype.set = function(index, value2) {
          return updateList(this, index, value2);
        };
        List2.prototype.remove = function(index) {
          return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
        };
        List2.prototype.insert = function(index, value2) {
          return this.splice(index, 0, value2);
        };
        List2.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = this._origin = this._capacity = 0;
            this._level = SHIFT;
            this._root = this._tail = null;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyList();
        };
        List2.prototype.push = function() {
          var values2 = arguments;
          var oldSize = this.size;
          return this.withMutations(function(list) {
            setListBounds(list, 0, oldSize + values2.length);
            for (var ii2 = 0; ii2 < values2.length; ii2++) {
              list.set(oldSize + ii2, values2[ii2]);
            }
          });
        };
        List2.prototype.pop = function() {
          return setListBounds(this, 0, -1);
        };
        List2.prototype.unshift = function() {
          var values2 = arguments;
          return this.withMutations(function(list) {
            setListBounds(list, -values2.length);
            for (var ii2 = 0; ii2 < values2.length; ii2++) {
              list.set(ii2, values2[ii2]);
            }
          });
        };
        List2.prototype.shift = function() {
          return setListBounds(this, 1);
        };
        List2.prototype.merge = function() {
          return mergeIntoListWith(this, void 0, arguments);
        };
        List2.prototype.mergeWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoListWith(this, merger, iters);
        };
        List2.prototype.mergeDeep = function() {
          return mergeIntoListWith(this, deepMerger, arguments);
        };
        List2.prototype.mergeDeepWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoListWith(this, deepMergerWith(merger), iters);
        };
        List2.prototype.setSize = function(size) {
          return setListBounds(this, 0, size);
        };
        List2.prototype.slice = function(begin, end2) {
          var size = this.size;
          if (wholeSlice(begin, end2, size)) {
            return this;
          }
          return setListBounds(
            this,
            resolveBegin(begin, size),
            resolveEnd(end2, size)
          );
        };
        List2.prototype.__iterator = function(type, reverse) {
          var index = 0;
          var values2 = iterateList(this, reverse);
          return new Iterator(function() {
            var value2 = values2();
            return value2 === DONE ? iteratorDone() : iteratorValue(type, index++, value2);
          });
        };
        List2.prototype.__iterate = function(fn, reverse) {
          var index = 0;
          var values2 = iterateList(this, reverse);
          var value2;
          while ((value2 = values2()) !== DONE) {
            if (fn(value2, index++, this) === false) {
              break;
            }
          }
          return index;
        };
        List2.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            return this;
          }
          return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
        };
        function isList(maybeList) {
          return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
        }
        List2.isList = isList;
        var IS_LIST_SENTINEL = "@@__IMMUTABLE_LIST__@@";
        var ListPrototype = List2.prototype;
        ListPrototype[IS_LIST_SENTINEL] = true;
        ListPrototype[DELETE] = ListPrototype.remove;
        ListPrototype.setIn = MapPrototype.setIn;
        ListPrototype.deleteIn = ListPrototype.removeIn = MapPrototype.removeIn;
        ListPrototype.update = MapPrototype.update;
        ListPrototype.updateIn = MapPrototype.updateIn;
        ListPrototype.mergeIn = MapPrototype.mergeIn;
        ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
        ListPrototype.withMutations = MapPrototype.withMutations;
        ListPrototype.asMutable = MapPrototype.asMutable;
        ListPrototype.asImmutable = MapPrototype.asImmutable;
        ListPrototype.wasAltered = MapPrototype.wasAltered;
        function VNode(array, ownerID) {
          this.array = array;
          this.ownerID = ownerID;
        }
        VNode.prototype.removeBefore = function(ownerID, level, index) {
          if (index === level ? 1 << level : this.array.length === 0) {
            return this;
          }
          var originIndex = index >>> level & MASK;
          if (originIndex >= this.array.length) {
            return new VNode([], ownerID);
          }
          var removingFirst = originIndex === 0;
          var newChild;
          if (level > 0) {
            var oldChild = this.array[originIndex];
            newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
            if (newChild === oldChild && removingFirst) {
              return this;
            }
          }
          if (removingFirst && !newChild) {
            return this;
          }
          var editable = editableVNode(this, ownerID);
          if (!removingFirst) {
            for (var ii2 = 0; ii2 < originIndex; ii2++) {
              editable.array[ii2] = void 0;
            }
          }
          if (newChild) {
            editable.array[originIndex] = newChild;
          }
          return editable;
        };
        VNode.prototype.removeAfter = function(ownerID, level, index) {
          if (index === (level ? 1 << level : 0) || this.array.length === 0) {
            return this;
          }
          var sizeIndex = index - 1 >>> level & MASK;
          if (sizeIndex >= this.array.length) {
            return this;
          }
          var newChild;
          if (level > 0) {
            var oldChild = this.array[sizeIndex];
            newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
            if (newChild === oldChild && sizeIndex === this.array.length - 1) {
              return this;
            }
          }
          var editable = editableVNode(this, ownerID);
          editable.array.splice(sizeIndex + 1);
          if (newChild) {
            editable.array[sizeIndex] = newChild;
          }
          return editable;
        };
        var DONE = {};
        function iterateList(list, reverse) {
          var left2 = list._origin;
          var right2 = list._capacity;
          var tailPos = getTailOffset(right2);
          var tail = list._tail;
          return iterateNodeOrLeaf(list._root, list._level, 0);
          function iterateNodeOrLeaf(node2, level, offset2) {
            return level === 0 ? iterateLeaf(node2, offset2) : iterateNode(node2, level, offset2);
          }
          function iterateLeaf(node2, offset2) {
            var array = offset2 === tailPos ? tail && tail.array : node2 && node2.array;
            var from2 = offset2 > left2 ? 0 : left2 - offset2;
            var to2 = right2 - offset2;
            if (to2 > SIZE2) {
              to2 = SIZE2;
            }
            return function() {
              if (from2 === to2) {
                return DONE;
              }
              var idx = reverse ? --to2 : from2++;
              return array && array[idx];
            };
          }
          function iterateNode(node2, level, offset2) {
            var values2;
            var array = node2 && node2.array;
            var from2 = offset2 > left2 ? 0 : left2 - offset2 >> level;
            var to2 = (right2 - offset2 >> level) + 1;
            if (to2 > SIZE2) {
              to2 = SIZE2;
            }
            return function() {
              do {
                if (values2) {
                  var value2 = values2();
                  if (value2 !== DONE) {
                    return value2;
                  }
                  values2 = null;
                }
                if (from2 === to2) {
                  return DONE;
                }
                var idx = reverse ? --to2 : from2++;
                values2 = iterateNodeOrLeaf(
                  array && array[idx],
                  level - SHIFT,
                  offset2 + (idx << level)
                );
              } while (true);
            };
          }
        }
        function makeList(origin, capacity, level, root2, tail, ownerID, hash3) {
          var list = Object.create(ListPrototype);
          list.size = capacity - origin;
          list._origin = origin;
          list._capacity = capacity;
          list._level = level;
          list._root = root2;
          list._tail = tail;
          list.__ownerID = ownerID;
          list.__hash = hash3;
          list.__altered = false;
          return list;
        }
        var EMPTY_LIST;
        function emptyList() {
          return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
        }
        function updateList(list, index, value2) {
          index = wrapIndex(list, index);
          if (index !== index) {
            return list;
          }
          if (index >= list.size || index < 0) {
            return list.withMutations(function(list2) {
              index < 0 ? setListBounds(list2, index).set(0, value2) : setListBounds(list2, 0, index + 1).set(index, value2);
            });
          }
          index += list._origin;
          var newTail = list._tail;
          var newRoot = list._root;
          var didAlter = MakeRef(DID_ALTER);
          if (index >= getTailOffset(list._capacity)) {
            newTail = updateVNode(newTail, list.__ownerID, 0, index, value2, didAlter);
          } else {
            newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value2, didAlter);
          }
          if (!didAlter.value) {
            return list;
          }
          if (list.__ownerID) {
            list._root = newRoot;
            list._tail = newTail;
            list.__hash = void 0;
            list.__altered = true;
            return list;
          }
          return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
        }
        function updateVNode(node2, ownerID, level, index, value2, didAlter) {
          var idx = index >>> level & MASK;
          var nodeHas = node2 && idx < node2.array.length;
          if (!nodeHas && value2 === void 0) {
            return node2;
          }
          var newNode;
          if (level > 0) {
            var lowerNode = node2 && node2.array[idx];
            var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value2, didAlter);
            if (newLowerNode === lowerNode) {
              return node2;
            }
            newNode = editableVNode(node2, ownerID);
            newNode.array[idx] = newLowerNode;
            return newNode;
          }
          if (nodeHas && node2.array[idx] === value2) {
            return node2;
          }
          SetRef(didAlter);
          newNode = editableVNode(node2, ownerID);
          if (value2 === void 0 && idx === newNode.array.length - 1) {
            newNode.array.pop();
          } else {
            newNode.array[idx] = value2;
          }
          return newNode;
        }
        function editableVNode(node2, ownerID) {
          if (ownerID && node2 && ownerID === node2.ownerID) {
            return node2;
          }
          return new VNode(node2 ? node2.array.slice() : [], ownerID);
        }
        function listNodeFor(list, rawIndex) {
          if (rawIndex >= getTailOffset(list._capacity)) {
            return list._tail;
          }
          if (rawIndex < 1 << list._level + SHIFT) {
            var node2 = list._root;
            var level = list._level;
            while (node2 && level > 0) {
              node2 = node2.array[rawIndex >>> level & MASK];
              level -= SHIFT;
            }
            return node2;
          }
        }
        function setListBounds(list, begin, end2) {
          if (begin !== void 0) {
            begin = begin | 0;
          }
          if (end2 !== void 0) {
            end2 = end2 | 0;
          }
          var owner = list.__ownerID || new OwnerID();
          var oldOrigin = list._origin;
          var oldCapacity = list._capacity;
          var newOrigin = oldOrigin + begin;
          var newCapacity = end2 === void 0 ? oldCapacity : end2 < 0 ? oldCapacity + end2 : oldOrigin + end2;
          if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
            return list;
          }
          if (newOrigin >= newCapacity) {
            return list.clear();
          }
          var newLevel = list._level;
          var newRoot = list._root;
          var offsetShift = 0;
          while (newOrigin + offsetShift < 0) {
            newRoot = new VNode(newRoot && newRoot.array.length ? [void 0, newRoot] : [], owner);
            newLevel += SHIFT;
            offsetShift += 1 << newLevel;
          }
          if (offsetShift) {
            newOrigin += offsetShift;
            oldOrigin += offsetShift;
            newCapacity += offsetShift;
            oldCapacity += offsetShift;
          }
          var oldTailOffset = getTailOffset(oldCapacity);
          var newTailOffset = getTailOffset(newCapacity);
          while (newTailOffset >= 1 << newLevel + SHIFT) {
            newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
            newLevel += SHIFT;
          }
          var oldTail = list._tail;
          var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;
          if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
            newRoot = editableVNode(newRoot, owner);
            var node2 = newRoot;
            for (var level = newLevel; level > SHIFT; level -= SHIFT) {
              var idx = oldTailOffset >>> level & MASK;
              node2 = node2.array[idx] = editableVNode(node2.array[idx], owner);
            }
            node2.array[oldTailOffset >>> SHIFT & MASK] = oldTail;
          }
          if (newCapacity < oldCapacity) {
            newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
          }
          if (newOrigin >= newTailOffset) {
            newOrigin -= newTailOffset;
            newCapacity -= newTailOffset;
            newLevel = SHIFT;
            newRoot = null;
            newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
          } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
            offsetShift = 0;
            while (newRoot) {
              var beginIndex = newOrigin >>> newLevel & MASK;
              if (beginIndex !== newTailOffset >>> newLevel & MASK) {
                break;
              }
              if (beginIndex) {
                offsetShift += (1 << newLevel) * beginIndex;
              }
              newLevel -= SHIFT;
              newRoot = newRoot.array[beginIndex];
            }
            if (newRoot && newOrigin > oldOrigin) {
              newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
            }
            if (newRoot && newTailOffset < oldTailOffset) {
              newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
            }
            if (offsetShift) {
              newOrigin -= offsetShift;
              newCapacity -= offsetShift;
            }
          }
          if (list.__ownerID) {
            list.size = newCapacity - newOrigin;
            list._origin = newOrigin;
            list._capacity = newCapacity;
            list._level = newLevel;
            list._root = newRoot;
            list._tail = newTail;
            list.__hash = void 0;
            list.__altered = true;
            return list;
          }
          return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
        }
        function mergeIntoListWith(list, merger, iterables) {
          var iters = [];
          var maxSize = 0;
          for (var ii2 = 0; ii2 < iterables.length; ii2++) {
            var value2 = iterables[ii2];
            var iter = IndexedIterable(value2);
            if (iter.size > maxSize) {
              maxSize = iter.size;
            }
            if (!isIterable(value2)) {
              iter = iter.map(function(v2) {
                return fromJS(v2);
              });
            }
            iters.push(iter);
          }
          if (maxSize > list.size) {
            list = list.setSize(maxSize);
          }
          return mergeIntoCollectionWith(list, merger, iters);
        }
        function getTailOffset(size) {
          return size < SIZE2 ? 0 : size - 1 >>> SHIFT << SHIFT;
        }
        createClass(OrderedMap, Map2);
        function OrderedMap(value2) {
          return value2 === null || value2 === void 0 ? emptyOrderedMap() : isOrderedMap(value2) ? value2 : emptyOrderedMap().withMutations(function(map2) {
            var iter = KeyedIterable(value2);
            assertNotInfinite(iter.size);
            iter.forEach(function(v2, k2) {
              return map2.set(k2, v2);
            });
          });
        }
        OrderedMap.of = function() {
          return this(arguments);
        };
        OrderedMap.prototype.toString = function() {
          return this.__toString("OrderedMap {", "}");
        };
        OrderedMap.prototype.get = function(k2, notSetValue) {
          var index = this._map.get(k2);
          return index !== void 0 ? this._list.get(index)[1] : notSetValue;
        };
        OrderedMap.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._map.clear();
            this._list.clear();
            return this;
          }
          return emptyOrderedMap();
        };
        OrderedMap.prototype.set = function(k2, v2) {
          return updateOrderedMap(this, k2, v2);
        };
        OrderedMap.prototype.remove = function(k2) {
          return updateOrderedMap(this, k2, NOT_SET);
        };
        OrderedMap.prototype.wasAltered = function() {
          return this._map.wasAltered() || this._list.wasAltered();
        };
        OrderedMap.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._list.__iterate(
            function(entry) {
              return entry && fn(entry[1], entry[0], this$0);
            },
            reverse
          );
        };
        OrderedMap.prototype.__iterator = function(type, reverse) {
          return this._list.fromEntrySeq().__iterator(type, reverse);
        };
        OrderedMap.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          var newList = this._list.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            this._list = newList;
            return this;
          }
          return makeOrderedMap(newMap, newList, ownerID, this.__hash);
        };
        function isOrderedMap(maybeOrderedMap) {
          return isMap2(maybeOrderedMap) && isOrdered(maybeOrderedMap);
        }
        OrderedMap.isOrderedMap = isOrderedMap;
        OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
        OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;
        function makeOrderedMap(map2, list, ownerID, hash3) {
          var omap = Object.create(OrderedMap.prototype);
          omap.size = map2 ? map2.size : 0;
          omap._map = map2;
          omap._list = list;
          omap.__ownerID = ownerID;
          omap.__hash = hash3;
          return omap;
        }
        var EMPTY_ORDERED_MAP;
        function emptyOrderedMap() {
          return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
        }
        function updateOrderedMap(omap, k2, v2) {
          var map2 = omap._map;
          var list = omap._list;
          var i = map2.get(k2);
          var has = i !== void 0;
          var newMap;
          var newList;
          if (v2 === NOT_SET) {
            if (!has) {
              return omap;
            }
            if (list.size >= SIZE2 && list.size >= map2.size * 2) {
              newList = list.filter(function(entry, idx) {
                return entry !== void 0 && i !== idx;
              });
              newMap = newList.toKeyedSeq().map(function(entry) {
                return entry[0];
              }).flip().toMap();
              if (omap.__ownerID) {
                newMap.__ownerID = newList.__ownerID = omap.__ownerID;
              }
            } else {
              newMap = map2.remove(k2);
              newList = i === list.size - 1 ? list.pop() : list.set(i, void 0);
            }
          } else {
            if (has) {
              if (v2 === list.get(i)[1]) {
                return omap;
              }
              newMap = map2;
              newList = list.set(i, [k2, v2]);
            } else {
              newMap = map2.set(k2, list.size);
              newList = list.set(list.size, [k2, v2]);
            }
          }
          if (omap.__ownerID) {
            omap.size = newMap.size;
            omap._map = newMap;
            omap._list = newList;
            omap.__hash = void 0;
            return omap;
          }
          return makeOrderedMap(newMap, newList);
        }
        createClass(ToKeyedSequence, KeyedSeq);
        function ToKeyedSequence(indexed, useKeys) {
          this._iter = indexed;
          this._useKeys = useKeys;
          this.size = indexed.size;
        }
        ToKeyedSequence.prototype.get = function(key, notSetValue) {
          return this._iter.get(key, notSetValue);
        };
        ToKeyedSequence.prototype.has = function(key) {
          return this._iter.has(key);
        };
        ToKeyedSequence.prototype.valueSeq = function() {
          return this._iter.valueSeq();
        };
        ToKeyedSequence.prototype.reverse = function() {
          var this$0 = this;
          var reversedSequence = reverseFactory(this, true);
          if (!this._useKeys) {
            reversedSequence.valueSeq = function() {
              return this$0._iter.toSeq().reverse();
            };
          }
          return reversedSequence;
        };
        ToKeyedSequence.prototype.map = function(mapper, context2) {
          var this$0 = this;
          var mappedSequence = mapFactory(this, mapper, context2);
          if (!this._useKeys) {
            mappedSequence.valueSeq = function() {
              return this$0._iter.toSeq().map(mapper, context2);
            };
          }
          return mappedSequence;
        };
        ToKeyedSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          var ii2;
          return this._iter.__iterate(
            this._useKeys ? function(v2, k2) {
              return fn(v2, k2, this$0);
            } : (ii2 = reverse ? resolveSize(this) : 0, function(v2) {
              return fn(v2, reverse ? --ii2 : ii2++, this$0);
            }),
            reverse
          );
        };
        ToKeyedSequence.prototype.__iterator = function(type, reverse) {
          if (this._useKeys) {
            return this._iter.__iterator(type, reverse);
          }
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          var ii2 = reverse ? resolveSize(this) : 0;
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, reverse ? --ii2 : ii2++, step.value, step);
          });
        };
        ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;
        createClass(ToIndexedSequence, IndexedSeq);
        function ToIndexedSequence(iter) {
          this._iter = iter;
          this.size = iter.size;
        }
        ToIndexedSequence.prototype.includes = function(value2) {
          return this._iter.includes(value2);
        };
        ToIndexedSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          var iterations = 0;
          return this._iter.__iterate(function(v2) {
            return fn(v2, iterations++, this$0);
          }, reverse);
        };
        ToIndexedSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          var iterations = 0;
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, iterations++, step.value, step);
          });
        };
        createClass(ToSetSequence, SetSeq);
        function ToSetSequence(iter) {
          this._iter = iter;
          this.size = iter.size;
        }
        ToSetSequence.prototype.has = function(key) {
          return this._iter.includes(key);
        };
        ToSetSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._iter.__iterate(function(v2) {
            return fn(v2, v2, this$0);
          }, reverse);
        };
        ToSetSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, step.value, step.value, step);
          });
        };
        createClass(FromEntriesSequence, KeyedSeq);
        function FromEntriesSequence(entries) {
          this._iter = entries;
          this.size = entries.size;
        }
        FromEntriesSequence.prototype.entrySeq = function() {
          return this._iter.toSeq();
        };
        FromEntriesSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._iter.__iterate(function(entry) {
            if (entry) {
              validateEntry(entry);
              var indexedIterable = isIterable(entry);
              return fn(
                indexedIterable ? entry.get(1) : entry[1],
                indexedIterable ? entry.get(0) : entry[0],
                this$0
              );
            }
          }, reverse);
        };
        FromEntriesSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function() {
            while (true) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              if (entry) {
                validateEntry(entry);
                var indexedIterable = isIterable(entry);
                return iteratorValue(
                  type,
                  indexedIterable ? entry.get(0) : entry[0],
                  indexedIterable ? entry.get(1) : entry[1],
                  step
                );
              }
            }
          });
        };
        ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;
        function flipFactory(iterable) {
          var flipSequence = makeSequence(iterable);
          flipSequence._iter = iterable;
          flipSequence.size = iterable.size;
          flipSequence.flip = function() {
            return iterable;
          };
          flipSequence.reverse = function() {
            var reversedSequence = iterable.reverse.apply(this);
            reversedSequence.flip = function() {
              return iterable.reverse();
            };
            return reversedSequence;
          };
          flipSequence.has = function(key) {
            return iterable.includes(key);
          };
          flipSequence.includes = function(key) {
            return iterable.has(key);
          };
          flipSequence.cacheResult = cacheResultThrough;
          flipSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            return iterable.__iterate(function(v2, k2) {
              return fn(k2, v2, this$0) !== false;
            }, reverse);
          };
          flipSequence.__iteratorUncached = function(type, reverse) {
            if (type === ITERATE_ENTRIES) {
              var iterator = iterable.__iterator(type, reverse);
              return new Iterator(function() {
                var step = iterator.next();
                if (!step.done) {
                  var k2 = step.value[0];
                  step.value[0] = step.value[1];
                  step.value[1] = k2;
                }
                return step;
              });
            }
            return iterable.__iterator(
              type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
              reverse
            );
          };
          return flipSequence;
        }
        function mapFactory(iterable, mapper, context2) {
          var mappedSequence = makeSequence(iterable);
          mappedSequence.size = iterable.size;
          mappedSequence.has = function(key) {
            return iterable.has(key);
          };
          mappedSequence.get = function(key, notSetValue) {
            var v2 = iterable.get(key, NOT_SET);
            return v2 === NOT_SET ? notSetValue : mapper.call(context2, v2, key, iterable);
          };
          mappedSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            return iterable.__iterate(
              function(v2, k2, c2) {
                return fn(mapper.call(context2, v2, k2, c2), k2, this$0) !== false;
              },
              reverse
            );
          };
          mappedSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            return new Iterator(function() {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              var key = entry[0];
              return iteratorValue(
                type,
                key,
                mapper.call(context2, entry[1], key, iterable),
                step
              );
            });
          };
          return mappedSequence;
        }
        function reverseFactory(iterable, useKeys) {
          var reversedSequence = makeSequence(iterable);
          reversedSequence._iter = iterable;
          reversedSequence.size = iterable.size;
          reversedSequence.reverse = function() {
            return iterable;
          };
          if (iterable.flip) {
            reversedSequence.flip = function() {
              var flipSequence = flipFactory(iterable);
              flipSequence.reverse = function() {
                return iterable.flip();
              };
              return flipSequence;
            };
          }
          reversedSequence.get = function(key, notSetValue) {
            return iterable.get(useKeys ? key : -1 - key, notSetValue);
          };
          reversedSequence.has = function(key) {
            return iterable.has(useKeys ? key : -1 - key);
          };
          reversedSequence.includes = function(value2) {
            return iterable.includes(value2);
          };
          reversedSequence.cacheResult = cacheResultThrough;
          reversedSequence.__iterate = function(fn, reverse) {
            var this$0 = this;
            return iterable.__iterate(function(v2, k2) {
              return fn(v2, k2, this$0);
            }, !reverse);
          };
          reversedSequence.__iterator = function(type, reverse) {
            return iterable.__iterator(type, !reverse);
          };
          return reversedSequence;
        }
        function filterFactory(iterable, predicate, context2, useKeys) {
          var filterSequence = makeSequence(iterable);
          if (useKeys) {
            filterSequence.has = function(key) {
              var v2 = iterable.get(key, NOT_SET);
              return v2 !== NOT_SET && !!predicate.call(context2, v2, key, iterable);
            };
            filterSequence.get = function(key, notSetValue) {
              var v2 = iterable.get(key, NOT_SET);
              return v2 !== NOT_SET && predicate.call(context2, v2, key, iterable) ? v2 : notSetValue;
            };
          }
          filterSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            var iterations = 0;
            iterable.__iterate(function(v2, k2, c2) {
              if (predicate.call(context2, v2, k2, c2)) {
                iterations++;
                return fn(v2, useKeys ? k2 : iterations - 1, this$0);
              }
            }, reverse);
            return iterations;
          };
          filterSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            var iterations = 0;
            return new Iterator(function() {
              while (true) {
                var step = iterator.next();
                if (step.done) {
                  return step;
                }
                var entry = step.value;
                var key = entry[0];
                var value2 = entry[1];
                if (predicate.call(context2, value2, key, iterable)) {
                  return iteratorValue(type, useKeys ? key : iterations++, value2, step);
                }
              }
            });
          };
          return filterSequence;
        }
        function countByFactory(iterable, grouper, context2) {
          var groups = Map2().asMutable();
          iterable.__iterate(function(v2, k2) {
            groups.update(
              grouper.call(context2, v2, k2, iterable),
              0,
              function(a) {
                return a + 1;
              }
            );
          });
          return groups.asImmutable();
        }
        function groupByFactory(iterable, grouper, context2) {
          var isKeyedIter = isKeyed(iterable);
          var groups = (isOrdered(iterable) ? OrderedMap() : Map2()).asMutable();
          iterable.__iterate(function(v2, k2) {
            groups.update(
              grouper.call(context2, v2, k2, iterable),
              function(a) {
                return a = a || [], a.push(isKeyedIter ? [k2, v2] : v2), a;
              }
            );
          });
          var coerce = iterableClass(iterable);
          return groups.map(function(arr) {
            return reify(iterable, coerce(arr));
          });
        }
        function sliceFactory(iterable, begin, end2, useKeys) {
          var originalSize = iterable.size;
          if (begin !== void 0) {
            begin = begin | 0;
          }
          if (end2 !== void 0) {
            if (end2 === Infinity) {
              end2 = originalSize;
            } else {
              end2 = end2 | 0;
            }
          }
          if (wholeSlice(begin, end2, originalSize)) {
            return iterable;
          }
          var resolvedBegin = resolveBegin(begin, originalSize);
          var resolvedEnd = resolveEnd(end2, originalSize);
          if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
            return sliceFactory(iterable.toSeq().cacheResult(), begin, end2, useKeys);
          }
          var resolvedSize = resolvedEnd - resolvedBegin;
          var sliceSize;
          if (resolvedSize === resolvedSize) {
            sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
          }
          var sliceSeq = makeSequence(iterable);
          sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || void 0;
          if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
            sliceSeq.get = function(index, notSetValue) {
              index = wrapIndex(this, index);
              return index >= 0 && index < sliceSize ? iterable.get(index + resolvedBegin, notSetValue) : notSetValue;
            };
          }
          sliceSeq.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            if (sliceSize === 0) {
              return 0;
            }
            if (reverse) {
              return this.cacheResult().__iterate(fn, reverse);
            }
            var skipped = 0;
            var isSkipping = true;
            var iterations = 0;
            iterable.__iterate(function(v2, k2) {
              if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
                iterations++;
                return fn(v2, useKeys ? k2 : iterations - 1, this$0) !== false && iterations !== sliceSize;
              }
            });
            return iterations;
          };
          sliceSeq.__iteratorUncached = function(type, reverse) {
            if (sliceSize !== 0 && reverse) {
              return this.cacheResult().__iterator(type, reverse);
            }
            var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
            var skipped = 0;
            var iterations = 0;
            return new Iterator(function() {
              while (skipped++ < resolvedBegin) {
                iterator.next();
              }
              if (++iterations > sliceSize) {
                return iteratorDone();
              }
              var step = iterator.next();
              if (useKeys || type === ITERATE_VALUES) {
                return step;
              } else if (type === ITERATE_KEYS) {
                return iteratorValue(type, iterations - 1, void 0, step);
              } else {
                return iteratorValue(type, iterations - 1, step.value[1], step);
              }
            });
          };
          return sliceSeq;
        }
        function takeWhileFactory(iterable, predicate, context2) {
          var takeSequence = makeSequence(iterable);
          takeSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterate(fn, reverse);
            }
            var iterations = 0;
            iterable.__iterate(
              function(v2, k2, c2) {
                return predicate.call(context2, v2, k2, c2) && ++iterations && fn(v2, k2, this$0);
              }
            );
            return iterations;
          };
          takeSequence.__iteratorUncached = function(type, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterator(type, reverse);
            }
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            var iterating = true;
            return new Iterator(function() {
              if (!iterating) {
                return iteratorDone();
              }
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              var k2 = entry[0];
              var v2 = entry[1];
              if (!predicate.call(context2, v2, k2, this$0)) {
                iterating = false;
                return iteratorDone();
              }
              return type === ITERATE_ENTRIES ? step : iteratorValue(type, k2, v2, step);
            });
          };
          return takeSequence;
        }
        function skipWhileFactory(iterable, predicate, context2, useKeys) {
          var skipSequence = makeSequence(iterable);
          skipSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterate(fn, reverse);
            }
            var isSkipping = true;
            var iterations = 0;
            iterable.__iterate(function(v2, k2, c2) {
              if (!(isSkipping && (isSkipping = predicate.call(context2, v2, k2, c2)))) {
                iterations++;
                return fn(v2, useKeys ? k2 : iterations - 1, this$0);
              }
            });
            return iterations;
          };
          skipSequence.__iteratorUncached = function(type, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterator(type, reverse);
            }
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            var skipping = true;
            var iterations = 0;
            return new Iterator(function() {
              var step, k2, v2;
              do {
                step = iterator.next();
                if (step.done) {
                  if (useKeys || type === ITERATE_VALUES) {
                    return step;
                  } else if (type === ITERATE_KEYS) {
                    return iteratorValue(type, iterations++, void 0, step);
                  } else {
                    return iteratorValue(type, iterations++, step.value[1], step);
                  }
                }
                var entry = step.value;
                k2 = entry[0];
                v2 = entry[1];
                skipping && (skipping = predicate.call(context2, v2, k2, this$0));
              } while (skipping);
              return type === ITERATE_ENTRIES ? step : iteratorValue(type, k2, v2, step);
            });
          };
          return skipSequence;
        }
        function concatFactory(iterable, values2) {
          var isKeyedIterable = isKeyed(iterable);
          var iters = [iterable].concat(values2).map(function(v2) {
            if (!isIterable(v2)) {
              v2 = isKeyedIterable ? keyedSeqFromValue(v2) : indexedSeqFromValue(Array.isArray(v2) ? v2 : [v2]);
            } else if (isKeyedIterable) {
              v2 = KeyedIterable(v2);
            }
            return v2;
          }).filter(function(v2) {
            return v2.size !== 0;
          });
          if (iters.length === 0) {
            return iterable;
          }
          if (iters.length === 1) {
            var singleton = iters[0];
            if (singleton === iterable || isKeyedIterable && isKeyed(singleton) || isIndexed(iterable) && isIndexed(singleton)) {
              return singleton;
            }
          }
          var concatSeq = new ArraySeq(iters);
          if (isKeyedIterable) {
            concatSeq = concatSeq.toKeyedSeq();
          } else if (!isIndexed(iterable)) {
            concatSeq = concatSeq.toSetSeq();
          }
          concatSeq = concatSeq.flatten(true);
          concatSeq.size = iters.reduce(
            function(sum, seq) {
              if (sum !== void 0) {
                var size = seq.size;
                if (size !== void 0) {
                  return sum + size;
                }
              }
            },
            0
          );
          return concatSeq;
        }
        function flattenFactory(iterable, depth, useKeys) {
          var flatSequence = makeSequence(iterable);
          flatSequence.__iterateUncached = function(fn, reverse) {
            var iterations = 0;
            var stopped = false;
            function flatDeep(iter, currentDepth) {
              var this$0 = this;
              iter.__iterate(function(v2, k2) {
                if ((!depth || currentDepth < depth) && isIterable(v2)) {
                  flatDeep(v2, currentDepth + 1);
                } else if (fn(v2, useKeys ? k2 : iterations++, this$0) === false) {
                  stopped = true;
                }
                return !stopped;
              }, reverse);
            }
            flatDeep(iterable, 0);
            return iterations;
          };
          flatSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(type, reverse);
            var stack = [];
            var iterations = 0;
            return new Iterator(function() {
              while (iterator) {
                var step = iterator.next();
                if (step.done !== false) {
                  iterator = stack.pop();
                  continue;
                }
                var v2 = step.value;
                if (type === ITERATE_ENTRIES) {
                  v2 = v2[1];
                }
                if ((!depth || stack.length < depth) && isIterable(v2)) {
                  stack.push(iterator);
                  iterator = v2.__iterator(type, reverse);
                } else {
                  return useKeys ? step : iteratorValue(type, iterations++, v2, step);
                }
              }
              return iteratorDone();
            });
          };
          return flatSequence;
        }
        function flatMapFactory(iterable, mapper, context2) {
          var coerce = iterableClass(iterable);
          return iterable.toSeq().map(
            function(v2, k2) {
              return coerce(mapper.call(context2, v2, k2, iterable));
            }
          ).flatten(true);
        }
        function interposeFactory(iterable, separator) {
          var interposedSequence = makeSequence(iterable);
          interposedSequence.size = iterable.size && iterable.size * 2 - 1;
          interposedSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            var iterations = 0;
            iterable.__iterate(
              function(v2, k2) {
                return (!iterations || fn(separator, iterations++, this$0) !== false) && fn(v2, iterations++, this$0) !== false;
              },
              reverse
            );
            return iterations;
          };
          interposedSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
            var iterations = 0;
            var step;
            return new Iterator(function() {
              if (!step || iterations % 2) {
                step = iterator.next();
                if (step.done) {
                  return step;
                }
              }
              return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);
            });
          };
          return interposedSequence;
        }
        function sortFactory(iterable, comparator, mapper) {
          if (!comparator) {
            comparator = defaultComparator;
          }
          var isKeyedIterable = isKeyed(iterable);
          var index = 0;
          var entries = iterable.toSeq().map(
            function(v2, k2) {
              return [k2, v2, index++, mapper ? mapper(v2, k2, iterable) : v2];
            }
          ).toArray();
          entries.sort(function(a, b2) {
            return comparator(a[3], b2[3]) || a[2] - b2[2];
          }).forEach(
            isKeyedIterable ? function(v2, i) {
              entries[i].length = 2;
            } : function(v2, i) {
              entries[i] = v2[1];
            }
          );
          return isKeyedIterable ? KeyedSeq(entries) : isIndexed(iterable) ? IndexedSeq(entries) : SetSeq(entries);
        }
        function maxFactory(iterable, comparator, mapper) {
          if (!comparator) {
            comparator = defaultComparator;
          }
          if (mapper) {
            var entry = iterable.toSeq().map(function(v2, k2) {
              return [v2, mapper(v2, k2, iterable)];
            }).reduce(function(a, b2) {
              return maxCompare(comparator, a[1], b2[1]) ? b2 : a;
            });
            return entry && entry[0];
          } else {
            return iterable.reduce(function(a, b2) {
              return maxCompare(comparator, a, b2) ? b2 : a;
            });
          }
        }
        function maxCompare(comparator, a, b2) {
          var comp = comparator(b2, a);
          return comp === 0 && b2 !== a && (b2 === void 0 || b2 === null || b2 !== b2) || comp > 0;
        }
        function zipWithFactory(keyIter, zipper, iters) {
          var zipSequence = makeSequence(keyIter);
          zipSequence.size = new ArraySeq(iters).map(function(i) {
            return i.size;
          }).min();
          zipSequence.__iterate = function(fn, reverse) {
            var iterator = this.__iterator(ITERATE_VALUES, reverse);
            var step;
            var iterations = 0;
            while (!(step = iterator.next()).done) {
              if (fn(step.value, iterations++, this) === false) {
                break;
              }
            }
            return iterations;
          };
          zipSequence.__iteratorUncached = function(type, reverse) {
            var iterators = iters.map(
              function(i) {
                return i = Iterable(i), getIterator(reverse ? i.reverse() : i);
              }
            );
            var iterations = 0;
            var isDone = false;
            return new Iterator(function() {
              var steps;
              if (!isDone) {
                steps = iterators.map(function(i) {
                  return i.next();
                });
                isDone = steps.some(function(s) {
                  return s.done;
                });
              }
              if (isDone) {
                return iteratorDone();
              }
              return iteratorValue(
                type,
                iterations++,
                zipper.apply(null, steps.map(function(s) {
                  return s.value;
                }))
              );
            });
          };
          return zipSequence;
        }
        function reify(iter, seq) {
          return isSeq(iter) ? seq : iter.constructor(seq);
        }
        function validateEntry(entry) {
          if (entry !== Object(entry)) {
            throw new TypeError("Expected [K, V] tuple: " + entry);
          }
        }
        function resolveSize(iter) {
          assertNotInfinite(iter.size);
          return ensureSize(iter);
        }
        function iterableClass(iterable) {
          return isKeyed(iterable) ? KeyedIterable : isIndexed(iterable) ? IndexedIterable : SetIterable;
        }
        function makeSequence(iterable) {
          return Object.create(
            (isKeyed(iterable) ? KeyedSeq : isIndexed(iterable) ? IndexedSeq : SetSeq).prototype
          );
        }
        function cacheResultThrough() {
          if (this._iter.cacheResult) {
            this._iter.cacheResult();
            this.size = this._iter.size;
            return this;
          } else {
            return Seq.prototype.cacheResult.call(this);
          }
        }
        function defaultComparator(a, b2) {
          return a > b2 ? 1 : a < b2 ? -1 : 0;
        }
        function forceIterator(keyPath) {
          var iter = getIterator(keyPath);
          if (!iter) {
            if (!isArrayLike2(keyPath)) {
              throw new TypeError("Expected iterable or array-like: " + keyPath);
            }
            iter = getIterator(Iterable(keyPath));
          }
          return iter;
        }
        createClass(Record, KeyedCollection);
        function Record(defaultValues, name) {
          var hasInitialized;
          var RecordType = function Record2(values2) {
            if (values2 instanceof RecordType) {
              return values2;
            }
            if (!(this instanceof RecordType)) {
              return new RecordType(values2);
            }
            if (!hasInitialized) {
              hasInitialized = true;
              var keys2 = Object.keys(defaultValues);
              setProps(RecordTypePrototype, keys2);
              RecordTypePrototype.size = keys2.length;
              RecordTypePrototype._name = name;
              RecordTypePrototype._keys = keys2;
              RecordTypePrototype._defaultValues = defaultValues;
            }
            this._map = Map2(values2);
          };
          var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
          RecordTypePrototype.constructor = RecordType;
          return RecordType;
        }
        Record.prototype.toString = function() {
          return this.__toString(recordName(this) + " {", "}");
        };
        Record.prototype.has = function(k2) {
          return this._defaultValues.hasOwnProperty(k2);
        };
        Record.prototype.get = function(k2, notSetValue) {
          if (!this.has(k2)) {
            return notSetValue;
          }
          var defaultVal = this._defaultValues[k2];
          return this._map ? this._map.get(k2, defaultVal) : defaultVal;
        };
        Record.prototype.clear = function() {
          if (this.__ownerID) {
            this._map && this._map.clear();
            return this;
          }
          var RecordType = this.constructor;
          return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
        };
        Record.prototype.set = function(k2, v2) {
          if (!this.has(k2)) {
            throw new Error('Cannot set unknown key "' + k2 + '" on ' + recordName(this));
          }
          if (this._map && !this._map.has(k2)) {
            var defaultVal = this._defaultValues[k2];
            if (v2 === defaultVal) {
              return this;
            }
          }
          var newMap = this._map && this._map.set(k2, v2);
          if (this.__ownerID || newMap === this._map) {
            return this;
          }
          return makeRecord(this, newMap);
        };
        Record.prototype.remove = function(k2) {
          if (!this.has(k2)) {
            return this;
          }
          var newMap = this._map && this._map.remove(k2);
          if (this.__ownerID || newMap === this._map) {
            return this;
          }
          return makeRecord(this, newMap);
        };
        Record.prototype.wasAltered = function() {
          return this._map.wasAltered();
        };
        Record.prototype.__iterator = function(type, reverse) {
          var this$0 = this;
          return KeyedIterable(this._defaultValues).map(function(_2, k2) {
            return this$0.get(k2);
          }).__iterator(type, reverse);
        };
        Record.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return KeyedIterable(this._defaultValues).map(function(_2, k2) {
            return this$0.get(k2);
          }).__iterate(fn, reverse);
        };
        Record.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map && this._map.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            return this;
          }
          return makeRecord(this, newMap, ownerID);
        };
        var RecordPrototype = Record.prototype;
        RecordPrototype[DELETE] = RecordPrototype.remove;
        RecordPrototype.deleteIn = RecordPrototype.removeIn = MapPrototype.removeIn;
        RecordPrototype.merge = MapPrototype.merge;
        RecordPrototype.mergeWith = MapPrototype.mergeWith;
        RecordPrototype.mergeIn = MapPrototype.mergeIn;
        RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
        RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
        RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
        RecordPrototype.setIn = MapPrototype.setIn;
        RecordPrototype.update = MapPrototype.update;
        RecordPrototype.updateIn = MapPrototype.updateIn;
        RecordPrototype.withMutations = MapPrototype.withMutations;
        RecordPrototype.asMutable = MapPrototype.asMutable;
        RecordPrototype.asImmutable = MapPrototype.asImmutable;
        function makeRecord(likeRecord, map2, ownerID) {
          var record = Object.create(Object.getPrototypeOf(likeRecord));
          record._map = map2;
          record.__ownerID = ownerID;
          return record;
        }
        function recordName(record) {
          return record._name || record.constructor.name || "Record";
        }
        function setProps(prototype, names) {
          try {
            names.forEach(setProp.bind(void 0, prototype));
          } catch (error) {
          }
        }
        function setProp(prototype, name) {
          Object.defineProperty(prototype, name, {
            get: function() {
              return this.get(name);
            },
            set: function(value2) {
              invariant(this.__ownerID, "Cannot set on an immutable record.");
              this.set(name, value2);
            }
          });
        }
        createClass(Set2, SetCollection);
        function Set2(value2) {
          return value2 === null || value2 === void 0 ? emptySet() : isSet2(value2) && !isOrdered(value2) ? value2 : emptySet().withMutations(function(set2) {
            var iter = SetIterable(value2);
            assertNotInfinite(iter.size);
            iter.forEach(function(v2) {
              return set2.add(v2);
            });
          });
        }
        Set2.of = function() {
          return this(arguments);
        };
        Set2.fromKeys = function(value2) {
          return this(KeyedIterable(value2).keySeq());
        };
        Set2.prototype.toString = function() {
          return this.__toString("Set {", "}");
        };
        Set2.prototype.has = function(value2) {
          return this._map.has(value2);
        };
        Set2.prototype.add = function(value2) {
          return updateSet(this, this._map.set(value2, true));
        };
        Set2.prototype.remove = function(value2) {
          return updateSet(this, this._map.remove(value2));
        };
        Set2.prototype.clear = function() {
          return updateSet(this, this._map.clear());
        };
        Set2.prototype.union = function() {
          var iters = SLICE$0.call(arguments, 0);
          iters = iters.filter(function(x2) {
            return x2.size !== 0;
          });
          if (iters.length === 0) {
            return this;
          }
          if (this.size === 0 && !this.__ownerID && iters.length === 1) {
            return this.constructor(iters[0]);
          }
          return this.withMutations(function(set2) {
            for (var ii2 = 0; ii2 < iters.length; ii2++) {
              SetIterable(iters[ii2]).forEach(function(value2) {
                return set2.add(value2);
              });
            }
          });
        };
        Set2.prototype.intersect = function() {
          var iters = SLICE$0.call(arguments, 0);
          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function(iter) {
            return SetIterable(iter);
          });
          var originalSet = this;
          return this.withMutations(function(set2) {
            originalSet.forEach(function(value2) {
              if (!iters.every(function(iter) {
                return iter.includes(value2);
              })) {
                set2.remove(value2);
              }
            });
          });
        };
        Set2.prototype.subtract = function() {
          var iters = SLICE$0.call(arguments, 0);
          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function(iter) {
            return SetIterable(iter);
          });
          var originalSet = this;
          return this.withMutations(function(set2) {
            originalSet.forEach(function(value2) {
              if (iters.some(function(iter) {
                return iter.includes(value2);
              })) {
                set2.remove(value2);
              }
            });
          });
        };
        Set2.prototype.merge = function() {
          return this.union.apply(this, arguments);
        };
        Set2.prototype.mergeWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return this.union.apply(this, iters);
        };
        Set2.prototype.sort = function(comparator) {
          return OrderedSet(sortFactory(this, comparator));
        };
        Set2.prototype.sortBy = function(mapper, comparator) {
          return OrderedSet(sortFactory(this, comparator, mapper));
        };
        Set2.prototype.wasAltered = function() {
          return this._map.wasAltered();
        };
        Set2.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._map.__iterate(function(_2, k2) {
            return fn(k2, k2, this$0);
          }, reverse);
        };
        Set2.prototype.__iterator = function(type, reverse) {
          return this._map.map(function(_2, k2) {
            return k2;
          }).__iterator(type, reverse);
        };
        Set2.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            return this;
          }
          return this.__make(newMap, ownerID);
        };
        function isSet2(maybeSet) {
          return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
        }
        Set2.isSet = isSet2;
        var IS_SET_SENTINEL = "@@__IMMUTABLE_SET__@@";
        var SetPrototype = Set2.prototype;
        SetPrototype[IS_SET_SENTINEL] = true;
        SetPrototype[DELETE] = SetPrototype.remove;
        SetPrototype.mergeDeep = SetPrototype.merge;
        SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
        SetPrototype.withMutations = MapPrototype.withMutations;
        SetPrototype.asMutable = MapPrototype.asMutable;
        SetPrototype.asImmutable = MapPrototype.asImmutable;
        SetPrototype.__empty = emptySet;
        SetPrototype.__make = makeSet;
        function updateSet(set2, newMap) {
          if (set2.__ownerID) {
            set2.size = newMap.size;
            set2._map = newMap;
            return set2;
          }
          return newMap === set2._map ? set2 : newMap.size === 0 ? set2.__empty() : set2.__make(newMap);
        }
        function makeSet(map2, ownerID) {
          var set2 = Object.create(SetPrototype);
          set2.size = map2 ? map2.size : 0;
          set2._map = map2;
          set2.__ownerID = ownerID;
          return set2;
        }
        var EMPTY_SET;
        function emptySet() {
          return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
        }
        createClass(OrderedSet, Set2);
        function OrderedSet(value2) {
          return value2 === null || value2 === void 0 ? emptyOrderedSet() : isOrderedSet(value2) ? value2 : emptyOrderedSet().withMutations(function(set2) {
            var iter = SetIterable(value2);
            assertNotInfinite(iter.size);
            iter.forEach(function(v2) {
              return set2.add(v2);
            });
          });
        }
        OrderedSet.of = function() {
          return this(arguments);
        };
        OrderedSet.fromKeys = function(value2) {
          return this(KeyedIterable(value2).keySeq());
        };
        OrderedSet.prototype.toString = function() {
          return this.__toString("OrderedSet {", "}");
        };
        function isOrderedSet(maybeOrderedSet) {
          return isSet2(maybeOrderedSet) && isOrdered(maybeOrderedSet);
        }
        OrderedSet.isOrderedSet = isOrderedSet;
        var OrderedSetPrototype = OrderedSet.prototype;
        OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;
        OrderedSetPrototype.__empty = emptyOrderedSet;
        OrderedSetPrototype.__make = makeOrderedSet;
        function makeOrderedSet(map2, ownerID) {
          var set2 = Object.create(OrderedSetPrototype);
          set2.size = map2 ? map2.size : 0;
          set2._map = map2;
          set2.__ownerID = ownerID;
          return set2;
        }
        var EMPTY_ORDERED_SET;
        function emptyOrderedSet() {
          return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
        }
        createClass(Stack2, IndexedCollection);
        function Stack2(value2) {
          return value2 === null || value2 === void 0 ? emptyStack() : isStack(value2) ? value2 : emptyStack().unshiftAll(value2);
        }
        Stack2.of = function() {
          return this(arguments);
        };
        Stack2.prototype.toString = function() {
          return this.__toString("Stack [", "]");
        };
        Stack2.prototype.get = function(index, notSetValue) {
          var head = this._head;
          index = wrapIndex(this, index);
          while (head && index--) {
            head = head.next;
          }
          return head ? head.value : notSetValue;
        };
        Stack2.prototype.peek = function() {
          return this._head && this._head.value;
        };
        Stack2.prototype.push = function() {
          if (arguments.length === 0) {
            return this;
          }
          var newSize = this.size + arguments.length;
          var head = this._head;
          for (var ii2 = arguments.length - 1; ii2 >= 0; ii2--) {
            head = {
              value: arguments[ii2],
              next: head
            };
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.pushAll = function(iter) {
          iter = IndexedIterable(iter);
          if (iter.size === 0) {
            return this;
          }
          assertNotInfinite(iter.size);
          var newSize = this.size;
          var head = this._head;
          iter.reverse().forEach(function(value2) {
            newSize++;
            head = {
              value: value2,
              next: head
            };
          });
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.pop = function() {
          return this.slice(1);
        };
        Stack2.prototype.unshift = function() {
          return this.push.apply(this, arguments);
        };
        Stack2.prototype.unshiftAll = function(iter) {
          return this.pushAll(iter);
        };
        Stack2.prototype.shift = function() {
          return this.pop.apply(this, arguments);
        };
        Stack2.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._head = void 0;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyStack();
        };
        Stack2.prototype.slice = function(begin, end2) {
          if (wholeSlice(begin, end2, this.size)) {
            return this;
          }
          var resolvedBegin = resolveBegin(begin, this.size);
          var resolvedEnd = resolveEnd(end2, this.size);
          if (resolvedEnd !== this.size) {
            return IndexedCollection.prototype.slice.call(this, begin, end2);
          }
          var newSize = this.size - resolvedBegin;
          var head = this._head;
          while (resolvedBegin--) {
            head = head.next;
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeStack(this.size, this._head, ownerID, this.__hash);
        };
        Stack2.prototype.__iterate = function(fn, reverse) {
          if (reverse) {
            return this.reverse().__iterate(fn);
          }
          var iterations = 0;
          var node2 = this._head;
          while (node2) {
            if (fn(node2.value, iterations++, this) === false) {
              break;
            }
            node2 = node2.next;
          }
          return iterations;
        };
        Stack2.prototype.__iterator = function(type, reverse) {
          if (reverse) {
            return this.reverse().__iterator(type);
          }
          var iterations = 0;
          var node2 = this._head;
          return new Iterator(function() {
            if (node2) {
              var value2 = node2.value;
              node2 = node2.next;
              return iteratorValue(type, iterations++, value2);
            }
            return iteratorDone();
          });
        };
        function isStack(maybeStack) {
          return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
        }
        Stack2.isStack = isStack;
        var IS_STACK_SENTINEL = "@@__IMMUTABLE_STACK__@@";
        var StackPrototype = Stack2.prototype;
        StackPrototype[IS_STACK_SENTINEL] = true;
        StackPrototype.withMutations = MapPrototype.withMutations;
        StackPrototype.asMutable = MapPrototype.asMutable;
        StackPrototype.asImmutable = MapPrototype.asImmutable;
        StackPrototype.wasAltered = MapPrototype.wasAltered;
        function makeStack(size, head, ownerID, hash3) {
          var map2 = Object.create(StackPrototype);
          map2.size = size;
          map2._head = head;
          map2.__ownerID = ownerID;
          map2.__hash = hash3;
          map2.__altered = false;
          return map2;
        }
        var EMPTY_STACK;
        function emptyStack() {
          return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
        }
        function mixin(ctor, methods) {
          var keyCopier = function(key) {
            ctor.prototype[key] = methods[key];
          };
          Object.keys(methods).forEach(keyCopier);
          Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
          return ctor;
        }
        Iterable.Iterator = Iterator;
        mixin(Iterable, {
          // ### Conversion to other types
          toArray: function() {
            assertNotInfinite(this.size);
            var array = new Array(this.size || 0);
            this.valueSeq().__iterate(function(v2, i) {
              array[i] = v2;
            });
            return array;
          },
          toIndexedSeq: function() {
            return new ToIndexedSequence(this);
          },
          toJS: function() {
            return this.toSeq().map(
              function(value2) {
                return value2 && typeof value2.toJS === "function" ? value2.toJS() : value2;
              }
            ).__toJS();
          },
          toJSON: function() {
            return this.toSeq().map(
              function(value2) {
                return value2 && typeof value2.toJSON === "function" ? value2.toJSON() : value2;
              }
            ).__toJS();
          },
          toKeyedSeq: function() {
            return new ToKeyedSequence(this, true);
          },
          toMap: function() {
            return Map2(this.toKeyedSeq());
          },
          toObject: function() {
            assertNotInfinite(this.size);
            var object = {};
            this.__iterate(function(v2, k2) {
              object[k2] = v2;
            });
            return object;
          },
          toOrderedMap: function() {
            return OrderedMap(this.toKeyedSeq());
          },
          toOrderedSet: function() {
            return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
          },
          toSet: function() {
            return Set2(isKeyed(this) ? this.valueSeq() : this);
          },
          toSetSeq: function() {
            return new ToSetSequence(this);
          },
          toSeq: function() {
            return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();
          },
          toStack: function() {
            return Stack2(isKeyed(this) ? this.valueSeq() : this);
          },
          toList: function() {
            return List2(isKeyed(this) ? this.valueSeq() : this);
          },
          // ### Common JavaScript methods and properties
          toString: function() {
            return "[Iterable]";
          },
          __toString: function(head, tail) {
            if (this.size === 0) {
              return head + tail;
            }
            return head + " " + this.toSeq().map(this.__toStringMapper).join(", ") + " " + tail;
          },
          // ### ES6 Collection methods (ES6 Array and Map)
          concat: function() {
            var values2 = SLICE$0.call(arguments, 0);
            return reify(this, concatFactory(this, values2));
          },
          includes: function(searchValue) {
            return this.some(function(value2) {
              return is2(value2, searchValue);
            });
          },
          entries: function() {
            return this.__iterator(ITERATE_ENTRIES);
          },
          every: function(predicate, context2) {
            assertNotInfinite(this.size);
            var returnValue = true;
            this.__iterate(function(v2, k2, c2) {
              if (!predicate.call(context2, v2, k2, c2)) {
                returnValue = false;
                return false;
              }
            });
            return returnValue;
          },
          filter: function(predicate, context2) {
            return reify(this, filterFactory(this, predicate, context2, true));
          },
          find: function(predicate, context2, notSetValue) {
            var entry = this.findEntry(predicate, context2);
            return entry ? entry[1] : notSetValue;
          },
          forEach: function(sideEffect, context2) {
            assertNotInfinite(this.size);
            return this.__iterate(context2 ? sideEffect.bind(context2) : sideEffect);
          },
          join: function(separator) {
            assertNotInfinite(this.size);
            separator = separator !== void 0 ? "" + separator : ",";
            var joined = "";
            var isFirst = true;
            this.__iterate(function(v2) {
              isFirst ? isFirst = false : joined += separator;
              joined += v2 !== null && v2 !== void 0 ? v2.toString() : "";
            });
            return joined;
          },
          keys: function() {
            return this.__iterator(ITERATE_KEYS);
          },
          map: function(mapper, context2) {
            return reify(this, mapFactory(this, mapper, context2));
          },
          reduce: function(reducer, initialReduction, context2) {
            assertNotInfinite(this.size);
            var reduction;
            var useFirst;
            if (arguments.length < 2) {
              useFirst = true;
            } else {
              reduction = initialReduction;
            }
            this.__iterate(function(v2, k2, c2) {
              if (useFirst) {
                useFirst = false;
                reduction = v2;
              } else {
                reduction = reducer.call(context2, reduction, v2, k2, c2);
              }
            });
            return reduction;
          },
          reduceRight: function(reducer, initialReduction, context2) {
            var reversed = this.toKeyedSeq().reverse();
            return reversed.reduce.apply(reversed, arguments);
          },
          reverse: function() {
            return reify(this, reverseFactory(this, true));
          },
          slice: function(begin, end2) {
            return reify(this, sliceFactory(this, begin, end2, true));
          },
          some: function(predicate, context2) {
            return !this.every(not(predicate), context2);
          },
          sort: function(comparator) {
            return reify(this, sortFactory(this, comparator));
          },
          values: function() {
            return this.__iterator(ITERATE_VALUES);
          },
          // ### More sequential methods
          butLast: function() {
            return this.slice(0, -1);
          },
          isEmpty: function() {
            return this.size !== void 0 ? this.size === 0 : !this.some(function() {
              return true;
            });
          },
          count: function(predicate, context2) {
            return ensureSize(
              predicate ? this.toSeq().filter(predicate, context2) : this
            );
          },
          countBy: function(grouper, context2) {
            return countByFactory(this, grouper, context2);
          },
          equals: function(other) {
            return deepEqual2(this, other);
          },
          entrySeq: function() {
            var iterable = this;
            if (iterable._cache) {
              return new ArraySeq(iterable._cache);
            }
            var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
            entriesSequence.fromEntrySeq = function() {
              return iterable.toSeq();
            };
            return entriesSequence;
          },
          filterNot: function(predicate, context2) {
            return this.filter(not(predicate), context2);
          },
          findEntry: function(predicate, context2, notSetValue) {
            var found = notSetValue;
            this.__iterate(function(v2, k2, c2) {
              if (predicate.call(context2, v2, k2, c2)) {
                found = [k2, v2];
                return false;
              }
            });
            return found;
          },
          findKey: function(predicate, context2) {
            var entry = this.findEntry(predicate, context2);
            return entry && entry[0];
          },
          findLast: function(predicate, context2, notSetValue) {
            return this.toKeyedSeq().reverse().find(predicate, context2, notSetValue);
          },
          findLastEntry: function(predicate, context2, notSetValue) {
            return this.toKeyedSeq().reverse().findEntry(predicate, context2, notSetValue);
          },
          findLastKey: function(predicate, context2) {
            return this.toKeyedSeq().reverse().findKey(predicate, context2);
          },
          first: function() {
            return this.find(returnTrue);
          },
          flatMap: function(mapper, context2) {
            return reify(this, flatMapFactory(this, mapper, context2));
          },
          flatten: function(depth) {
            return reify(this, flattenFactory(this, depth, true));
          },
          fromEntrySeq: function() {
            return new FromEntriesSequence(this);
          },
          get: function(searchKey, notSetValue) {
            return this.find(function(_2, key) {
              return is2(key, searchKey);
            }, void 0, notSetValue);
          },
          getIn: function(searchKeyPath, notSetValue) {
            var nested2 = this;
            var iter = forceIterator(searchKeyPath);
            var step;
            while (!(step = iter.next()).done) {
              var key = step.value;
              nested2 = nested2 && nested2.get ? nested2.get(key, NOT_SET) : NOT_SET;
              if (nested2 === NOT_SET) {
                return notSetValue;
              }
            }
            return nested2;
          },
          groupBy: function(grouper, context2) {
            return groupByFactory(this, grouper, context2);
          },
          has: function(searchKey) {
            return this.get(searchKey, NOT_SET) !== NOT_SET;
          },
          hasIn: function(searchKeyPath) {
            return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
          },
          isSubset: function(iter) {
            iter = typeof iter.includes === "function" ? iter : Iterable(iter);
            return this.every(function(value2) {
              return iter.includes(value2);
            });
          },
          isSuperset: function(iter) {
            iter = typeof iter.isSubset === "function" ? iter : Iterable(iter);
            return iter.isSubset(this);
          },
          keyOf: function(searchValue) {
            return this.findKey(function(value2) {
              return is2(value2, searchValue);
            });
          },
          keySeq: function() {
            return this.toSeq().map(keyMapper).toIndexedSeq();
          },
          last: function() {
            return this.toSeq().reverse().first();
          },
          lastKeyOf: function(searchValue) {
            return this.toKeyedSeq().reverse().keyOf(searchValue);
          },
          max: function(comparator) {
            return maxFactory(this, comparator);
          },
          maxBy: function(mapper, comparator) {
            return maxFactory(this, comparator, mapper);
          },
          min: function(comparator) {
            return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
          },
          minBy: function(mapper, comparator) {
            return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
          },
          rest: function() {
            return this.slice(1);
          },
          skip: function(amount) {
            return this.slice(Math.max(0, amount));
          },
          skipLast: function(amount) {
            return reify(this, this.toSeq().reverse().skip(amount).reverse());
          },
          skipWhile: function(predicate, context2) {
            return reify(this, skipWhileFactory(this, predicate, context2, true));
          },
          skipUntil: function(predicate, context2) {
            return this.skipWhile(not(predicate), context2);
          },
          sortBy: function(mapper, comparator) {
            return reify(this, sortFactory(this, comparator, mapper));
          },
          take: function(amount) {
            return this.slice(0, Math.max(0, amount));
          },
          takeLast: function(amount) {
            return reify(this, this.toSeq().reverse().take(amount).reverse());
          },
          takeWhile: function(predicate, context2) {
            return reify(this, takeWhileFactory(this, predicate, context2));
          },
          takeUntil: function(predicate, context2) {
            return this.takeWhile(not(predicate), context2);
          },
          valueSeq: function() {
            return this.toIndexedSeq();
          },
          // ### Hashable Object
          hashCode: function() {
            return this.__hash || (this.__hash = hashIterable(this));
          }
          // ### Internal
          // abstract __iterate(fn, reverse)
          // abstract __iterator(type, reverse)
        });
        var IterablePrototype = Iterable.prototype;
        IterablePrototype[IS_ITERABLE_SENTINEL] = true;
        IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
        IterablePrototype.__toJS = IterablePrototype.toArray;
        IterablePrototype.__toStringMapper = quoteString;
        IterablePrototype.inspect = IterablePrototype.toSource = function() {
          return this.toString();
        };
        IterablePrototype.chain = IterablePrototype.flatMap;
        IterablePrototype.contains = IterablePrototype.includes;
        mixin(KeyedIterable, {
          // ### More sequential methods
          flip: function() {
            return reify(this, flipFactory(this));
          },
          mapEntries: function(mapper, context2) {
            var this$0 = this;
            var iterations = 0;
            return reify(
              this,
              this.toSeq().map(
                function(v2, k2) {
                  return mapper.call(context2, [k2, v2], iterations++, this$0);
                }
              ).fromEntrySeq()
            );
          },
          mapKeys: function(mapper, context2) {
            var this$0 = this;
            return reify(
              this,
              this.toSeq().flip().map(
                function(k2, v2) {
                  return mapper.call(context2, k2, v2, this$0);
                }
              ).flip()
            );
          }
        });
        var KeyedIterablePrototype = KeyedIterable.prototype;
        KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
        KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
        KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
        KeyedIterablePrototype.__toStringMapper = function(v2, k2) {
          return JSON.stringify(k2) + ": " + quoteString(v2);
        };
        mixin(IndexedIterable, {
          // ### Conversion to other types
          toKeyedSeq: function() {
            return new ToKeyedSequence(this, false);
          },
          // ### ES6 Collection methods (ES6 Array and Map)
          filter: function(predicate, context2) {
            return reify(this, filterFactory(this, predicate, context2, false));
          },
          findIndex: function(predicate, context2) {
            var entry = this.findEntry(predicate, context2);
            return entry ? entry[0] : -1;
          },
          indexOf: function(searchValue) {
            var key = this.keyOf(searchValue);
            return key === void 0 ? -1 : key;
          },
          lastIndexOf: function(searchValue) {
            var key = this.lastKeyOf(searchValue);
            return key === void 0 ? -1 : key;
          },
          reverse: function() {
            return reify(this, reverseFactory(this, false));
          },
          slice: function(begin, end2) {
            return reify(this, sliceFactory(this, begin, end2, false));
          },
          splice: function(index, removeNum) {
            var numArgs = arguments.length;
            removeNum = Math.max(removeNum | 0, 0);
            if (numArgs === 0 || numArgs === 2 && !removeNum) {
              return this;
            }
            index = resolveBegin(index, index < 0 ? this.count() : this.size);
            var spliced = this.slice(0, index);
            return reify(
              this,
              numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
            );
          },
          // ### More collection methods
          findLastIndex: function(predicate, context2) {
            var entry = this.findLastEntry(predicate, context2);
            return entry ? entry[0] : -1;
          },
          first: function() {
            return this.get(0);
          },
          flatten: function(depth) {
            return reify(this, flattenFactory(this, depth, false));
          },
          get: function(index, notSetValue) {
            index = wrapIndex(this, index);
            return index < 0 || (this.size === Infinity || this.size !== void 0 && index > this.size) ? notSetValue : this.find(function(_2, key) {
              return key === index;
            }, void 0, notSetValue);
          },
          has: function(index) {
            index = wrapIndex(this, index);
            return index >= 0 && (this.size !== void 0 ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
          },
          interpose: function(separator) {
            return reify(this, interposeFactory(this, separator));
          },
          interleave: function() {
            var iterables = [this].concat(arrCopy(arguments));
            var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
            var interleaved = zipped.flatten(true);
            if (zipped.size) {
              interleaved.size = zipped.size * iterables.length;
            }
            return reify(this, interleaved);
          },
          keySeq: function() {
            return Range(0, this.size);
          },
          last: function() {
            return this.get(-1);
          },
          skipWhile: function(predicate, context2) {
            return reify(this, skipWhileFactory(this, predicate, context2, false));
          },
          zip: function() {
            var iterables = [this].concat(arrCopy(arguments));
            return reify(this, zipWithFactory(this, defaultZipper, iterables));
          },
          zipWith: function(zipper) {
            var iterables = arrCopy(arguments);
            iterables[0] = this;
            return reify(this, zipWithFactory(this, zipper, iterables));
          }
        });
        IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
        IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;
        mixin(SetIterable, {
          // ### ES6 Collection methods (ES6 Array and Map)
          get: function(value2, notSetValue) {
            return this.has(value2) ? value2 : notSetValue;
          },
          includes: function(value2) {
            return this.has(value2);
          },
          // ### More sequential methods
          keySeq: function() {
            return this.valueSeq();
          }
        });
        SetIterable.prototype.has = IterablePrototype.includes;
        SetIterable.prototype.contains = SetIterable.prototype.includes;
        mixin(KeyedSeq, KeyedIterable.prototype);
        mixin(IndexedSeq, IndexedIterable.prototype);
        mixin(SetSeq, SetIterable.prototype);
        mixin(KeyedCollection, KeyedIterable.prototype);
        mixin(IndexedCollection, IndexedIterable.prototype);
        mixin(SetCollection, SetIterable.prototype);
        function keyMapper(v2, k2) {
          return k2;
        }
        function entryMapper(v2, k2) {
          return [k2, v2];
        }
        function not(predicate) {
          return function() {
            return !predicate.apply(this, arguments);
          };
        }
        function neg(predicate) {
          return function() {
            return -predicate.apply(this, arguments);
          };
        }
        function quoteString(value2) {
          return typeof value2 === "string" ? JSON.stringify(value2) : String(value2);
        }
        function defaultZipper() {
          return arrCopy(arguments);
        }
        function defaultNegComparator(a, b2) {
          return a < b2 ? 1 : a > b2 ? -1 : 0;
        }
        function hashIterable(iterable) {
          if (iterable.size === Infinity) {
            return 0;
          }
          var ordered = isOrdered(iterable);
          var keyed = isKeyed(iterable);
          var h2 = ordered ? 1 : 0;
          var size = iterable.__iterate(
            keyed ? ordered ? function(v2, k2) {
              h2 = 31 * h2 + hashMerge(hash2(v2), hash2(k2)) | 0;
            } : function(v2, k2) {
              h2 = h2 + hashMerge(hash2(v2), hash2(k2)) | 0;
            } : ordered ? function(v2) {
              h2 = 31 * h2 + hash2(v2) | 0;
            } : function(v2) {
              h2 = h2 + hash2(v2) | 0;
            }
          );
          return murmurHashOfSize(size, h2);
        }
        function murmurHashOfSize(size, h2) {
          h2 = imul(h2, 3432918353);
          h2 = imul(h2 << 15 | h2 >>> -15, 461845907);
          h2 = imul(h2 << 13 | h2 >>> -13, 5);
          h2 = (h2 + 3864292196 | 0) ^ size;
          h2 = imul(h2 ^ h2 >>> 16, 2246822507);
          h2 = imul(h2 ^ h2 >>> 13, 3266489909);
          h2 = smi(h2 ^ h2 >>> 16);
          return h2;
        }
        function hashMerge(a, b2) {
          return a ^ b2 + 2654435769 + (a << 6) + (a >> 2) | 0;
        }
        var Immutable2 = {
          Iterable,
          Seq,
          Collection,
          Map: Map2,
          OrderedMap,
          List: List2,
          Stack: Stack2,
          Set: Set2,
          OrderedSet,
          Record,
          Range,
          Repeat,
          is: is2,
          fromJS
        };
        return Immutable2;
      });
    })(immutable);
    var immutableExports = immutable.exports;
    const Immutable = /* @__PURE__ */ getDefaultExportFromCjs(immutableExports);
    function arrayEach$1(array, iteratee) {
      var index = -1, length2 = array == null ? 0 : array.length;
      while (++index < length2) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    var _arrayEach = arrayEach$1;
    var overArg = _overArg;
    var nativeKeys$1 = overArg(Object.keys, Object);
    var _nativeKeys = nativeKeys$1;
    var isPrototype = _isPrototype, nativeKeys = _nativeKeys;
    var objectProto$4 = Object.prototype;
    var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
    function baseKeys$1(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$3.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    var _baseKeys = baseKeys$1;
    var arrayLikeKeys = _arrayLikeKeys, baseKeys = _baseKeys, isArrayLike = isArrayLike_1;
    function keys$5(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    var keys_1 = keys$5;
    const keys$6 = /* @__PURE__ */ getDefaultExportFromCjs(keys_1);
    var copyObject$4 = _copyObject, keys$4 = keys_1;
    function baseAssign$1(object, source) {
      return object && copyObject$4(source, keys$4(source), object);
    }
    var _baseAssign = baseAssign$1;
    var copyObject$3 = _copyObject, keysIn$2 = keysIn_1;
    function baseAssignIn$1(object, source) {
      return object && copyObject$3(source, keysIn$2(source), object);
    }
    var _baseAssignIn = baseAssignIn$1;
    function arrayFilter$1(array, predicate) {
      var index = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length2) {
        var value2 = array[index];
        if (predicate(value2, index, array)) {
          result[resIndex++] = value2;
        }
      }
      return result;
    }
    var _arrayFilter = arrayFilter$1;
    function stubArray$2() {
      return [];
    }
    var stubArray_1 = stubArray$2;
    var arrayFilter = _arrayFilter, stubArray$1 = stubArray_1;
    var objectProto$3 = Object.prototype;
    var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
    var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    var _getSymbols = getSymbols$3;
    var copyObject$2 = _copyObject, getSymbols$2 = _getSymbols;
    function copySymbols$1(source, object) {
      return copyObject$2(source, getSymbols$2(source), object);
    }
    var _copySymbols = copySymbols$1;
    var arrayPush$1 = _arrayPush, getPrototype = _getPrototype, getSymbols$1 = _getSymbols, stubArray = stubArray_1;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush$1(result, getSymbols$1(object));
        object = getPrototype(object);
      }
      return result;
    };
    var _getSymbolsIn = getSymbolsIn$2;
    var copyObject$1 = _copyObject, getSymbolsIn$1 = _getSymbolsIn;
    function copySymbolsIn$1(source, object) {
      return copyObject$1(source, getSymbolsIn$1(source), object);
    }
    var _copySymbolsIn = copySymbolsIn$1;
    var arrayPush = _arrayPush, isArray$3 = isArray_1;
    function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray$3(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    var _baseGetAllKeys = baseGetAllKeys$2;
    var baseGetAllKeys$1 = _baseGetAllKeys, getSymbols = _getSymbols, keys$3 = keys_1;
    function getAllKeys$2(object) {
      return baseGetAllKeys$1(object, keys$3, getSymbols);
    }
    var _getAllKeys = getAllKeys$2;
    var baseGetAllKeys = _baseGetAllKeys, getSymbolsIn = _getSymbolsIn, keysIn$1 = keysIn_1;
    function getAllKeysIn$3(object) {
      return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
    }
    var _getAllKeysIn = getAllKeysIn$3;
    var getNative$3 = _getNative, root$4 = _root;
    var DataView$1 = getNative$3(root$4, "DataView");
    var _DataView = DataView$1;
    var getNative$2 = _getNative, root$3 = _root;
    var Promise$2 = getNative$2(root$3, "Promise");
    var _Promise = Promise$2;
    var getNative$1 = _getNative, root$2 = _root;
    var Set$2 = getNative$1(root$2, "Set");
    var _Set = Set$2;
    var getNative = _getNative, root$1 = _root;
    var WeakMap$2 = getNative(root$1, "WeakMap");
    var _WeakMap = WeakMap$2;
    var DataView = _DataView, Map$1 = _Map, Promise$1 = _Promise, Set$1 = _Set, WeakMap$1 = _WeakMap, baseGetTag = _baseGetTag, toSource = _toSource;
    var mapTag$4 = "[object Map]", objectTag$2 = "[object Object]", promiseTag = "[object Promise]", setTag$4 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
    var dataViewTag$3 = "[object DataView]";
    var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$1);
    var getTag$4 = baseGetTag;
    if (DataView && getTag$4(new DataView(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag$4(new Map$1()) != mapTag$4 || Promise$1 && getTag$4(Promise$1.resolve()) != promiseTag || Set$1 && getTag$4(new Set$1()) != setTag$4 || WeakMap$1 && getTag$4(new WeakMap$1()) != weakMapTag$1) {
      getTag$4 = function(value2) {
        var result = baseGetTag(value2), Ctor = result == objectTag$2 ? value2.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag$3;
            case mapCtorString:
              return mapTag$4;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag$4;
            case weakMapCtorString:
              return weakMapTag$1;
          }
        }
        return result;
      };
    }
    var _getTag = getTag$4;
    var objectProto$2 = Object.prototype;
    var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
    function initCloneArray$1(array) {
      var length2 = array.length, result = new array.constructor(length2);
      if (length2 && typeof array[0] == "string" && hasOwnProperty$2.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    var _initCloneArray = initCloneArray$1;
    var cloneArrayBuffer$1 = _cloneArrayBuffer;
    function cloneDataView$1(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$1(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    var _cloneDataView = cloneDataView$1;
    var reFlags = /\w*$/;
    function cloneRegExp$1(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    var _cloneRegExp = cloneRegExp$1;
    var Symbol$2 = _Symbol;
    var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : void 0;
    function cloneSymbol$1(symbol) {
      return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
    }
    var _cloneSymbol = cloneSymbol$1;
    var cloneArrayBuffer = _cloneArrayBuffer, cloneDataView = _cloneDataView, cloneRegExp = _cloneRegExp, cloneSymbol = _cloneSymbol, cloneTypedArray = _cloneTypedArray;
    var boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", mapTag$3 = "[object Map]", numberTag$2 = "[object Number]", regexpTag$2 = "[object RegExp]", setTag$3 = "[object Set]", stringTag$2 = "[object String]", symbolTag$2 = "[object Symbol]";
    var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
    function initCloneByTag$1(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag$2:
          return cloneArrayBuffer(object);
        case boolTag$2:
        case dateTag$2:
          return new Ctor(+object);
        case dataViewTag$2:
          return cloneDataView(object, isDeep);
        case float32Tag$1:
        case float64Tag$1:
        case int8Tag$1:
        case int16Tag$1:
        case int32Tag$1:
        case uint8Tag$1:
        case uint8ClampedTag$1:
        case uint16Tag$1:
        case uint32Tag$1:
          return cloneTypedArray(object, isDeep);
        case mapTag$3:
          return new Ctor();
        case numberTag$2:
        case stringTag$2:
          return new Ctor(object);
        case regexpTag$2:
          return cloneRegExp(object);
        case setTag$3:
          return new Ctor();
        case symbolTag$2:
          return cloneSymbol(object);
      }
    }
    var _initCloneByTag = initCloneByTag$1;
    var getTag$3 = _getTag, isObjectLike$2 = isObjectLike_1;
    var mapTag$2 = "[object Map]";
    function baseIsMap$1(value2) {
      return isObjectLike$2(value2) && getTag$3(value2) == mapTag$2;
    }
    var _baseIsMap = baseIsMap$1;
    var baseIsMap = _baseIsMap, baseUnary$1 = _baseUnary, nodeUtil$1 = _nodeUtilExports;
    var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
    var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;
    var isMap_1 = isMap$1;
    var getTag$2 = _getTag, isObjectLike$1 = isObjectLike_1;
    var setTag$2 = "[object Set]";
    function baseIsSet$1(value2) {
      return isObjectLike$1(value2) && getTag$2(value2) == setTag$2;
    }
    var _baseIsSet = baseIsSet$1;
    var baseIsSet = _baseIsSet, baseUnary = _baseUnary, nodeUtil = _nodeUtilExports;
    var nodeIsSet = nodeUtil && nodeUtil.isSet;
    var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    var isSet_1 = isSet$1;
    var Stack$2 = _Stack, arrayEach = _arrayEach, assignValue = _assignValue, baseAssign = _baseAssign, baseAssignIn = _baseAssignIn, cloneBuffer = _cloneBufferExports, copyArray = _copyArray, copySymbols = _copySymbols, copySymbolsIn = _copySymbolsIn, getAllKeys$1 = _getAllKeys, getAllKeysIn$2 = _getAllKeysIn, getTag$1 = _getTag, initCloneArray = _initCloneArray, initCloneByTag = _initCloneByTag, initCloneObject = _initCloneObject, isArray$2 = isArray_1, isBuffer$1 = isBufferExports, isMap = isMap_1, isObject$a = isObject_1, isSet = isSet_1, keys$2 = keys_1, keysIn = keysIn_1;
    var CLONE_DEEP_FLAG$1 = 1, CLONE_FLAT_FLAG$1 = 2, CLONE_SYMBOLS_FLAG$1 = 4;
    var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag$1 = "[object Map]", numberTag$1 = "[object Number]", objectTag$1 = "[object Object]", regexpTag$1 = "[object RegExp]", setTag$1 = "[object Set]", stringTag$1 = "[object String]", symbolTag$1 = "[object Symbol]", weakMapTag = "[object WeakMap]";
    var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    var cloneableTags = {};
    cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$1] = cloneableTags[numberTag$1] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$1] = cloneableTags[setTag$1] = cloneableTags[stringTag$1] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    function baseClone$1(value2, bitmask, customizer, key, object, stack) {
      var result, isDeep = bitmask & CLONE_DEEP_FLAG$1, isFlat = bitmask & CLONE_FLAT_FLAG$1, isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
      if (customizer) {
        result = object ? customizer(value2, key, object, stack) : customizer(value2);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject$a(value2)) {
        return value2;
      }
      var isArr = isArray$2(value2);
      if (isArr) {
        result = initCloneArray(value2);
        if (!isDeep) {
          return copyArray(value2, result);
        }
      } else {
        var tag = getTag$1(value2), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer$1(value2)) {
          return cloneBuffer(value2, isDeep);
        }
        if (tag == objectTag$1 || tag == argsTag$1 || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value2);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value2, baseAssignIn(result, value2)) : copySymbols(value2, baseAssign(result, value2));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value2 : {};
          }
          result = initCloneByTag(value2, tag, isDeep);
        }
      }
      stack || (stack = new Stack$2());
      var stacked = stack.get(value2);
      if (stacked) {
        return stacked;
      }
      stack.set(value2, result);
      if (isSet(value2)) {
        value2.forEach(function(subValue) {
          result.add(baseClone$1(subValue, bitmask, customizer, subValue, value2, stack));
        });
      } else if (isMap(value2)) {
        value2.forEach(function(subValue, key2) {
          result.set(key2, baseClone$1(subValue, bitmask, customizer, key2, value2, stack));
        });
      }
      var keysFunc = isFull ? isFlat ? getAllKeysIn$2 : getAllKeys$1 : isFlat ? keysIn : keys$2;
      var props = isArr ? void 0 : keysFunc(value2);
      arrayEach(props || value2, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value2[key2];
        }
        assignValue(result, key2, baseClone$1(subValue, bitmask, customizer, key2, value2, stack));
      });
      return result;
    }
    var _baseClone = baseClone$1;
    function last$1(array) {
      var length2 = array == null ? 0 : array.length;
      return length2 ? array[length2 - 1] : void 0;
    }
    var last_1 = last$1;
    const last$2 = /* @__PURE__ */ getDefaultExportFromCjs(last_1);
    function baseSlice$1(array, start2, end2) {
      var index = -1, length2 = array.length;
      if (start2 < 0) {
        start2 = -start2 > length2 ? 0 : length2 + start2;
      }
      end2 = end2 > length2 ? length2 : end2;
      if (end2 < 0) {
        end2 += length2;
      }
      length2 = start2 > end2 ? 0 : end2 - start2 >>> 0;
      start2 >>>= 0;
      var result = Array(length2);
      while (++index < length2) {
        result[index] = array[index + start2];
      }
      return result;
    }
    var _baseSlice = baseSlice$1;
    var baseGet$2 = _baseGet, baseSlice = _baseSlice;
    function parent$1(object, path) {
      return path.length < 2 ? object : baseGet$2(object, baseSlice(path, 0, -1));
    }
    var _parent = parent$1;
    var castPath$1 = _castPath, last = last_1, parent = _parent, toKey$2 = _toKey;
    function baseUnset$1(object, path) {
      path = castPath$1(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey$2(last(path))];
    }
    var _baseUnset = baseUnset$1;
    var isPlainObject$1 = isPlainObject_1;
    function customOmitClone$1(value2) {
      return isPlainObject$1(value2) ? void 0 : value2;
    }
    var _customOmitClone = customOmitClone$1;
    var arrayMap$1 = _arrayMap, baseClone = _baseClone, baseUnset = _baseUnset, castPath = _castPath, copyObject = _copyObject, customOmitClone = _customOmitClone, flatRest = _flatRest, getAllKeysIn$1 = _getAllKeysIn;
    var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap$1(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn$1(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length2 = paths.length;
      while (length2--) {
        baseUnset(result, paths[length2]);
      }
      return result;
    });
    var omit_1 = omit;
    const omit$1 = /* @__PURE__ */ getDefaultExportFromCjs(omit_1);
    var isObject$9 = function isObject2(v2) {
      return _typeof$1(v2) == "object" && v2 !== null && !Array.isArray(v2);
    };
    var widgetDefKeysToOmit = ["formatValue", "mongoFormatValue", "sqlFormatValue", "jsonLogic", "elasticSearchFormatValue", "spelFormatValue", "spelImportFuncs", "spelImportValue"];
    var opDefKeysToOmit = ["formatOp", "mongoFormatOp", "sqlFormatOp", "jsonLogic", "spelFormatOp"];
    var defaultValue$1 = function defaultValue2(value2, _default2) {
      return typeof value2 === "undefined" ? _default2 : value2;
    };
    var deepEqual = function deepEqual2(v1, v2) {
      if (v1 === v2) {
        return true;
      } else if (immutableExports.Map.isMap(v1)) {
        return v1.equals(v2);
      } else {
        return JSON.stringify(v1) == JSON.stringify(v2);
      }
    };
    var shallowEqual$2 = function shallowEqual2(a, b2) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (a === b2) {
        return true;
      } else if (Array.isArray(a))
        return shallowEqualArrays$1(a, b2, deep);
      else if (immutableExports.Map.isMap(a))
        return a.equals(b2);
      else if (_typeof$1(a) == "object")
        return shallowEqualObjects$1(a, b2, deep);
      else
        return a === b2;
    };
    function shallowEqualArrays$1(arrA, arrB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (arrA === arrB) {
        return true;
      }
      if (!arrA || !arrB) {
        return false;
      }
      var len = arrA.length;
      if (arrB.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var isEqual = deep ? shallowEqual$2(arrA[i], arrB[i], deep) : arrA[i] === arrB[i];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    function shallowEqualObjects$1(objA, objB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (objA === objB) {
        return true;
      }
      if (!objA || !objB) {
        return false;
      }
      var aKeys = Object.keys(objA);
      var bKeys = Object.keys(objB);
      var len = aKeys.length;
      if (bKeys.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var key = aKeys[i];
        var isEqual = deep ? shallowEqual$2(objA[key], objB[key], deep) : objA[key] === objB[key];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    var isImmutable = function isImmutable2(v2) {
      return _typeof$1(v2) === "object" && v2 !== null && typeof v2.toJS === "function";
    };
    function toImmutableList(v2) {
      return isImmutable(v2) ? v2 : new Immutable.List(v2);
    }
    function applyToJS(v2) {
      return isImmutable(v2) ? v2.toJS() : v2;
    }
    var escapeRegExp = function escapeRegExp2(string) {
      return string.replace(/[.*+?^${}()|[\]\\/]/g, "\\$&");
    };
    var cleanJSX = function cleanJSX2(jsx) {
      var jsxKeys = ["$$typeof", "_owner", "_store", "ref", "key"];
      var getName = function getName2(val) {
        if (typeof val === "string") {
          return val;
        } else if (typeof val === "function") {
          return val.name;
        }
        return val;
      };
      if (jsx instanceof Array) {
        return jsx.map(function(el, _i) {
          return cleanJSX2(el);
        });
      } else if (_typeof$1(jsx) === "object" && jsx !== null) {
        if (isDirtyJSX(jsx)) {
          var _cleaned$props;
          var cleaned = omit$1(jsx, jsxKeys);
          if (cleaned.type) {
            cleaned.type = getName(cleaned.type);
          }
          if (cleaned !== null && cleaned !== void 0 && (_cleaned$props = cleaned.props) !== null && _cleaned$props !== void 0 && _cleaned$props.children) {
            cleaned.props.children = cleanJSX2(cleaned.props.children);
          }
          return cleaned;
        }
      }
      return jsx;
    };
    var isDirtyJSX = function isDirtyJSX2(jsx) {
      return _typeof$1(jsx) === "object" && jsx !== null && !Array.isArray(jsx) && Object.keys(jsx).includes("type") && Object.keys(jsx).includes("props") && Object.keys(jsx).includes("key") && Object.keys(jsx).includes("ref") && Object.keys(jsx).includes("$$typeof");
    };
    var isJSX = function isJSX2(jsx) {
      return _typeof$1(jsx) === "object" && jsx !== null && !Array.isArray(jsx) && typeof jsx["type"] === "string" && Object.keys(jsx).includes("props");
    };
    var isJsonLogic = function isJsonLogic2(logic2) {
      var isJL = _typeof$1(logic2) === "object" && logic2 !== null && !Array.isArray(logic2) && Object.keys(logic2).length === 1;
      return isJL;
    };
    function sleep$1(delay) {
      return new Promise(function(resolve) {
        setTimeout(resolve, delay);
      });
    }
    function mergeArraysSmart(arr1, arr2) {
      if (!arr1)
        arr1 = [];
      if (!arr2)
        arr2 = [];
      return arr2.map(function(op) {
        return [op, arr1.indexOf(op)];
      }).map(function(_ref, i, orig) {
        var _ref2 = _slicedToArray(_ref, 2), op = _ref2[0], ind = _ref2[1];
        if (ind == -1) {
          var next2 = orig.slice(i + 1);
          var prev2 = orig.slice(0, i);
          var after = prev2.reverse().find(function(_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2);
            _ref4[0];
            var ci2 = _ref4[1];
            return ci2 != -1;
          });
          var before = next2.find(function(_ref5) {
            var _ref6 = _slicedToArray(_ref5, 2);
            _ref6[0];
            var ci2 = _ref6[1];
            return ci2 != -1;
          });
          if (before)
            return [op, "before", before[0]];
          else if (after)
            return [op, "after", after[0]];
          else
            return [op, "append", null];
        } else {
          return null;
        }
      }).filter(function(x2) {
        return x2 !== null;
      }).reduce(function(acc, _ref7) {
        var _ref8 = _slicedToArray(_ref7, 3), newOp = _ref8[0], rel = _ref8[1], relOp = _ref8[2];
        var ind = acc.indexOf(relOp);
        if (acc.indexOf(newOp) == -1) {
          if (ind > -1) {
            acc.splice(ind + (rel == "after" ? 1 : 0), 0, newOp);
          } else {
            acc.splice(rel == "append" ? Infinity : 0, 0, newOp);
          }
        }
        return acc;
      }, arr1.slice());
    }
    var deepFreeze = function deepFreeze2(obj) {
      if (_typeof$1(obj) === "object" && obj !== null) {
        Object.keys(obj).forEach(function(prop) {
          deepFreeze2(obj[prop]);
        });
        Object.freeze(obj);
      }
    };
    var isJsonCompatible = function isJsonCompatible2(tpl, obj) {
      var bag = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var path = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];
      if (isObject$9(tpl)) {
        if (tpl["var"]) {
          bag[tpl["var"]] = obj;
          return true;
        }
        if (!isObject$9(obj))
          return false;
        for (var k2 in tpl) {
          var tv = tpl[k2];
          var ov = obj[k2];
          if (!isJsonCompatible2(tv, ov, bag, [].concat(_toConsumableArray(path), [k2])))
            return false;
        }
        return true;
      } else if (Array.isArray(tpl)) {
        if (!Array.isArray(obj))
          return false;
        for (var i = 0; i < tpl.length; i++) {
          var _tv = tpl[i];
          var _ov = obj[i];
          if (!isJsonCompatible2(_tv, _ov, bag, [].concat(_toConsumableArray(path), [i])))
            return false;
        }
        return true;
      } else {
        return tpl === obj;
      }
    };
    var isDev$1 = function isDev2() {
      return typeof process !== "undefined" && process.env && false;
    };
    var getLogger$1 = function getLogger2() {
      var devMode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var verbose = devMode != void 0 ? devMode : isDev$1();
      return verbose ? console : {
        error: function error() {
        },
        log: function log() {
        },
        warn: function warn2() {
        },
        debug: function debug() {
        },
        info: function info() {
        }
      };
    };
    var getFirstDefined = function getFirstDefined2() {
      var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var ret;
      for (var i = 0; i < arr.length; i++) {
        var v2 = arr[i];
        if (v2 !== void 0) {
          ret = v2;
          break;
        }
      }
      return ret;
    };
    var logger$1 = getLogger$1();
    const stuff = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      applyToJS,
      cleanJSX,
      deepEqual,
      deepFreeze,
      defaultValue: defaultValue$1,
      escapeRegExp,
      getFirstDefined,
      getLogger: getLogger$1,
      isDirtyJSX,
      isImmutable,
      isJSX,
      isJsonCompatible,
      isJsonLogic,
      logger: logger$1,
      mergeArraysSmart,
      opDefKeysToOmit,
      shallowEqual: shallowEqual$2,
      sleep: sleep$1,
      toImmutableList,
      uuid: uuid$1,
      widgetDefKeysToOmit
    }, Symbol.toStringTag, { value: "Module" }));
    function _createForOfIteratorHelper$f(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$f(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$f(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$f(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$f(o, minLen);
    }
    function _arrayLikeToArray$f(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$B(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$B(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$B(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$B(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var isObject$8 = function isObject2(v2) {
      return _typeof$1(v2) == "object" && v2 !== null && !Array.isArray(v2);
    };
    var toListValue = function toListValue2(v2, title) {
      if (v2 == null || v2 == "") {
        return void 0;
      } else if (isObject$8(v2)) {
        return v2;
      } else {
        return {
          value: v2,
          title: title !== void 0 ? title : "" + v2
        };
      }
    };
    var makeCustomListValue$1 = function makeCustomListValue2(v2) {
      var lv = toListValue(v2);
      if (isObject$8(lv)) {
        return _objectSpread$B(_objectSpread$B({}, toListValue(v2)), {}, {
          isCustom: true
        });
      } else {
        return lv;
      }
    };
    var listValuesToArray$1 = function listValuesToArray2(listValuesObj) {
      if (Array.isArray(listValuesObj))
        return listValuesObj.map(function(v3) {
          return toListValue(v3);
        });
      if (!isObject$8(listValuesObj))
        return listValuesObj;
      var listValuesArr = [];
      for (var v2 in listValuesObj) {
        var title = listValuesObj[v2];
        listValuesArr.push(toListValue(v2, title));
      }
      return listValuesArr;
    };
    var getItemInListValues = function getItemInListValues2(listValues2, value2) {
      if (Array.isArray(listValues2)) {
        var values2 = listValues2.map(function(v2) {
          return toListValue(v2);
        });
        return values2.find(function(v2) {
          return "" + v2.value === "" + value2;
        });
      } else {
        return listValues2[value2] !== void 0 ? toListValue(value2, listValues2[value2]) : void 0;
      }
    };
    var getTitleInListValues$1 = function getTitleInListValues2(listValues2, value2) {
      if (listValues2 == void 0)
        return value2;
      var it = getItemInListValues(listValues2, value2);
      return it !== void 0 ? it.title : value2;
    };
    var getValueInListValues = function getValueInListValues2(listValues2, value2) {
      if (listValues2 == void 0)
        return value2;
      var it = getItemInListValues(listValues2, value2);
      return it !== void 0 ? it.value : value2;
    };
    var mapListValues$5 = function mapListValues2(listValues2, mapFn) {
      var ret = [];
      if (Array.isArray(listValues2)) {
        var _iterator = _createForOfIteratorHelper$f(listValues2), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var v2 = _step.value;
            var lv = mapFn(toListValue(v2));
            if (lv != null)
              ret.push(lv);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else {
        for (var value2 in listValues2) {
          var _lv = mapFn(toListValue(value2, listValues2[value2]));
          if (_lv != null)
            ret.push(_lv);
        }
      }
      return ret;
    };
    var searchListValue$1 = function searchListValue2(search, listValues2) {
      return mapListValues$5(listValues2, function(lv) {
        return "".concat(lv.value).indexOf(search) != -1 || lv.title.indexOf(search) != -1 ? lv : null;
      }).filter(function(v2) {
        return v2 !== null;
      }).shift();
    };
    var getListValue$1 = function getListValue2(selectedValue, listValues2) {
      return mapListValues$5(listValues2, function(lv) {
        return "" + lv.value === "" + selectedValue ? lv : null;
      }).filter(function(v2) {
        return v2 !== null;
      }).shift();
    };
    const listValues = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      getItemInListValues,
      getListValue: getListValue$1,
      getTitleInListValues: getTitleInListValues$1,
      getValueInListValues,
      listValuesToArray: listValuesToArray$1,
      makeCustomListValue: makeCustomListValue$1,
      mapListValues: mapListValues$5,
      searchListValue: searchListValue$1,
      toListValue
    }, Symbol.toStringTag, { value: "Module" }));
    var expandTreePath = function expandTreePath2(path) {
      for (var _len = arguments.length, suffix = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        suffix[_key - 1] = arguments[_key];
      }
      return path.interpose("children1").withMutations(function(list) {
        list.skip(1);
        list.push.apply(list, suffix);
        return list;
      });
    };
    var expandTreeSubpath = function expandTreeSubpath2(path) {
      for (var _len2 = arguments.length, suffix = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        suffix[_key2 - 1] = arguments[_key2];
      }
      return path.interpose("children1").withMutations(function(list) {
        list.push.apply(list, suffix);
        return list;
      });
    };
    var getItemByPath = function getItemByPath2(tree2, path) {
      var children = new Immutable.OrderedMap(_defineProperty$2({}, tree2.get("id"), tree2));
      var res = tree2;
      path.forEach(function(id2) {
        res = children.get(id2);
        children = res.get("children1");
      });
      return res;
    };
    var removeIsLockedInTree = function removeIsLockedInTree2(tree2) {
      var newTree = tree2;
      function _processNode(item, path) {
        var isParentLocked = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var itemPath = path.push(item.get("id"));
        var isLocked = item.getIn(["properties", "isLocked"]);
        if (isParentLocked && isLocked) {
          newTree = newTree.deleteIn(expandTreePath(itemPath, "properties", "isLocked"));
        }
        var children = item.get("children1");
        if (children) {
          children.map(function(child, _childId) {
            _processNode(child, itemPath, isLocked || isParentLocked);
          });
        }
      }
      _processNode(tree2, new Immutable.List());
      return newTree;
    };
    var fixPathsInTree = function fixPathsInTree2(tree2) {
      var newTree = tree2;
      function _processNode(item, path, lev, nodeId) {
        if (!item)
          return;
        var currPath = item.get("path");
        var currId = item.get("id");
        var itemId = currId || nodeId;
        var itemPath = path.push(itemId);
        if (!currPath || !currPath.equals(itemPath)) {
          newTree = newTree.setIn(expandTreePath(itemPath, "path"), itemPath);
        }
        if (!currId) {
          newTree = newTree.setIn(expandTreePath(itemPath, "id"), itemId);
        }
        var children = item.get("children1");
        if (children) {
          if (children.constructor.name == "Map") {
            newTree = newTree.setIn(expandTreePath(itemPath, "children1"), new Immutable.OrderedMap(children));
          }
          children.map(function(child, childId) {
            _processNode(child, itemPath, lev + 1, childId);
          });
        }
      }
      _processNode(tree2, new Immutable.List(), 0);
      return newTree;
    };
    var fixEmptyGroupsInTree = function fixEmptyGroupsInTree2(tree2) {
      var newTree = tree2;
      function _processNode(item, path, lev, nodeId) {
        if (!item)
          return false;
        var itemId = item.get("id") || nodeId;
        var itemPath = path.push(itemId);
        var children = item.get("children1");
        if (children) {
          var allChildrenGone = children.map(function(child, childId) {
            return _processNode(child, itemPath, lev + 1, childId);
          }).reduce(function(curr, v2) {
            return curr && v2;
          }, true);
          if ((children.size == 0 || allChildrenGone) && lev > 0) {
            newTree = newTree.deleteIn(expandTreePath(itemPath));
            return true;
          }
        }
        return false;
      }
      _processNode(tree2, new Immutable.List(), 0);
      return newTree;
    };
    var getFlatTree$1 = function getFlatTree2(tree2) {
      var flat = [];
      var items = {};
      var realHeight = 0;
      function _flatizeTree(item2, path, insideCollapsed, insideLocked, insideRuleGroup, lev, info, parentType, caseId) {
        var type = item2.get("type");
        var collapsed = item2.get("collapsed");
        var id2 = item2.get("id");
        var children = item2.get("children1");
        var isLocked = item2.getIn(["properties", "isLocked"]);
        var childrenIds = children ? children.map(function(_child, childId) {
          return childId;
        }).toArray() : null;
        var isRuleGroup = type == "rule_group";
        var isLeaf = !insideRuleGroup && (!children || isRuleGroup);
        var hasChildren2 = (childrenIds === null || childrenIds === void 0 ? void 0 : childrenIds.length) > 0;
        var itemsBefore = flat.length;
        var top2 = realHeight;
        flat.push(id2);
        if (!insideCollapsed)
          realHeight += 1;
        info.height = (info.height || 0) + 1;
        items[id2] = {
          type,
          parent: path.length ? path[path.length - 1] : null,
          parentType,
          caseId: type == "case_group" ? id2 : caseId,
          isDefaultCase: type == "case_group" && !children,
          path: path.concat(id2),
          lev,
          leaf: !children,
          index: itemsBefore,
          id: id2,
          children: childrenIds,
          leafsCount: 0,
          _top: itemsBefore,
          //_height: (itemsAfter - itemsBefore),
          top: insideCollapsed ? null : top2,
          //height: height,
          //bottom: (insideCollapsed ? null : top) + height,
          collapsed,
          node: item2,
          isLocked: isLocked || insideLocked
        };
        var depth;
        if (children) {
          var subinfo = {};
          children.map(function(child, _childId) {
            _flatizeTree(child, path.concat(id2), insideCollapsed || collapsed, insideLocked || isLocked, insideRuleGroup || isRuleGroup, lev + 1, subinfo, type, type == "case_group" ? id2 : caseId);
          });
          if (!collapsed) {
            info.height = (info.height || 0) + (subinfo.height || 0);
            if (hasChildren2 && !isRuleGroup) {
              depth = (subinfo.depth || 0) + 1;
            }
          }
        }
        if (caseId && isLeaf) {
          items[caseId].leafsCount++;
        }
        var itemsAfter = flat.length;
        var height2 = info.height;
        Object.assign(items[id2], {
          _height: itemsAfter - itemsBefore,
          height: height2,
          bottom: (insideCollapsed ? null : top2) + height2
        });
        if (depth != void 0) {
          Object.assign(items[id2], {
            depth
          });
          info.depth = Math.max(info.depth || 0, depth);
        }
      }
      _flatizeTree(tree2, [], false, false, false, 0, {}, null, null);
      for (var i = 0; i < flat.length; i++) {
        var prevId = i > 0 ? flat[i - 1] : null;
        var nextId = i < flat.length - 1 ? flat[i + 1] : null;
        var item = items[flat[i]];
        item.prev = prevId;
        item.next = nextId;
      }
      return {
        flat,
        items
      };
    };
    var getTotalReordableNodesCountInTree$2 = function getTotalReordableNodesCountInTree2(tree2) {
      if (!tree2)
        return -1;
      var cnt = 0;
      function _processNode(item, path, lev) {
        var id2, children, type;
        if (typeof item.get === "function") {
          id2 = item.get("id");
          children = item.get("children1");
          type = item.get("type");
        } else {
          id2 = item.id;
          children = item.children1;
          type = item.type;
        }
        var isRuleGroup = type == "rule_group";
        cnt++;
        if (children && !isRuleGroup) {
          children.map(function(child, _childId) {
            _processNode(child, path.concat(id2));
          });
        }
      }
      _processNode(tree2, []);
      return cnt - 1;
    };
    var getTotalRulesCountInTree$2 = function getTotalRulesCountInTree2(tree2) {
      if (!tree2)
        return -1;
      var cnt = 0;
      function _processNode(item, path, lev) {
        var id2, children, type;
        if (typeof item.get === "function") {
          id2 = item.get("id");
          children = item.get("children1");
          type = item.get("type");
        } else {
          id2 = item.id;
          children = item.children1;
          type = item.type;
        }
        if (type == "rule" || type == "rule_group") {
          cnt++;
        } else if (children) {
          children.map(function(child, _childId) {
            _processNode(child, path.concat(id2));
          });
        }
      }
      _processNode(tree2, []);
      return cnt;
    };
    var getTreeBadFields = function getTreeBadFields2(tree2) {
      var badFields = [];
      function _processNode(item, path, lev) {
        var id2 = item.get("id");
        var children = item.get("children1");
        var valueError = item.getIn(["properties", "valueError"]);
        var field = item.getIn(["properties", "field"]);
        if (valueError && valueError.size > 0 && valueError.filter(function(v2) {
          return v2 != null;
        }).size > 0) {
          badFields.push(field);
        }
        if (children) {
          children.map(function(child, _childId) {
            _processNode(child, path.concat(id2));
          });
        }
      }
      if (tree2)
        _processNode(tree2, []);
      return Array.from(new Set(badFields));
    };
    var getLightTree = function getLightTree2(tree2) {
      var children1AsArray = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var newTree = tree2;
      function _processNode(item, itemId) {
        if (item.path)
          delete item.path;
        if (!children1AsArray && itemId)
          delete item.id;
        var properties2 = item.properties;
        if (properties2) {
          if (properties2.operatorOptions == null)
            delete properties2.operatorOptions;
        }
        var children = item.children1;
        if (children) {
          for (var id2 in children) {
            _processNode(children[id2], id2);
          }
          if (children1AsArray) {
            item.children1 = Object.values(children);
          }
        }
      }
      _processNode(tree2, null);
      return newTree;
    };
    var getSwitchValues = function getSwitchValues2(tree2) {
      var vals = [];
      var children = tree2.get("children1");
      if (children) {
        children.map(function(child) {
          var value2 = child.getIn(["properties", "value"]);
          var caseValue;
          if (value2 && value2.size == 1) {
            caseValue = value2.get(0);
            if (Array.isArray(caseValue) && caseValue.length == 0) {
              caseValue = null;
            }
          } else {
            caseValue = null;
          }
          vals = [].concat(_toConsumableArray(vals), [caseValue]);
        });
      }
      return vals;
    };
    var isEmptyTree = function isEmptyTree2(tree2) {
      return !tree2.get("children1") || tree2.get("children1").size == 0;
    };
    var hasChildren = function hasChildren2(tree2, path) {
      return tree2.getIn(expandTreePath(path, "children1")).size > 0;
    };
    const treeUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      expandTreePath,
      expandTreeSubpath,
      fixEmptyGroupsInTree,
      fixPathsInTree,
      getFlatTree: getFlatTree$1,
      getItemByPath,
      getLightTree,
      getSwitchValues,
      getTotalReordableNodesCountInTree: getTotalReordableNodesCountInTree$2,
      getTotalRulesCountInTree: getTotalRulesCountInTree$2,
      getTreeBadFields,
      hasChildren,
      immutableToJs: applyToJS,
      isEmptyTree,
      isImmutable,
      jsToImmutable,
      removeIsLockedInTree,
      toImmutableList
    }, Symbol.toStringTag, { value: "Module" }));
    var getTree$1 = function getTree2(immutableTree) {
      var light2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var children1AsArray = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (!immutableTree)
        return void 0;
      var tree2 = immutableTree;
      tree2 = tree2.toJS();
      if (light2)
        tree2 = getLightTree(tree2, children1AsArray);
      return tree2;
    };
    var loadTree$1 = function loadTree2(serTree) {
      if (isImmutableTree(serTree)) {
        return serTree;
      } else if (isTree(serTree)) {
        return jsToImmutable(serTree);
      } else if (typeof serTree == "string" && serTree.startsWith('["~#iM"')) {
        throw "You are trying to load query in obsolete serialization format (Immutable string) which is not supported in versions starting from 2.1.17";
      } else if (typeof serTree == "string") {
        return jsToImmutable(JSON.parse(serTree));
      } else
        throw "Can't load tree!";
    };
    var checkTree$1 = function checkTree2(tree2, config2) {
      if (!tree2)
        return void 0;
      var extendedConfig = extendConfig$1(config2, void 0, true);
      return validateTree(tree2, null, extendedConfig, extendedConfig);
    };
    var isValidTree = function isValidTree2(tree2) {
      return getTreeBadFields(tree2).length == 0;
    };
    var isImmutableTree = function isImmutableTree2(tree2) {
      return immutableExports.Map.isMap(tree2);
    };
    var isTree = function isTree2(tree2) {
      return _typeof$1(tree2) == "object" && (tree2.type == "group" || tree2.type == "switch_group");
    };
    function jsToImmutable(tree2) {
      var imm = immutableExports.fromJS(tree2, function(key, value2) {
        var outValue;
        if (key == "properties") {
          outValue = value2.toOrderedMap();
          for (var i = 0; i < 2; i++) {
            var _outValue$get;
            if (((_outValue$get = outValue.get("value")) === null || _outValue$get === void 0 ? void 0 : _outValue$get.get(i)) === null) {
              outValue = outValue.setIn(["value", i], void 0);
            }
          }
        } else if (key == "value" && Immutable.Iterable.isIndexed(value2)) {
          outValue = value2.map(function(v2) {
            var _v$toJS;
            var vJs = v2 === null || v2 === void 0 || (_v$toJS = v2.toJS) === null || _v$toJS === void 0 ? void 0 : _v$toJS.call(v2);
            if (vJs !== null && vJs !== void 0 && vJs.func) {
              return v2.toOrderedMap();
            } else if (v2 !== null && v2 !== void 0 && v2.toJS) {
              return vJs;
            } else {
              return v2;
            }
          }).toList();
        } else if (key == "asyncListValues") {
          outValue = value2.toJS();
        } else if (key == "children1" && Immutable.Iterable.isIndexed(value2)) {
          outValue = new Immutable.OrderedMap(value2.map(function(child) {
            return [child.get("id"), child];
          }));
        } else {
          outValue = Immutable.Iterable.isIndexed(value2) ? value2.toList() : value2.toOrderedMap();
        }
        return outValue;
      });
      return imm;
    }
    function _toArray(arr) {
      return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$g(arr) || _nonIterableRest();
    }
    function _createForOfIteratorHelper$e(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$e(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e2) {
            throw _e2;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$e(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$e(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$e(o, minLen);
    }
    function _arrayLikeToArray$e(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$A(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$A(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$A(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$A(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var arrayUniq = function arrayUniq2(arr) {
      return Array.from(new Set(arr));
    };
    var createMeta = function createMeta2() {
      return {
        errors: []
      };
    };
    var loadFromJsonLogic$1 = function loadFromJsonLogic2(logicTree, config2) {
      return _loadFromJsonLogic(logicTree, config2, false);
    };
    var _loadFromJsonLogic = function _loadFromJsonLogic2(logicTree, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = createMeta();
      var extendedConfig = extendConfig$1(config2, void 0, false);
      var conv = buildConv$1(extendedConfig);
      var jsTree = logicTree ? convertFromLogic(logicTree, conv, extendedConfig, "rule", meta) : void 0;
      if (jsTree && jsTree.type != "group") {
        jsTree = wrapInDefaultConj$1(jsTree, extendedConfig);
      }
      var immTree = jsTree ? loadTree$1(jsTree) : void 0;
      if (returnErrors) {
        return [immTree, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while importing from JsonLogic:", meta.errors);
        return immTree;
      }
    };
    var buildConv$1 = function buildConv2(config2) {
      var operators2 = {};
      for (var opKey in config2.operators) {
        var opConfig = config2.operators[opKey];
        if (typeof opConfig.jsonLogic == "string") {
          var opk = (opConfig._jsonLogicIsRevArgs ? "#" : "") + opConfig.jsonLogic + "/" + defaultValue$1(opConfig.cardinality, 1);
          if (!operators2[opk])
            operators2[opk] = [];
          operators2[opk].push(opKey);
        } else if (typeof opConfig.jsonLogic2 == "string") {
          var _opk = opConfig.jsonLogic2 + "/" + defaultValue$1(opConfig.cardinality, 1);
          if (!operators2[_opk])
            operators2[_opk] = [];
          operators2[_opk].push(opKey);
        }
      }
      var conjunctions2 = {};
      for (var conjKey in config2.conjunctions) {
        var conjunctionDefinition = config2.conjunctions[conjKey];
        var ck2 = conjunctionDefinition.jsonLogicConj || conjKey.toLowerCase();
        conjunctions2[ck2] = conjKey;
      }
      var funcs = {};
      var _iterator = _createForOfIteratorHelper$e(iterateFuncs(config2)), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var _step$value = _slicedToArray(_step.value, 2), funcPath = _step$value[0], funcConfig = _step$value[1];
          var fk2 = void 0;
          if (funcConfig.jsonLogicIsMethod) {
            fk2 = "#" + funcConfig.jsonLogic;
          } else if (typeof funcConfig.jsonLogic == "string") {
            fk2 = funcConfig.jsonLogic;
          }
          if (fk2) {
            if (!funcs[fk2])
              funcs[fk2] = [];
            funcs[fk2].push(funcPath);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var _config$settings$json = config2.settings.jsonLogic, groupVarKey = _config$settings$json.groupVarKey, altVarKey = _config$settings$json.altVarKey;
      return {
        operators: operators2,
        conjunctions: conjunctions2,
        funcs,
        varKeys: ["var", groupVarKey, altVarKey]
      };
    };
    var convertFromLogic = function convertFromLogic2(logic2, conv, config2, expectedType, meta) {
      var not = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
      var fieldConfig = arguments.length > 6 ? arguments[6] : void 0;
      var widget = arguments.length > 7 ? arguments[7] : void 0;
      var parentField = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : null;
      var op, vals;
      if (isJsonLogic(logic2)) {
        op = Object.keys(logic2)[0];
        vals = logic2[op];
        if (!Array.isArray(vals))
          vals = [vals];
      }
      var ret;
      var beforeErrorsCnt = meta.errors.length;
      var lockedOp = config2.settings.jsonLogic.lockedOp;
      var isEmptyOp = op == "!" && vals.length == 1 && vals[0] && isJsonLogic(vals[0]) && conv.varKeys.includes(Object.keys(vals[0])[0]);
      var isRev = op == "!" && !isEmptyOp;
      var isLocked = lockedOp && op == lockedOp;
      if (isLocked) {
        ret = convertFromLogic2(vals[0], conv, config2, expectedType, meta, not, fieldConfig, widget, parentField, true);
      } else if (isRev) {
        ret = convertFromLogic2(vals[0], conv, config2, expectedType, meta, !not, fieldConfig, widget, parentField);
      } else if (expectedType == "val") {
        ret = convertFieldRhs(op, vals, conv, config2, not, meta, parentField) || convertFuncRhs(op, vals, conv, config2, not, fieldConfig, meta, parentField) || convertValRhs(logic2, fieldConfig, widget, config2, meta);
      } else if (expectedType == "rule") {
        ret = convertConj(op, vals, conv, config2, not, meta, parentField, false) || convertOp$1(op, vals, conv, config2, not, meta, parentField);
      }
      var afterErrorsCnt = meta.errors.length;
      if (op != "!" && ret === void 0 && afterErrorsCnt == beforeErrorsCnt) {
        meta.errors.push("Can't parse logic ".concat(JSON.stringify(logic2)));
      }
      if (isLocked) {
        ret.properties.isLocked = true;
      }
      return ret;
    };
    var convertValRhs = function convertValRhs2(val, fieldConfig, widget, config2, meta) {
      var _fieldConfig$fieldSet;
      if (val === void 0)
        val = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.defaultValue;
      if (val === void 0)
        return void 0;
      var widgetConfig = config2.widgets[widget || (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.mainWidget)];
      var fieldType = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type;
      if (!widgetConfig) {
        meta.errors.push("No widget for type ".concat(fieldType));
        return void 0;
      }
      if (isJsonLogic(val)) {
        meta.errors.push("Unexpected logic in value: ".concat(JSON.stringify(val)));
        return void 0;
      }
      if (fieldType == "time" && typeof val == "number") {
        var h2 = Math.floor(val / 60 / 60) % 24, m2 = Math.floor(val / 60) % 60, s = val % 60;
        var valueFormat = widgetConfig.valueFormat;
        if (valueFormat) {
          var dateVal = new Date(val);
          dateVal.setMilliseconds(0);
          dateVal.setHours(h2);
          dateVal.setMinutes(m2);
          dateVal.setSeconds(s);
          val = hooks(dateVal).format(valueFormat);
        } else {
          val = "".concat(h2, ":").concat(m2, ":").concat(s);
        }
      }
      if (["date", "datetime"].includes(fieldType) && val && !(val instanceof Date)) {
        try {
          var _dateVal = new Date(val);
          if (_dateVal instanceof Date && _dateVal.toISOString() === val) {
            val = _dateVal;
          }
        } catch (e2) {
          meta.errors.push("Can't convert value ".concat(val, " as Date"));
          val = void 0;
        }
      }
      if (val instanceof Date && fieldConfig) {
        var _valueFormat = widgetConfig.valueFormat;
        if (_valueFormat) {
          val = hooks(val).format(_valueFormat);
        }
      }
      var asyncListValues;
      if (val && fieldConfig !== null && fieldConfig !== void 0 && (_fieldConfig$fieldSet = fieldConfig.fieldSettings) !== null && _fieldConfig$fieldSet !== void 0 && _fieldConfig$fieldSet.asyncFetch) {
        var vals = Array.isArray(val) ? val : [val];
        asyncListValues = vals;
      }
      return {
        valueSrc: "value",
        value: val,
        valueType: widgetConfig.type,
        asyncListValues
      };
    };
    var convertFieldRhs = function convertFieldRhs2(op, vals, conv, config2, not, meta) {
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if (conv.varKeys.includes(op) && typeof vals[0] == "string") {
        var field = normalizeField(config2, vals[0], parentField);
        var fieldConfig = getFieldConfig$8(config2, field);
        if (!fieldConfig) {
          meta.errors.push("No config for field ".concat(field));
          return void 0;
        }
        return {
          valueSrc: "field",
          value: field,
          valueType: fieldConfig.type
        };
      }
      return void 0;
    };
    var convertLhs = function convertLhs2(isGroup0, jlField, args, conv, config2) {
      var not = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var fieldConfig = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var meta = arguments.length > 7 ? arguments[7] : void 0;
      var parentField = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : null;
      var k2 = Object.keys(jlField)[0];
      var v2 = Object.values(jlField)[0];
      var _parse = function _parse2(k3, v3) {
        return convertFieldLhs(k3, v3, conv, config2, not, meta, parentField) || convertFuncLhs(k3, v3, conv, config2, not, fieldConfig, meta, parentField);
      };
      var beforeErrorsCnt = meta.errors.length;
      var field, fieldSrc, having, isGroup;
      var parsed = _parse(k2, v2);
      if (parsed) {
        field = parsed.field;
        fieldSrc = parsed.fieldSrc;
      }
      if (isGroup0) {
        isGroup = true;
        having = args[0];
        args = [];
      }
      if (k2 == "reduce" && Array.isArray(v2) && v2.length == 3) {
        var _v = v2, _v2 = _slicedToArray(_v, 3), filter = _v2[0], acc = _v2[1], init = _v2[2];
        if (isJsonLogic(filter) && init == 0 && isJsonLogic(acc) && Array.isArray(acc["+"]) && acc["+"][0] == 1 && isJsonLogic(acc["+"][1]) && acc["+"][1]["var"] == "accumulator") {
          k2 = Object.keys(filter)[0];
          v2 = Object.values(filter)[0];
          if (k2 == "filter") {
            var _v3 = v2, _v4 = _slicedToArray(_v3, 2), group2 = _v4[0], _filter = _v4[1];
            if (isJsonLogic(group2)) {
              k2 = Object.keys(group2)[0];
              v2 = Object.values(group2)[0];
              var parsedGroup = _parse(k2, v2);
              if (parsedGroup) {
                field = parsedGroup.field;
                fieldSrc = parsedGroup.fieldSrc;
                having = _filter;
                isGroup = true;
              }
            }
          } else {
            var _parsedGroup = _parse(k2, v2);
            if (_parsedGroup) {
              field = _parsedGroup.field;
              fieldSrc = _parsedGroup.fieldSrc;
              isGroup = true;
            }
          }
        }
      }
      var afterErrorsCnt = meta.errors.length;
      if (!field && afterErrorsCnt == beforeErrorsCnt) {
        meta.errors.push("Unknown LHS ".concat(JSON.stringify(jlField)));
      }
      if (!field)
        return;
      return {
        field,
        fieldSrc,
        having,
        isGroup,
        args
      };
    };
    var convertFieldLhs = function convertFieldLhs2(op, vals, conv, config2, not, meta) {
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if (!Array.isArray(vals))
        vals = [vals];
      var parsed = convertFieldRhs(op, vals, conv, config2, not, meta, parentField);
      if (parsed) {
        return {
          fieldSrc: "field",
          field: parsed.value
        };
      }
      return void 0;
    };
    var convertFuncLhs = function convertFuncLhs2(op, vals, conv, config2, not) {
      var fieldConfig = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var meta = arguments.length > 6 ? arguments[6] : void 0;
      var parentField = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
      var parsed = convertFuncRhs(op, vals, conv, config2, not, fieldConfig, meta, parentField);
      if (parsed) {
        return {
          fieldSrc: "func",
          field: parsed.value
        };
      }
      return void 0;
    };
    var convertFuncRhs = function convertFuncRhs2(op, vals, conv, config2, not) {
      var fieldConfig = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var meta = arguments.length > 6 ? arguments[6] : void 0;
      var parentField = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
      if (!op)
        return void 0;
      var func, argsArr, funcKey;
      var jsonLogicIsMethod = op == "method";
      if (jsonLogicIsMethod) {
        var obj, opts;
        var _vals = _toArray(vals);
        obj = _vals[0];
        func = _vals[1];
        opts = _vals.slice(2);
        argsArr = [obj].concat(_toConsumableArray(opts));
      } else {
        func = op;
        argsArr = vals;
      }
      var fk2 = (jsonLogicIsMethod ? "#" : "") + func;
      var returnType = (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type) || (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.returnType);
      var funcKeys = (conv.funcs[fk2] || []).filter(function(k2) {
        return fieldConfig ? getFuncConfig$2(config2, k2).returnType == returnType : true;
      });
      if (funcKeys.length) {
        funcKey = funcKeys[0];
      } else {
        var v2 = _defineProperty$2({}, op, vals);
        var _iterator2 = _createForOfIteratorHelper$e(iterateFuncs(config2)), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _step2$value = _slicedToArray(_step2.value, 2), f2 = _step2$value[0], fc2 = _step2$value[1];
            if (fc2.jsonLogicImport && (returnType ? fc2.returnType == returnType : true)) {
              var parsed = void 0;
              try {
                parsed = fc2.jsonLogicImport(v2);
              } catch (_e) {
              }
              if (parsed) {
                funcKey = f2;
                argsArr = parsed;
              }
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      if (!funcKey)
        return void 0;
      if (funcKey) {
        var funcConfig = getFuncConfig$2(config2, funcKey);
        var argKeys = Object.keys(funcConfig.args || {});
        var argsObj = argsArr.reduce(function(acc, val, ind) {
          var argKey2 = argKeys[ind];
          var argConfig2 = funcConfig.args[argKey2];
          var argVal2;
          if (argConfig2) {
            argVal2 = convertFromLogic(val, conv, config2, "val", meta, false, argConfig2, null, parentField);
          }
          return argVal2 !== void 0 ? _objectSpread$A(_objectSpread$A({}, acc), {}, _defineProperty$2({}, argKey2, argVal2)) : acc;
        }, {});
        for (var argKey in funcConfig.args) {
          var argConfig = funcConfig.args[argKey];
          var argVal = argsObj[argKey];
          if (argVal === void 0) {
            argVal = argConfig === null || argConfig === void 0 ? void 0 : argConfig.defaultValue;
            if (argVal !== void 0) {
              var _argVal;
              argVal = {
                value: argVal,
                valueSrc: (_argVal = argVal) !== null && _argVal !== void 0 && _argVal.func ? "func" : "value",
                valueType: argConfig.type
              };
            }
            if (argVal === void 0) {
              if (argConfig !== null && argConfig !== void 0 && argConfig.isOptional)
                ;
              else {
                meta.errors.push("No value for arg ".concat(argKey, " of func ").concat(funcKey));
                return void 0;
              }
            } else {
              argsObj[argKey] = argVal;
            }
          }
        }
        return {
          valueSrc: "func",
          value: {
            func: funcKey,
            args: argsObj
          },
          valueType: funcConfig.returnType
        };
      }
      return void 0;
    };
    var convertConj = function convertConj2(op, vals, conv, config2, not, meta) {
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var conjKey = conv.conjunctions[op];
      var fieldSeparator = config2.settings.fieldSeparator;
      if (conjKey) {
        var type = "group";
        var children = vals.map(function(v2) {
          return convertFromLogic(v2, conv, config2, "rule", meta, false, null, null, parentField);
        }).filter(function(r2) {
          return r2 !== void 0;
        }).reduce(function(acc, r2) {
          return _objectSpread$A(_objectSpread$A({}, acc), {}, _defineProperty$2({}, r2.id, r2));
        }, {});
        var complexFields = Object.values(children).map(function(v2) {
          var _v$properties, _v$properties2;
          return (v2 === null || v2 === void 0 || (_v$properties = v2.properties) === null || _v$properties === void 0 ? void 0 : _v$properties.fieldSrc) == "field" && (v2 === null || v2 === void 0 || (_v$properties2 = v2.properties) === null || _v$properties2 === void 0 ? void 0 : _v$properties2.field);
        }).filter(function(f2) {
          var _f$includes;
          return f2 === null || f2 === void 0 || (_f$includes = f2.includes) === null || _f$includes === void 0 ? void 0 : _f$includes.call(f2, fieldSeparator);
        });
        var complexFieldsGroupAncestors = Object.fromEntries(arrayUniq(complexFields).map(function(f2) {
          var parts = f2.split(fieldSeparator);
          var ancs = Object.fromEntries(parts.slice(0, -1).map(function(f3, i, parts2) {
            return [].concat(_toConsumableArray(parts2.slice(0, i)), [f3]);
          }).map(function(fp) {
            return [fp.join(fieldSeparator), getFieldConfig$8(config2, fp)];
          }).filter(function(_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2);
            _ref4[0];
            var fc2 = _ref4[1];
            return (fc2 === null || fc2 === void 0 ? void 0 : fc2.type) == "!group";
          }));
          return [f2, Object.keys(ancs)];
        }));
        var properties2 = {
          conjunction: conjKey,
          not
        };
        var id2 = uuid$1();
        var children1 = {};
        var groupToId = {};
        Object.entries(children).map(function(_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2), k2 = _ref6[0], v2 = _ref6[1];
          if ((v2 === null || v2 === void 0 ? void 0 : v2.type) == "group" || (v2 === null || v2 === void 0 ? void 0 : v2.type) == "rule_group") {
            children1[k2] = v2;
          } else {
            var _v$properties3;
            var field = v2 === null || v2 === void 0 || (_v$properties3 = v2.properties) === null || _v$properties3 === void 0 ? void 0 : _v$properties3.field;
            var groupAncestors = complexFieldsGroupAncestors[field] || [];
            var groupField = groupAncestors[groupAncestors.length - 1];
            if (!groupField) {
              if (v2) {
                children1[k2] = v2;
              }
            } else {
              var ch2 = children1;
              var parentFieldParts = getFieldParts$4(parentField, config2);
              var groupPath = getFieldParts$4(groupField, config2);
              var isInParent = shallowEqual$2(parentFieldParts, groupPath.slice(0, parentFieldParts.length));
              if (!isInParent)
                parentFieldParts = [];
              var traverseGroupFields = groupField.split(fieldSeparator).slice(parentFieldParts.length).map(function(f2, i, parts) {
                return [].concat(_toConsumableArray(parentFieldParts), _toConsumableArray(parts.slice(0, i)), [f2]).join(fieldSeparator);
              }).map(function(f2) {
                return {
                  f: f2,
                  fc: getFieldConfig$8(config2, f2) || {}
                };
              }).filter(function(_ref7) {
                var fc2 = _ref7.fc;
                return fc2.type != "!struct";
              });
              traverseGroupFields.map(function(_ref8, i) {
                var gf2 = _ref8.f, gfc = _ref8.fc;
                var groupId = groupToId[gf2];
                if (!groupId) {
                  groupId = uuid$1();
                  groupToId[gf2] = groupId;
                  ch2[groupId] = {
                    type: "rule_group",
                    id: groupId,
                    children1: {},
                    properties: {
                      conjunction: conjKey,
                      not: false,
                      field: gf2,
                      fieldSrc: "field",
                      mode: gfc.mode
                    }
                  };
                }
                ch2 = ch2[groupId].children1;
              });
              ch2[k2] = v2;
            }
          }
        });
        return {
          type,
          id: id2,
          children1,
          properties: properties2
        };
      }
      return void 0;
    };
    var wrapInDefaultConjRuleGroup = function wrapInDefaultConjRuleGroup2(rule2, parentField, parentFieldConfig, config2, conj) {
      if (!rule2)
        return void 0;
      return {
        type: "rule_group",
        id: uuid$1(),
        children1: _defineProperty$2({}, rule2.id, rule2),
        properties: {
          conjunction: conj || defaultGroupConjunction$1(config2, parentFieldConfig),
          not: false,
          field: parentField
        }
      };
    };
    var wrapInDefaultConj$1 = function wrapInDefaultConj2(rule2, config2) {
      var not = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      return {
        type: "group",
        id: uuid$1(),
        children1: _defineProperty$2({}, rule2.id, rule2),
        properties: {
          conjunction: defaultConjunction(config2),
          not
        }
      };
    };
    var parseRule = function parseRule2(op, arity, vals, parentField, conv, config2, meta) {
      var submeta = createMeta();
      var res = _parseRule(op, arity, vals, parentField, conv, config2, false, submeta);
      if (!res) {
        res = _parseRule(op, arity, vals, parentField, conv, config2, true, createMeta());
      }
      if (!res) {
        meta.errors.push(submeta.errors.join("; ") || "Unknown op ".concat(op, "/").concat(arity));
        return void 0;
      }
      return res;
    };
    var _parseRule = function _parseRule2(op, arity, vals, parentField, conv, config2, isRevArgs, meta) {
      var isAllOrSomeInForMultiselect = (op == "all" || op == "some") && isJsonLogic(vals[1]) && Object.keys(vals[1])[0] == "in";
      var isGroup0 = !isAllOrSomeInForMultiselect && config2.settings.groupOperators.includes(op);
      var eqOps = ["==", "!="];
      var cardinality = isGroup0 ? 0 : arity - 1;
      if (isGroup0)
        cardinality = 0;
      else if (eqOps.includes(op) && cardinality == 1 && vals[1] === null) {
        arity = 1;
        cardinality = 0;
        vals = [vals[0]];
      }
      var opk = op + "/" + cardinality;
      var opKeys = conv.operators[(isRevArgs ? "#" : "") + opk];
      if (!opKeys)
        return;
      var jlField, jlArgs = [];
      var rangeOps = ["<", "<=", ">", ">="];
      if (rangeOps.includes(op) && arity == 3) {
        jlField = vals[1];
        jlArgs = [vals[0], vals[2]];
      } else if (isRevArgs) {
        jlField = vals[1];
        jlArgs = [vals[0]];
      } else {
        var _vals2 = vals;
        var _vals3 = _toArray(_vals2);
        jlField = _vals3[0];
        jlArgs = _vals3.slice(1);
      }
      if (!isJsonLogic(jlField)) {
        meta.errors.push("Incorrect operands for ".concat(op, ": ").concat(JSON.stringify(vals)));
        return;
      }
      var lhs = convertLhs(isGroup0, jlField, jlArgs, conv, config2, null, null, meta, parentField);
      if (!lhs)
        return;
      var field = lhs.field, fieldSrc = lhs.fieldSrc, having = lhs.having;
      lhs.isGroup;
      var args = lhs.args;
      var fieldConfig = getFieldConfig$8(config2, field);
      if (!fieldConfig) {
        meta.errors.push("No config for LHS ".concat(field));
        return;
      }
      var opKey = opKeys[0];
      if (opKeys.length > 1 && fieldConfig && fieldConfig.operators) {
        opKeys = opKeys.filter(function(k2) {
          return fieldConfig.operators.includes(k2);
        });
        if (opKeys.length == 0) {
          meta.errors.push("No corresponding ops for LHS ".concat(field));
          return;
        }
        opKey = opKeys[0];
      }
      return {
        field,
        fieldSrc,
        fieldConfig,
        opKey,
        args,
        having
      };
    };
    var convertOp$1 = function convertOp2(op, vals, conv, config2, not, meta) {
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if (!op)
        return void 0;
      var arity = vals.length;
      if ((op == "all" || op == "some") && isJsonLogic(vals[1])) {
        var op2 = Object.keys(vals[1])[0];
        if (op2 == "in") {
          vals = [vals[0], vals[1][op2][1]];
          op = op + "-" + op2;
        }
      }
      var parseRes = parseRule(op, arity, vals, parentField, conv, config2, meta);
      if (!parseRes)
        return void 0;
      var field = parseRes.field, fieldSrc = parseRes.fieldSrc, fieldConfig = parseRes.fieldConfig, opKey = parseRes.opKey, args = parseRes.args, having = parseRes.having;
      var opConfig = config2.operators[opKey];
      fieldConfig.showNot !== void 0 ? fieldConfig.showNot : config2.settings.showNot;
      var canRev = true;
      var conj;
      var havingVals;
      var havingNot = false;
      if (fieldConfig.type == "!group" && having) {
        conj = Object.keys(having)[0];
        havingVals = having[conj];
        if (!Array.isArray(havingVals))
          havingVals = [havingVals];
        var isEmptyOp = conj == "!" && havingVals.length == 1 && havingVals[0] && isJsonLogic(havingVals[0]) && conv.varKeys.includes(Object.keys(havingVals[0])[0]);
        if (conj == "!" && !isEmptyOp) {
          havingNot = true;
          having = having["!"];
          conj = Object.keys(having)[0];
          havingVals = having[conj];
          if (!Array.isArray(havingVals))
            havingVals = [havingVals];
        }
      }
      if (not && canRev && opConfig.reversedOp) {
        not = false;
        opKey = opConfig.reversedOp;
        opConfig = config2.operators[opKey];
      }
      var widget = getWidgetForFieldOp$3(config2, field, opKey, null);
      var convertedArgs = args.map(function(v2) {
        return convertFromLogic(v2, conv, config2, "val", meta, false, fieldConfig, widget, parentField);
      });
      if (convertedArgs.filter(function(v2) {
        return v2 === void 0;
      }).length) {
        return void 0;
      }
      var res;
      fieldConfig.type;
      if (fieldConfig.type == "!group" && having) {
        if (conv.conjunctions[conj] !== void 0) {
          res = convertConj(conj, havingVals, conv, config2, havingNot, meta, field, true);
          havingNot = false;
        } else {
          var rule2 = convertOp2(conj, havingVals, conv, config2, havingNot, meta, field);
          havingNot = false;
          res = wrapInDefaultConjRuleGroup(rule2, field, fieldConfig, config2, conv.conjunctions["and"]);
        }
        if (!res)
          return void 0;
        res.type = "rule_group";
        Object.assign(res.properties, {
          field,
          mode: fieldConfig.mode,
          operator: opKey
        });
        if (fieldConfig.mode == "array") {
          Object.assign(res.properties, {
            value: convertedArgs.map(function(v2) {
              return v2.value;
            }),
            valueSrc: convertedArgs.map(function(v2) {
              return v2.valueSrc;
            }),
            valueType: convertedArgs.map(function(v2) {
              return v2.valueType;
            })
          });
        }
        if (not) {
          res = wrapInDefaultConj$1(res, config2, not);
        }
      } else if (fieldConfig.type == "!group" && !having) {
        res = {
          type: "rule_group",
          id: uuid$1(),
          children1: {},
          properties: {
            conjunction: defaultGroupConjunction$1(config2, fieldConfig),
            not,
            mode: fieldConfig.mode,
            field,
            operator: opKey
          }
        };
        if (fieldConfig.mode == "array") {
          Object.assign(res.properties, {
            value: convertedArgs.map(function(v2) {
              return v2.value;
            }),
            valueSrc: convertedArgs.map(function(v2) {
              return v2.valueSrc;
            }),
            valueType: convertedArgs.map(function(v2) {
              return v2.valueType;
            })
          });
        }
      } else {
        var asyncListValuesArr = convertedArgs.map(function(v2) {
          return v2.asyncListValues;
        }).filter(function(v2) {
          return v2 != void 0;
        });
        var asyncListValues = asyncListValuesArr.length ? asyncListValuesArr[0] : void 0;
        res = {
          type: "rule",
          id: uuid$1(),
          properties: _objectSpread$A({
            field,
            fieldSrc,
            operator: opKey,
            value: convertedArgs.map(function(v2) {
              return v2.value;
            }),
            valueSrc: convertedArgs.map(function(v2) {
              return v2.valueSrc;
            }),
            valueType: convertedArgs.map(function(v2) {
              return v2.valueType;
            })
          }, asyncListValues ? {
            asyncListValues
          } : {})
        };
        if (not) {
          res = wrapInDefaultConj$1(res, config2, not);
        }
      }
      return res;
    };
    var spel2js = { exports: {} };
    (function(module2, exports2) {
      (function webpackUniversalModuleDefinition(root2, factory) {
        module2.exports = factory();
      })(commonjsGlobal, function() {
        return (
          /******/
          function(modules) {
            var installedModules = {};
            function __webpack_require__(moduleId) {
              if (installedModules[moduleId]) {
                return installedModules[moduleId].exports;
              }
              var module3 = installedModules[moduleId] = {
                /******/
                i: moduleId,
                /******/
                l: false,
                /******/
                exports: {}
                /******/
              };
              modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
              module3.l = true;
              return module3.exports;
            }
            __webpack_require__.m = modules;
            __webpack_require__.c = installedModules;
            __webpack_require__.d = function(exports3, name, getter) {
              if (!__webpack_require__.o(exports3, name)) {
                Object.defineProperty(exports3, name, {
                  /******/
                  configurable: false,
                  /******/
                  enumerable: true,
                  /******/
                  get: getter
                  /******/
                });
              }
            };
            __webpack_require__.n = function(module3) {
              var getter = module3 && module3.__esModule ? (
                /******/
                function getDefault() {
                  return module3["default"];
                }
              ) : (
                /******/
                function getModuleExports() {
                  return module3;
                }
              );
              __webpack_require__.d(getter, "a", getter);
              return getter;
            };
            __webpack_require__.o = function(object, property2) {
              return Object.prototype.hasOwnProperty.call(object, property2);
            };
            __webpack_require__.p = "";
            return __webpack_require__(__webpack_require__.s = 3);
          }([
            /* 0 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              function createSpelNode(nodeType, position2) {
                var node2 = {}, type = nodeType || "Abstract", children = [], parent2 = null, activeContext;
                node2._type = type;
                node2.getType = function() {
                  return type;
                };
                node2.setType = function(nodeType2) {
                  type = nodeType2;
                };
                node2.getChildren = function() {
                  return children;
                };
                node2.addChild = function(childNode) {
                  if (!childNode) {
                    return;
                  }
                  if (!childNode.setParent) {
                    throw {
                      name: "Error",
                      message: "Trying to add a child which is not a node: " + JSON.stringify(childNode)
                    };
                  }
                  childNode.setParent(node2);
                  children.push(childNode);
                };
                node2.getParent = function() {
                  return parent2;
                };
                node2.setParent = function(parentNode) {
                  parent2 = parentNode;
                };
                node2.getContext = function(state) {
                  return activeContext || state.activeContext.peek();
                };
                node2.setContext = function(nodeContext) {
                  activeContext = nodeContext;
                };
                node2.getStartPosition = function() {
                  return position2 >> 16;
                };
                node2.getEndPosition = function() {
                  return position2 & 65535;
                };
                node2.getValue = function() {
                  throw {
                    name: "MethodNotImplementedException",
                    message: "SpelNode#getValue() must be overridden."
                  };
                };
                node2.toString = function() {
                  var s = "Kind: " + node2.getType();
                  s += ", Children: [";
                  for (var i = 0, l2 = node2.getChildren().length; i < l2; i += 1) {
                    s += "{" + node2.getChildren()[i] + "}, ";
                  }
                  s += "]";
                  return s;
                };
                if (position2 === 0) {
                  throw {
                    name: "Error",
                    message: "Position cannot be 0"
                  };
                }
                for (var _len = arguments.length, operands = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                  operands[_key - 2] = arguments[_key];
                }
                if (operands) {
                  operands.forEach(function(operand) {
                    node2.addChild(operand);
                  });
                }
                return node2;
              }
              exports3.SpelNode = {
                create: createSpelNode
              };
            },
            /* 1 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Stack = Stack2;
              function Stack2(startingElements) {
                this.elements = startingElements || [];
              }
              Stack2.prototype.push = function(el) {
                this.elements.push(el);
                return el;
              };
              Stack2.prototype.pop = function() {
                return this.elements.pop();
              };
              Stack2.prototype.peek = function() {
                return this.elements[this.elements.length - 1];
              };
              Stack2.prototype.empty = function() {
                return this.elements.length > 0;
              };
              Stack2.prototype.search = function(el) {
                return this.elements.length - this.elements.indexOf(el);
              };
            },
            /* 2 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              var types2 = {
                LITERAL_INT: 1,
                //tested
                LITERAL_LONG: 2,
                //tested
                LITERAL_HEXINT: 3,
                //tested
                LITERAL_HEXLONG: 4,
                //tested
                LITERAL_STRING: 5,
                //tested
                LITERAL_REAL: 6,
                //tested
                LITERAL_REAL_FLOAT: 7,
                //tested
                LPAREN: "(",
                //tested
                RPAREN: ")",
                //tested
                COMMA: ",",
                //tested
                IDENTIFIER: 0,
                //tested
                COLON: ":",
                //tested
                HASH: "#",
                //tested
                RSQUARE: "]",
                //tested
                LSQUARE: "[",
                //tested
                LCURLY: "{",
                //tested
                RCURLY: "}",
                //tested
                DOT: ".",
                //tested
                PLUS: "+",
                //tested
                STAR: "*",
                //tested
                MINUS: "-",
                //tested
                SELECT_FIRST: "^[",
                //tested
                SELECT_LAST: "$[",
                //tested
                QMARK: "?",
                //tested
                PROJECT: "![",
                //tested
                DIV: "/",
                //tested
                GE: ">=",
                //tested
                GT: ">",
                //tested
                LE: "<=",
                //tested
                LT: "<",
                //tested
                EQ: "==",
                //tested
                NE: "!=",
                //tested
                MOD: "%",
                //tested
                NOT: "!",
                //tested
                ASSIGN: "=",
                //tested
                INSTANCEOF: "instanceof",
                //test fails
                MATCHES: "matches",
                //test fails
                BETWEEN: "between",
                //test fails
                SELECT: "?[",
                //tested
                POWER: "^",
                //tested
                ELVIS: "?:",
                //tested
                SAFE_NAVI: "?.",
                //tested
                BEAN_REF: "@",
                //tested
                SYMBOLIC_OR: "||",
                //tested
                SYMBOLIC_AND: "&&",
                //tested
                INC: "++",
                //tested
                DEC: "--"
                //tested
              };
              function TokenKind(type) {
                this.type = type;
                this.tokenChars = types2[type];
                this._hasPayload = typeof types2[type] !== "string";
                if (typeof types2[type] === "number") {
                  this._ordinal = types2[type];
                }
              }
              for (var t2 in types2) {
                if (types2.hasOwnProperty(t2)) {
                  TokenKind[t2] = new TokenKind(t2);
                }
              }
              TokenKind.prototype.toString = function() {
                return this.type + (this.tokenChars.length !== 0 ? "(" + this.tokenChars + ")" : "");
              };
              TokenKind.prototype.getLength = function() {
                return this.tokenChars.length;
              };
              TokenKind.prototype.hasPayload = function() {
                return this._hasPayload;
              };
              TokenKind.prototype.valueOf = function(id2) {
                for (var t3 in types2) {
                  if (types2.hasOwnProperty(t3) && types2[t3] === id2) {
                    return TokenKind[t3];
                  }
                }
              };
              TokenKind.prototype.ordinal = function() {
                return this._ordinal;
              };
              exports3.TokenKind = TokenKind;
            },
            /* 3 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.StandardContext = exports3.SpelExpressionEvaluator = void 0;
              var _SpelExpressionEvaluator = __webpack_require__(4);
              var _StandardContext = __webpack_require__(50);
              exports3.SpelExpressionEvaluator = _SpelExpressionEvaluator.SpelExpressionEvaluator;
              exports3.StandardContext = _StandardContext.StandardContext;
            },
            /* 4 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.SpelExpressionEvaluator = void 0;
              var _SpelExpressionParser = __webpack_require__(5);
              var _Stack2 = __webpack_require__(1);
              var spelExpressionEvaluator = {};
              function evalCompiled(compiledExpression, context2, locals) {
                var activeContext = new _Stack2.Stack(), state;
                if (!context2) {
                  context2 = {};
                }
                activeContext.push(context2);
                state = {
                  rootContext: context2,
                  activeContext,
                  locals
                };
                return compiledExpression.getValue(state);
              }
              spelExpressionEvaluator.compile = function(expression) {
                var compiledExpression = (0, _SpelExpressionParser.SpelExpressionParser)().parse(expression);
                return {
                  eval: function _eval(context2, locals) {
                    return evalCompiled(compiledExpression, context2, locals);
                  },
                  _compiledExpression: compiledExpression
                };
              };
              spelExpressionEvaluator.eval = function(expression, context2, locals) {
                return spelExpressionEvaluator.compile(expression).eval(context2, locals);
              };
              exports3.SpelExpressionEvaluator = spelExpressionEvaluator;
            },
            /* 5 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.SpelExpressionParser = void 0;
              var _TokenKind = __webpack_require__(2);
              var _Tokenizer = __webpack_require__(6);
              var _BooleanLiteral = __webpack_require__(8);
              var _NumberLiteral = __webpack_require__(9);
              var _StringLiteral = __webpack_require__(10);
              var _NullLiteral = __webpack_require__(11);
              var _FunctionReference = __webpack_require__(12);
              var _MethodReference = __webpack_require__(13);
              var _PropertyReference = __webpack_require__(14);
              var _VariableReference = __webpack_require__(15);
              var _CompoundExpression = __webpack_require__(16);
              var _Indexer = __webpack_require__(17);
              var _Assign = __webpack_require__(18);
              var _OpEQ = __webpack_require__(19);
              var _OpNE = __webpack_require__(20);
              var _OpGE = __webpack_require__(21);
              var _OpGT = __webpack_require__(22);
              var _OpLE = __webpack_require__(23);
              var _OpLT = __webpack_require__(24);
              var _OpPlus = __webpack_require__(25);
              var _OpMinus = __webpack_require__(26);
              var _OpMultiply = __webpack_require__(27);
              var _OpDivide = __webpack_require__(28);
              var _OpModulus = __webpack_require__(29);
              var _OpPower = __webpack_require__(30);
              var _OpInc = __webpack_require__(31);
              var _OpDec = __webpack_require__(32);
              var _OpNot = __webpack_require__(33);
              var _OpAnd = __webpack_require__(34);
              var _OpOr = __webpack_require__(35);
              var _OpMatches = __webpack_require__(36);
              var _Ternary = __webpack_require__(37);
              var _Elvis = __webpack_require__(38);
              var _InlineList = __webpack_require__(39);
              var _InlineMap = __webpack_require__(40);
              var _Selection = __webpack_require__(41);
              var _Projection = __webpack_require__(42);
              var _OpInstanceof = __webpack_require__(43);
              var _OpBetween = __webpack_require__(44);
              var _TypeReference = __webpack_require__(45);
              var _BeanReference = __webpack_require__(46);
              var _Identifier = __webpack_require__(47);
              var _QualifiedIdentifier = __webpack_require__(48);
              var _ConstructorReference = __webpack_require__(49);
              exports3.SpelExpressionParser = function SpelExpressionParser() {
                var VALID_QUALIFIED_ID_PATTERN = new RegExp("[\\p{L}\\p{N}_$]+");
                var constructedNodes = [];
                var expressionString;
                var tokenStream;
                var tokenStreamLength;
                var tokenStreamPointer;
                function setConfiguration(config2) {
                }
                function parse2(expression, context2) {
                  try {
                    expressionString = expression;
                    tokenStream = _Tokenizer.Tokenizer.tokenize(expression);
                    tokenStreamLength = tokenStream.length;
                    tokenStreamPointer = 0;
                    constructedNodes = [];
                    var ast = eatExpression();
                    if (moreTokens()) {
                      raiseInternalException(peekToken().startPos, "MORE_INPUT", nextToken().toString());
                    }
                    return ast;
                  } catch (e2) {
                    throw e2.message;
                  }
                }
                function eatExpression() {
                  var expr = eatLogicalOrExpression();
                  if (moreTokens()) {
                    var token2 = peekToken();
                    if (token2.getKind() === _TokenKind.TokenKind.ASSIGN) {
                      if (expr === null) {
                        expr = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos - 1, token2.endPos - 1));
                      }
                      nextToken();
                      var assignedValue = eatLogicalOrExpression();
                      return _Assign.Assign.create(toPosToken(token2), expr, assignedValue);
                    }
                    if (token2.getKind() === _TokenKind.TokenKind.ELVIS) {
                      if (expr === null) {
                        expr = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos - 1, token2.endPos - 2));
                      }
                      nextToken();
                      var valueIfNull = eatExpression();
                      if (valueIfNull === null) {
                        valueIfNull = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos + 1, token2.endPos + 1));
                      }
                      return _Elvis.Elvis.create(toPosToken(token2), expr, valueIfNull);
                    }
                    if (token2.getKind() === _TokenKind.TokenKind.QMARK) {
                      if (expr === null) {
                        expr = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos - 1, token2.endPos - 1));
                      }
                      nextToken();
                      var ifTrueExprValue = eatExpression();
                      eatToken(_TokenKind.TokenKind.COLON);
                      var ifFalseExprValue = eatExpression();
                      return _Ternary.Ternary.create(toPosToken(token2), expr, ifTrueExprValue, ifFalseExprValue);
                    }
                  }
                  return expr;
                }
                function eatLogicalOrExpression() {
                  var expr = eatLogicalAndExpression();
                  while (peekIdentifierToken("or") || peekTokenOne(_TokenKind.TokenKind.SYMBOLIC_OR)) {
                    var token2 = nextToken();
                    var rhExpr = eatLogicalAndExpression();
                    checkOperands(token2, expr, rhExpr);
                    expr = _OpOr.OpOr.create(toPosToken(token2), expr, rhExpr);
                  }
                  return expr;
                }
                function eatLogicalAndExpression() {
                  var expr = eatRelationalExpression();
                  while (peekIdentifierToken("and") || peekTokenOne(_TokenKind.TokenKind.SYMBOLIC_AND)) {
                    var token2 = nextToken();
                    var rhExpr = eatRelationalExpression();
                    checkOperands(token2, expr, rhExpr);
                    expr = _OpAnd.OpAnd.create(toPosToken(token2), expr, rhExpr);
                  }
                  return expr;
                }
                function eatRelationalExpression() {
                  var expr = eatSumExpression();
                  var relationalOperatorToken = maybeEatRelationalOperator();
                  if (relationalOperatorToken !== null) {
                    var token2 = nextToken();
                    var rhExpr = eatSumExpression();
                    checkOperands(token2, expr, rhExpr);
                    var tk2 = relationalOperatorToken.kind;
                    if (relationalOperatorToken.isNumericRelationalOperator()) {
                      var pos = toPosToken(token2);
                      if (tk2 === _TokenKind.TokenKind.GT) {
                        return _OpGT.OpGT.create(pos, expr, rhExpr);
                      }
                      if (tk2 === _TokenKind.TokenKind.LT) {
                        return _OpLT.OpLT.create(pos, expr, rhExpr);
                      }
                      if (tk2 === _TokenKind.TokenKind.LE) {
                        return _OpLE.OpLE.create(pos, expr, rhExpr);
                      }
                      if (tk2 === _TokenKind.TokenKind.GE) {
                        return _OpGE.OpGE.create(pos, expr, rhExpr);
                      }
                      if (tk2 === _TokenKind.TokenKind.EQ) {
                        return _OpEQ.OpEQ.create(pos, expr, rhExpr);
                      }
                      return _OpNE.OpNE.create(pos, expr, rhExpr);
                    }
                    if (tk2 === _TokenKind.TokenKind.INSTANCEOF) {
                      return _OpInstanceof.OpInstanceof.create(toPosToken(token2), expr, rhExpr);
                    }
                    if (tk2 === _TokenKind.TokenKind.MATCHES) {
                      return _OpMatches.OpMatches.create(toPosToken(token2), expr, rhExpr);
                    }
                    return _OpBetween.OpBetween.create(toPosToken(token2), expr, rhExpr);
                  }
                  return expr;
                }
                function eatSumExpression() {
                  var expr = eatProductExpression();
                  while (peekTokenAny(_TokenKind.TokenKind.PLUS, _TokenKind.TokenKind.MINUS, _TokenKind.TokenKind.INC)) {
                    var token2 = nextToken();
                    var rhExpr = eatProductExpression();
                    checkRightOperand(token2, rhExpr);
                    if (token2.getKind() === _TokenKind.TokenKind.PLUS) {
                      expr = _OpPlus.OpPlus.create(toPosToken(token2), expr, rhExpr);
                    } else if (token2.getKind() === _TokenKind.TokenKind.MINUS) {
                      expr = _OpMinus.OpMinus.create(toPosToken(token2), expr, rhExpr);
                    }
                  }
                  return expr;
                }
                function eatProductExpression() {
                  var expr = eatPowerIncDecExpression();
                  while (peekTokenAny(_TokenKind.TokenKind.STAR, _TokenKind.TokenKind.DIV, _TokenKind.TokenKind.MOD)) {
                    var token2 = nextToken();
                    var rhExpr = eatPowerIncDecExpression();
                    checkOperands(token2, expr, rhExpr);
                    if (token2.getKind() === _TokenKind.TokenKind.STAR) {
                      expr = _OpMultiply.OpMultiply.create(toPosToken(token2), expr, rhExpr);
                    } else if (token2.getKind() === _TokenKind.TokenKind.DIV) {
                      expr = _OpDivide.OpDivide.create(toPosToken(token2), expr, rhExpr);
                    } else {
                      expr = _OpModulus.OpModulus.create(toPosToken(token2), expr, rhExpr);
                    }
                  }
                  return expr;
                }
                function eatPowerIncDecExpression() {
                  var expr = eatUnaryExpression(), token2;
                  if (peekTokenOne(_TokenKind.TokenKind.POWER)) {
                    token2 = nextToken();
                    var rhExpr = eatUnaryExpression();
                    checkRightOperand(token2, rhExpr);
                    return _OpPower.OpPower.create(toPosToken(token2), expr, rhExpr);
                  }
                  if (expr !== null && peekTokenAny(_TokenKind.TokenKind.INC, _TokenKind.TokenKind.DEC)) {
                    token2 = nextToken();
                    if (token2.getKind() === _TokenKind.TokenKind.INC) {
                      return _OpInc.OpInc.create(toPosToken(token2), true, expr);
                    }
                    return _OpDec.OpDec.create(toPosToken(token2), true, expr);
                  }
                  return expr;
                }
                function eatUnaryExpression() {
                  var token2, expr;
                  if (peekTokenAny(_TokenKind.TokenKind.PLUS, _TokenKind.TokenKind.MINUS, _TokenKind.TokenKind.NOT)) {
                    token2 = nextToken();
                    expr = eatUnaryExpression();
                    if (token2.getKind() === _TokenKind.TokenKind.NOT) {
                      return _OpNot.OpNot.create(toPosToken(token2), expr);
                    }
                    if (token2.getKind() === _TokenKind.TokenKind.PLUS) {
                      return _OpPlus.OpPlus.create(toPosToken(token2), expr);
                    }
                    return _OpMinus.OpMinus.create(toPosToken(token2), expr);
                  }
                  if (peekTokenAny(_TokenKind.TokenKind.INC, _TokenKind.TokenKind.DEC)) {
                    token2 = nextToken();
                    expr = eatUnaryExpression();
                    if (token2.getKind() === _TokenKind.TokenKind.INC) {
                      return _OpInc.OpInc.create(toPosToken(token2), false, expr);
                    }
                    return _OpDec.OpDec.create(toPosToken(token2), false, expr);
                  }
                  return eatPrimaryExpression();
                }
                function eatPrimaryExpression() {
                  var nodes = [];
                  var start2 = eatStartNode();
                  nodes.push(start2);
                  while (maybeEatNode()) {
                    nodes.push(pop());
                  }
                  if (nodes.length === 1) {
                    return nodes[0];
                  }
                  return _CompoundExpression.CompoundExpression.create(toPosBounds(start2.getStartPosition(), nodes[nodes.length - 1].getEndPosition()), nodes);
                }
                function maybeEatNode() {
                  var expr = null;
                  if (peekTokenAny(_TokenKind.TokenKind.DOT, _TokenKind.TokenKind.SAFE_NAVI)) {
                    expr = eatDottedNode();
                  } else {
                    expr = maybeEatNonDottedNode();
                  }
                  if (expr === null) {
                    return false;
                  } else {
                    push(expr);
                    return true;
                  }
                }
                function maybeEatNonDottedNode() {
                  if (peekTokenOne(_TokenKind.TokenKind.LSQUARE)) {
                    if (maybeEatIndexer()) {
                      return pop();
                    }
                  }
                  return null;
                }
                function eatDottedNode() {
                  var token2 = nextToken();
                  var nullSafeNavigation = token2.getKind() === _TokenKind.TokenKind.SAFE_NAVI;
                  if (maybeEatMethodOrProperty(nullSafeNavigation) || maybeEatFunctionOrVar() || maybeEatProjection(nullSafeNavigation) || maybeEatSelection(nullSafeNavigation)) {
                    return pop();
                  }
                  if (peekToken() === null) {
                    raiseInternalException(token2.startPos, "OOD");
                  } else {
                    raiseInternalException(token2.startPos, "UNEXPECTED_DATA_AFTER_DOT", toString2(peekToken()));
                  }
                  return null;
                }
                function maybeEatFunctionOrVar() {
                  if (!peekTokenOne(_TokenKind.TokenKind.HASH)) {
                    return false;
                  }
                  var token2 = nextToken();
                  var functionOrVariableName = eatToken(_TokenKind.TokenKind.IDENTIFIER);
                  var args = maybeEatMethodArgs();
                  if (args === null) {
                    push(_VariableReference.VariableReference.create(functionOrVariableName.data, toPosBounds(token2.startPos, functionOrVariableName.endPos)));
                    return true;
                  }
                  push(_FunctionReference.FunctionReference.create(functionOrVariableName.data, toPosBounds(token2.startPos, functionOrVariableName.endPos), args));
                  return true;
                }
                function maybeEatMethodArgs() {
                  if (!peekTokenOne(_TokenKind.TokenKind.LPAREN)) {
                    return null;
                  }
                  var args = [];
                  consumeArguments(args);
                  eatToken(_TokenKind.TokenKind.RPAREN);
                  return args;
                }
                function eatConstructorArgs(accumulatedArguments) {
                  if (!peekTokenOne(_TokenKind.TokenKind.LPAREN)) {
                    raiseInternalException(toPosToken(peekToken()), "MISSING_CONSTRUCTOR_ARGS");
                  }
                  consumeArguments(accumulatedArguments);
                  eatToken(_TokenKind.TokenKind.RPAREN);
                }
                function consumeArguments(accumulatedArguments) {
                  var pos = peekToken().startPos;
                  var next2;
                  do {
                    nextToken();
                    var token2 = peekToken();
                    if (token2 === null) {
                      raiseInternalException(pos, "RUN_OUT_OF_ARGUMENTS");
                    }
                    if (token2.getKind() !== _TokenKind.TokenKind.RPAREN) {
                      accumulatedArguments.push(eatExpression());
                    }
                    next2 = peekToken();
                  } while (next2 !== null && next2.kind === _TokenKind.TokenKind.COMMA);
                  if (next2 === null) {
                    raiseInternalException(pos, "RUN_OUT_OF_ARGUMENTS");
                  }
                }
                function eatStartNode() {
                  if (maybeEatLiteral()) {
                    return pop();
                  } else if (maybeEatParenExpression()) {
                    return pop();
                  } else if (maybeEatTypeReference() || maybeEatNullReference() || maybeEatConstructorReference() || maybeEatMethodOrProperty(false) || maybeEatFunctionOrVar()) {
                    return pop();
                  } else if (maybeEatBeanReference()) {
                    return pop();
                  } else if (maybeEatProjection(false) || maybeEatSelection(false) || maybeEatIndexer()) {
                    return pop();
                  } else if (maybeEatInlineListOrMap()) {
                    return pop();
                  } else {
                    return null;
                  }
                }
                function maybeEatBeanReference() {
                  if (peekTokenOne(_TokenKind.TokenKind.BEAN_REF)) {
                    var beanRefToken = nextToken();
                    var beanNameToken = null;
                    var beanName = null;
                    if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                      beanNameToken = eatToken(_TokenKind.TokenKind.IDENTIFIER);
                      beanName = beanNameToken.data;
                    } else if (peekTokenOne(_TokenKind.TokenKind.LITERAL_STRING)) {
                      beanNameToken = eatToken(_TokenKind.TokenKind.LITERAL_STRING);
                      beanName = beanNameToken.stringValue();
                      beanName = beanName.substring(1, beanName.length() - 1);
                    } else {
                      raiseInternalException(beanRefToken.startPos, "INVALID_BEAN_REFERENCE");
                    }
                    var beanReference = _BeanReference.BeanReference.create(toPosToken(beanNameToken), beanName);
                    push(beanReference);
                    return true;
                  }
                  return false;
                }
                function maybeEatTypeReference() {
                  if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                    var typeName = peekToken();
                    if (typeName.stringValue() !== "T") {
                      return false;
                    }
                    var token2 = nextToken();
                    if (peekTokenOne(_TokenKind.TokenKind.RSQUARE)) {
                      push(_PropertyReference.PropertyReference.create(token2.stringValue(), toPosToken(token2)));
                      return true;
                    }
                    eatToken(_TokenKind.TokenKind.LPAREN);
                    var node2 = eatPossiblyQualifiedId();
                    var dims = 0;
                    while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.LSQUARE, true)) {
                      eatToken(_TokenKind.TokenKind.RSQUARE);
                      dims++;
                    }
                    eatToken(_TokenKind.TokenKind.RPAREN);
                    push(_TypeReference.TypeReference.create(toPosToken(typeName), node2, dims));
                    return true;
                  }
                  return false;
                }
                function maybeEatNullReference() {
                  if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                    var nullToken = peekToken();
                    if (nullToken.stringValue().toLowerCase() !== "null") {
                      return false;
                    }
                    nextToken();
                    push(_NullLiteral.NullLiteral.create(toPosToken(nullToken)));
                    return true;
                  }
                  return false;
                }
                function maybeEatProjection(nullSafeNavigation) {
                  var token2 = peekToken();
                  if (!peekTokenConsumeIfMatched(_TokenKind.TokenKind.PROJECT, true)) {
                    return false;
                  }
                  var expr = eatExpression();
                  eatToken(_TokenKind.TokenKind.RSQUARE);
                  push(_Projection.Projection.create(nullSafeNavigation, toPosToken(token2), expr));
                  return true;
                }
                function maybeEatInlineListOrMap() {
                  var token2 = peekToken(), listElements = [];
                  if (!peekTokenConsumeIfMatched(_TokenKind.TokenKind.LCURLY, true)) {
                    return false;
                  }
                  var expr = null;
                  var closingCurly = peekToken();
                  if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.RCURLY, true)) {
                    expr = _InlineList.InlineList.create(toPosBounds(token2.startPos, closingCurly.endPos));
                  } else if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COLON, true)) {
                    closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                    expr = _InlineMap.InlineMap.create(toPosBounds(token2.startPos, closingCurly.endPos));
                  } else {
                    var firstExpression = eatExpression();
                    if (peekTokenOne(_TokenKind.TokenKind.RCURLY)) {
                      listElements.push(firstExpression);
                      closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                      expr = _InlineList.InlineList.create(toPosBounds(token2.startPos, closingCurly.endPos), listElements);
                    } else if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COMMA, true)) {
                      listElements.push(firstExpression);
                      do {
                        listElements.push(eatExpression());
                      } while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COMMA, true));
                      closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                      expr = _InlineList.InlineList.create(toPosToken(token2.startPos, closingCurly.endPos), listElements);
                    } else if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COLON, true)) {
                      var mapElements = [];
                      mapElements.push(firstExpression);
                      mapElements.push(eatExpression());
                      while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COMMA, true)) {
                        mapElements.push(eatExpression());
                        eatToken(_TokenKind.TokenKind.COLON);
                        mapElements.push(eatExpression());
                      }
                      closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                      expr = _InlineMap.InlineMap.create(toPosBounds(token2.startPos, closingCurly.endPos), mapElements);
                    } else {
                      raiseInternalException(token2.startPos, "OOD");
                    }
                  }
                  push(expr);
                  return true;
                }
                function maybeEatIndexer() {
                  var token2 = peekToken();
                  if (!peekTokenConsumeIfMatched(_TokenKind.TokenKind.LSQUARE, true)) {
                    return false;
                  }
                  var expr = eatExpression();
                  eatToken(_TokenKind.TokenKind.RSQUARE);
                  push(_Indexer.Indexer.create(toPosToken(token2), expr));
                  return true;
                }
                function maybeEatSelection(nullSafeNavigation) {
                  var token2 = peekToken();
                  if (!peekSelectToken()) {
                    return false;
                  }
                  nextToken();
                  var expr = eatExpression();
                  if (expr === null) {
                    raiseInternalException(toPosToken(token2), "MISSING_SELECTION_EXPRESSION");
                  }
                  eatToken(_TokenKind.TokenKind.RSQUARE);
                  if (token2.getKind() === _TokenKind.TokenKind.SELECT_FIRST) {
                    push(_Selection.Selection.create(nullSafeNavigation, _Selection.Selection.FIRST, toPosToken(token2), expr));
                  } else if (token2.getKind() === _TokenKind.TokenKind.SELECT_LAST) {
                    push(_Selection.Selection.create(nullSafeNavigation, _Selection.Selection.LAST, toPosToken(token2), expr));
                  } else {
                    push(_Selection.Selection.create(nullSafeNavigation, _Selection.Selection.ALL, toPosToken(token2), expr));
                  }
                  return true;
                }
                function eatPossiblyQualifiedId() {
                  var qualifiedIdPieces = [];
                  var node2 = peekToken();
                  while (isValidQualifiedId(node2)) {
                    nextToken();
                    if (node2.kind !== _TokenKind.TokenKind.DOT) {
                      qualifiedIdPieces.push(_Identifier.Identifier.create(node2.stringValue(), toPosToken(node2)));
                    }
                    node2 = peekToken();
                  }
                  if (!qualifiedIdPieces.length) {
                    if (node2 === null) {
                      raiseInternalException(expressionString.length(), "OOD");
                    }
                    raiseInternalException(node2.startPos, "NOT_EXPECTED_TOKEN", "qualified ID", node2.getKind().toString().toLowerCase());
                  }
                  var pos = toPosBounds(qualifiedIdPieces[0].getStartPosition(), qualifiedIdPieces[qualifiedIdPieces.length - 1].getEndPosition());
                  return _QualifiedIdentifier.QualifiedIdentifier.create(pos, qualifiedIdPieces);
                }
                function isValidQualifiedId(node2) {
                  if (node2 === null || node2.kind === _TokenKind.TokenKind.LITERAL_STRING) {
                    return false;
                  }
                  if (node2.kind === _TokenKind.TokenKind.DOT || node2.kind === _TokenKind.TokenKind.IDENTIFIER) {
                    return true;
                  }
                  var value2 = node2.stringValue();
                  return value2 && value2.length && VALID_QUALIFIED_ID_PATTERN.test(value2);
                }
                function maybeEatMethodOrProperty(nullSafeNavigation) {
                  if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                    var methodOrPropertyName = nextToken();
                    var args = maybeEatMethodArgs();
                    if (args === null) {
                      push(_PropertyReference.PropertyReference.create(nullSafeNavigation, methodOrPropertyName.stringValue(), toPosToken(methodOrPropertyName)));
                      return true;
                    }
                    push(_MethodReference.MethodReference.create(nullSafeNavigation, methodOrPropertyName.stringValue(), toPosToken(methodOrPropertyName), args));
                    return true;
                  }
                  return false;
                }
                function maybeEatConstructorReference() {
                  if (peekIdentifierToken("new")) {
                    var newToken = nextToken();
                    if (peekTokenOne(_TokenKind.TokenKind.RSQUARE)) {
                      push(_PropertyReference.PropertyReference.create(newToken.stringValue(), toPosToken(newToken)));
                      return true;
                    }
                    var possiblyQualifiedConstructorName = eatPossiblyQualifiedId();
                    var nodes = [];
                    nodes.push(possiblyQualifiedConstructorName);
                    if (peekTokenOne(_TokenKind.TokenKind.LSQUARE)) {
                      var dimensions = [];
                      while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.LSQUARE, true)) {
                        if (!peekTokenOne(_TokenKind.TokenKind.RSQUARE)) {
                          dimensions.push(eatExpression());
                        } else {
                          dimensions.push(null);
                        }
                        eatToken(_TokenKind.TokenKind.RSQUARE);
                      }
                      if (maybeEatInlineListOrMap()) {
                        nodes.push(pop());
                      }
                      push(_ConstructorReference.ConstructorReference.create(toPosToken(newToken), dimensions, nodes));
                    } else {
                      eatConstructorArgs(nodes);
                      push(_ConstructorReference.ConstructorReference.create(toPosToken(newToken), nodes));
                    }
                    return true;
                  }
                  return false;
                }
                function push(newNode) {
                  constructedNodes.push(newNode);
                }
                function pop() {
                  return constructedNodes.pop();
                }
                function maybeEatLiteral() {
                  var token2 = peekToken();
                  if (token2 === null) {
                    return false;
                  }
                  if (token2.getKind() === _TokenKind.TokenKind.LITERAL_INT || token2.getKind() === _TokenKind.TokenKind.LITERAL_LONG) {
                    push(_NumberLiteral.NumberLiteral.create(parseInt(token2.stringValue(), 10), toPosToken(token2)));
                  } else if (token2.getKind() === _TokenKind.TokenKind.LITERAL_REAL || token2.getKind() === _TokenKind.TokenKind.LITERAL_REAL_FLOAT) {
                    push(_NumberLiteral.NumberLiteral.create(parseFloat(token2.stringValue()), toPosToken(token2)));
                  } else if (token2.getKind() === _TokenKind.TokenKind.LITERAL_HEXINT || token2.getKind() === _TokenKind.TokenKind.LITERAL_HEXLONG) {
                    push(_NumberLiteral.NumberLiteral.create(parseInt(token2.stringValue(), 16), toPosToken(token2)));
                  } else if (peekIdentifierToken("true")) {
                    push(_BooleanLiteral.BooleanLiteral.create(true, toPosToken(token2)));
                  } else if (peekIdentifierToken("false")) {
                    push(_BooleanLiteral.BooleanLiteral.create(false, toPosToken(token2)));
                  } else if (token2.getKind() === _TokenKind.TokenKind.LITERAL_STRING) {
                    push(_StringLiteral.StringLiteral.create(token2.stringValue(), toPosToken(token2)));
                  } else {
                    return false;
                  }
                  nextToken();
                  return true;
                }
                function maybeEatParenExpression() {
                  if (peekTokenOne(_TokenKind.TokenKind.LPAREN)) {
                    nextToken();
                    var expr = eatExpression();
                    eatToken(_TokenKind.TokenKind.RPAREN);
                    push(expr);
                    return true;
                  } else {
                    return false;
                  }
                }
                function maybeEatRelationalOperator() {
                  var token2 = peekToken();
                  if (token2 === null) {
                    return null;
                  }
                  if (token2.isNumericRelationalOperator()) {
                    return token2;
                  }
                  if (token2.isIdentifier()) {
                    var idString = token2.stringValue();
                    if (idString.toLowerCase() === "instanceof") {
                      return token2.asInstanceOfToken();
                    }
                    if (idString.toLowerCase() === "matches") {
                      return token2.asMatchesToken();
                    }
                    if (idString.toLowerCase() === "between") {
                      return token2.asBetweenToken();
                    }
                  }
                  return null;
                }
                function eatToken(expectedKind) {
                  var token2 = nextToken();
                  if (token2 === null) {
                    raiseInternalException(expressionString.length, "OOD");
                  }
                  if (token2.getKind() !== expectedKind) {
                    raiseInternalException(token2.startPos, "NOT_EXPECTED_TOKEN", expectedKind.toString().toLowerCase(), token2.getKind().toString().toLowerCase());
                  }
                  return token2;
                }
                function peekTokenOne(desiredTokenKind) {
                  return peekTokenConsumeIfMatched(desiredTokenKind, false);
                }
                function peekTokenConsumeIfMatched(desiredTokenKind, consumeIfMatched) {
                  if (!moreTokens()) {
                    return false;
                  }
                  var token2 = peekToken();
                  if (token2.getKind() === desiredTokenKind) {
                    if (consumeIfMatched) {
                      tokenStreamPointer++;
                    }
                    return true;
                  }
                  if (desiredTokenKind === _TokenKind.TokenKind.IDENTIFIER) {
                    if (token2.getKind().ordinal() >= _TokenKind.TokenKind.DIV.ordinal() && token2.getKind().ordinal() <= _TokenKind.TokenKind.NOT.ordinal() && token2.data !== null) {
                      return true;
                    }
                  }
                  return false;
                }
                function peekTokenAny() {
                  if (!moreTokens()) {
                    return false;
                  }
                  var token2 = peekToken();
                  var args = Array.prototype.slice.call(arguments);
                  for (var i = 0, l2 = args.length; i < l2; i += 1) {
                    if (token2.getKind() === args[i]) {
                      return true;
                    }
                  }
                  return false;
                }
                function peekIdentifierToken(identifierString) {
                  if (!moreTokens()) {
                    return false;
                  }
                  var token2 = peekToken();
                  return token2.getKind() === _TokenKind.TokenKind.IDENTIFIER && token2.stringValue().toLowerCase() === identifierString.toLowerCase();
                }
                function peekSelectToken() {
                  if (!moreTokens()) {
                    return false;
                  }
                  var token2 = peekToken();
                  return token2.getKind() === _TokenKind.TokenKind.SELECT || token2.getKind() === _TokenKind.TokenKind.SELECT_FIRST || token2.getKind() === _TokenKind.TokenKind.SELECT_LAST;
                }
                function moreTokens() {
                  return tokenStreamPointer < tokenStream.length;
                }
                function nextToken() {
                  if (tokenStreamPointer >= tokenStreamLength) {
                    return null;
                  }
                  return tokenStream[tokenStreamPointer++];
                }
                function peekToken() {
                  if (tokenStreamPointer >= tokenStreamLength) {
                    return null;
                  }
                  return tokenStream[tokenStreamPointer];
                }
                function raiseInternalException(pos, message, expected, actual) {
                  if (expected) {
                    message += "\nExpected: " + expected;
                  }
                  if (actual) {
                    message += "\nActual: " + actual;
                  }
                  throw {
                    name: "InternalParseException",
                    message: "Error occurred while attempting to parse expression '" + expressionString + "' at position " + pos + ". Message: " + message
                  };
                }
                function toString2(token2) {
                  if (token2.getKind().hasPayload()) {
                    return token2.stringValue();
                  }
                  return token2.getKind().toString().toLowerCase();
                }
                function checkOperands(token2, left2, right2) {
                  checkLeftOperand(token2, left2);
                  checkRightOperand(token2, right2);
                }
                function checkLeftOperand(token2, operandExpression) {
                  if (operandExpression === null) {
                    raiseInternalException(token2.startPos, "LEFT_OPERAND_PROBLEM");
                  }
                }
                function checkRightOperand(token2, operandExpression) {
                  if (operandExpression === null) {
                    raiseInternalException(token2.startPos, "RIGHT_OPERAND_PROBLEM");
                  }
                }
                function toPosToken(token2) {
                  return (token2.startPos << 16) + token2.endPos;
                }
                function toPosBounds(start2, end2) {
                  return (start2 << 16) + end2;
                }
                return {
                  setConfiguration,
                  parse: parse2
                };
              };
            },
            /* 6 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Tokenizer = void 0;
              var _Token = __webpack_require__(7);
              var _TokenKind = __webpack_require__(2);
              var ALTERNATIVE_OPERATOR_NAMES = ["DIV", "EQ", "GE", "GT", "LE", "LT", "MOD", "NE", "NOT"], FLAGS = [], IS_DIGIT = 1, IS_HEXDIGIT = 2, IS_ALPHA = 4;
              function init() {
                var ch2;
                for (ch2 = "0".charCodeAt(0); ch2 <= "9".charCodeAt(0); ch2 += 1) {
                  FLAGS[ch2] |= IS_DIGIT | IS_HEXDIGIT;
                }
                for (ch2 = "A".charCodeAt(0); ch2 <= "F".charCodeAt(0); ch2 += 1) {
                  FLAGS[ch2] |= IS_HEXDIGIT;
                }
                for (ch2 = "a".charCodeAt(0); ch2 <= "f".charCodeAt(0); ch2 += 1) {
                  FLAGS[ch2] |= IS_HEXDIGIT;
                }
                for (ch2 = "A".charCodeAt(0); ch2 <= "Z".charCodeAt(0); ch2 += 1) {
                  FLAGS[ch2] |= IS_ALPHA;
                }
                for (ch2 = "a".charCodeAt(0); ch2 <= "z".charCodeAt(0); ch2 += 1) {
                  FLAGS[ch2] |= IS_ALPHA;
                }
              }
              init();
              function tokenize(inputData) {
                var expressionString = inputData, toProcess = inputData + "\0", max2 = toProcess.length, pos = 0, tokens2 = [];
                function process2() {
                  var ch2;
                  while (pos < max2) {
                    ch2 = toProcess[pos];
                    if (isAlphabetic(ch2)) {
                      lexIdentifier();
                    } else {
                      switch (ch2) {
                        case "+":
                          if (isTwoCharToken(_TokenKind.TokenKind.INC)) {
                            pushPairToken(_TokenKind.TokenKind.INC);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.PLUS);
                          }
                          break;
                        case "_":
                          lexIdentifier();
                          break;
                        case "-":
                          if (isTwoCharToken(_TokenKind.TokenKind.DEC)) {
                            pushPairToken(_TokenKind.TokenKind.DEC);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.MINUS);
                          }
                          break;
                        case ":":
                          pushCharToken(_TokenKind.TokenKind.COLON);
                          break;
                        case ".":
                          pushCharToken(_TokenKind.TokenKind.DOT);
                          break;
                        case ",":
                          pushCharToken(_TokenKind.TokenKind.COMMA);
                          break;
                        case "*":
                          pushCharToken(_TokenKind.TokenKind.STAR);
                          break;
                        case "/":
                          pushCharToken(_TokenKind.TokenKind.DIV);
                          break;
                        case "%":
                          pushCharToken(_TokenKind.TokenKind.MOD);
                          break;
                        case "(":
                          pushCharToken(_TokenKind.TokenKind.LPAREN);
                          break;
                        case ")":
                          pushCharToken(_TokenKind.TokenKind.RPAREN);
                          break;
                        case "[":
                          pushCharToken(_TokenKind.TokenKind.LSQUARE);
                          break;
                        case "#":
                          pushCharToken(_TokenKind.TokenKind.HASH);
                          break;
                        case "]":
                          pushCharToken(_TokenKind.TokenKind.RSQUARE);
                          break;
                        case "{":
                          pushCharToken(_TokenKind.TokenKind.LCURLY);
                          break;
                        case "}":
                          pushCharToken(_TokenKind.TokenKind.RCURLY);
                          break;
                        case "@":
                          pushCharToken(_TokenKind.TokenKind.BEAN_REF);
                          break;
                        case "^":
                          if (isTwoCharToken(_TokenKind.TokenKind.SELECT_FIRST)) {
                            pushPairToken(_TokenKind.TokenKind.SELECT_FIRST);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.POWER);
                          }
                          break;
                        case "!":
                          if (isTwoCharToken(_TokenKind.TokenKind.NE)) {
                            pushPairToken(_TokenKind.TokenKind.NE);
                          } else if (isTwoCharToken(_TokenKind.TokenKind.PROJECT)) {
                            pushPairToken(_TokenKind.TokenKind.PROJECT);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.NOT);
                          }
                          break;
                        case "=":
                          if (isTwoCharToken(_TokenKind.TokenKind.EQ)) {
                            pushPairToken(_TokenKind.TokenKind.EQ);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.ASSIGN);
                          }
                          break;
                        case "&":
                          if (!isTwoCharToken(_TokenKind.TokenKind.SYMBOLIC_AND)) {
                            throw {
                              name: "SpelParseException",
                              message: "Missing character '&' in expression (" + expressionString + ") at position " + pos
                            };
                          }
                          pushPairToken(_TokenKind.TokenKind.SYMBOLIC_AND);
                          break;
                        case "|":
                          if (!isTwoCharToken(_TokenKind.TokenKind.SYMBOLIC_OR)) {
                            throw {
                              name: "SpelParseException",
                              message: "Missing character '|' in expression (" + expressionString + ") at position " + pos
                            };
                          }
                          pushPairToken(_TokenKind.TokenKind.SYMBOLIC_OR);
                          break;
                        case "?":
                          if (isTwoCharToken(_TokenKind.TokenKind.SELECT)) {
                            pushPairToken(_TokenKind.TokenKind.SELECT);
                          } else if (isTwoCharToken(_TokenKind.TokenKind.ELVIS)) {
                            pushPairToken(_TokenKind.TokenKind.ELVIS);
                          } else if (isTwoCharToken(_TokenKind.TokenKind.SAFE_NAVI)) {
                            pushPairToken(_TokenKind.TokenKind.SAFE_NAVI);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.QMARK);
                          }
                          break;
                        case "$":
                          if (isTwoCharToken(_TokenKind.TokenKind.SELECT_LAST)) {
                            pushPairToken(_TokenKind.TokenKind.SELECT_LAST);
                          } else {
                            lexIdentifier();
                          }
                          break;
                        case ">":
                          if (isTwoCharToken(_TokenKind.TokenKind.GE)) {
                            pushPairToken(_TokenKind.TokenKind.GE);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.GT);
                          }
                          break;
                        case "<":
                          if (isTwoCharToken(_TokenKind.TokenKind.LE)) {
                            pushPairToken(_TokenKind.TokenKind.LE);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.LT);
                          }
                          break;
                        case "0":
                        case "1":
                        case "2":
                        case "3":
                        case "4":
                        case "5":
                        case "6":
                        case "7":
                        case "8":
                        case "9":
                          lexNumericLiteral(ch2 === "0");
                          break;
                        case " ":
                        case "	":
                        case "\r":
                        case "\n":
                          pos += 1;
                          break;
                        case "'":
                          lexQuotedStringLiteral();
                          break;
                        case '"':
                          lexDoubleQuotedStringLiteral();
                          break;
                        case "\0":
                          pos += 1;
                          break;
                        case "\\":
                          throw {
                            name: "SpelParseException",
                            message: "Unexpected escape character in expression (" + expressionString + ") at position " + pos
                          };
                        default:
                          throw {
                            name: "SpelParseException",
                            message: "Cannot handle character '" + ch2 + "' in expression (" + expressionString + ") at position " + pos
                          };
                      }
                    }
                  }
                }
                function lexQuotedStringLiteral() {
                  var start2 = pos, terminated = false, ch2;
                  while (!terminated) {
                    pos += 1;
                    ch2 = toProcess[pos];
                    if (ch2 === "'") {
                      if (toProcess[pos + 1] === "'") {
                        pos += 1;
                      } else {
                        terminated = true;
                      }
                    }
                    if (ch2.charCodeAt(0) === 0) {
                      throw {
                        name: "SpelParseException",
                        message: "Non-terminating quoted string in expression (" + expressionString + ") at position " + pos
                      };
                    }
                  }
                  pos += 1;
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_STRING, subarray(start2, pos), start2, pos));
                }
                function lexDoubleQuotedStringLiteral() {
                  var start2 = pos, terminated = false, ch2;
                  while (!terminated) {
                    pos += 1;
                    ch2 = toProcess[pos];
                    if (ch2 === '"') {
                      if (toProcess[pos + 1] === '"') {
                        pos += 1;
                      } else {
                        terminated = true;
                      }
                    }
                    if (ch2.charCodeAt(0) === 0) {
                      throw {
                        name: "SpelParseException",
                        message: "Non-terminating double-quoted string in expression (" + expressionString + ") at position " + pos
                      };
                    }
                  }
                  pos += 1;
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_STRING, subarray(start2, pos), start2, pos));
                }
                function lexNumericLiteral(firstCharIsZero) {
                  var isReal = false, start2 = pos, ch2 = toProcess[pos + 1], isHex = ch2 === "x" || ch2 === "X", dotpos, endOfNumber, possibleSign, isFloat;
                  if (firstCharIsZero && isHex) {
                    pos = pos + 1;
                    do {
                      pos += 1;
                    } while (isHexadecimalDigit(toProcess[pos]));
                    if (isChar("L", "l")) {
                      pushHexIntToken(subarray(start2 + 2, pos), true, start2, pos);
                      pos += 1;
                    } else {
                      pushHexIntToken(subarray(start2 + 2, pos), false, start2, pos);
                    }
                    return;
                  }
                  do {
                    pos += 1;
                  } while (isDigit(toProcess[pos]));
                  ch2 = toProcess[pos];
                  if (ch2 === ".") {
                    isReal = true;
                    dotpos = pos;
                    do {
                      pos += 1;
                    } while (isDigit(toProcess[pos]));
                    if (pos === dotpos + 1) {
                      pos = dotpos;
                      pushIntToken(subarray(start2, pos), false, start2, pos);
                      return;
                    }
                  }
                  endOfNumber = pos;
                  if (isChar("L", "l")) {
                    if (isReal) {
                      throw {
                        name: "SpelParseException",
                        message: "Real cannot be long in expression (" + expressionString + ") at position " + pos
                      };
                    }
                    pushIntToken(subarray(start2, endOfNumber), true, start2, endOfNumber);
                    pos += 1;
                  } else if (isExponentChar(toProcess[pos])) {
                    isReal = true;
                    pos += 1;
                    possibleSign = toProcess[pos];
                    if (isSign(possibleSign)) {
                      pos += 1;
                    }
                    do {
                      pos += 1;
                    } while (isDigit(toProcess[pos]));
                    isFloat = false;
                    if (isFloatSuffix(toProcess[pos])) {
                      isFloat = true;
                      pos += 1;
                      endOfNumber = pos;
                    } else if (isDoubleSuffix(toProcess[pos])) {
                      pos += 1;
                      endOfNumber = pos;
                    }
                    pushRealToken(subarray(start2, pos), isFloat, start2, pos);
                  } else {
                    ch2 = toProcess[pos];
                    isFloat = false;
                    if (isFloatSuffix(ch2)) {
                      isReal = true;
                      isFloat = true;
                      pos += 1;
                      endOfNumber = pos;
                    } else if (isDoubleSuffix(ch2)) {
                      isReal = true;
                      pos += 1;
                      endOfNumber = pos;
                    }
                    if (isReal) {
                      pushRealToken(subarray(start2, endOfNumber), isFloat, start2, endOfNumber);
                    } else {
                      pushIntToken(subarray(start2, endOfNumber), false, start2, endOfNumber);
                    }
                  }
                }
                function lexIdentifier() {
                  var start2 = pos, substring, asString, idx;
                  do {
                    pos += 1;
                  } while (isIdentifier(toProcess[pos]));
                  substring = subarray(start2, pos);
                  if (pos - start2 === 2 || pos - start2 === 3) {
                    asString = substring.toUpperCase();
                    idx = ALTERNATIVE_OPERATOR_NAMES.indexOf(asString);
                    if (idx >= 0) {
                      pushOneCharOrTwoCharToken(_TokenKind.TokenKind.valueOf(asString), start2, substring);
                      return;
                    }
                  }
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.IDENTIFIER, substring.replace("\0", ""), start2, pos));
                }
                function pushIntToken(data, isLong, start2, end2) {
                  if (isLong) {
                    tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_LONG, data, start2, end2));
                  } else {
                    tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_INT, data, start2, end2));
                  }
                }
                function pushHexIntToken(data, isLong, start2, end2) {
                  if (data.length === 0) {
                    if (isLong) {
                      throw {
                        name: "SpelParseException",
                        message: "Not a long in expression (" + expressionString + ") at position " + pos
                      };
                    } else {
                      throw {
                        name: "SpelParseException",
                        message: "Not an int in expression (" + expressionString + ") at position " + pos
                      };
                    }
                  }
                  if (isLong) {
                    tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_HEXLONG, data, start2, end2));
                  } else {
                    tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_HEXINT, data, start2, end2));
                  }
                }
                function pushRealToken(data, isFloat, start2, end2) {
                  if (isFloat) {
                    tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_REAL_FLOAT, data, start2, end2));
                  } else {
                    tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_REAL, data, start2, end2));
                  }
                }
                function subarray(start2, end2) {
                  return toProcess.substring(start2, end2);
                }
                function isTwoCharToken(kind) {
                  if (kind.tokenChars.length === 2 && toProcess[pos] === kind.tokenChars[0]) {
                    return toProcess[pos + 1] === kind.tokenChars[1];
                  }
                  return false;
                }
                function pushCharToken(kind) {
                  tokens2.push(new _Token.Token(kind, null, pos, pos + 1));
                  pos += 1;
                }
                function pushPairToken(kind) {
                  tokens2.push(new _Token.Token(kind, null, pos, pos + 2));
                  pos += 2;
                }
                function pushOneCharOrTwoCharToken(kind, pos2, data) {
                  tokens2.push(new _Token.Token(kind, data, pos2, pos2 + kind.getLength()));
                }
                function isIdentifier(ch2) {
                  return isAlphabetic(ch2) || isDigit(ch2) || ch2 === "_" || ch2 === "$";
                }
                function isChar(a, b2) {
                  var ch2 = toProcess[pos];
                  return ch2 === a || ch2 === b2;
                }
                function isExponentChar(ch2) {
                  return ch2 === "e" || ch2 === "E";
                }
                function isFloatSuffix(ch2) {
                  return ch2 === "f" || ch2 === "F";
                }
                function isDoubleSuffix(ch2) {
                  return ch2 === "d" || ch2 === "D";
                }
                function isSign(ch2) {
                  return ch2 === "+" || ch2 === "-";
                }
                function isDigit(ch2) {
                  if (ch2.charCodeAt(0) > 255) {
                    return false;
                  }
                  return (FLAGS[ch2.charCodeAt(0)] & IS_DIGIT) !== 0;
                }
                function isAlphabetic(ch2) {
                  if (ch2.charCodeAt(0) > 255) {
                    return false;
                  }
                  return (FLAGS[ch2.charCodeAt(0)] & IS_ALPHA) !== 0;
                }
                function isHexadecimalDigit(ch2) {
                  if (ch2.charCodeAt(0) > 255) {
                    return false;
                  }
                  return (FLAGS[ch2.charCodeAt(0)] & IS_HEXDIGIT) !== 0;
                }
                process2();
                return tokens2;
              }
              exports3.Tokenizer = {
                tokenize
              };
            },
            /* 7 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Token = void 0;
              var _TokenKind = __webpack_require__(2);
              function Token(tokenKind, tokenData, startPos, endPos) {
                this.kind = tokenKind;
                this.startPos = startPos;
                this.endPos = endPos;
                if (tokenData) {
                  this.data = tokenData;
                }
              }
              Token.prototype.getKind = function() {
                return this.kind;
              };
              Token.prototype.toString = function() {
                var s = "[";
                s += this.kind.toString();
                if (this.kind.hasPayload()) {
                  s += ":" + this.data;
                }
                s += "]";
                s += "(" + this.startPos + "," + this.endPos + ")";
                return s;
              };
              Token.prototype.isIdentifier = function() {
                return this.kind === _TokenKind.TokenKind.IDENTIFIER;
              };
              Token.prototype.isNumericRelationalOperator = function() {
                return this.kind === _TokenKind.TokenKind.GT || this.kind === _TokenKind.TokenKind.GE || this.kind === _TokenKind.TokenKind.LT || this.kind === _TokenKind.TokenKind.LE || this.kind === _TokenKind.TokenKind.EQ || this.kind === _TokenKind.TokenKind.NE;
              };
              Token.prototype.stringValue = function() {
                return this.data;
              };
              Token.prototype.asInstanceOfToken = function() {
                return new Token(_TokenKind.TokenKind.INSTANCEOF, this.startPos, this.endPos);
              };
              Token.prototype.asMatchesToken = function() {
                return new Token(_TokenKind.TokenKind.MATCHES, this.startPos, this.endPos);
              };
              Token.prototype.asBetweenToken = function() {
                return new Token(_TokenKind.TokenKind.BETWEEN, this.startPos, this.endPos);
              };
              Token.prototype.getStartPosition = function() {
                return this.startPos;
              };
              Token.prototype.getEndPosition = function() {
                return this.endPos;
              };
              exports3.Token = Token;
            },
            /* 8 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.BooleanLiteral = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(value2, position2) {
                var node2 = _SpelNode.SpelNode.create("boolean", position2);
                node2.getValue = function() {
                  return value2;
                };
                node2.setValue = function(newValue) {
                  return value2 = newValue;
                };
                return node2;
              }
              exports3.BooleanLiteral = {
                create: createNode
              };
            },
            /* 9 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.NumberLiteral = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(value2, position2) {
                var node2 = _SpelNode.SpelNode.create("number", position2);
                node2.getValue = function() {
                  return value2;
                };
                node2.setValue = function(newValue) {
                  return value2 = newValue;
                };
                return node2;
              }
              exports3.NumberLiteral = {
                create: createNode
              };
            },
            /* 10 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.StringLiteral = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(value2, position2) {
                var node2 = _SpelNode.SpelNode.create("string", position2);
                function stripQuotes(value3) {
                  if (value3[0] === "'" && value3[value3.length - 1] === "'" || value3[0] === '"' && value3[value3.length - 1] === '"') {
                    value3 = value3.substring(1, value3.length - 1);
                  }
                  return value3.replace(/''/g, "'").replace(/""/g, '"');
                }
                value2 = stripQuotes(value2);
                node2.getValue = function() {
                  return value2;
                };
                node2.setValue = function(newValue) {
                  return value2 = newValue;
                };
                return node2;
              }
              exports3.StringLiteral = {
                create: createNode
              };
            },
            /* 11 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.NullLiteral = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(value2, position2) {
                var node2 = _SpelNode.SpelNode.create("null", position2);
                node2.getValue = function() {
                  return null;
                };
                return node2;
              }
              exports3.NullLiteral = {
                create: createNode
              };
            },
            /* 12 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.FunctionReference = void 0;
              var _SpelNode = __webpack_require__(0);
              var _Stack2 = __webpack_require__(1);
              function createNode(functionName, position2, args) {
                var node2 = _SpelNode.SpelNode.create("function", position2);
                node2.getRaw = function() {
                  return {
                    functionName,
                    args
                  };
                };
                node2.getValue = function(state) {
                  var locals = state.locals || {}, context2 = state.rootContext, compiledArgs = [];
                  args.forEach(function(arg) {
                    var currentActiveContext = state.activeContext;
                    state.activeContext = new _Stack2.Stack();
                    state.activeContext.push(state.rootContext);
                    compiledArgs.push(arg.getValue(state));
                    state.activeContext = currentActiveContext;
                  });
                  if (locals[functionName]) {
                    return locals[functionName].apply(context2, compiledArgs);
                  }
                  throw {
                    name: "FunctionDoesNotExistException",
                    message: "Function '" + functionName + "' does not exist."
                  };
                };
                return node2;
              }
              exports3.FunctionReference = {
                create: createNode
              };
            },
            /* 13 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.MethodReference = void 0;
              var _SpelNode = __webpack_require__(0);
              var _Stack2 = __webpack_require__(1);
              function createNode(nullSafeNavigation, methodName, position2, args) {
                var node2 = _SpelNode.SpelNode.create("method", position2);
                node2.getRaw = function() {
                  return {
                    methodName,
                    args
                  };
                };
                node2.getValue = function(state) {
                  var context2 = state.activeContext.peek(), compiledArgs = [], method;
                  if (!context2) {
                    throw {
                      name: "ContextDoesNotExistException",
                      message: "Attempting to look up property '" + methodName + "' for an undefined context."
                    };
                  }
                  function maybeHandleNullSafeNavigation(member) {
                    if (member === void 0 || member === null) {
                      if (nullSafeNavigation) {
                        return null;
                      }
                      throw {
                        name: "NullPointerException",
                        message: "Method " + methodName + " does not exist."
                      };
                    }
                    return member;
                  }
                  args.forEach(function(arg) {
                    var currentActiveContext = state.activeContext;
                    state.activeContext = new _Stack2.Stack();
                    state.activeContext.push(state.rootContext);
                    compiledArgs.push(arg.getValue(state));
                    state.activeContext = currentActiveContext;
                  });
                  if (methodName.substr(0, 3) === "get" && !context2[methodName]) {
                    return maybeHandleNullSafeNavigation(context2[methodName.charAt(3).toLowerCase() + methodName.substring(4)]);
                  }
                  if (methodName.substr(0, 3) === "set" && !context2[methodName]) {
                    return context2[methodName.charAt(3).toLowerCase() + methodName.substring(4)] = compiledArgs[0];
                  }
                  if (Array.isArray(context2)) {
                    if (methodName === "size") {
                      return context2.length;
                    }
                    if (methodName === "contains") {
                      return context2.includes(compiledArgs[0]);
                    }
                  }
                  method = maybeHandleNullSafeNavigation(context2[methodName]);
                  if (method) {
                    return method.apply(context2, compiledArgs);
                  }
                  return null;
                };
                return node2;
              }
              exports3.MethodReference = {
                create: createNode
              };
            },
            /* 14 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.PropertyReference = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(nullSafeNavigation, propertyName, position2) {
                var node2 = _SpelNode.SpelNode.create("property", position2);
                node2.getRaw = function() {
                  return propertyName;
                };
                node2.getValue = function(state) {
                  var context2 = state.activeContext.peek();
                  if (!context2) {
                    if (nullSafeNavigation) {
                      return null;
                    }
                    throw {
                      name: "ContextDoesNotExistException",
                      message: "Attempting to look up property '" + propertyName + "' for an undefined context."
                    };
                  }
                  if (context2[propertyName] === void 0 || context2[propertyName] === null) {
                    if (nullSafeNavigation) {
                      return null;
                    }
                    if (propertyName === "size" && Array.isArray(context2)) {
                      return context2.length;
                    }
                    throw {
                      name: "NullPointerException",
                      message: "Property '" + propertyName + "' does not exist."
                    };
                  }
                  return context2[propertyName];
                };
                node2.setValue = function(value2, state) {
                  var context2 = state.activeContext.peek();
                  if (!context2) {
                    throw {
                      name: "ContextDoesNotExistException",
                      message: "Attempting to assign property '" + propertyName + "' for an undefined context."
                    };
                  }
                  return context2[propertyName] = value2;
                };
                node2.getName = function() {
                  return propertyName;
                };
                return node2;
              }
              exports3.PropertyReference = {
                create: createNode
              };
            },
            /* 15 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.VariableReference = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(variableName, position2) {
                var node2 = _SpelNode.SpelNode.create("variable", position2);
                node2.getRaw = function() {
                  return variableName;
                };
                node2.getValue = function(state) {
                  var context2 = state.activeContext.peek(), locals = state.locals;
                  if (!context2) {
                    throw {
                      name: "ContextDoesNotExistException",
                      message: "Attempting to look up variable '" + variableName + "' for an undefined context."
                    };
                  }
                  if (variableName === "this") {
                    return context2;
                  }
                  if (variableName === "root") {
                    return state.rootContext;
                  }
                  return locals[variableName];
                };
                node2.setValue = function(value2, state) {
                  var locals = state.locals;
                  return locals[variableName] = value2;
                };
                return node2;
              }
              exports3.VariableReference = {
                create: createNode
              };
            },
            /* 16 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.CompoundExpression = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, expressionComponents) {
                var node2 = _SpelNode.SpelNode.create.apply(null, ["compound", position2].concat(expressionComponents));
                function buildContextStack(state) {
                  var childrenCount = node2.getChildren().length, i;
                  for (i = 0; i < childrenCount; i += 1) {
                    if (node2.getChildren()[i].getType() === "indexer") {
                      state.activeContext.push(state.activeContext.peek()[node2.getChildren()[i].getValue(state)]);
                    } else {
                      state.activeContext.push(node2.getChildren()[i].getValue(state));
                    }
                  }
                  return function unbuildContextStack() {
                    for (i = 0; i < childrenCount; i += 1) {
                      state.activeContext.pop();
                    }
                  };
                }
                node2.getValue = function(state) {
                  var context2 = state.activeContext.peek(), value2;
                  if (!context2) {
                    throw {
                      name: "ContextDoesNotExistException",
                      message: "Attempting to evaluate compound expression with an undefined context."
                    };
                  }
                  var unbuildContextStack = buildContextStack(state);
                  value2 = state.activeContext.peek();
                  unbuildContextStack();
                  return value2;
                };
                node2.setValue = function(value2, state) {
                  var unbuildContextStack = buildContextStack(state), childCount = node2.getChildren().length;
                  state.activeContext.pop();
                  value2 = node2.getChildren()[childCount - 1].setValue(value2, state);
                  state.activeContext.push(null);
                  unbuildContextStack();
                  return value2;
                };
                return node2;
              }
              exports3.CompoundExpression = {
                create: createNode
              };
            },
            /* 17 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Indexer = void 0;
              var _SpelNode = __webpack_require__(0);
              var _Stack2 = __webpack_require__(1);
              function createNode(position2, expressionComponents) {
                var node2 = _SpelNode.SpelNode.create.apply(null, ["indexer", position2].concat(expressionComponents));
                node2.getValue = function(state) {
                  var activeContext = state.activeContext, context2, childrenCount = node2.getChildren().length, i, value2;
                  state.activeContext = new _Stack2.Stack();
                  state.activeContext.push(state.rootContext);
                  context2 = state.activeContext.peek();
                  if (!context2) {
                    throw {
                      name: "ContextDoesNotExistException",
                      message: "Attempting to evaluate compound expression with an undefined context."
                    };
                  }
                  for (i = 0; i < childrenCount; i += 1) {
                    state.activeContext.push(node2.getChildren()[i].getValue(state));
                  }
                  value2 = state.activeContext.peek();
                  for (i = 0; i < childrenCount; i += 1) {
                    state.activeContext.pop();
                  }
                  state.activeContext = activeContext;
                  return value2;
                };
                return node2;
              }
              exports3.Indexer = {
                create: createNode
              };
            },
            /* 18 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Assign = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, property2, assignedValue) {
                var node2 = _SpelNode.SpelNode.create("assign", position2, property2, assignedValue);
                node2.getValue = function(state) {
                  var context2 = state.activeContext.peek();
                  if (!context2) {
                    throw {
                      name: "ContextDoesNotExistException",
                      message: "Attempting to assign property '" + property2.getValue(state) + "' for an undefined context."
                    };
                  }
                  return property2.setValue(assignedValue.getValue(state), state);
                };
                return node2;
              }
              exports3.Assign = {
                create: createNode
              };
            },
            /* 19 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpEQ = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("op-eq", position2, left2, right2);
                node2.getValue = function(state) {
                  return left2.getValue(state) === right2.getValue(state);
                };
                return node2;
              }
              exports3.OpEQ = {
                create: createNode
              };
            },
            /* 20 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpNE = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("op-ne", position2, left2, right2);
                node2.getValue = function(state) {
                  return left2.getValue(state) !== right2.getValue(state);
                };
                return node2;
              }
              exports3.OpNE = {
                create: createNode
              };
            },
            /* 21 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpGE = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("op-ge", position2, left2, right2);
                node2.getValue = function(state) {
                  return left2.getValue(state) >= right2.getValue(state);
                };
                return node2;
              }
              exports3.OpGE = {
                create: createNode
              };
            },
            /* 22 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpGT = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("op-gt", position2, left2, right2);
                node2.getValue = function(state) {
                  return left2.getValue(state) > right2.getValue(state);
                };
                return node2;
              }
              exports3.OpGT = {
                create: createNode
              };
            },
            /* 23 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpLE = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("op-le", position2, left2, right2);
                node2.getValue = function(state) {
                  return left2.getValue(state) <= right2.getValue(state);
                };
                return node2;
              }
              exports3.OpLE = {
                create: createNode
              };
            },
            /* 24 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpLT = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("op-lt", position2, left2, right2);
                node2.getValue = function(state) {
                  return left2.getValue(state) < right2.getValue(state);
                };
                return node2;
              }
              exports3.OpLT = {
                create: createNode
              };
            },
            /* 25 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpPlus = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("op-plus", position2, left2, right2);
                node2.getValue = function(state) {
                  if (!right2) {
                    return +left2.getValue(state);
                  }
                  return left2.getValue(state) + right2.getValue(state);
                };
                return node2;
              }
              exports3.OpPlus = {
                create: createNode
              };
            },
            /* 26 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpMinus = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("op-minus", position2, left2, right2);
                node2.getValue = function(state) {
                  if (!right2) {
                    return -left2.getValue(state);
                  }
                  return left2.getValue(state) - right2.getValue(state);
                };
                return node2;
              }
              exports3.OpMinus = {
                create: createNode
              };
            },
            /* 27 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpMultiply = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("op-multiply", position2, left2, right2);
                node2.getValue = function(state) {
                  var leftValue = left2.getValue(state), rightValue = right2.getValue(state);
                  if (typeof leftValue === "number" && typeof rightValue === "number") {
                    return leftValue * rightValue;
                  }
                  if (typeof leftValue === "string" && typeof rightValue === "number") {
                    var s = "", i = 0;
                    for (; i < rightValue; i += 1) {
                      s += leftValue;
                    }
                    return s;
                  }
                  return null;
                };
                return node2;
              }
              exports3.OpMultiply = {
                create: createNode
              };
            },
            /* 28 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpDivide = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("op-divide", position2, left2, right2);
                node2.getValue = function(state) {
                  return left2.getValue(state) / right2.getValue(state);
                };
                return node2;
              }
              exports3.OpDivide = {
                create: createNode
              };
            },
            /* 29 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpModulus = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("op-modulus", position2, left2, right2);
                node2.getValue = function(state) {
                  return left2.getValue(state) % right2.getValue(state);
                };
                return node2;
              }
              exports3.OpModulus = {
                create: createNode
              };
            },
            /* 30 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpPower = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, base, exp) {
                var node2 = _SpelNode.SpelNode.create("op-power", position2, base, exp);
                node2.getValue = function(state) {
                  return Math.pow(base.getValue(state), exp.getValue(state));
                };
                return node2;
              }
              exports3.OpPower = {
                create: createNode
              };
            },
            /* 31 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpInc = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, postfix, int) {
                var node2 = _SpelNode.SpelNode.create("op-inc", position2, int);
                node2.getValue = function(state) {
                  var cur = int.getValue(state);
                  int.setValue(cur + 1, state);
                  if (postfix) {
                    return cur;
                  }
                  return cur + 1;
                };
                return node2;
              }
              exports3.OpInc = {
                create: createNode
              };
            },
            /* 32 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpDec = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, postfix, int) {
                var node2 = _SpelNode.SpelNode.create("op-dec", position2, int);
                node2.getValue = function(state) {
                  var cur = int.getValue(state);
                  int.setValue(cur - 1, state);
                  if (postfix) {
                    return cur;
                  }
                  return cur - 1;
                };
                return node2;
              }
              exports3.OpDec = {
                create: createNode
              };
            },
            /* 33 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpNot = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, expr) {
                var node2 = _SpelNode.SpelNode.create("op-not", position2, expr);
                node2.getValue = function(state) {
                  return !expr.getValue(state);
                };
                return node2;
              }
              exports3.OpNot = {
                create: createNode
              };
            },
            /* 34 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpAnd = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("op-and", position2, left2, right2);
                node2.getValue = function(state) {
                  return !!left2.getValue(state) && !!right2.getValue(state);
                };
                return node2;
              }
              exports3.OpAnd = {
                create: createNode
              };
            },
            /* 35 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpOr = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("op-or", position2, left2, right2);
                node2.getValue = function(state) {
                  return !!left2.getValue(state) || !!right2.getValue(state);
                };
                return node2;
              }
              exports3.OpOr = {
                create: createNode
              };
            },
            /* 36 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpMatches = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("matches", position2, left2, right2);
                node2.getValue = function(state) {
                  var data = left2.getValue(state);
                  var regexpString = right2.getValue(state);
                  try {
                    var regexp = new RegExp(regexpString);
                    return !!regexp.exec(data);
                  } catch (error) {
                    throw {
                      name: "EvaluationException",
                      message: error.toString()
                    };
                  }
                };
                return node2;
              }
              exports3.OpMatches = {
                create: createNode
              };
            },
            /* 37 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Ternary = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, expression, ifTrue, ifFalse) {
                var node2 = _SpelNode.SpelNode.create("ternary", position2, expression, ifTrue, ifFalse);
                node2.getValue = function(state) {
                  return expression.getValue(state) ? ifTrue.getValue(state) : ifFalse.getValue(state);
                };
                return node2;
              }
              exports3.Ternary = {
                create: createNode
              };
            },
            /* 38 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Elvis = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, expression, ifFalse) {
                var node2 = _SpelNode.SpelNode.create("elvis", position2, expression, ifFalse);
                node2.getValue = function(state) {
                  return expression.getValue(state) !== null ? expression.getValue(state) : ifFalse.getValue(state);
                };
                return node2;
              }
              exports3.Elvis = {
                create: createNode
              };
            },
            /* 39 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.InlineList = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, elements) {
                var node2 = _SpelNode.SpelNode.create("list", position2), list = [].concat(elements || []);
                node2.getRaw = function() {
                  return list;
                };
                node2.getValue = function(state) {
                  return list.map(function(element) {
                    return element.getValue(state);
                  });
                };
                return node2;
              }
              exports3.InlineList = {
                create: createNode
              };
            },
            /* 40 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.InlineMap = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, elements) {
                var node2 = _SpelNode.SpelNode.create("map", position2), mapPieces = [].concat(elements || []);
                node2.getValue = function(state) {
                  var key = true, keyValue = null, map2 = {};
                  mapPieces.forEach(function(piece) {
                    if (key) {
                      if (piece.getType() === "property") {
                        keyValue = piece.getName();
                      } else {
                        keyValue = piece.getValue(state);
                      }
                    } else {
                      map2[keyValue] = piece.getValue(state);
                    }
                    key = !key;
                  });
                  return map2;
                };
                return node2;
              }
              exports3.InlineMap = {
                create: createNode
              };
            },
            /* 41 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Selection = void 0;
              var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj;
              } : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
              };
              var _SpelNode = __webpack_require__(0);
              function matches(element, expr, state) {
                var doesMatch = false;
                state.activeContext.push(element);
                doesMatch = expr.getValue(state);
                state.activeContext.pop();
                return doesMatch;
              }
              function selectFromArray(collection, whichElement, expr, state) {
                var newCollection = collection.filter(function(element) {
                  return matches(element, expr, state);
                });
                switch (whichElement) {
                  case "ALL":
                    return newCollection;
                  case "FIRST":
                    return newCollection[0] || null;
                  case "LAST":
                    if (newCollection.length) {
                      return newCollection[newCollection.length - 1];
                    }
                    return null;
                }
              }
              function selectFromMap(collection, whichElement, expr, state) {
                var newCollection = {}, entry, key, entries = [], returnValue = {};
                for (key in collection) {
                  if (collection.hasOwnProperty(key)) {
                    entry = {
                      key,
                      value: collection[key]
                    };
                    if (matches(entry, expr, state)) {
                      entries.push(entry);
                    }
                  }
                }
                switch (whichElement) {
                  case "ALL":
                    entries.forEach(function(entry2) {
                      newCollection[entry2.key] = entry2.value;
                    });
                    return newCollection;
                  case "FIRST":
                    if (entries.length) {
                      returnValue[entries[0].key] = entries[0].value;
                      return returnValue;
                    }
                    return null;
                  case "LAST":
                    if (entries.length) {
                      returnValue[entries[entries.length - 1].key] = entries[entries.length - 1].value;
                      return returnValue;
                    }
                    return null;
                }
                entries.forEach(function(entry2) {
                  newCollection[entry2.key] = entry2.value;
                });
              }
              function createNode(nullSafeNavigation, whichElement, position2, expr) {
                var node2 = _SpelNode.SpelNode.create("selection", position2, expr);
                node2.getValue = function(state) {
                  var collection = state.activeContext.peek();
                  if (collection) {
                    if (Array.isArray(collection)) {
                      return selectFromArray(collection, whichElement, expr, state);
                    } else if ((typeof collection === "undefined" ? "undefined" : _typeof2(collection)) === "object") {
                      return selectFromMap(collection, whichElement, expr, state);
                    }
                  }
                  return null;
                };
                return node2;
              }
              exports3.Selection = {
                create: createNode,
                FIRST: "FIRST",
                LAST: "LAST",
                ALL: "ALL"
              };
            },
            /* 42 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Projection = void 0;
              var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj;
              } : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
              };
              var _SpelNode = __webpack_require__(0);
              function projectCollection(collection, expr, state) {
                return collection.map(function(element) {
                  var matches;
                  state.activeContext.push(element);
                  matches = expr.getValue(state);
                  state.activeContext.pop();
                  return matches;
                });
              }
              function createNode(nullSafeNavigation, position2, expr) {
                var node2 = _SpelNode.SpelNode.create("projection", position2, expr);
                node2.getValue = function(state) {
                  var collection = state.activeContext.peek(), entries = [], key;
                  if (Array.isArray(collection)) {
                    return projectCollection(collection, expr, state);
                  } else if ((typeof collection === "undefined" ? "undefined" : _typeof2(collection)) === "object") {
                    for (key in collection) {
                      if (collection.hasOwnProperty(key)) {
                        entries.push(collection[key]);
                      }
                    }
                    return projectCollection(entries, expr, state);
                  }
                  return null;
                };
                return node2;
              }
              exports3.Projection = {
                create: createNode
              };
            },
            /* 43 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpInstanceof = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("instanceof", position2, left2, right2);
                node2.getValue = function(state) {
                  throw {
                    name: "MethodNotImplementedException",
                    message: "OpInstanceOf: Not implemented"
                  };
                };
                return node2;
              }
              exports3.OpInstanceof = {
                create: createNode
              };
            },
            /* 44 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpBetween = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, left2, right2) {
                var node2 = _SpelNode.SpelNode.create("between", position2, left2, right2);
                node2.getValue = function(state) {
                  throw {
                    name: "MethodNotImplementedException",
                    message: "OpBetween: Not implemented"
                  };
                };
                return node2;
              }
              exports3.OpBetween = {
                create: createNode
              };
            },
            /* 45 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.TypeReference = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, node2, _dims) {
                var node2 = _SpelNode.SpelNode.create("typeref", position2, node2);
                node2.getValue = function(state) {
                  throw {
                    name: "MethodNotImplementedException",
                    message: "TypeReference: Not implemented"
                  };
                };
                return node2;
              }
              exports3.TypeReference = {
                create: createNode
              };
            },
            /* 46 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.BeanReference = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position2, beanName) {
                var node2 = _SpelNode.SpelNode.create("beanref", position2);
                node2.getValue = function(state) {
                  throw {
                    name: "MethodNotImplementedException",
                    message: "BeanReference: Not implemented"
                  };
                };
                return node2;
              }
              exports3.BeanReference = {
                create: createNode
              };
            },
            /* 47 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Identifier = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(identifierName, position2) {
                var node2 = _SpelNode.SpelNode.create("identifier", position2);
                node2.getRaw = function() {
                  return identifierName;
                };
                node2.getValue = function(state) {
                  throw {
                    name: "MethodNotImplementedException",
                    message: "Identifier: Not implemented"
                  };
                };
                return node2;
              }
              exports3.Identifier = {
                create: createNode
              };
            },
            /* 48 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.QualifiedIdentifier = void 0;
              var _SpelNode = __webpack_require__(0);
              function _toConsumableArray2(arr) {
                if (Array.isArray(arr)) {
                  for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i];
                  }
                  return arr2;
                } else {
                  return Array.from(arr);
                }
              }
              function createNode(position2, pieces) {
                var node2 = _SpelNode.SpelNode.create.apply(_SpelNode.SpelNode, ["qualifiedidentifier", position2].concat(_toConsumableArray2(pieces)));
                node2.getRaw = function() {
                  return pieces.map(function(p2) {
                    return p2.getRaw();
                  });
                };
                node2.getValue = function(state) {
                  throw {
                    name: "MethodNotImplementedException",
                    message: "QualifiedIdentifier: Not implemented"
                  };
                };
                return node2;
              }
              exports3.QualifiedIdentifier = {
                create: createNode
              };
            },
            /* 49 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.ConstructorReference = void 0;
              var _SpelNode = __webpack_require__(0);
              var _Stack2 = __webpack_require__(1);
              function _toConsumableArray2(arr) {
                if (Array.isArray(arr)) {
                  for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i];
                  }
                  return arr2;
                } else {
                  return Array.from(arr);
                }
              }
              function _toArray2(arr) {
                return Array.isArray(arr) ? arr : Array.from(arr);
              }
              function createNode(position2, dimensions, nodes) {
                var isArray2 = nodes !== void 0;
                var dimension;
                if (isArray2) {
                  dimension = dimensions.length && dimensions[0] && dimensions[0].getType() === "number" ? dimensions[0].getValue() : null;
                } else {
                  nodes = dimensions;
                  dimensions = void 0;
                }
                var _nodes = nodes, _nodes2 = _toArray2(_nodes);
                _nodes2[0];
                var args = _nodes2.slice(1);
                var node2 = _SpelNode.SpelNode.create.apply(_SpelNode.SpelNode, ["constructorref", position2].concat(_toConsumableArray2(nodes)));
                node2.getRaw = function() {
                  return dimension;
                };
                node2.getValue = function(state) {
                  if (isArray2 && args.length <= 1) {
                    var compiledArgs = [];
                    args.forEach(function(arg) {
                      var currentActiveContext = state.activeContext;
                      state.activeContext = new _Stack2.Stack();
                      state.activeContext.push(state.rootContext);
                      compiledArgs.push(arg.getValue(state));
                      state.activeContext = currentActiveContext;
                    });
                    if (args.length === 1) {
                      return compiledArgs[0];
                    } else {
                      return dimension ? new Array(dimension) : [];
                    }
                  }
                  throw {
                    name: "MethodNotImplementedException",
                    message: "ConstructorReference: Not implemented"
                  };
                };
                return node2;
              }
              exports3.ConstructorReference = {
                create: createNode
              };
            },
            /* 50 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              function create(authentication, principal) {
                var context2 = {};
                context2.authentication = authentication || {};
                context2.principal = principal || {};
                context2.hasRole = function(role) {
                  var hasRole = false;
                  if (!role) {
                    return false;
                  }
                  if (!context2.authentication && !Array.isArray(context2.authentication.authorities)) {
                    return false;
                  }
                  context2.authentication.authorities.forEach(function(grantedAuthority) {
                    if (grantedAuthority.authority.toLowerCase() === role.toLowerCase()) {
                      hasRole = true;
                    }
                  });
                  return hasRole;
                };
                context2.hasPermission = function() {
                  var args = Array.prototype.slice.call(arguments);
                  if (args.length === 1) {
                    return context2.hasRole(args[0]);
                  }
                };
                return context2;
              }
              exports3.StandardContext = {
                create
              };
            }
            /******/
          ])
        );
      });
    })(spel2js);
    var spel2jsExports = spel2js.exports;
    var SqlString$1 = {};
    (function(exports2) {
      var SqlString2 = exports2;
      var ID_GLOBAL_REGEXP = /`/g;
      var QUAL_GLOBAL_REGEXP = /\./g;
      var CHARS_GLOBAL_REGEXP = /[\0\b\t\n\r\x1a\"\'\\]/g;
      var CHARS_ESCAPE_MAP = {
        "\0": "\\0",
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\r": "\\r",
        "": "\\Z",
        '"': '\\"',
        "'": "\\'",
        "\\": "\\\\"
      };
      SqlString2.escapeId = function escapeId(val, forbidQualified) {
        if (Array.isArray(val)) {
          var sql = "";
          for (var i = 0; i < val.length; i++) {
            sql += (i === 0 ? "" : ", ") + SqlString2.escapeId(val[i], forbidQualified);
          }
          return sql;
        } else if (forbidQualified) {
          return "`" + String(val).replace(ID_GLOBAL_REGEXP, "``") + "`";
        } else {
          return "`" + String(val).replace(ID_GLOBAL_REGEXP, "``").replace(QUAL_GLOBAL_REGEXP, "`.`") + "`";
        }
      };
      SqlString2.escape = function escape2(val, stringifyObjects, timeZone) {
        if (val === void 0 || val === null) {
          return "NULL";
        }
        switch (typeof val) {
          case "boolean":
            return val ? "true" : "false";
          case "number":
            return val + "";
          case "object":
            if (Object.prototype.toString.call(val) === "[object Date]") {
              return SqlString2.dateToString(val, timeZone || "local");
            } else if (Array.isArray(val)) {
              return SqlString2.arrayToList(val, timeZone);
            } else if (Buffer.isBuffer(val)) {
              return SqlString2.bufferToString(val);
            } else if (typeof val.toSqlString === "function") {
              return String(val.toSqlString());
            } else if (stringifyObjects) {
              return escapeString(val.toString());
            } else {
              return SqlString2.objectToValues(val, timeZone);
            }
          default:
            return escapeString(val);
        }
      };
      SqlString2.arrayToList = function arrayToList(array, timeZone) {
        var sql = "";
        for (var i = 0; i < array.length; i++) {
          var val = array[i];
          if (Array.isArray(val)) {
            sql += (i === 0 ? "" : ", ") + "(" + SqlString2.arrayToList(val, timeZone) + ")";
          } else {
            sql += (i === 0 ? "" : ", ") + SqlString2.escape(val, true, timeZone);
          }
        }
        return sql;
      };
      SqlString2.format = function format2(sql, values2, stringifyObjects, timeZone) {
        if (values2 == null) {
          return sql;
        }
        if (!Array.isArray(values2)) {
          values2 = [values2];
        }
        var chunkIndex = 0;
        var placeholdersRegex = /\?+/g;
        var result = "";
        var valuesIndex = 0;
        var match5;
        while (valuesIndex < values2.length && (match5 = placeholdersRegex.exec(sql))) {
          var len = match5[0].length;
          if (len > 2) {
            continue;
          }
          var value2 = len === 2 ? SqlString2.escapeId(values2[valuesIndex]) : SqlString2.escape(values2[valuesIndex], stringifyObjects, timeZone);
          result += sql.slice(chunkIndex, match5.index) + value2;
          chunkIndex = placeholdersRegex.lastIndex;
          valuesIndex++;
        }
        if (chunkIndex === 0) {
          return sql;
        }
        if (chunkIndex < sql.length) {
          return result + sql.slice(chunkIndex);
        }
        return result;
      };
      SqlString2.dateToString = function dateToString(date, timeZone) {
        var dt = new Date(date);
        if (isNaN(dt.getTime())) {
          return "NULL";
        }
        var year;
        var month;
        var day;
        var hour;
        var minute;
        var second;
        var millisecond;
        if (timeZone === "local") {
          year = dt.getFullYear();
          month = dt.getMonth() + 1;
          day = dt.getDate();
          hour = dt.getHours();
          minute = dt.getMinutes();
          second = dt.getSeconds();
          millisecond = dt.getMilliseconds();
        } else {
          var tz = convertTimezone(timeZone);
          if (tz !== false && tz !== 0) {
            dt.setTime(dt.getTime() + tz * 6e4);
          }
          year = dt.getUTCFullYear();
          month = dt.getUTCMonth() + 1;
          day = dt.getUTCDate();
          hour = dt.getUTCHours();
          minute = dt.getUTCMinutes();
          second = dt.getUTCSeconds();
          millisecond = dt.getUTCMilliseconds();
        }
        var str = zeroPad(year, 4) + "-" + zeroPad(month, 2) + "-" + zeroPad(day, 2) + " " + zeroPad(hour, 2) + ":" + zeroPad(minute, 2) + ":" + zeroPad(second, 2) + "." + zeroPad(millisecond, 3);
        return escapeString(str);
      };
      SqlString2.bufferToString = function bufferToString(buffer) {
        return "X" + escapeString(buffer.toString("hex"));
      };
      SqlString2.objectToValues = function objectToValues(object, timeZone) {
        var sql = "";
        for (var key in object) {
          var val = object[key];
          if (typeof val === "function") {
            continue;
          }
          sql += (sql.length === 0 ? "" : ", ") + SqlString2.escapeId(key) + " = " + SqlString2.escape(val, true, timeZone);
        }
        return sql;
      };
      SqlString2.raw = function raw(sql) {
        if (typeof sql !== "string") {
          throw new TypeError("argument sql must be a string");
        }
        return {
          toSqlString: function toSqlString() {
            return sql;
          }
        };
      };
      function escapeString(val) {
        var chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex = 0;
        var escapedVal = "";
        var match5;
        while (match5 = CHARS_GLOBAL_REGEXP.exec(val)) {
          escapedVal += val.slice(chunkIndex, match5.index) + CHARS_ESCAPE_MAP[match5[0]];
          chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex;
        }
        if (chunkIndex === 0) {
          return "'" + val + "'";
        }
        if (chunkIndex < val.length) {
          return "'" + escapedVal + val.slice(chunkIndex) + "'";
        }
        return "'" + escapedVal + "'";
      }
      function zeroPad(number, length2) {
        number = number.toString();
        while (number.length < length2) {
          number = "0" + number;
        }
        return number;
      }
      function convertTimezone(tz) {
        if (tz === "Z") {
          return 0;
        }
        var m2 = tz.match(/([\+\-\s])(\d\d):?(\d\d)?/);
        if (m2) {
          return (m2[1] === "-" ? -1 : 1) * (parseInt(m2[2], 10) + (m2[3] ? parseInt(m2[3], 10) : 0) / 60) * 60;
        }
        return false;
      }
    })(SqlString$1);
    var sqlstring = SqlString$1;
    const SqlStringOrig = /* @__PURE__ */ getDefaultExportFromCjs(sqlstring);
    var SqlString = SqlStringOrig;
    SqlString.trim = function(val) {
      if (val.charAt(0) == "'")
        return val.substring(1, val.length - 1);
      else
        return val;
    };
    SqlString.escapeLike = function(val) {
      var any_start = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var any_end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var res = SqlString.escape(val);
      res = SqlString.trim(res);
      res = res.replace(/[%_]/g, "\\$&");
      res = (any_start ? "%" : "") + res + (any_end ? "%" : "");
      res = "'" + res + "'";
      return res;
    };
    var sqlEmptyValue = function sqlEmptyValue2(fieldDef) {
      var v2 = "''";
      var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;
      if (type == "date") {
        v2 = "'0000-00-00'";
      } else if (type == "datetime") {
        v2 = "'0000-00-00 00:00'";
      } else if (type == "time") {
        v2 = "'00:00'";
      } else if (type == "number") {
        v2 = "0";
      }
      return v2;
    };
    var mongoEmptyValue = function mongoEmptyValue2(fieldDef) {
      var v2 = "";
      var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;
      if (type == "number") {
        v2 = 0;
      }
      return v2;
    };
    var spelEscapeString = function spelEscapeString2(val) {
      return "'" + val.replace(/'/g, "''") + "'";
    };
    var spelInlineList = function spelInlineList2(vals) {
      var toArray2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var javaType;
      var jt;
      var numberJavaTypes = ["int", "float"];
      vals.map(function(v2) {
        if (v2 !== void 0 && v2 !== null) {
          if (typeof v2 === "string") {
            jt = "String";
          } else if (typeof v2 === "number") {
            jt = Number.isInteger(v2) ? "int" : "float";
          } else
            throw new Error("spelEscape: Can't use value ".concat(v2, " in array"));
          if (!javaType) {
            javaType = jt;
          } else if (javaType != jt) {
            if (numberJavaTypes.includes(javaType) && numberJavaTypes.includes(jt)) {
              javaType = "float";
            } else
              throw new Error("spelEscape: Can't use different types in array: found ".concat(javaType, " and ").concat(jt));
          }
        }
      });
      if (!javaType) {
        javaType = "String";
      }
      var escapedVals;
      if (javaType == "float") {
        escapedVals = vals.map(function(v2) {
          return spelEscape(v2, true);
        });
      } else {
        escapedVals = vals.map(function(v2) {
          return spelEscape(v2);
        });
      }
      var res;
      if (toArray2) {
        res = "new ".concat(javaType, "[]{").concat(escapedVals.join(", "), "}");
      } else {
        res = "{".concat(escapedVals.join(", "), "}");
      }
      return res;
    };
    var spelFixList = function spelFixList2(val) {
      return "".concat(val, ".?[true]");
    };
    var spelEscape = function spelEscape2(val) {
      var numberToFloat = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var arrayToArray = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (val === void 0 || val === null) {
        return "null";
      }
      switch (_typeof$1(val)) {
        case "boolean":
          return val ? "true" : "false";
        case "number":
          if (!Number.isFinite(val) || isNaN(val))
            return void 0;
          return val + (!Number.isInteger(val) || numberToFloat ? "f" : "");
        case "object":
          if (Array.isArray(val)) {
            return spelInlineList(val, arrayToArray);
          } else {
            throw new Error("spelEscape: Object is not supported");
          }
        default:
          return spelEscapeString(val);
      }
    };
    var spelFormatConcat = function spelFormatConcat2(parts) {
      if (parts && Array.isArray(parts) && parts.length) {
        return parts.map(function(part) {
          if (part.type == "const") {
            return spelEscape(part.value);
          } else if (part.type == "property") {
            return "" + part.value;
          } else if (part.type == "variable") {
            return "#" + part.value;
          }
          return void 0;
        }).filter(function(r2) {
          return r2 != void 0;
        }).join(" + ");
      } else {
        return "null";
      }
    };
    var spelImportConcat = function spelImportConcat2(val) {
      if (val == void 0)
        return [void 0, []];
      var errors = [];
      var parts = val.valueType == "case_value" ? val.value : [val];
      var res = parts.map(function(child) {
        if (child.valueSrc == "value") {
          if (child.value === null) {
            return void 0;
          } else {
            return {
              type: "const",
              value: child.value
            };
          }
        } else if (child.valueSrc == "field") {
          return {
            type: child.isVariable ? "variable" : "property",
            value: child.value
          };
        } else {
          errors.push("Unsupported valueSrc ".concat(child.valueSrc, " in concatenation"));
        }
      }).filter(function(v2) {
        return v2 != void 0;
      });
      return [res, errors];
    };
    var stringifyForDisplay = function stringifyForDisplay2(v2) {
      return v2 == null ? "NULL" : v2.toString();
    };
    var celInlineList = function celInlineList2(vals) {
      var toArray2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var javaType;
      var jt;
      var numberJavaTypes = ["int", "float"];
      vals.map(function(v2) {
        if (v2 !== void 0 && v2 !== null) {
          if (typeof v2 === "string") {
            jt = "String";
          } else if (typeof v2 === "number") {
            jt = Number.isInteger(v2) ? "int" : "float";
          } else
            throw new Error("celEscape: Can't use value ".concat(v2, " in array"));
          if (!javaType) {
            javaType = jt;
          } else if (javaType != jt) {
            if (numberJavaTypes.includes(javaType) && numberJavaTypes.includes(jt)) {
              javaType = "float";
            } else
              throw new Error("celEscape: Can't use different types in array: found ".concat(javaType, " and ").concat(jt));
          }
        }
      });
      if (!javaType) {
        javaType = "String";
      }
      var escapedVals;
      if (javaType == "float") {
        escapedVals = vals.map(function(v2) {
          return celEscape(v2, true);
        });
      } else {
        escapedVals = vals.map(function(v2) {
          return celEscape(v2);
        });
      }
      var res;
      if (toArray2) {
        res = "new ".concat(javaType, "[][").concat(escapedVals.join(", "), "]");
      } else {
        res = "[".concat(escapedVals.join(", "), "]");
      }
      return res;
    };
    var celEscape = function celEscape2(val) {
      var numberToFloat = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var arrayToArray = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (val === void 0 || val === null) {
        return "null";
      }
      switch (_typeof$1(val)) {
        case "boolean":
          return val ? "true" : "false";
        case "number":
          if (!Number.isFinite(val) || isNaN(val))
            return void 0;
          return val + (!Number.isInteger(val) || numberToFloat ? "f" : "");
        case "object":
          if (Array.isArray(val)) {
            return celInlineList(val, arrayToArray);
          } else {
            throw new Error("celEscape: Object is not supported");
          }
        default:
          return spelEscapeString(val);
      }
    };
    const _export = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      SqlString,
      celEscape,
      mongoEmptyValue,
      spelEscape,
      spelFixList,
      spelFormatConcat,
      spelImportConcat,
      sqlEmptyValue,
      stringifyForDisplay
    }, Symbol.toStringTag, { value: "Module" }));
    function _createForOfIteratorHelper$d(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$d(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$d(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$d(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$d(o, minLen);
    }
    function _arrayLikeToArray$d(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$z(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$z(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$z(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$z(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var compareToSign = "${0}.compareTo(${1})";
    var TypesWithCompareTo = {
      datetime: true,
      time: true,
      date: true
    };
    var spelFormat = function spelFormat2(tree2, config2) {
      return _spelFormat(tree2, config2, false);
    };
    var _spelFormat = function _spelFormat2(tree2, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var extendedConfig = extendConfig$1(config2, void 0, false);
      var res = formatItem$6(tree2, extendedConfig, meta, null);
      if (returnErrors) {
        return [res, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while exporting to SpEL:", meta.errors);
        return res;
      }
    };
    var formatItem$6 = function formatItem2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      if (!item)
        return void 0;
      var type = item.get("type");
      if (type === "group" || type === "rule_group") {
        return formatGroup$6(item, config2, meta, parentField);
      } else if (type === "rule") {
        return formatRule$6(item, config2, meta, parentField);
      } else if (type == "switch_group") {
        return formatSwitch(item, config2, meta);
      } else if (type == "case_group") {
        return formatCase(item, config2, meta, parentField);
      }
      return void 0;
    };
    var formatCase = function formatCase2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var type = item.get("type");
      if (type != "case_group") {
        meta.errors.push("Unexpected child of type ".concat(type, " inside switch"));
        return void 0;
      }
      var properties2 = item.get("properties") || new immutableExports.Map();
      var _formatItemValue = formatItemValue$2(config2, properties2, meta, null, parentField, "!case_value"), _formatItemValue2 = _slicedToArray(_formatItemValue, 3), formattedValue = _formatItemValue2[0];
      _formatItemValue2[1];
      _formatItemValue2[2];
      var cond = formatGroup$6(item, config2, meta, parentField);
      return [cond, formattedValue];
    };
    var formatSwitch = function formatSwitch2(item, config2, meta) {
      item.get("properties") || new immutableExports.Map();
      var children = item.get("children1");
      if (!children)
        return void 0;
      var cases = children.map(function(currentChild) {
        return formatCase(currentChild, config2, meta, null);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      }).toArray();
      if (!cases.length)
        return void 0;
      if (cases.length == 1 && !cases[0][0]) {
        return cases[0][1];
      }
      var filteredCases = [];
      for (var i = 0; i < cases.length; i++) {
        if (i != cases.length - 1 && !cases[i][0]) {
          meta.errors.push("No condition for case ".concat(i));
        } else {
          filteredCases.push(cases[i]);
          if (i == cases.length - 1 && cases[i][0]) {
            filteredCases.push([void 0, null]);
          }
        }
      }
      var left2 = "", right2 = "";
      for (var _i = 0; _i < filteredCases.length; _i++) {
        var _filteredCases$_i = _slicedToArray(filteredCases[_i], 2), cond = _filteredCases$_i[0], value2 = _filteredCases$_i[1];
        if (value2 == void 0)
          value2 = "null";
        if (cond == void 0)
          cond = "true";
        if (_i != filteredCases.length - 1) {
          left2 += "(".concat(cond, " ? ").concat(value2, " : ");
          right2 += ")";
        } else {
          left2 += "".concat(value2);
        }
      }
      return left2 + right2;
    };
    var formatGroup$6 = function formatGroup2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var type = item.get("type");
      var properties2 = item.get("properties") || new immutableExports.Map();
      var mode = properties2.get("mode");
      var children = item.get("children1") || new immutableExports.List();
      var field = properties2.get("field");
      var conjunction = properties2.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var not = properties2.get("not");
      var isRuleGroup = type === "rule_group";
      var isRuleGroupArray = isRuleGroup && mode != "struct";
      var groupField = isRuleGroupArray ? field : parentField;
      var groupFieldDef = getFieldConfig$8(config2, groupField) || {};
      var isSpelArray = groupFieldDef.isSpelArray;
      var fieldSeparator = config2.settings.fieldSeparator;
      var groupOperator = properties2.get("operator");
      if (!groupOperator && (!mode || mode == "some")) {
        groupOperator = "some";
      }
      var realGroupOperator = checkOp(config2, groupOperator, field);
      var isGroupOpRev = realGroupOperator != groupOperator;
      var realGroupOperatorDefinition = groupOperator && getOperatorConfig$4(config2, realGroupOperator, field) || null;
      var isGroup0 = isRuleGroup && (!realGroupOperator || realGroupOperatorDefinition.cardinality == 0);
      var _formatItemValue3 = formatItemValue$2(config2, properties2, meta, realGroupOperator, parentField, null), _formatItemValue4 = _slicedToArray(_formatItemValue3, 3), formattedValue = _formatItemValue4[0], valueSrc = _formatItemValue4[1], valueType = _formatItemValue4[2];
      var list = children.map(function(currentChild) {
        return formatItem$6(currentChild, config2, meta, groupField);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (isRuleGroupArray && !isGroup0) {
        if (formattedValue == void 0)
          return void 0;
      } else {
        if (!list.size)
          return void 0;
      }
      var omitBrackets = isRuleGroup;
      var filter = list.size ? conjunctionDefinition.spelFormatConj(list, conjunction, not, omitBrackets) : null;
      var ret;
      if (isRuleGroupArray) {
        var formattedField = formatField$4(meta, config2, field, parentField);
        var sep = fieldSeparator || ".";
        var getSize = sep + (isSpelArray ? "length" : "size()");
        var fullSize = "".concat(formattedField).concat(getSize);
        var filteredSize = filter ? "".concat(formattedField, ".?[").concat(filter, "]").concat(getSize) : fullSize;
        var groupValue = isGroup0 ? fullSize : formattedValue;
        ret = formatExpression(meta, config2, properties2, filteredSize, groupValue, realGroupOperator, valueSrc, valueType, isGroupOpRev);
      } else {
        ret = filter;
      }
      return ret;
    };
    var buildFnToFormatOp$4 = function buildFnToFormatOp2(operator, operatorDefinition, valueType) {
      var spelOp = operatorDefinition.spelOp;
      if (!spelOp)
        return void 0;
      var isSign = spelOp.includes("${0}");
      var isCompareTo = TypesWithCompareTo[valueType];
      var sop = spelOp;
      var fn;
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      if (isCompareTo) {
        fn = function fn2(field, op, values2, valueSrc, valueType2, opDef, operatorOptions, fieldDef) {
          var compareRes = compareToSign.replace(/\${(\w+)}/g, function(_2, k2) {
            return k2 == 0 ? field : cardinality > 1 ? values2[k2 - 1] : values2;
          });
          return "".concat(compareRes, " ").concat(sop, " 0");
        };
      } else if (isSign) {
        fn = function fn2(field, op, values2, valueSrc, valueType2, opDef, operatorOptions, fieldDef) {
          return spelOp.replace(/\${(\w+)}/g, function(_2, k2) {
            return k2 == 0 ? field : cardinality > 1 ? values2[k2 - 1] : values2;
          });
        };
      } else if (cardinality == 0) {
        fn = function fn2(field, op, values2, valueSrc, valueType2, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " ").concat(sop);
        };
      } else if (cardinality == 1) {
        fn = function fn2(field, op, values2, valueSrc, valueType2, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " ").concat(sop, " ").concat(values2);
        };
      }
      return fn;
    };
    var formatExpression = function formatExpression2(meta, config2, properties2, formattedField, formattedValue, operator, valueSrc, valueType) {
      var isRev = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var field = properties2.get("field");
      var opDef = getOperatorConfig$4(config2, operator, field) || {};
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operatorOptions = properties2.get("operatorOptions");
      var fn = opDef.spelFormatOp || buildFnToFormatOp$4(operator, opDef, valueType);
      if (!fn) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var args = [formattedField, operator, formattedValue, valueSrc, valueType, omit$1(opDef, opDefKeysToOmit), operatorOptions, fieldDef];
      var ret;
      ret = fn.call.apply(fn, [config2.ctx].concat(args));
      if (isRev) {
        ret = config2.settings.spelFormatReverse(ret);
      }
      if (ret === void 0) {
        meta.errors.push("Operator ".concat(operator, " is not supported for value source ").concat(valueSrc));
      }
      return ret;
    };
    var checkOp = function checkOp2(config2, operator, field) {
      if (!operator)
        return void 0;
      var opDef = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = opDef.reversedOp;
      var revOpDef = getOperatorConfig$4(config2, reversedOp, field) || {};
      var canFormatOp = opDef.spelOp || opDef.spelFormatOp;
      var canFormatRevOp = revOpDef.spelOp || revOpDef.spelFormatOp;
      if (!canFormatOp && !canFormatRevOp) {
        return void 0;
      }
      if (!canFormatOp && canFormatRevOp) {
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOpDef, opDef];
        opDef = _ref2[0];
        revOpDef = _ref2[1];
      }
      return operator;
    };
    var formatRule$6 = function formatRule2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var properties2 = item.get("properties") || new immutableExports.Map();
      var field = properties2.get("field");
      var fieldSrc = properties2.get("fieldSrc");
      var operator = properties2.get("operator");
      if (field == null || operator == null)
        return void 0;
      var realOp = checkOp(config2, operator, field);
      if (!realOp) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var isRev = realOp != operator;
      var _formatItemValue5 = formatItemValue$2(config2, properties2, meta, realOp, parentField, null), _formatItemValue6 = _slicedToArray(_formatItemValue5, 3), formattedValue = _formatItemValue6[0], valueSrc = _formatItemValue6[1], valueType = _formatItemValue6[2];
      if (formattedValue === void 0)
        return void 0;
      var formattedField = formatLhs(meta, config2, field, fieldSrc, parentField);
      if (formattedField === void 0)
        return void 0;
      var res = formatExpression(meta, config2, properties2, formattedField, formattedValue, realOp, valueSrc, valueType, isRev);
      return res;
    };
    var formatLhs = function formatLhs2(meta, config2, field, fieldSrc) {
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (fieldSrc === "func")
        return formatFunc$5(meta, config2, field, parentField);
      else
        return formatField$4(meta, config2, field, parentField);
    };
    var formatItemValue$2 = function formatItemValue2(config2, properties2, meta, operator, parentField) {
      var expectedValueType = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var field = properties2.get("field");
      var iValueSrc = properties2.get("valueSrc");
      var iValueType = properties2.get("valueType");
      if (expectedValueType == "!case_value" || iValueType && iValueType.get(0) == "case_value") {
        field = "!case_value";
      }
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var iValue = properties2.get("value");
      var asyncListValues = properties2.get("asyncListValues");
      var valueSrcs = [];
      var valueTypes = [];
      var formattedValue;
      if (iValue != void 0) {
        var fvalue = iValue.map(function(currentValue, ind) {
          var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
          var valueType = iValueType ? iValueType.get(ind) : null;
          var cValue = completeValue(currentValue, valueSrc, config2);
          var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
          var fieldWidgetDef = omit$1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
          var fv = formatValue$5(meta, config2, cValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDefinition, parentField, asyncListValues);
          if (fv !== void 0) {
            valueSrcs.push(valueSrc);
            valueTypes.push(valueType);
          }
          return fv;
        });
        var hasUndefinedValues = fvalue.filter(function(v2) {
          return v2 === void 0;
        }).size > 0;
        if (!(fvalue.size < cardinality || hasUndefinedValues)) {
          formattedValue = cardinality > 1 ? fvalue.toArray() : cardinality == 1 ? fvalue.first() : null;
        }
      }
      return [formattedValue, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0]];
    };
    var formatValue$5 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef) {
      var parentField = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : null;
      var asyncListValues = arguments.length > 10 ? arguments[10] : void 0;
      if (currentValue === void 0)
        return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField$4(meta, config2, currentValue, parentField);
      } else if (valueSrc == "func") {
        ret = formatFunc$5(meta, config2, currentValue, parentField);
      } else {
        if (typeof fieldWidgetDef.spelFormatValue === "function") {
          var fn = fieldWidgetDef.spelFormatValue;
          var args = [
            currentValue,
            _objectSpread$z(_objectSpread$z({}, pick$1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            //useful options: valueFormat for date/time
            omit$1(fieldWidgetDef, widgetDefKeysToOmit)
          ];
          if (operator) {
            args.push(operator);
            args.push(operatorDef);
          }
          if (valueSrc == "field") {
            var valFieldDefinition = getFieldConfig$8(config2, currentValue) || {};
            args.push(valFieldDefinition);
          }
          ret = fn.call.apply(fn, [config2.ctx].concat(args));
        } else {
          ret = spelEscape(currentValue);
        }
      }
      return ret;
    };
    var formatField$4 = function formatField2(meta, config2, field) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      if (!field)
        return;
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var fieldParts = getFieldParts$4(field, config2);
      var fieldPartsConfigs = getFieldPartsConfigs(field, config2, parentField);
      var formatFieldFn = config2.settings.formatSpelField;
      var fieldName = formatFieldName(field, config2, meta, parentField);
      var fieldPartsMeta = fieldPartsConfigs.map(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 3), key = _ref4[0], cnf = _ref4[1], parentCnf = _ref4[2];
        var parent2;
        if (parentCnf) {
          if (parentCnf.type == "!struct" || parentCnf.type == "!group" && parentCnf.mode == "struct")
            parent2 = cnf.isSpelMap ? "map" : "class";
          else if (parentCnf.type == "!group")
            parent2 = cnf.isSpelItemMap ? "[map]" : "[class]";
          else
            parent2 = "class";
        }
        var isSpelVariable = cnf === null || cnf === void 0 ? void 0 : cnf.isSpelVariable;
        return {
          key,
          parent: parent2,
          isSpelVariable,
          fieldSeparator
        };
      });
      var formattedField = formatFieldFn.call(config2.ctx, fieldName, parentField, fieldParts, fieldPartsMeta, fieldDefinition, config2);
      return formattedField;
    };
    var formatFunc$5 = function formatFunc2(meta, config2, currentValue) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var funcKey = currentValue.get("func");
      var args = currentValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig) {
        meta.errors.push("Func ".concat(funcKey, " is not defined in config"));
        return void 0;
      }
      var formattedArgs = {};
      var gaps = [];
      var missingArgKeys = [];
      for (var argKey in funcConfig.args) {
        var _argConfig$spelEscape;
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var _defaultValue = argConfig.defaultValue, isOptional = argConfig.isOptional;
        var defaultValueSrc = _defaultValue !== null && _defaultValue !== void 0 && _defaultValue.func ? "func" : "value";
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var doEscape = (_argConfig$spelEscape = argConfig.spelEscapeForFormat) !== null && _argConfig$spelEscape !== void 0 ? _argConfig$spelEscape : true;
        var operator = null;
        var widget = getWidgetForFieldOp$3(config2, argConfig, operator, argValueSrc);
        var fieldWidgetDef = omit$1(getFieldWidgetConfig$3(config2, argConfig, operator, widget, argValueSrc), ["factory"]);
        var formattedArgVal = formatValue$5(meta, config2, argValue, argValueSrc, argConfig.type, fieldWidgetDef, fieldDef, null, null, parentField, argAsyncListValues);
        if (argValue != void 0 && formattedArgVal === void 0) {
          if (argValueSrc != "func")
            meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return void 0;
        }
        var formattedDefaultVal = void 0;
        if (formattedArgVal === void 0 && !isOptional && _defaultValue != void 0) {
          var defaultWidget = getWidgetForFieldOp$3(config2, argConfig, operator, defaultValueSrc);
          var defaultFieldWidgetDef = omit$1(getFieldWidgetConfig$3(config2, argConfig, operator, defaultWidget, defaultValueSrc), ["factory"]);
          formattedDefaultVal = formatValue$5(meta, config2, _defaultValue, defaultValueSrc, argConfig.type, defaultFieldWidgetDef, fieldDef, null, null, parentField, argAsyncListValues);
          if (formattedDefaultVal === void 0) {
            if (defaultValueSrc != "func")
              meta.errors.push("Can't format default value of arg ".concat(argKey, " for func ").concat(funcKey));
            return void 0;
          }
        }
        var finalFormattedVal = formattedArgVal !== null && formattedArgVal !== void 0 ? formattedArgVal : formattedDefaultVal;
        if (finalFormattedVal !== void 0) {
          if (gaps.length) {
            var _iterator = _createForOfIteratorHelper$d(gaps), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var missedArgKey = _step.value;
                formattedArgs[missedArgKey] = void 0;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            gaps = [];
          }
          formattedArgs[argKey] = doEscape ? finalFormattedVal : argValue !== null && argValue !== void 0 ? argValue : _defaultValue;
        } else {
          if (!isOptional)
            missingArgKeys.push(argKey);
          gaps.push(argKey);
        }
      }
      if (missingArgKeys.length) {
        return void 0;
      }
      var ret;
      if (typeof funcConfig.spelFormatFunc === "function") {
        var fn = funcConfig.spelFormatFunc;
        var _args = [formattedArgs];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else if (funcConfig.spelFunc) {
        ret = funcConfig.spelFunc.replace(/\${(\w+)}/g, function(found, argKey2) {
          var _formattedArgs$argKey;
          return (_formattedArgs$argKey = formattedArgs[argKey2]) !== null && _formattedArgs$argKey !== void 0 ? _formattedArgs$argKey : found;
        });
        var optionalArgs = Object.keys(funcConfig.args || {}).reverse().filter(function(argKey2) {
          return !!funcConfig.args[argKey2].isOptional;
        });
        var _iterator2 = _createForOfIteratorHelper$d(optionalArgs), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _argKey = _step2.value;
            if (formattedArgs[_argKey] != void 0)
              break;
            ret = ret.replace(new RegExp("(, )?\\${" + _argKey + "}", "g"), "");
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        ret = ret.replace(/\${(\w+)}/g, "null");
      } else {
        meta.errors.push("Func ".concat(funcKey, " is not supported"));
      }
      return ret;
    };
    function _createForOfIteratorHelper$c(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$c(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e2) {
            throw _e2;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$c(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$c(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$c(o, minLen);
    }
    function _arrayLikeToArray$c(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$y(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$y(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$y(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$y(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var SpelPrimitiveTypes = {
      number: "number",
      string: "text",
      "boolean": "boolean",
      "null": "null"
      // should not be
    };
    var SpelPrimitiveClasses = {
      String: "text"
    };
    var ListValueType = "multiselect";
    var isFuncableProperty = function isFuncableProperty2(p2) {
      return ["length"].includes(p2);
    };
    var isObject$7 = function isObject2(v2) {
      return _typeof$1(v2) == "object" && v2 !== null && !Array.isArray(v2);
    };
    var loadFromSpel = function loadFromSpel2(logicTree, config2) {
      return _loadFromSpel(logicTree, config2, true);
    };
    var _loadFromSpel = function _loadFromSpel2(spelStr, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var extendedConfig = extendConfig$1(config2, void 0, false);
      var conv = buildConv(extendedConfig);
      var compiledExpression;
      var convertedObj;
      var jsTree = void 0;
      try {
        var compileRes = spel2jsExports.SpelExpressionEvaluator.compile(spelStr);
        compiledExpression = compileRes._compiledExpression;
      } catch (e2) {
        meta.errors.push(e2);
      }
      if (compiledExpression) {
        convertedObj = postprocessCompiled(compiledExpression, meta);
        logger$1.debug("convertedObj:", convertedObj, meta);
        jsTree = convertToTree(convertedObj, conv, extendedConfig, meta);
        if (jsTree && jsTree.type != "group" && jsTree.type != "switch_group") {
          jsTree = wrapInDefaultConj(jsTree, extendedConfig, convertedObj["not"]);
        }
        logger$1.debug("jsTree:", jsTree);
      }
      var immTree = jsTree ? loadTree$1(jsTree) : void 0;
      if (returnErrors) {
        return [immTree, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while importing from SpEL:", meta.errors);
        return immTree;
      }
    };
    var postprocessCompiled = function postprocessCompiled2(expr, meta) {
      var parentExpr = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var type = expr.getType();
      var children = expr.getChildren().map(function(child) {
        return postprocessCompiled2(child, meta, expr);
      });
      if (type == "op-or" || type == "op-and") {
        children = children.reduce(function(acc, child) {
          var canFlatize = child.type == type && !child.not;
          var flat = canFlatize ? child.children : [child];
          return [].concat(_toConsumableArray(acc), _toConsumableArray(flat));
        }, []);
      }
      if (type == "op-not") {
        if (children.length != 1) {
          meta.errors.push("Operator NOT should have 1 child, but got ".concat(children.length, "}"));
        }
        return _objectSpread$y(_objectSpread$y({}, children[0]), {}, {
          not: !(children[0].not || false)
        });
      }
      if (type == "compound") {
        children = children.filter(function(child) {
          var isListFix = child.type == "selection" && child.children.length == 1 && child.children[0].type == "boolean" && child.children[0].val == true;
          return !isListFix;
        });
        var selection = children.find(function(child) {
          return child.type == "selection";
        });
        if (selection && selection.children.length != 1) {
          meta.errors.push("Selection should have 1 child, but got ".concat(selection.children.length));
        }
        var filter = selection ? selection.children[0] : null;
        var lastChild = children[children.length - 1];
        var isSize = lastChild.type == "method" && lastChild.val.methodName == "size" || lastChild.type == "!func" && lastChild.methodName == "size";
        var isLength2 = lastChild.type == "property" && lastChild.val == "length";
        var sourceParts = children.filter(function(child) {
          return child !== selection && child !== lastChild;
        });
        var source = {
          type: "compound",
          children: sourceParts
        };
        var isAggr = (isSize || isLength2) && convertPath(sourceParts) != null;
        if (isAggr) {
          return {
            type: "!aggr",
            filter,
            source
          };
        }
        children = children.filter(function(child) {
          var isThis = child.type == "variable" && child.val == "this";
          var isRoot = child.type == "variable" && child.val == "root";
          return !(isThis || isRoot);
        });
        children = children.map(function(child) {
          if (child.type == "indexer" && child.children.length == 1) {
            return {
              type: "indexer",
              val: child.children[0].val,
              itype: child.children[0].type
            };
          } else {
            return child;
          }
        });
        if (lastChild.type == "!func") {
          var ret = {};
          var curr = ret;
          do {
            var _lastChild, _lastChild2;
            Object.assign(curr, lastChild);
            children = children.filter(function(child) {
              return child !== lastChild;
            });
            lastChild = children[children.length - 1];
            if (((_lastChild2 = lastChild) === null || _lastChild2 === void 0 ? void 0 : _lastChild2.type) == "!func") {
              curr.obj = {};
              curr = curr.obj;
            } else {
              if (children.length > 1) {
                curr.obj = {
                  type: "compound",
                  children
                };
              } else {
                curr.obj = lastChild;
              }
            }
          } while (((_lastChild = lastChild) === null || _lastChild === void 0 ? void 0 : _lastChild.type) == "!func");
          return ret;
        }
      }
      var val;
      try {
        if (expr.getRaw) {
          val = expr.getRaw();
        } else if (expr.getValue.length == 0) {
          val = expr.getValue();
        }
      } catch (e2) {
        logger$1.error("[spel2js] Error in getValue()", e2);
      }
      if (type == "ternary") {
        val = flatizeTernary(children);
      }
      if (_typeof$1(val) === "object" && val !== null) {
        if (val.methodName || val.functionName) {
          val.args = val.args.map(function(child) {
            return postprocessCompiled2(child, meta, expr);
          });
        }
      }
      if (type == "list") {
        val = val.map(function(item) {
          return postprocessCompiled2(item, meta, expr);
        });
        if (!parentExpr && val.length == 1) {
          return val[0];
        }
      }
      if (type == "constructorref") {
        var qid = children.find(function(child) {
          return child.type == "qualifiedidentifier";
        });
        var cls = qid === null || qid === void 0 ? void 0 : qid.val;
        if (!cls) {
          meta.errors.push("Can't find qualifiedidentifier in constructorref children: ".concat(JSON.stringify(children)));
          return void 0;
        }
        var args = children.filter(function(child) {
          return child.type != "qualifiedidentifier";
        });
        return {
          type: "!new",
          cls,
          args
        };
      }
      if (type == "typeref") {
        var _qid = children.find(function(child) {
          return child.type == "qualifiedidentifier";
        });
        var _cls = _qid === null || _qid === void 0 ? void 0 : _qid.val;
        if (!_cls) {
          meta.errors.push("Can't find qualifiedidentifier in typeref children: ".concat(JSON.stringify(children)));
          return void 0;
        }
        children.filter(function(child) {
          return child.type != "qualifiedidentifier";
        });
        return {
          type: "!type",
          cls: _cls
        };
      }
      if (type == "function" || type == "method") {
        var _val = val, functionName = _val.functionName, methodName = _val.methodName, _args2 = _val.args;
        return {
          type: "!func",
          methodName: functionName || methodName,
          isVar: type == "function",
          args: _args2
        };
      }
      return {
        type,
        children,
        val
      };
    };
    var flatizeTernary = function flatizeTernary2(children) {
      var flat = [];
      function _processTernaryChildren(tern) {
        var _tern = _slicedToArray(tern, 3), cond = _tern[0], if_val = _tern[1], else_val = _tern[2];
        flat.push([cond, if_val]);
        if ((else_val === null || else_val === void 0 ? void 0 : else_val.type) == "ternary") {
          _processTernaryChildren(else_val.children);
        } else {
          flat.push([void 0, else_val]);
        }
      }
      _processTernaryChildren(children);
      return flat;
    };
    var buildConv = function buildConv2(config2) {
      var operators2 = {};
      var _loop = function _loop3(opKey2) {
        var opConfig = config2.operators[opKey2];
        if (opConfig.spelOps) {
          opConfig.spelOps.forEach(function(spelOp2) {
            var opk2 = spelOp2;
            if (!operators2[opk2])
              operators2[opk2] = [];
            operators2[opk2].push(opKey2);
          });
        } else if (opConfig.spelOp) {
          var opk = opConfig.spelOp;
          if (!operators2[opk])
            operators2[opk] = [];
          operators2[opk].push(opKey2);
        } else {
          logger$1.log("[spel] No spelOp for operator ".concat(opKey2));
        }
      };
      for (var opKey in config2.operators) {
        _loop(opKey);
      }
      var conjunctions2 = {};
      for (var conjKey in config2.conjunctions) {
        var conjunctionDefinition = config2.conjunctions[conjKey];
        var ck2 = conjunctionDefinition.spelConj || conjKey.toLowerCase();
        conjunctions2[ck2] = conjKey;
      }
      var funcs = {};
      var _iterator = _createForOfIteratorHelper$c(iterateFuncs(config2)), _step;
      try {
        var _loop2 = function _loop22() {
          var _step$value = _slicedToArray(_step.value, 2), funcPath = _step$value[0], funcConfig = _step$value[1];
          var fks = [];
          var spelFunc = funcConfig.spelFunc;
          if (typeof spelFunc === "string") {
            var optionalArgs = Object.keys(funcConfig.args || {}).reverse().filter(function(argKey) {
              return !!funcConfig.args[argKey].isOptional || funcConfig.args[argKey].defaultValue != void 0;
            });
            var funcSignMain = spelFunc.replace(/\${(\w+)}/g, function(_2, _k) {
              return "?";
            });
            var funcSignsOptional = optionalArgs.reduce(function(acc, argKey) {
              return [].concat(_toConsumableArray(acc), [[argKey].concat(_toConsumableArray(acc[acc.length - 1] || []))]);
            }, []).map(function(optionalArgKeys) {
              return spelFunc.replace(/(?:, )?\${(\w+)}/g, function(found, a) {
                return optionalArgKeys.includes(a) ? "" : found;
              }).replace(/\${(\w+)}/g, function(_2, _k) {
                return "?";
              });
            });
            fks = [funcSignMain].concat(_toConsumableArray(funcSignsOptional));
          }
          var _iterator3 = _createForOfIteratorHelper$c(fks), _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
              var _fk = _step3.value;
              if (!funcs[_fk])
                funcs[_fk] = [];
              funcs[_fk].push(funcPath);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        };
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          _loop2();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var valueFuncs = {};
      for (var w2 in config2.widgets) {
        var widgetDef = config2.widgets[w2];
        var spelImportFuncs = widgetDef.spelImportFuncs;
        widgetDef.type;
        if (spelImportFuncs) {
          var _iterator2 = _createForOfIteratorHelper$c(spelImportFuncs), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var fk2 = _step2.value;
              if (typeof fk2 === "string") {
                var fs = fk2.replace(/\${(\w+)}/g, function(_2, k2) {
                  return "?";
                });
                var argsOrder = _toConsumableArray(fk2.matchAll(/\${(\w+)}/g)).map(function(_ref) {
                  var _ref2 = _slicedToArray(_ref, 2), _2 = _ref2[0], k2 = _ref2[1];
                  return k2;
                });
                if (!valueFuncs[fs])
                  valueFuncs[fs] = [];
                valueFuncs[fs].push({
                  w: w2,
                  argsOrder
                });
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
      var opFuncs = {};
      for (var op in config2.operators) {
        var opDef = config2.operators[op];
        var spelOp = opDef.spelOp;
        if (spelOp !== null && spelOp !== void 0 && spelOp.includes("${0}")) {
          var _fs = spelOp.replace(/\${(\w+)}/g, function(_2, k2) {
            return "?";
          });
          var _argsOrder = _toConsumableArray(spelOp.matchAll(/\${(\w+)}/g)).map(function(_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2);
            _ref4[0];
            var k2 = _ref4[1];
            return k2;
          });
          if (!opFuncs[_fs])
            opFuncs[_fs] = [];
          opFuncs[_fs].push({
            op,
            argsOrder: _argsOrder
          });
        }
      }
      var compareToSS = compareToSign.replace(/\${(\w+)}/g, function(_2, k2) {
        return "?";
      });
      opFuncs[compareToSS] = [{
        op: "!compare",
        argsOrder: ["0", "1"]
      }];
      return {
        operators: operators2,
        conjunctions: conjunctions2,
        funcs,
        valueFuncs,
        opFuncs
      };
    };
    var convertToTree = function convertToTree2(spel, conv, config2, meta) {
      var parentSpel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (!spel)
        return void 0;
      var res, canParseAsArg = true;
      if (spel.type.indexOf("op-") === 0 || spel.type === "matches") {
        res = convertOp(spel, conv, config2, meta, parentSpel);
      } else if (spel.type == "!aggr") {
        var _groupFilter;
        var groupFieldValue = convertToTree2(spel.source, conv, config2, meta, _objectSpread$y(_objectSpread$y({}, spel), {}, {
          _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
        }));
        var groupFilter = convertToTree2(spel.filter, conv, config2, meta, _objectSpread$y(_objectSpread$y({}, spel), {}, {
          _groupField: groupFieldValue === null || groupFieldValue === void 0 ? void 0 : groupFieldValue.value
        }));
        if (((_groupFilter = groupFilter) === null || _groupFilter === void 0 ? void 0 : _groupFilter.type) == "rule") {
          groupFilter = wrapInDefaultConj(groupFilter, config2, spel.filter.not);
        }
        res = {
          groupFilter,
          groupFieldValue
        };
        if (!parentSpel) {
          res = void 0;
          meta.errors.push("Unexpected !aggr in root");
          canParseAsArg = false;
        }
      } else if (spel.type == "ternary") {
        var children1 = {};
        spel.val.forEach(function(v2) {
          var _v = _slicedToArray(v2, 2), cond = _v[0], val = _v[1];
          var caseI = buildCase(cond, val, conv, config2, meta, spel);
          if (caseI) {
            children1[caseI.id] = caseI;
          }
        });
        res = {
          type: "switch_group",
          id: uuid$1(),
          children1,
          properties: {}
        };
      }
      if (!res && canParseAsArg) {
        res = convertArg(spel, conv, config2, meta, parentSpel);
      }
      if (res && !res.type && !parentSpel) {
        var sw = buildSimpleSwitch(spel, conv, config2, meta);
        if (sw) {
          res = sw;
        } else {
          res = void 0;
          meta.errors.push("Can't convert rule of type ".concat(spel.type, ", it looks like var/literal"));
        }
      }
      return res;
    };
    var convertOp = function convertOp2(spel, conv, config2, meta) {
      var parentSpel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var res;
      var op = spel.type.startsWith("op-") ? spel.type.slice("op-".length) : spel.type;
      var isUnary = (op == "minus" || op == "plus") && spel.children.length == 1;
      if (isUnary) {
        spel.isUnary = true;
        return convertOp2(spel.children[0], conv, config2, meta, spel);
      }
      var isBetweenNormal = op == "and" && spel.children.length == 2 && spel.children[0].type == "op-ge" && spel.children[1].type == "op-le";
      var isBetweenRev = op == "or" && spel.children.length == 2 && spel.children[0].type == "op-lt" && spel.children[1].type == "op-gt";
      var isBetween2 = isBetweenNormal || isBetweenRev;
      if (isBetween2) {
        var _spel$children$0$chil = _slicedToArray(spel.children[0].children, 2), left2 = _spel$children$0$chil[0], from2 = _spel$children$0$chil[1];
        var _spel$children$1$chil = _slicedToArray(spel.children[1].children, 2), right2 = _spel$children$1$chil[0], to2 = _spel$children$1$chil[1];
        var isSameSource = compareArgs(left2, right2, spel, conv, config2, meta, parentSpel);
        if (isSameSource) {
          from2.val;
          to2.val;
          var oneSpel = {
            type: "op-between",
            children: [left2, from2, to2]
          };
          return convertOp2(oneSpel, conv, config2, meta, parentSpel);
        }
      }
      var opKeys = conv.operators[op];
      if (op == "eq" && spel.children[1].type == "null") {
        opKeys = ["is_null"];
      } else if (op == "ne" && spel.children[1].type == "null") {
        opKeys = ["is_not_null"];
      } else if (op == "le" && spel.children[1].type == "string" && spel.children[1].val == "") {
        opKeys = ["is_empty"];
      } else if (op == "gt" && spel.children[1].type == "string" && spel.children[1].val == "") {
        opKeys = ["is_not_empty"];
      } else if (op == "between") {
        opKeys = ["between"];
      }
      var convertChildren = function convertChildren2() {
        var _newChildren;
        var newChildren = spel.children.map(function(child) {
          return convertToTree(child, conv, config2, meta, _objectSpread$y(_objectSpread$y({}, spel), {}, {
            _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
          }));
        });
        if (newChildren.length >= 2 && ((_newChildren = newChildren) === null || _newChildren === void 0 || (_newChildren = _newChildren[0]) === null || _newChildren === void 0 ? void 0 : _newChildren.type) == "!compare") {
          newChildren = newChildren[0].children;
        }
        return newChildren;
      };
      if (op == "and" || op == "or") {
        var children1 = {};
        var vals = convertChildren();
        vals.forEach(function(v2) {
          if (v2) {
            var id2 = uuid$1();
            v2.id = id2;
            if (v2.type != void 0) {
              children1[id2] = v2;
            } else {
              meta.errors.push("Bad item in AND/OR: ".concat(JSON.stringify(v2)));
            }
          }
        });
        res = {
          type: "group",
          id: uuid$1(),
          children1,
          properties: {
            conjunction: conv.conjunctions[op],
            not: spel.not
          }
        };
      } else if (opKeys) {
        var _fieldObj$groupFieldV, _convertedArgs;
        var _vals = convertChildren();
        var fieldObj = _vals[0];
        var convertedArgs = _vals.slice(1);
        var groupField = fieldObj === null || fieldObj === void 0 || (_fieldObj$groupFieldV = fieldObj.groupFieldValue) === null || _fieldObj$groupFieldV === void 0 ? void 0 : _fieldObj$groupFieldV.value;
        var opArg = (_convertedArgs = convertedArgs) === null || _convertedArgs === void 0 ? void 0 : _convertedArgs[0];
        var opKey = opKeys[0];
        if (opKeys.length > 1) {
          var _vals$, _vals$2;
          var valueType = ((_vals$ = _vals[0]) === null || _vals$ === void 0 ? void 0 : _vals$.valueType) || ((_vals$2 = _vals[1]) === null || _vals$2 === void 0 ? void 0 : _vals$2.valueType);
          var field = fieldObj === null || fieldObj === void 0 ? void 0 : fieldObj.value;
          var widgets2 = opKeys.map(function(op2) {
            return {
              op: op2,
              widget: getWidgetForFieldOp$3(config2, field, op2)
            };
          });
          logger$1.warn("[spel] Spel operator ".concat(op, " can be mapped to ").concat(opKeys, "."), "widgets:", widgets2, "vals:", _vals, "valueType=", valueType);
          if (op == "eq" || op == "ne") {
            var ws = widgets2.find(function(_ref5) {
              _ref5.op;
              var widget = _ref5.widget;
              return widget && widget != "field";
            });
            if (ws) {
              opKey = ws.op;
            }
          }
        }
        if (fieldObj !== null && fieldObj !== void 0 && fieldObj.groupFieldValue) {
          if (opArg && opArg.groupFieldValue && opArg.groupFieldValue.valueSrc == "field" && opArg.groupFieldValue.value == groupField) {
            opKey = "all";
            convertedArgs = [];
          } else if (opKey == "equal" && opArg.valueSrc == "value" && opArg.valueType == "number" && opArg.value == 0) {
            opKey = "none";
            convertedArgs = [];
          } else if (opKey == "greater" && opArg.valueSrc == "value" && opArg.valueType == "number" && opArg.value == 0) {
            opKey = "some";
            convertedArgs = [];
          }
        }
        var canRev = true;
        var needWrapReverse = false;
        if (spel.not && canRev) {
          var opConfig = config2.operators[opKey];
          if (opConfig.reversedOp) {
            opKey = opConfig.reversedOp;
            spel.not = false;
          } else {
            needWrapReverse = true;
          }
        }
        if (!fieldObj)
          ;
        else if (fieldObj.groupFieldValue) {
          if (fieldObj.groupFieldValue.valueSrc != "field") {
            meta.errors.push("Expected group field ".concat(JSON.stringify(fieldObj)));
          }
          res = buildRuleGroup(fieldObj, opKey, convertedArgs, config2, meta);
        } else {
          if (fieldObj.valueSrc != "field" && fieldObj.valueSrc != "func") {
            meta.errors.push("Expected field/func at LHS, but got ".concat(JSON.stringify(fieldObj)));
          }
          var _field = fieldObj.value;
          res = buildRule(config2, meta, _field, opKey, convertedArgs);
        }
        if (needWrapReverse) {
          if (res.type !== "group") {
            res = wrapInDefaultConj(res, config2, spel.not);
          } else {
            res.properties.not = !res.properties.not;
          }
        }
      } else {
        if (!parentSpel) {
          res = buildSimpleSwitch(spel, conv, config2, meta);
        }
      }
      return res;
    };
    var convertPath = function convertPath2(parts) {
      var meta = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var expectingField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var isError = false;
      var res = parts.map(function(c2) {
        if (c2.type == "variable" || c2.type == "property" || c2.type == "indexer" && c2.itype == "string") {
          return c2.val;
        } else {
          var _meta$errors, _meta$errors$push;
          isError = true;
          expectingField && (meta === null || meta === void 0 || (_meta$errors = meta.errors) === null || _meta$errors === void 0 || (_meta$errors$push = _meta$errors.push) === null || _meta$errors$push === void 0 ? void 0 : _meta$errors$push.call(_meta$errors, "Unexpected item in field path compound: ".concat(JSON.stringify(c2))));
        }
      });
      return !isError ? res : void 0;
    };
    var convertArg = function convertArg2(spel, conv, config2, meta, parentSpel) {
      if (spel == void 0)
        return void 0;
      var fieldSeparator = config2.settings.fieldSeparator;
      if (spel.type == "variable" || spel.type == "property") {
        var field = normalizeField(config2, spel.val, parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField);
        var fieldConfig = getFieldConfig$8(config2, field);
        var isVariable = spel.type == "variable";
        return {
          valueSrc: "field",
          valueType: fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type,
          isVariable,
          value: field
        };
      } else if (spel.type == "compound") {
        var parts = convertPath(spel.children, meta);
        if (parts) {
          var _spel$children;
          var _field2 = normalizeField(config2, parts.join(fieldSeparator), parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField);
          var _fieldConfig = getFieldConfig$8(config2, _field2);
          var _isVariable = ((_spel$children = spel.children) === null || _spel$children === void 0 || (_spel$children = _spel$children[0]) === null || _spel$children === void 0 ? void 0 : _spel$children.type) == "variable";
          return {
            valueSrc: "field",
            valueType: _fieldConfig === null || _fieldConfig === void 0 ? void 0 : _fieldConfig.type,
            isVariable: _isVariable,
            value: _field2
          };
        }
      } else if (SpelPrimitiveTypes[spel.type]) {
        var value2 = spel.val;
        var valueType = SpelPrimitiveTypes[spel.type];
        if (parentSpel !== null && parentSpel !== void 0 && parentSpel.isUnary) {
          value2 = -value2;
        }
        return {
          valueSrc: "value",
          valueType,
          value: value2
        };
      } else if (spel.type == "!new" && SpelPrimitiveClasses[spel.cls.at(-1)]) {
        var args = spel.args.map(function(v2) {
          return convertArg2(v2, conv, config2, meta, spel);
        });
        var _value = args === null || args === void 0 ? void 0 : args[0];
        var _valueType = SpelPrimitiveClasses[spel.cls.at(-1)];
        return _objectSpread$y(_objectSpread$y({}, _value), {}, {
          valueType: _valueType
        });
      } else if (spel.type == "list") {
        var _values$;
        var values2 = spel.val.map(function(v2) {
          return convertArg2(v2, conv, config2, meta, spel);
        });
        values2.length ? (_values$ = values2[0]) === null || _values$ === void 0 ? void 0 : _values$.valueType : null;
        var _value2 = values2.map(function(v2) {
          return v2 === null || v2 === void 0 ? void 0 : v2.value;
        });
        var _valueType2 = ListValueType;
        return {
          valueSrc: "value",
          valueType: _valueType2,
          value: _value2
        };
      } else if (spel.type == "op-plus" && (parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel.type) == "ternary") {
        return buildCaseValueConcat(spel, conv, config2, meta);
      }
      var maybe = convertFunc(spel, conv, config2, meta, parentSpel);
      if (maybe !== void 0) {
        return maybe;
      }
      meta.errors.push("Can't convert arg of type ".concat(spel.type));
      return void 0;
    };
    var buildFuncSignatures = function buildFuncSignatures2(spel) {
      var brns = [{
        s: "",
        params: [],
        objs: []
      }];
      _buildFuncSignatures(spel, brns);
      return brns.map(function(_ref6) {
        var s = _ref6.s, params = _ref6.params;
        return {
          s,
          params
        };
      }).reverse().filter(function(_ref7) {
        var s = _ref7.s;
        return s !== "" && s !== "?";
      });
    };
    var _buildFuncSignatures = function _buildFuncSignatures2(spel, brns) {
      var params = [], s = "";
      var type = spel.type, methodName = spel.methodName;
      spel.val;
      var obj = spel.obj, args = spel.args, isVar = spel.isVar, cls = spel.cls, children = spel.children;
      var lastChild = children === null || children === void 0 ? void 0 : children[children.length - 1];
      var currBrn = brns[brns.length - 1];
      if (type === "!func") {
        var o = obj;
        while (o) {
          var _currBrn$params;
          var _buildFuncSignatures22 = _buildFuncSignatures2(_objectSpread$y(_objectSpread$y({}, o), {}, {
            obj: null
          }), [{}]), _buildFuncSignatures3 = _slicedToArray(_buildFuncSignatures22, 2), s1 = _buildFuncSignatures3[0], params1 = _buildFuncSignatures3[1];
          if (s1 !== "?") {
            var newBrn = {
              s: currBrn.s,
              params: _toConsumableArray(currBrn.params),
              objs: _toConsumableArray(currBrn.objs)
            };
            currBrn.objs.unshift("?");
            currBrn.params.unshift(o);
            brns.push(newBrn);
            currBrn = brns[brns.length - 1];
          }
          currBrn.objs.unshift(s1);
          (_currBrn$params = currBrn.params).unshift.apply(_currBrn$params, _toConsumableArray(params1));
          o = o.type === "!func" ? o.obj : null;
        }
        var _iterator4 = _createForOfIteratorHelper$c(brns), _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
            var _brn$objs;
            var brn = _step4.value;
            params = [].concat(_toConsumableArray((brn === null || brn === void 0 ? void 0 : brn.params) || []), _toConsumableArray(args || []));
            s = "";
            if (brn !== null && brn !== void 0 && (_brn$objs = brn.objs) !== null && _brn$objs !== void 0 && _brn$objs.length)
              s += brn.objs.join(".") + ".";
            s += (isVar ? "#" : "") + methodName;
            s += "(" + (args || []).map(function(_2) {
              return "?";
            }).join(", ") + ")";
            brn.s = s;
            brn.params = params;
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      } else if (type === "!new") {
        params = args || [];
        s = "new ".concat(cls.join("."), "(").concat(params.map(function(_2) {
          return "?";
        }).join(", "), ")");
      } else if (type === "!type") {
        s = "T(".concat(cls.join("."), ")");
      } else if (type === "compound" && lastChild.type === "property" && isFuncableProperty(lastChild.val)) {
        s = children.map(function(c2) {
          var _params;
          if (c2 === lastChild)
            return c2.val;
          var _buildFuncSignatures4 = _buildFuncSignatures2(_objectSpread$y(_objectSpread$y({}, c2), {}, {
            obj: null
          }), [{}]), _buildFuncSignatures5 = _slicedToArray(_buildFuncSignatures4, 2), s12 = _buildFuncSignatures5[0], params12 = _buildFuncSignatures5[1];
          (_params = params).push.apply(_params, _toConsumableArray(params12));
          return s12;
        }).join(".");
      } else {
        params = [spel];
        s = "?";
      }
      if (currBrn) {
        currBrn.s = s;
        currBrn.params = params;
      }
      return [s, params];
    };
    var convertFunc = function convertFunc2(spel, conv, config2, meta, parentSpel) {
      var _fsigns$;
      var convertFuncArg = function convertFuncArg2(v2) {
        return convertArg(v2, conv, config2, meta, _objectSpread$y(_objectSpread$y({}, spel), {}, {
          _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
        }));
      };
      var fsigns = buildFuncSignatures(spel);
      var firstSign = fsigns === null || fsigns === void 0 || (_fsigns$ = fsigns[0]) === null || _fsigns$ === void 0 ? void 0 : _fsigns$.s;
      if (fsigns.length)
        logger$1.debug("Signatures for ", spel, ":", firstSign, fsigns);
      var maybeValue = convertFuncToValue(spel, conv, config2, meta, parentSpel, fsigns, convertFuncArg);
      if (maybeValue !== void 0)
        return maybeValue;
      var maybeOp = convertFuncToOp(spel, conv, config2, meta, parentSpel, fsigns, convertFuncArg);
      if (maybeOp !== void 0)
        return maybeOp;
      var funcKey, funcConfig, argsObj;
      var _iterator5 = _createForOfIteratorHelper$c(fsigns), _step5;
      try {
        var _loop3 = function _loop32() {
          var _step5$value = _step5.value, s = _step5$value.s, params = _step5$value.params;
          var funcKeys = conv.funcs[s];
          if (funcKeys) {
            funcKey = funcKeys[0];
            funcConfig = getFuncConfig$2(config2, funcKey);
            var _funcConfig = funcConfig, spelFunc = _funcConfig.spelFunc;
            var argsArr = params.map(convertFuncArg);
            var argsOrder = _toConsumableArray(spelFunc.matchAll(/\${(\w+)}/g)).map(function(_ref8) {
              var _ref9 = _slicedToArray(_ref8, 2), _2 = _ref9[0], k2 = _ref9[1];
              return k2;
            });
            argsObj = Object.fromEntries(argsOrder.map(function(argKey2, i) {
              return [argKey2, argsArr[i]];
            }));
            return "break";
          }
        };
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
          var _ret = _loop3();
          if (_ret === "break")
            break;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      if (!funcKey) {
        var _iterator6 = _createForOfIteratorHelper$c(iterateFuncs(config2)), _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
            var _step6$value = _slicedToArray(_step6.value, 2), f2 = _step6$value[0], fc2 = _step6$value[1];
            if (fc2.spelImport) {
              var parsed = void 0;
              try {
                parsed = fc2.spelImport(spel);
              } catch (_e) {
              }
              if (parsed) {
                funcKey = f2;
                funcConfig = getFuncConfig$2(config2, funcKey);
                argsObj = {};
                for (var argKey in parsed) {
                  argsObj[argKey] = convertFuncArg(parsed[argKey]);
                }
              }
            }
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      }
      if (funcKey) {
        var funcArgs = {};
        for (var _argKey in funcConfig.args) {
          var argConfig = funcConfig.args[_argKey];
          var argVal = argsObj[_argKey];
          if (argVal === void 0) {
            argVal = argConfig === null || argConfig === void 0 ? void 0 : argConfig.defaultValue;
            if (argVal === void 0) {
              if (argConfig !== null && argConfig !== void 0 && argConfig.isOptional)
                ;
              else {
                meta.errors.push("No value for arg ".concat(_argKey, " of func ").concat(funcKey));
                return void 0;
              }
            } else {
              var _argVal;
              argVal = {
                value: argVal,
                valueSrc: (_argVal = argVal) !== null && _argVal !== void 0 && _argVal.func ? "func" : "value",
                valueType: argConfig.type
              };
            }
          }
          if (argVal)
            funcArgs[_argKey] = argVal;
        }
        return {
          valueSrc: "func",
          value: {
            func: funcKey,
            args: funcArgs
          },
          valueType: funcConfig.returnType
        };
      }
      var methodName = spel.methodName;
      if (methodName)
        meta.errors.push("Signature ".concat(firstSign, " - failed to convert"));
      return void 0;
    };
    var convertFuncToValue = function convertFuncToValue2(spel, conv, config2, meta, parentSpel, fsigns, convertFuncArg) {
      var errs, foundSign, foundWidget;
      var candidates = [];
      for (var w2 in config2.widgets) {
        var widgetDef = config2.widgets[w2];
        var spelImportFuncs = widgetDef.spelImportFuncs;
        if (spelImportFuncs) {
          for (var i = 0; i < spelImportFuncs.length; i++) {
            var fj2 = spelImportFuncs[i];
            if (isObject$7(fj2)) {
              var bag = {};
              if (isJsonCompatible(fj2, spel, bag)) {
                for (var k2 in bag) {
                  bag[k2] = convertFuncArg(bag[k2]);
                }
                candidates.push({
                  s: "widgets.".concat(w2, ".spelImportFuncs[").concat(i, "]"),
                  w: w2,
                  argsObj: bag
                });
              }
            }
          }
        }
      }
      var _iterator7 = _createForOfIteratorHelper$c(fsigns), _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
          var _step7$value = _step7.value, _s = _step7$value.s, params = _step7$value.params;
          var found = conv.valueFuncs[_s] || [];
          var _iterator8 = _createForOfIteratorHelper$c(found), _step8;
          try {
            var _loop4 = function _loop42() {
              var _step8$value = _step8.value, w3 = _step8$value.w, argsOrder = _step8$value.argsOrder;
              var argsArr = params.map(convertFuncArg);
              var argsObj2 = Object.fromEntries(argsOrder.map(function(argKey, i2) {
                return [argKey, argsArr[i2]];
              }));
              candidates.push({
                s: _s,
                w: w3,
                argsObj: argsObj2
              });
            };
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
              _loop4();
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      for (var _i = 0, _candidates = candidates; _i < _candidates.length; _i++) {
        var _candidates$_i = _candidates[_i], s = _candidates$_i.s, _w = _candidates$_i.w, argsObj = _candidates$_i.argsObj;
        var _widgetDef = config2.widgets[_w];
        var spelImportValue = _widgetDef.spelImportValue, type = _widgetDef.type;
        foundWidget = _w;
        foundSign = s;
        errs = [];
        for (var _k2 in argsObj) {
          if (!["value"].includes(argsObj[_k2].valueSrc)) {
            errs.push("".concat(_k2, " has unsupported value src ").concat(argsObj[_k2].valueSrc));
          }
        }
        var value2 = argsObj.v.value;
        if (spelImportValue && !errs.length) {
          var _spelImportValue$call = spelImportValue.call(config2.ctx, argsObj.v, _widgetDef, argsObj);
          var _spelImportValue$call2 = _slicedToArray(_spelImportValue$call, 2);
          value2 = _spelImportValue$call2[0];
          errs = _spelImportValue$call2[1];
          if (errs && !Array.isArray(errs))
            errs = [errs];
        }
        if (!errs.length) {
          return {
            valueSrc: "value",
            valueType: type,
            value: value2
          };
        }
      }
      if (foundWidget && errs.length) {
        meta.errors.push("Signature ".concat(foundSign, " - looks like convertable to ").concat(foundWidget, ", but: ").concat(errs.join("; ")));
      }
      return void 0;
    };
    var convertFuncToOp = function convertFuncToOp2(spel, conv, config2, meta, parentSpel, fsigns, convertFuncArg) {
      var errs, opKey, foundSign;
      var _iterator9 = _createForOfIteratorHelper$c(fsigns), _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
          var _step9$value = _step9.value, s = _step9$value.s, params = _step9$value.params;
          var found = conv.opFuncs[s] || [];
          var _iterator10 = _createForOfIteratorHelper$c(found), _step10;
          try {
            var _loop5 = function _loop52() {
              var _argsArr$filter$find;
              var _step10$value = _step10.value, op = _step10$value.op, argsOrder = _step10$value.argsOrder;
              var argsArr = params.map(convertFuncArg);
              opKey = op;
              if (op === "!compare") {
                if (parentSpel.type.startsWith("op-") && parentSpel.children.length == 2 && parentSpel.children[1].type == "number" && parentSpel.children[1].val === 0) {
                  return {
                    v: {
                      type: "!compare",
                      children: argsArr
                    }
                  };
                } else {
                  errs.push("Result of compareTo() should be compared to 0");
                }
              }
              foundSign = s;
              errs = [];
              var opDef = config2.operators[opKey];
              var spelOp = opDef.spelOp, valueTypes = opDef.valueTypes;
              var argsObj = Object.fromEntries(argsOrder.map(function(argKey, i) {
                return [argKey, argsArr[i]];
              }));
              var field = argsObj["0"];
              var convertedArgs = Object.keys(argsObj).filter(function(k2) {
                return parseInt(k2) > 0;
              }).map(function(k2) {
                return argsObj[k2];
              });
              var valueType = (_argsArr$filter$find = argsArr.filter(function(a) {
                return !!a;
              }).find(function(_ref10) {
                var valueSrc = _ref10.valueSrc;
                return valueSrc === "value";
              })) === null || _argsArr$filter$find === void 0 ? void 0 : _argsArr$filter$find.valueType;
              if (valueTypes && valueType && !valueTypes.includes(valueType)) {
                errs.push("Op supports types ".concat(valueTypes, ", but got ").concat(valueType));
              }
              if (!errs.length) {
                return {
                  v: buildRule(config2, meta, field, opKey, convertedArgs, spel)
                };
              }
            };
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
              var _ret2 = _loop5();
              if (_typeof$1(_ret2) === "object")
                return _ret2.v;
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      if (opKey && errs.length) {
        meta.errors.push("Signature ".concat(foundSign, " - looks like convertable to ").concat(opKey, ", but: ").concat(errs.join("; ")));
      }
      return void 0;
    };
    var buildRule = function buildRule2(config2, meta, field, opKey, convertedArgs, spel) {
      var _field3;
      if (convertedArgs.filter(function(v2) {
        return v2 === void 0;
      }).length) {
        return void 0;
      }
      var fieldSrc = (_field3 = field) !== null && _field3 !== void 0 && _field3.func ? "func" : "field";
      if (isObject$7(field) && field.valueSrc) {
        fieldSrc = field.valueSrc;
        field = field.value;
      }
      var fieldConfig = getFieldConfig$8(config2, field);
      if (!fieldConfig) {
        meta.errors.push("No config for field ".concat(field));
        return void 0;
      }
      var canRev = true;
      var needWrapReverse = false;
      if (spel !== null && spel !== void 0 && spel.not && canRev) {
        var opConfig = config2.operators[opKey];
        if (opConfig.reversedOp) {
          opKey = opConfig.reversedOp;
          spel.not = false;
        } else {
          needWrapReverse = true;
        }
      }
      var widget = getWidgetForFieldOp$3(config2, field, opKey);
      var widgetConfig = config2.widgets[widget || fieldConfig.mainWidget];
      var asyncListValuesArr = convertedArgs.map(function(v2) {
        return v2.asyncListValues;
      }).filter(function(v2) {
        return v2 != void 0;
      });
      var asyncListValues = asyncListValuesArr.length ? asyncListValuesArr[0] : void 0;
      var res = {
        type: "rule",
        id: uuid$1(),
        properties: _objectSpread$y({
          field,
          fieldSrc,
          operator: opKey,
          value: convertedArgs.map(function(v2) {
            return v2.value;
          }),
          valueSrc: convertedArgs.map(function(v2) {
            return v2.valueSrc;
          }),
          valueType: convertedArgs.map(function(v2) {
            if (v2.valueSrc == "value") {
              return (widgetConfig === null || widgetConfig === void 0 ? void 0 : widgetConfig.type) || (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type) || v2.valueType;
            }
            return v2.valueType;
          })
        }, asyncListValues ? {
          asyncListValues
        } : {})
      };
      if (needWrapReverse) {
        res = wrapInDefaultConj(res, config2, spel === null || spel === void 0 ? void 0 : spel.not);
        if (spel !== null && spel !== void 0 && spel.not) {
          spel.not = false;
        }
      }
      return res;
    };
    var buildRuleGroup = function buildRuleGroup2(_ref11, opKey, convertedArgs, config2, meta) {
      var groupFilter = _ref11.groupFilter, groupFieldValue = _ref11.groupFieldValue;
      if (groupFieldValue.valueSrc != "field")
        throw "Bad groupFieldValue: ".concat(JSON.stringify(groupFieldValue));
      var groupField = groupFieldValue.value;
      var groupOpRule = buildRule(config2, meta, groupField, opKey, convertedArgs);
      if (!groupOpRule)
        return void 0;
      var fieldConfig = getFieldConfig$8(config2, groupField);
      var mode = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.mode;
      var res;
      if ((groupFilter === null || groupFilter === void 0 ? void 0 : groupFilter.type) === "group") {
        res = _objectSpread$y(_objectSpread$y({}, groupFilter || {}), {}, {
          type: "rule_group",
          properties: _objectSpread$y(_objectSpread$y(_objectSpread$y({}, groupOpRule.properties), (groupFilter === null || groupFilter === void 0 ? void 0 : groupFilter.properties) || {}), {}, {
            mode
          })
        });
      } else if (groupFilter) {
        res = _objectSpread$y(_objectSpread$y({}, groupOpRule || {}), {}, {
          type: "rule_group",
          children1: [groupFilter],
          properties: _objectSpread$y(_objectSpread$y({}, groupOpRule.properties), {}, {
            mode
          })
        });
      } else {
        res = _objectSpread$y(_objectSpread$y({}, groupOpRule || {}), {}, {
          type: "rule_group",
          properties: _objectSpread$y(_objectSpread$y({}, groupOpRule.properties), {}, {
            mode
          })
        });
      }
      if (!res.id)
        res.id = uuid$1();
      return res;
    };
    var compareArgs = function compareArgs2(left2, right2, spel, conv, config2, meta) {
      var parentSpel = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if (left2.type == right2.type) {
        if (left2.type == "!aggr") {
          var _map = [left2.source, right2.source].map(function(v2) {
            return convertArg(v2, conv, config2, meta, _objectSpread$y(_objectSpread$y({}, spel), {}, {
              _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
            }));
          }), _map2 = _slicedToArray(_map, 2), leftSource = _map2[0], rightSource = _map2[1];
          return leftSource.value == rightSource.value;
        } else {
          var _map3 = [left2, right2].map(function(v2) {
            return convertArg(v2, conv, config2, meta, _objectSpread$y(_objectSpread$y({}, spel), {}, {
              _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
            }));
          }), _map4 = _slicedToArray(_map3, 2), leftVal = _map4[0], rightVal = _map4[1];
          return leftVal.value == rightVal.value;
        }
      }
      return false;
    };
    var buildSimpleSwitch = function buildSimpleSwitch2(val, conv, config2, meta) {
      var children1 = {};
      var cond = null;
      var caseI = buildCase(cond, val, conv, config2, meta);
      if (caseI) {
        children1[caseI.id] = caseI;
      }
      var res = {
        type: "switch_group",
        id: uuid$1(),
        children1,
        properties: {}
      };
      return res;
    };
    var buildCase = function buildCase2(cond, val, conv, config2, meta) {
      var spel = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var valProperties = buildCaseValProperties(config2, meta, conv, val, spel);
      var caseI;
      if (cond) {
        caseI = convertToTree(cond, conv, config2, meta, spel);
        if (caseI && caseI.type) {
          if (caseI.type != "group") {
            caseI = wrapInDefaultConj(caseI, config2);
          }
          caseI.type = "case_group";
        } else {
          meta.errors.push("Unexpected case: ".concat(JSON.stringify(caseI)));
          caseI = void 0;
        }
      } else {
        caseI = {
          id: uuid$1(),
          type: "case_group",
          properties: {}
        };
      }
      if (caseI) {
        caseI.properties = _objectSpread$y(_objectSpread$y({}, caseI.properties), valProperties);
      }
      return caseI;
    };
    var buildCaseValueConcat = function buildCaseValueConcat2(spel, conv, config2, meta) {
      var flat = [];
      function _processConcatChildren(children) {
        children.map(function(child) {
          if (child.type == "op-plus") {
            _processConcatChildren(child.children);
          } else {
            var convertedChild = convertArg(child, conv, config2, meta, spel);
            if (convertedChild) {
              flat.push(convertedChild);
            } else {
              meta.errors.push("Can't convert ".concat(child.type, " in concatenation"));
            }
          }
        });
      }
      _processConcatChildren(spel.children);
      return {
        valueSrc: "value",
        valueType: "case_value",
        value: flat
      };
    };
    var buildCaseValProperties = function buildCaseValProperties2(config2, meta, conv, val) {
      var spel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var valProperties = {};
      var convVal;
      if ((val === null || val === void 0 ? void 0 : val.type) == "op-plus") {
        convVal = buildCaseValueConcat(val, conv, config2, meta);
      } else {
        convVal = convertArg(val, conv, config2, meta, spel);
      }
      var widgetDef = config2.widgets["case_value"];
      var importCaseValue = widgetDef === null || widgetDef === void 0 ? void 0 : widgetDef.spelImportValue;
      if (importCaseValue) {
        var _importCaseValue = importCaseValue(convVal), _importCaseValue2 = _slicedToArray(_importCaseValue, 2), normVal = _importCaseValue2[0], normErrors = _importCaseValue2[1];
        normErrors.map(function(e2) {
          return meta.errors.push(e2);
        });
        if (normVal) {
          valProperties = {
            value: [normVal],
            valueSrc: ["value"],
            valueType: ["case_value"]
          };
        }
      } else {
        meta.errors.push("No fucntion to import case value");
      }
      return valProperties;
    };
    var wrapInDefaultConj = function wrapInDefaultConj2(rule2, config2) {
      var not = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      return {
        type: "group",
        id: uuid$1(),
        children1: _defineProperty$2({}, rule2.id, rule2),
        properties: {
          conjunction: defaultConjunction(config2),
          not: not || false
        }
      };
    };
    const Import = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      _loadFromJsonLogic,
      _loadFromSpel,
      checkTree: checkTree$1,
      getTree: getTree$1,
      isImmutableTree,
      isJsonLogic,
      isTree,
      isValidTree,
      jsToImmutable,
      loadFromJsonLogic: loadFromJsonLogic$1,
      loadFromSpel,
      loadTree: loadTree$1
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$x(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$x(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$x(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$x(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var getDefaultField = function getDefaultField2(config2) {
      var canGetFirst = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var parentRuleGroupPath = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var defaultField = config2.settings.defaultField;
      var f2 = (!parentRuleGroupPath ? defaultField : getDefaultSubField(config2, parentRuleGroupPath)) || canGetFirst && getFirstField(config2, parentRuleGroupPath) || null;
      if (f2 != null && typeof f2 !== "string" && !isImmutable(f2)) {
        f2 = jsToImmutable(f2);
      }
      return f2;
    };
    var getDefaultSubField = function getDefaultSubField2(config2) {
      var _config$settings;
      var parentRuleGroupPath = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      if (!parentRuleGroupPath)
        return null;
      var fieldSeparator = (config2 === null || config2 === void 0 || (_config$settings = config2.settings) === null || _config$settings === void 0 ? void 0 : _config$settings.fieldSeparator) || ".";
      var parentRuleGroupConfig = getFieldConfig$8(config2, parentRuleGroupPath);
      var f2 = parentRuleGroupConfig === null || parentRuleGroupConfig === void 0 ? void 0 : parentRuleGroupConfig.defaultField;
      if (f2) {
        f2 = [].concat(_toConsumableArray(getFieldParts$4(parentRuleGroupPath)), [f2]).join(fieldSeparator);
      }
      return f2;
    };
    var getDefaultFieldSrc = function getDefaultFieldSrc2(config2) {
      var _config$settings$fiel;
      var canGetFirst = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      return canGetFirst && ((_config$settings$fiel = config2.settings.fieldSources) === null || _config$settings$fiel === void 0 ? void 0 : _config$settings$fiel[0]) || "field";
    };
    var getDefaultOperator = function getDefaultOperator2(config2, field) {
      var canGetFirst = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var defaultOperator = config2.settings.defaultOperator;
      var fieldConfig = getFieldConfig$8(config2, field);
      var fieldOperators = (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.operators) || [];
      if (defaultOperator && !fieldOperators.includes(defaultOperator))
        defaultOperator = null;
      var fieldDefaultOperator = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.defaultOperator;
      if (fieldDefaultOperator && !fieldOperators.includes(fieldDefaultOperator))
        fieldDefaultOperator = null;
      if (!fieldDefaultOperator && canGetFirst)
        fieldDefaultOperator = getFirstOperator(config2, field);
      var fieldHasExplicitDefOp = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig._origDefaultOperator;
      var op = fieldHasExplicitDefOp && fieldDefaultOperator || defaultOperator || fieldDefaultOperator;
      return op;
    };
    var defaultOperatorOptions = function defaultOperatorOptions2(config2, operator, field) {
      var operatorConfig = operator ? getOperatorConfig$4(config2, operator, field) : null;
      if (!operatorConfig)
        return null;
      return operatorConfig.options ? new Immutable.Map(operatorConfig.options && operatorConfig.options.defaults || {}) : null;
    };
    var defaultRuleProperties = function defaultRuleProperties2(config2) {
      var parentRuleGroupPath = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var item = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var canUseDefaultFieldAndOp = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      var canGetFirst = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var field = null, operator = null, fieldSrc = null;
      var showErrorMessage = config2.settings.showErrorMessage;
      if (item) {
        var _item$properties, _item$properties2, _item$properties3;
        fieldSrc = item === null || item === void 0 || (_item$properties = item.properties) === null || _item$properties === void 0 ? void 0 : _item$properties.fieldSrc;
        field = item === null || item === void 0 || (_item$properties2 = item.properties) === null || _item$properties2 === void 0 ? void 0 : _item$properties2.field;
        operator = item === null || item === void 0 || (_item$properties3 = item.properties) === null || _item$properties3 === void 0 ? void 0 : _item$properties3.operator;
      } else if (canUseDefaultFieldAndOp) {
        field = getDefaultField(config2, canGetFirst, parentRuleGroupPath);
        if (field) {
          fieldSrc = isImmutable(field) ? "func" : "field";
        } else {
          fieldSrc = getDefaultFieldSrc(config2);
        }
        operator = getDefaultOperator(config2, field, true);
      } else {
        fieldSrc = getDefaultFieldSrc(config2);
      }
      var current = new Immutable.Map({
        fieldSrc,
        field,
        operator,
        value: new Immutable.List(),
        valueSrc: new Immutable.List(),
        //used for complex operators like proximity
        operatorOptions: defaultOperatorOptions(config2, operator, field)
      });
      if (showErrorMessage) {
        current = current.set("valueError", new Immutable.List());
      }
      if (field && operator) {
        var _getNewValueForFieldO = getNewValueForFieldOp(config2, config2, current, field, operator, "operator", false), newValue = _getNewValueForFieldO.newValue, newValueSrc = _getNewValueForFieldO.newValueSrc, newValueType = _getNewValueForFieldO.newValueType, newValueError = _getNewValueForFieldO.newValueError;
        current = current.set("value", newValue).set("valueSrc", newValueSrc).set("valueType", newValueType);
        if (showErrorMessage) {
          current = current.set("valueError", newValueError);
        }
      }
      return current;
    };
    var defaultGroupConjunction$1 = function defaultGroupConjunction2(config2) {
      var fieldConfig = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      fieldConfig = getFieldConfig$8(config2, fieldConfig);
      var conjs = fieldConfig && fieldConfig.conjunctions || Object.keys(config2.conjunctions);
      if (conjs.length == 1)
        return conjs[0];
      return config2.settings.defaultGroupConjunction || config2.settings.defaultConjunction || conjs[0];
    };
    var defaultConjunction = function defaultConjunction2(config2) {
      return config2.settings.defaultConjunction || Object.keys(config2.conjunctions)[0];
    };
    var defaultGroupProperties = function defaultGroupProperties2(config2) {
      var fieldConfig = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      return new Immutable.Map({
        conjunction: defaultGroupConjunction$1(config2, fieldConfig),
        not: false
      });
    };
    var defaultItemProperties = function defaultItemProperties2(config2, item) {
      var _item$properties4;
      return item && item.type == "group" ? defaultGroupProperties(config2, item === null || item === void 0 || (_item$properties4 = item.properties) === null || _item$properties4 === void 0 ? void 0 : _item$properties4.field) : defaultRuleProperties(config2, null, item);
    };
    var defaultRule = function defaultRule2(id2, config2) {
      return _defineProperty$2({}, id2, new Immutable.Map({
        type: "rule",
        id: id2,
        properties: defaultRuleProperties(config2)
      }));
    };
    var defaultRoot$1 = function defaultRoot2(config2) {
      var canAddDefaultRule = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      return new Immutable.Map({
        type: "group",
        id: uuid$1(),
        children1: new Immutable.OrderedMap(canAddDefaultRule ? _objectSpread$x({}, defaultRule(uuid$1(), config2)) : {}),
        properties: defaultGroupProperties(config2)
      });
    };
    var createListFromArray$2 = function createListFromArray2(ids) {
      return new Immutable.List(ids);
    };
    var emptyProperies$1 = function emptyProperies2() {
      return new Immutable.Map();
    };
    const defaultUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      createListFromArray: createListFromArray$2,
      defaultConjunction,
      defaultGroupConjunction: defaultGroupConjunction$1,
      defaultGroupProperties,
      defaultItemProperties,
      defaultOperatorOptions,
      defaultRoot: defaultRoot$1,
      defaultRule,
      defaultRuleProperties,
      emptyProperies: emptyProperies$1,
      getDefaultField,
      getDefaultFieldSrc,
      getDefaultOperator,
      getDefaultSubField
    }, Symbol.toStringTag, { value: "Module" }));
    var typeOf = function typeOf2(v2) {
      if (_typeof$1(v2) == "object" && v2 !== null && Array.isArray(v2))
        return "array";
      else
        return _typeof$1(v2);
    };
    var isTypeOf = function isTypeOf2(v2, type) {
      if (typeOf(v2) == type)
        return true;
      if (type == "number" && !isNaN(v2))
        return true;
      return false;
    };
    var validateAndFixTree$1 = function validateAndFixTree2(newTree, _oldTree, newConfig, oldConfig, removeEmptyGroups, removeIncompleteRules) {
      var tree2 = validateTree(newTree, _oldTree, newConfig, oldConfig, removeEmptyGroups, removeIncompleteRules);
      tree2 = fixPathsInTree(tree2);
      return tree2;
    };
    var validateTree = function validateTree2(tree2, _oldTree, config2, oldConfig, removeEmptyGroups, removeIncompleteRules) {
      if (removeEmptyGroups === void 0) {
        removeEmptyGroups = config2.settings.removeEmptyGroupsOnLoad;
      }
      if (removeIncompleteRules === void 0) {
        removeIncompleteRules = config2.settings.removeIncompleteRulesOnLoad;
      }
      var c2 = {
        config: config2,
        oldConfig,
        removeEmptyGroups,
        removeIncompleteRules
      };
      return validateItem(tree2, [], null, {}, c2);
    };
    function validateItem(item, path, itemId, meta, c2) {
      var type = item.get("type");
      var children = item.get("children1");
      if ((type === "group" || type === "rule_group" || type == "case_group" || type == "switch_group") && children && children.size) {
        return validateGroup(item, path, itemId, meta, c2);
      } else if (type === "rule") {
        return validateRule(item, path, itemId, meta, c2);
      } else {
        return item;
      }
    }
    function validateGroup(item, path, itemId, meta, c2) {
      var removeEmptyGroups = c2.removeEmptyGroups;
      var id2 = item.get("id");
      var children = item.get("children1");
      var oldChildren = children;
      if (!id2 && itemId) {
        id2 = itemId;
        item = item.set("id", id2);
        meta.sanitized = true;
      }
      var submeta = {};
      children = children.map(function(currentChild, childId) {
        return validateItem(currentChild, path.concat(id2), childId, submeta, c2);
      });
      if (removeEmptyGroups)
        children = children.filter(function(currentChild) {
          return currentChild != void 0;
        });
      var sanitized = submeta.sanitized || oldChildren.size != children.size;
      if (!children.size && removeEmptyGroups && path.length) {
        sanitized = true;
        item = void 0;
      }
      if (sanitized)
        meta.sanitized = true;
      if (sanitized && item)
        item = item.set("children1", children);
      return item;
    }
    function validateRule(item, path, itemId, meta, c2) {
      var _field, _field$toJS, _field2, _field2$toJS;
      var removeIncompleteRules = c2.removeIncompleteRules, config2 = c2.config, oldConfig = c2.oldConfig;
      var showErrorMessage = config2.settings.showErrorMessage;
      var id2 = item.get("id");
      var properties2 = item.get("properties");
      var field = properties2.get("field") || null;
      var fieldSrc = properties2.get("fieldSrc") || null;
      var operator = properties2.get("operator") || null;
      var operatorOptions = properties2.get("operatorOptions");
      var valueSrc = properties2.get("valueSrc");
      var value2 = properties2.get("value");
      var valueError = properties2.get("valueError");
      var oldSerialized = {
        field: ((_field = field) === null || _field === void 0 || (_field$toJS = _field.toJS) === null || _field$toJS === void 0 ? void 0 : _field$toJS.call(_field)) || field,
        fieldSrc,
        operator,
        operatorOptions: operatorOptions ? operatorOptions.toJS() : {},
        valueSrc: valueSrc ? valueSrc.toJS() : null,
        value: value2 ? value2.toJS() : null,
        valueError: valueError ? valueError.toJS() : null
      };
      field && operator && value2 && !value2.includes(void 0);
      if (!id2 && itemId) {
        id2 = itemId;
        item = item.set("id", id2);
        meta.sanitized = true;
      }
      var fieldDefinition = field ? getFieldConfig$8(config2, field) : null;
      if (field && !fieldDefinition) {
        logger$1.warn("No config for field ".concat(field));
        field = null;
      }
      if (field == null) {
        properties2 = ["operator", "operatorOptions", "valueSrc", "value", "valueError"].reduce(function(map2, key) {
          return map2["delete"](key);
        }, properties2);
        operator = null;
      }
      if (!fieldSrc) {
        fieldSrc = getFieldSrc(field);
        properties2 = properties2.set("fieldSrc", fieldSrc);
      }
      if (operator == "range_between" || operator == "range_not_between") {
        operator = operator == "range_between" ? "between" : "not_between";
        console.info("Fixed operator ".concat(properties2.get("operator"), " to ").concat(operator));
        properties2 = properties2.set("operator", operator);
      }
      var operatorDefinition = operator ? getOperatorConfig$4(config2, operator, field) : null;
      if (operator && !operatorDefinition) {
        console.warn("No config for operator ".concat(operator));
        operator = null;
      }
      var availOps = field ? getOperatorsForField(config2, field) : [];
      if (field) {
        if (!(availOps !== null && availOps !== void 0 && availOps.length)) {
          console.warn("Type of field ".concat(field, " is not supported"));
          operator = null;
        } else if (operator && availOps.indexOf(operator) == -1) {
          if (operator == "is_empty" || operator == "is_not_empty") {
            operator = operator == "is_empty" ? "is_null" : "is_not_null";
            console.info("Fixed operator ".concat(properties2.get("operator"), " to ").concat(operator, " for ").concat(field));
            properties2 = properties2.set("operator", operator);
          } else {
            console.warn("Operator ".concat(operator, " is not supported for field ").concat(field));
            operator = null;
          }
        }
      }
      if (operator == null) {
        properties2 = properties2["delete"]("operatorOptions");
        properties2 = properties2["delete"]("valueSrc");
        properties2 = properties2["delete"]("value");
        properties2 = properties2["delete"]("valueError");
      }
      operatorOptions = properties2.get("operatorOptions");
      operator ? defaultValue$1(operatorDefinition.cardinality, 1) : null;
      if (!operator || operatorOptions && !operatorDefinition.options) {
        operatorOptions = null;
        properties2 = properties2["delete"]("operatorOptions");
      } else if (operator && !operatorOptions && operatorDefinition.options) {
        operatorOptions = defaultOperatorOptions(config2, operator, field);
        properties2 = properties2.set("operatorOptions", operatorOptions);
      }
      valueSrc = properties2.get("valueSrc");
      value2 = properties2.get("value");
      var canFix = !showErrorMessage;
      var isEndValue = true;
      var _getNewValueForFieldO = getNewValueForFieldOp(config2, oldConfig, properties2, field, operator, null, canFix, isEndValue), newValue = _getNewValueForFieldO.newValue, newValueSrc = _getNewValueForFieldO.newValueSrc, newValueError = _getNewValueForFieldO.newValueError;
      value2 = newValue;
      valueSrc = newValueSrc;
      valueError = newValueError;
      properties2 = properties2.set("value", value2);
      properties2 = properties2.set("valueSrc", valueSrc);
      if (showErrorMessage) {
        properties2 = properties2.set("valueError", valueError);
      } else {
        properties2 = properties2["delete"]("valueError");
      }
      var newSerialized = {
        field: ((_field2 = field) === null || _field2 === void 0 || (_field2$toJS = _field2.toJS) === null || _field2$toJS === void 0 ? void 0 : _field2$toJS.call(_field2)) || field,
        fieldSrc,
        operator,
        operatorOptions: operatorOptions ? operatorOptions.toJS() : {},
        valueSrc: valueSrc ? valueSrc.toJS() : null,
        value: value2 ? value2.toJS() : null,
        valueError: valueError ? valueError.toJS() : null
      };
      var sanitized = !deepEqual(oldSerialized, newSerialized);
      var isValueCompleted = value2 && value2.filter(function(v2, delta) {
        return !isCompletedValue(v2, valueSrc.get(delta), config2);
      }).size == 0;
      var isFieldCompleted = isCompletedValue(field, fieldSrc, config2);
      var isCompleted = isFieldCompleted && operator && isValueCompleted;
      if (sanitized)
        meta.sanitized = true;
      if (!isCompleted && removeIncompleteRules) {
        var reason = "Uncomplete rule";
        if (!isFieldCompleted) {
          reason = "Uncomplete LHS";
        } else {
          var _newSerialized$valueS, _newSerialized$valueS2, _oldSerialized$valueS;
          reason = "Uncomplete RHS";
          if ((_newSerialized$valueS = newSerialized.valueSrc) !== null && _newSerialized$valueS !== void 0 && _newSerialized$valueS[0] && ((_newSerialized$valueS2 = newSerialized.valueSrc) === null || _newSerialized$valueS2 === void 0 ? void 0 : _newSerialized$valueS2[0]) != ((_oldSerialized$valueS = oldSerialized.valueSrc) === null || _oldSerialized$valueS === void 0 ? void 0 : _oldSerialized$valueS[0])) {
            reason = "Bad value src ".concat(newSerialized.valueSrc);
          }
        }
        console.warn("[RAQB validate]", "Removing rule: ", oldSerialized, "Reason: ".concat(reason));
        item = void 0;
      } else if (sanitized)
        item = item.set("properties", properties2);
      return item;
    }
    var validateValue = function validateValue2(config2, leftField, field, operator, value2, valueType, valueSrc, asyncListValues) {
      var canFix = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var isEndValue = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : false;
      var isRawValue = arguments.length > 10 && arguments[10] !== void 0 ? arguments[10] : true;
      var validError = null;
      var fixedValue = value2;
      if (value2 != null) {
        if (valueSrc == "field") {
          var _validateFieldValue = validateFieldValue(leftField, field, value2, valueSrc, valueType, asyncListValues, config2);
          var _validateFieldValue2 = _slicedToArray(_validateFieldValue, 2);
          validError = _validateFieldValue2[0];
          fixedValue = _validateFieldValue2[1];
        } else if (valueSrc == "func") {
          var _validateFuncValue = validateFuncValue(leftField, field, value2, valueSrc, valueType, asyncListValues, config2, operator, isEndValue, canFix);
          var _validateFuncValue2 = _slicedToArray(_validateFuncValue, 2);
          validError = _validateFuncValue2[0];
          fixedValue = _validateFuncValue2[1];
        } else if (valueSrc == "value" || !valueSrc) {
          var _validateNormalValue = validateNormalValue(leftField, field, value2, valueSrc, valueType, asyncListValues, config2, operator, isEndValue, canFix);
          var _validateNormalValue2 = _slicedToArray(_validateNormalValue, 2);
          validError = _validateNormalValue2[0];
          fixedValue = _validateNormalValue2[1];
        }
        if (!validError) {
          getFieldConfig$8(config2, field);
          var w2 = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
          var operatorDefinition = operator ? getOperatorConfig$4(config2, operator, field) : null;
          var fieldWidgetDefinition = omit$1(getFieldWidgetConfig$3(config2, field, operator, w2, valueSrc), ["factory"]);
          var rightFieldDefinition = valueSrc == "field" ? getFieldConfig$8(config2, value2) : null;
          var fieldSettings = fieldWidgetDefinition;
          var fn = fieldWidgetDefinition.validateValue;
          if (typeof fn == "function") {
            var args = [fixedValue, fieldSettings, operator, operatorDefinition];
            if (valueSrc == "field")
              args.push(rightFieldDefinition);
            var validResult = fn.call.apply(fn, [config2.ctx].concat(args));
            if (typeof validResult == "boolean") {
              if (validResult == false)
                validError = "Invalid value";
            } else {
              validError = validResult;
            }
          }
        }
      }
      if (isRawValue && validError) {
        console.warn("[RAQB validate]", "Field ".concat(field, ": ").concat(validError));
      }
      return [validError, fixedValue];
    };
    var validateValueInList = function validateValueInList2(value2, listValues2, canFix, isEndValue, removeInvalidMultiSelectValuesOnLoad) {
      var values2 = immutableExports.List.isList(value2) ? value2.toJS() : value2 instanceof Array ? _toConsumableArray(value2) : void 0;
      if (values2) {
        var _values$reduce = values2.reduce(function(_ref, val) {
          var _ref2 = _slicedToArray(_ref, 2), goodVals = _ref2[0], badVals = _ref2[1];
          var vv2 = getItemInListValues(listValues2, val);
          if (vv2 == void 0) {
            return [goodVals, [].concat(_toConsumableArray(badVals), [val])];
          } else {
            return [[].concat(_toConsumableArray(goodVals), [vv2.value]), badVals];
          }
        }, [[], []]), _values$reduce2 = _slicedToArray(_values$reduce, 2), goodValues = _values$reduce2[0], badValues = _values$reduce2[1];
        var plural = badValues.length > 1;
        var err = badValues.length ? "".concat(plural ? "Values" : "Value", " ").concat(badValues.join(", "), " ").concat(plural ? "are" : "is", " not in list of values") : null;
        if (removeInvalidMultiSelectValuesOnLoad !== void 0) {
          canFix = removeInvalidMultiSelectValuesOnLoad;
        } else {
          canFix = canFix || isEndValue;
        }
        return [err, canFix ? goodValues : value2];
      } else {
        var vv = getItemInListValues(listValues2, value2);
        if (vv == void 0) {
          return ["Value ".concat(value2, " is not in list of values"), value2];
        } else {
          value2 = vv.value;
        }
        return [null, value2];
      }
    };
    var validateNormalValue = function validateNormalValue2(leftField, field, value2, valueSrc, valueType, asyncListValues, config2) {
      var operator = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
      var isEndValue = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var canFix = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : false;
      if (field) {
        var fieldConfig = getFieldConfig$8(config2, field);
        var w2 = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var wConfig = config2.widgets[w2];
        var wType = wConfig === null || wConfig === void 0 ? void 0 : wConfig.type;
        var jsType = wConfig === null || wConfig === void 0 ? void 0 : wConfig.jsType;
        var fieldSettings = fieldConfig.fieldSettings;
        var listValues2 = (fieldSettings === null || fieldSettings === void 0 ? void 0 : fieldSettings.treeValues) || (fieldSettings === null || fieldSettings === void 0 ? void 0 : fieldSettings.listValues);
        var isAsyncListValues = !!(fieldSettings !== null && fieldSettings !== void 0 && fieldSettings.asyncFetch);
        var canSkipCheck = listValues2 || isAsyncListValues;
        if (valueType && wType && valueType != wType)
          return ["Value should have type ".concat(wType, ", but got value of type ").concat(valueType), value2];
        if (jsType && !isTypeOf(value2, jsType) && !canSkipCheck) {
          return ["Value should have JS type ".concat(jsType, ", but got value of type ").concat(_typeof$1(value2)), value2];
        }
        if (fieldSettings) {
          var realListValues = asyncListValues || listValues2;
          if (realListValues && !fieldSettings.allowCustomValues) {
            return validateValueInList(value2, realListValues, canFix, isEndValue, config2.settings.removeInvalidMultiSelectValuesOnLoad);
          }
          if (fieldSettings.min != null && value2 < fieldSettings.min) {
            return ["Value ".concat(value2, " < min ").concat(fieldSettings.min), canFix ? fieldSettings.min : value2];
          }
          if (fieldSettings.max != null && value2 > fieldSettings.max) {
            return ["Value ".concat(value2, " > max ").concat(fieldSettings.max), canFix ? fieldSettings.max : value2];
          }
        }
      }
      return [null, value2];
    };
    var validateFieldValue = function validateFieldValue2(leftField, field, value2, _valueSrc, valueType, asyncListValues, config2) {
      var fieldSeparator = config2.settings.fieldSeparator;
      var isFuncArg = _typeof$1(field) == "object" && (field === null || field === void 0 ? void 0 : field._isFuncArg);
      var leftFieldStr = Array.isArray(leftField) ? leftField.join(fieldSeparator) : leftField;
      var rightFieldStr = Array.isArray(value2) ? value2.join(fieldSeparator) : value2;
      var rightFieldDefinition = getFieldConfig$8(config2, value2);
      if (!rightFieldDefinition)
        return ["Unknown field ".concat(value2), value2];
      if (rightFieldStr == leftFieldStr && !isFuncArg)
        return ["Can't compare field ".concat(leftField, " with itself"), value2];
      if (valueType && valueType != rightFieldDefinition.type)
        return ["Field ".concat(value2, " is of type ").concat(rightFieldDefinition.type, ", but expected ").concat(valueType), value2];
      return [null, value2];
    };
    var validateFuncValue = function validateFuncValue2(leftField, field, value2, _valueSrc, valueType, asyncListValues, config2) {
      var operator = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
      var isEndValue = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var canFix = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : false;
      var fixedValue = value2;
      if (value2) {
        var funcKey = value2.get("func");
        if (funcKey) {
          var funcConfig = getFuncConfig$2(config2, funcKey);
          if (funcConfig) {
            if (valueType && funcConfig.returnType != valueType)
              return ["Function ".concat(funcKey, " should return value of type ").concat(funcConfig.returnType, ", but got ").concat(valueType), value2];
            for (var argKey in funcConfig.args) {
              var argConfig = funcConfig.args[argKey];
              var args = fixedValue.get("args");
              var argVal = args ? args.get(argKey) : void 0;
              var argDef = getFieldConfig$8(config2, argConfig);
              var argValue = argVal ? argVal.get("value") : void 0;
              var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
              if (argValue !== void 0) {
                var _validateValue = validateValue(config2, leftField, argDef, operator, argValue, argConfig.type, argValueSrc, asyncListValues, canFix, isEndValue, false), _validateValue2 = _slicedToArray(_validateValue, 2), argValidError = _validateValue2[0], fixedArgVal = _validateValue2[1];
                if (argValidError !== null) {
                  if (canFix) {
                    fixedValue = fixedValue.deleteIn(["args", argKey]);
                    if (argConfig.defaultValue !== void 0) {
                      fixedValue = fixedValue.setIn(["args", argKey, "value"], argConfig.defaultValue);
                      fixedValue = fixedValue.setIn(["args", argKey, "valueSrc"], "value");
                    }
                  } else {
                    return ["Invalid value of arg ".concat(argKey, " for func ").concat(funcKey, ": ").concat(argValidError), value2];
                  }
                } else if (fixedArgVal !== argValue) {
                  fixedValue = fixedValue.setIn(["args", argKey, "value"], fixedArgVal);
                }
              } else if (isEndValue && argConfig.defaultValue === void 0 && !canFix && !argConfig.isOptional) {
                return ["Value of arg ".concat(argKey, " for func ").concat(funcKey, " is required"), value2];
              }
            }
          } else
            return ["Unknown function ".concat(funcKey), value2];
        }
      }
      return [null, fixedValue];
    };
    var isObject$6 = function isObject2(v2) {
      return _typeof$1(v2) == "object" && v2 !== null && !Array.isArray(v2);
    };
    var completeFuncValue = function completeFuncValue2(value2, config2) {
      if (!value2)
        return void 0;
      var funcKey = value2.get("func");
      var funcConfig = funcKey && getFuncConfig$2(config2, funcKey);
      if (!funcConfig)
        return void 0;
      var complValue = value2;
      var tmpHasOptional = false;
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var valueSources = argConfig.valueSources, isOptional = argConfig.isOptional, defaultValue2 = argConfig.defaultValue;
        var filteredValueSources = filterValueSourcesForField(config2, valueSources, argConfig);
        var args = complValue.get("args");
        var argDefaultValueSrc = filteredValueSources.length == 1 ? filteredValueSources[0] : void 0;
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = (argVal ? argVal.get("valueSrc") : void 0) || argDefaultValueSrc;
        if (argValue !== void 0) {
          var completeArgValue = completeValue(argValue, argValueSrc, config2);
          if (completeArgValue === void 0) {
            return void 0;
          } else if (completeArgValue !== argValue) {
            complValue = complValue.setIn(["args", argKey, "value"], completeArgValue);
          }
          if (tmpHasOptional) {
            return void 0;
          }
        } else if (defaultValue2 !== void 0 && !isObject$6(defaultValue2)) {
          complValue = complValue.setIn(["args", argKey, "value"], getDefaultArgValue(argConfig));
          complValue = complValue.setIn(["args", argKey, "valueSrc"], "value");
        } else if (isOptional) {
          tmpHasOptional = true;
        } else {
          return void 0;
        }
      }
      return complValue;
    };
    var setFunc$1 = function setFunc2(value2, funcKey, config2) {
      var fieldSeparator = config2.settings.fieldSeparator;
      value2 = value2 || new Immutable.Map();
      if (Array.isArray(funcKey)) {
        funcKey = funcKey.join(fieldSeparator);
      }
      var oldFuncKey = value2.get("func");
      var oldArgs = value2.get("args");
      value2 = value2.set("func", funcKey);
      var funcConfig = funcKey && getFuncConfig$2(config2, funcKey);
      var newFuncSignature = funcKey && getFuncSignature(config2, funcKey);
      var oldFuncSignature = oldFuncKey && getFuncSignature(config2, oldFuncKey);
      var keepArgsKeys = getCompatibleArgsOnFuncChange(oldFuncSignature, newFuncSignature, oldArgs, config2);
      if (keepArgsKeys.length) {
        var argsKeys = Object.keys(newFuncSignature.args);
        var deleteArgsKeys = argsKeys.filter(function(k2) {
          return !keepArgsKeys.includes(k2);
        });
        value2 = deleteArgsKeys.reduce(function(value3, k2) {
          return value3.deleteIn(["args", k2]);
        }, value2);
      } else {
        value2 = value2.set("args", new Immutable.Map());
      }
      if (funcConfig) {
        for (var argKey in funcConfig.args) {
          var argConfig = funcConfig.args[argKey];
          var valueSources = argConfig.valueSources, defaultValue2 = argConfig.defaultValue;
          var filteredValueSources = filterValueSourcesForField(config2, valueSources, argConfig);
          var firstValueSrc = filteredValueSources.length ? filteredValueSources[0] : void 0;
          var defaultValueSrc = defaultValue2 ? isObject$6(defaultValue2) && !!defaultValue2.func ? "func" : "value" : void 0;
          var argDefaultValueSrc = defaultValueSrc || firstValueSrc;
          var hasValue2 = value2.getIn(["args", argKey]);
          if (!hasValue2) {
            if (defaultValue2 !== void 0) {
              value2 = value2.setIn(["args", argKey, "value"], getDefaultArgValue(argConfig));
            }
            if (argDefaultValueSrc) {
              value2 = value2.setIn(["args", argKey, "valueSrc"], argDefaultValueSrc);
            }
          }
        }
      }
      return value2;
    };
    var getDefaultArgValue = function getDefaultArgValue2(_ref) {
      var value2 = _ref.defaultValue;
      if (isObject$6(value2) && !Immutable.Map.isMap(value2) && value2.func) {
        return Immutable.fromJS(value2, function(k2, v2) {
          return Immutable.Iterable.isIndexed(v2) ? v2.toList() : v2.toOrderedMap();
        });
      }
      return value2;
    };
    var setArgValue$1 = function setArgValue2(value2, argKey, argVal, argConfig, config2) {
      if (value2 && value2.get("func")) {
        value2 = value2.setIn(["args", argKey, "value"], argVal);
        var valueSrc = value2.getIn(["args", argKey, "valueSrc"]);
        var valueSources = argConfig.valueSources;
        var filteredValueSources = filterValueSourcesForField(config2, valueSources, argConfig);
        var argDefaultValueSrc = filteredValueSources.length == 1 ? filteredValueSources[0] : void 0;
        if (!argDefaultValueSrc && filteredValueSources.includes("value")) {
          argDefaultValueSrc = "value";
        }
        if (!valueSrc && argDefaultValueSrc) {
          value2 = value2.setIn(["args", argKey, "valueSrc"], argDefaultValueSrc);
        }
      }
      return value2;
    };
    var setArgValueSrc$1 = function setArgValueSrc2(value2, argKey, argValSrc, _argConfig, _config) {
      if (value2 && value2.get("func")) {
        value2 = value2.setIn(["args", argKey], new Immutable.Map({
          valueSrc: argValSrc
        }));
      }
      return value2;
    };
    var getCompatibleArgsOnFuncChange = function getCompatibleArgsOnFuncChange2(s1, s2, argVals, config2) {
      if ((s1 === null || s1 === void 0 ? void 0 : s1.returnType) != (s2 === null || s2 === void 0 ? void 0 : s2.returnType))
        return [];
      var keys2 = Object.keys(s2.args);
      var compatibleKeys = keys2.filter(function(k2, i) {
        var arg2 = s2.args[k2];
        var arg1 = s1.args[k2];
        Object.keys(s1.args).indexOf(k2);
        if (!arg1 && (arg2.defaultValue !== void 0 || arg2.isOptional)) {
          return true;
        }
        if ((arg1 === null || arg1 === void 0 ? void 0 : arg1.type) != arg2.type)
          return false;
        if (selectTypes.includes(arg2.type)) {
          if (!arg1.listValuesType || arg1.listValuesType !== arg2.listValuesType)
            return false;
        }
        if (argVals) {
          var argVal = argVals.get(k2);
          var argValue = argVal === null || argVal === void 0 ? void 0 : argVal.get("value");
          var argValueSrc = argVal === null || argVal === void 0 ? void 0 : argVal.get("valueSrc");
          if (arg2.valueSources && !arg2.valueSources.includes(argValueSrc))
            return false;
          var leftField = null, operator = null, argDef = arg2, asyncListValues = null, canFix = false, isEndValue = true;
          var _validateValue = validateValue(config2, leftField, argDef, operator, argValue, argDef.type, argValueSrc, asyncListValues, canFix, isEndValue, false), _validateValue2 = _slicedToArray(_validateValue, 2), argValidError = _validateValue2[0];
          _validateValue2[1];
          if (argValidError)
            return false;
        }
        return true;
      });
      return compatibleKeys;
    };
    const funcUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      completeFuncValue,
      getCompatibleArgsOnFuncChange,
      setArgValue: setArgValue$1,
      setArgValueSrc: setArgValueSrc$1,
      setFunc: setFunc$1
    }, Symbol.toStringTag, { value: "Module" }));
    var selectTypes = ["select", "multiselect", "treeselect", "treemultiselect"];
    var getNewValueForFieldOp = function getNewValueForFieldOp2(config2) {
      var oldConfig = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var current = arguments.length > 2 ? arguments[2] : void 0;
      var newField = arguments.length > 3 ? arguments[3] : void 0;
      var newOperator = arguments.length > 4 ? arguments[4] : void 0;
      var changedProp = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var canFix = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : true;
      var isEndValue = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : false;
      if (!oldConfig)
        oldConfig = config2;
      var keepInputOnChangeFieldSrc = config2.settings.keepInputOnChangeFieldSrc;
      var currentField = current.get("field");
      var currentFieldType = current.get("fieldType");
      var currentOperator = current.get("operator");
      var currentValue = current.get("value");
      var currentValueSrc = current.get("valueSrc", new Immutable.List());
      var currentValueType = current.get("valueType", new Immutable.List());
      var currentAsyncListValues = current.get("asyncListValues");
      var _config$settings = config2.settings, convertableWidgets = _config$settings.convertableWidgets, clearValueOnChangeField = _config$settings.clearValueOnChangeField, clearValueOnChangeOp = _config$settings.clearValueOnChangeOp, showErrorMessage = _config$settings.showErrorMessage;
      var newOperatorConfig = getOperatorConfig$4(config2, newOperator, newField);
      var operatorCardinality = newOperator ? defaultValue$1(newOperatorConfig.cardinality, 1) : null;
      var currentFieldConfig = getFieldConfig$8(oldConfig, currentField);
      var newFieldConfig = getFieldConfig$8(config2, newField);
      var isOkWithoutField = !currentField && currentFieldType && keepInputOnChangeFieldSrc;
      var currentType = (currentFieldConfig === null || currentFieldConfig === void 0 ? void 0 : currentFieldConfig.type) || currentFieldType;
      var newType = (newFieldConfig === null || newFieldConfig === void 0 ? void 0 : newFieldConfig.type) || !newField && isOkWithoutField && currentType;
      var canReuseValue = (currentField || isOkWithoutField) && currentOperator && newOperator && currentValue != void 0;
      canReuseValue = canReuseValue && (!changedProp || changedProp == "field" && !clearValueOnChangeField || changedProp == "operator" && !clearValueOnChangeOp);
      canReuseValue = canReuseValue && currentType && newType && currentType == newType;
      if (canReuseValue && selectTypes.includes(newType) && changedProp == "field") {
        var newListValuesType = newFieldConfig === null || newFieldConfig === void 0 ? void 0 : newFieldConfig.listValuesType;
        var currentListValuesType = currentFieldConfig === null || currentFieldConfig === void 0 ? void 0 : currentFieldConfig.listValuesType;
        if (newListValuesType && newListValuesType === currentListValuesType)
          ;
        else {
          canReuseValue = false;
        }
      }
      for (var i = 0; i < operatorCardinality; i++) {
        var vs = currentValueSrc.get(i) || null;
        var currentWidget = getWidgetForFieldOp$3(oldConfig, currentField, currentOperator, vs);
        var newWidget = getWidgetForFieldOp$3(config2, newField, newOperator, vs);
        var currentValueWidget = vs == "value" ? currentWidget : getWidgetForFieldOp$3(oldConfig, currentField, currentOperator, "value");
        var newValueWidget = vs == "value" ? newWidget : getWidgetForFieldOp$3(config2, newField, newOperator, "value");
        var canReuseWidget = newValueWidget == currentValueWidget || (convertableWidgets[currentValueWidget] || []).includes(newValueWidget) || !currentValueWidget && isOkWithoutField;
        if (!canReuseWidget) {
          canReuseValue = false;
        }
      }
      if (currentOperator != newOperator && [currentOperator, newOperator].includes("proximity"))
        canReuseValue = false;
      var firstWidgetConfig = getFieldWidgetConfig$3(config2, newField, newOperator, null, currentValueSrc.first());
      var valueSources = getValueSourcesForFieldOp$1(config2, newField, newOperator, null);
      if (!newField && isOkWithoutField) {
        valueSources = Object.keys(config2.settings.valueSourcesInfo);
      }
      var valueFixes = {};
      var valueErrors = Array.from({
        length: operatorCardinality
      }, function() {
        return null;
      });
      if (canReuseValue) {
        var _loop = function _loop2() {
          var v2 = currentValue.get(_i);
          var vType = currentValueType.get(_i) || null;
          var vSrc = currentValueSrc.get(_i) || null;
          var isValidSrc = valueSources.find(function(v3) {
            return v3 == vSrc;
          }) != null;
          if (!isValidSrc && _i > 0 && vSrc == null)
            isValidSrc = true;
          var asyncListValues = currentAsyncListValues;
          var _validateValue = validateValue(config2, newField, newField, newOperator, v2, vType, vSrc, asyncListValues, canFix, isEndValue, true), _validateValue2 = _slicedToArray(_validateValue, 2), validateError = _validateValue2[0], fixedValue = _validateValue2[1];
          var isValid2 = !validateError;
          var fixValue = fixedValue !== v2;
          var dropValue = !isValidSrc || !isValid2 && (changedProp == "field" || !showErrorMessage && !fixValue);
          var showValueError = !!validateError && showErrorMessage && !dropValue && !fixValue;
          if (showValueError) {
            valueErrors[_i] = validateError;
          }
          if (fixValue) {
            valueFixes[_i] = fixedValue;
          }
          if (dropValue) {
            canReuseValue = false;
            return "break";
          }
        };
        for (var _i = 0; _i < operatorCardinality; _i++) {
          var _ret = _loop();
          if (_ret === "break")
            break;
        }
      }
      var newValue = null, newValueSrc = null, newValueType = null, newValueError = null;
      newValue = new Immutable.List(Array.from({
        length: operatorCardinality
      }, function(_ignore, i2) {
        var v2 = void 0;
        if (canReuseValue) {
          if (i2 < currentValue.size) {
            v2 = currentValue.get(i2);
            if (valueFixes[i2] !== void 0) {
              v2 = valueFixes[i2];
            }
          }
        } else if (operatorCardinality == 1) {
          var _newFieldConfig$field;
          v2 = getFirstDefined([newFieldConfig === null || newFieldConfig === void 0 ? void 0 : newFieldConfig.defaultValue, newFieldConfig === null || newFieldConfig === void 0 || (_newFieldConfig$field = newFieldConfig.fieldSettings) === null || _newFieldConfig$field === void 0 ? void 0 : _newFieldConfig$field.defaultValue, firstWidgetConfig === null || firstWidgetConfig === void 0 ? void 0 : firstWidgetConfig.defaultValue]);
        }
        return v2;
      }));
      newValueSrc = new Immutable.List(Array.from({
        length: operatorCardinality
      }, function(_ignore, i2) {
        var vs2 = null;
        if (canReuseValue) {
          if (i2 < currentValueSrc.size)
            vs2 = currentValueSrc.get(i2);
        } else if (valueSources.length == 1) {
          vs2 = valueSources[0];
        } else if (valueSources.length > 1) {
          vs2 = valueSources[0];
        }
        return vs2;
      }));
      if (showErrorMessage) {
        if (newOperatorConfig && newOperatorConfig.validateValues && newValueSrc.toJS().filter(function(vs2) {
          return vs2 == "value" || vs2 == null;
        }).length == operatorCardinality) {
          var jsValues = firstWidgetConfig && firstWidgetConfig.toJS ? newValue.toJS().map(function(v2) {
            return firstWidgetConfig.toJS.call(config2.ctx, v2, firstWidgetConfig);
          }) : newValue.toJS();
          var rangeValidateError = newOperatorConfig.validateValues(jsValues);
          if (showErrorMessage) {
            valueErrors.push(rangeValidateError);
          }
        }
        newValueError = new Immutable.List(valueErrors);
      }
      newValueType = new Immutable.List(Array.from({
        length: operatorCardinality
      }, function(_ignore, i2) {
        var vt = null;
        if (canReuseValue) {
          if (i2 < currentValueType.size)
            vt = currentValueType.get(i2);
        } else if (operatorCardinality == 1 && firstWidgetConfig && firstWidgetConfig.type !== void 0) {
          vt = firstWidgetConfig.type;
        } else if (operatorCardinality == 1 && newFieldConfig && newFieldConfig.type !== void 0) {
          vt = newFieldConfig.type == "!group" ? "number" : newFieldConfig.type;
        }
        return vt;
      }));
      return {
        canReuseValue,
        newValue,
        newValueSrc,
        newValueType,
        newValueError,
        operatorCardinality
      };
    };
    var getFirstField = function getFirstField2(config2) {
      var parentRuleGroupPath = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parentPathArr = getFieldParts$4(parentRuleGroupPath, config2);
      var parentField = parentRuleGroupPath ? getFieldRawConfig(config2, parentRuleGroupPath) : config2;
      var firstField = parentField, key = null, keysPath = [];
      do {
        var _firstField;
        var subfields = firstField === config2 ? config2.fields : (_firstField = firstField) === null || _firstField === void 0 ? void 0 : _firstField.subfields;
        if (!subfields || !Object.keys(subfields).length) {
          firstField = key = null;
          break;
        }
        key = Object.keys(subfields)[0];
        keysPath.push(key);
        firstField = subfields[key];
      } while (firstField.type == "!struct" || firstField.type == "!group");
      return (parentPathArr || []).concat(keysPath).join(fieldSeparator);
    };
    var getOperatorsForType = function getOperatorsForType2(config2, fieldType) {
      var _config$types$fieldTy;
      return ((_config$types$fieldTy = config2.types[fieldType]) === null || _config$types$fieldTy === void 0 ? void 0 : _config$types$fieldTy.operators) || null;
    };
    var getOperatorsForField = function getOperatorsForField2(config2, field) {
      var fieldConfig = getFieldConfig$8(config2, field);
      var fieldOps = fieldConfig ? fieldConfig.operators : [];
      return fieldOps;
    };
    var getFirstOperator = function getFirstOperator2(config2, field) {
      var _fieldOps$;
      var fieldOps = getOperatorsForField(config2, field);
      return (_fieldOps$ = fieldOps === null || fieldOps === void 0 ? void 0 : fieldOps[0]) !== null && _fieldOps$ !== void 0 ? _fieldOps$ : null;
    };
    var getFuncPathLabels$1 = function getFuncPathLabels2(field, config2) {
      var parentField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      return getFieldPathLabels$2(field, config2, parentField, "funcs", "subfields");
    };
    var getFieldPathLabels$2 = function getFieldPathLabels2(field, config2) {
      var parentField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var fieldsKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "fields";
      var subfieldsKey = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "subfields";
      if (!field)
        return null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parts = getFieldParts$4(field, config2);
      var parentParts = getFieldParts$4(parentField, config2);
      var res = parts.slice(parentParts.length).map(function(_curr, ind, arr) {
        return arr.slice(0, ind + 1);
      }).map(function(parts2) {
        return [].concat(_toConsumableArray(parentParts), _toConsumableArray(parts2)).join(fieldSeparator);
      }).map(function(part) {
        var cnf = getFieldRawConfig(config2, part, fieldsKey, subfieldsKey);
        return cnf && cnf.label || last$2(part.split(fieldSeparator));
      }).filter(function(label) {
        return label != null;
      });
      return res;
    };
    var getFieldPartsConfigs = function getFieldPartsConfigs2(field, config2) {
      var parentField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!field)
        return null;
      var parentFieldDef = parentField && getFieldRawConfig(config2, parentField) || null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parts = getFieldParts$4(field, config2);
      var isDescendant = isFieldDescendantOfField(field, parentField, config2);
      var parentParts = !isDescendant ? [] : getFieldParts$4(parentField, config2);
      return parts.slice(parentParts.length).map(function(_curr, ind, arr) {
        return arr.slice(0, ind + 1);
      }).map(function(parts2) {
        return {
          part: [].concat(_toConsumableArray(parentParts), _toConsumableArray(parts2)).join(fieldSeparator),
          key: parts2[parts2.length - 1]
        };
      }).map(function(_ref) {
        var part = _ref.part, key = _ref.key;
        var cnf = getFieldRawConfig(config2, part);
        return {
          key,
          cnf
        };
      }).map(function(_ref2, ind, arr) {
        var key = _ref2.key, cnf = _ref2.cnf;
        var parentCnf = ind > 0 ? arr[ind - 1].cnf : parentFieldDef;
        return [key, cnf, parentCnf];
      });
    };
    var getValueLabel$1 = function getValueLabel2(config2, field, operator, delta) {
      var valueSrc = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var isSpecialRange = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
      var isFuncArg = field && _typeof$1(field) == "object" && !!field.func && !!field.arg;
      var showLabels = config2.settings.showLabels;
      var fieldConfig = getFieldConfig$8(config2, field);
      var fieldWidgetConfig = getFieldWidgetConfig$3(config2, field, operator, null, valueSrc) || {};
      var mergedOpConfig = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = isSpecialRange ? 1 : mergedOpConfig.cardinality;
      var ret = null;
      if (cardinality > 1) {
        var valueLabels = fieldWidgetConfig.valueLabels || mergedOpConfig.valueLabels;
        if (valueLabels)
          ret = valueLabels[delta];
        if (ret && _typeof$1(ret) != "object") {
          ret = {
            label: ret,
            placeholder: ret
          };
        }
        if (!ret) {
          ret = {
            label: config2.settings.valueLabel + " " + (delta + 1),
            placeholder: config2.settings.valuePlaceholder + " " + (delta + 1)
          };
        }
      } else {
        var label = fieldWidgetConfig.valueLabel;
        var placeholder = fieldWidgetConfig.valuePlaceholder;
        if (isFuncArg) {
          if (!label)
            label = fieldConfig.label || field.arg;
          if (!placeholder && !showLabels)
            placeholder = fieldConfig.label || field.arg;
        }
        ret = {
          label: label || config2.settings.valueLabel,
          placeholder: placeholder || config2.settings.valuePlaceholder
        };
      }
      return ret;
    };
    function _getWidgetsAndSrcsForFieldOp(config2, field) {
      var operator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var valueSrc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var widgets2 = [];
      var valueSrcs = [];
      if (!field)
        return {
          widgets: widgets2,
          valueSrcs
        };
      var isFuncArg = _typeof$1(field) == "object" && (!!field.func && !!field.arg || field._isFuncArg);
      var fieldConfig = getFieldConfig$8(config2, field);
      var opConfig = operator ? config2.operators[operator] : null;
      if (fieldConfig !== null && fieldConfig !== void 0 && fieldConfig.widgets) {
        var _loop2 = function _loop22() {
          var widgetConfig = fieldConfig.widgets[widget];
          if (!config2.widgets[widget]) {
            return "continue";
          }
          var widgetValueSrc = config2.widgets[widget].valueSrc || "value";
          var canAdd = true;
          if (widget == "field") {
            canAdd = canAdd && filterValueSourcesForField(config2, ["field"], fieldConfig).length > 0;
          }
          if (widget == "func") {
            canAdd = canAdd && filterValueSourcesForField(config2, ["func"], fieldConfig).length > 0;
          }
          if (valueSrc == "value" && !widgetConfig.operators && !isFuncArg && field != "!case_value")
            canAdd = false;
          if (widgetConfig.operators && operator)
            canAdd = canAdd && widgetConfig.operators.indexOf(operator) != -1;
          if (valueSrc && valueSrc != widgetValueSrc && valueSrc != "const")
            canAdd = false;
          if (opConfig && opConfig.cardinality == 0 && widgetValueSrc != "value")
            canAdd = false;
          if (canAdd) {
            var _fieldConfig$valueSou, _opConfig$valueSource;
            widgets2.push(widget);
            var canAddValueSrc = ((_fieldConfig$valueSou = fieldConfig.valueSources) === null || _fieldConfig$valueSou === void 0 ? void 0 : _fieldConfig$valueSou.indexOf(widgetValueSrc)) != -1;
            if ((opConfig === null || opConfig === void 0 || (_opConfig$valueSource = opConfig.valueSources) === null || _opConfig$valueSource === void 0 ? void 0 : _opConfig$valueSource.indexOf(widgetValueSrc)) == -1)
              canAddValueSrc = false;
            if (canAddValueSrc && !valueSrcs.find(function(v2) {
              return v2 == widgetValueSrc;
            }))
              valueSrcs.push(widgetValueSrc);
          }
        };
        for (var widget in fieldConfig.widgets) {
          var _ret2 = _loop2();
          if (_ret2 === "continue")
            continue;
        }
      }
      var widgetWeight = function widgetWeight2(w2) {
        var wg2 = 0;
        if (fieldConfig.preferWidgets) {
          if (fieldConfig.preferWidgets.includes(w2))
            wg2 += 10 - fieldConfig.preferWidgets.indexOf(w2);
        } else if (w2 == fieldConfig.mainWidget) {
          wg2 += 100;
        }
        if (w2 == "field") {
          wg2 -= 1;
        }
        if (w2 == "func") {
          wg2 -= 2;
        }
        return wg2;
      };
      widgets2.sort(function(w1, w2) {
        return widgetWeight(w2) - widgetWeight(w1);
      });
      return {
        widgets: widgets2,
        valueSrcs
      };
    }
    var getWidgetsForFieldOp = function getWidgetsForFieldOp2(config2, field, operator) {
      var valueSrc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _getWidgetsAndSrcsFor = _getWidgetsAndSrcsForFieldOp(config2, field, operator, valueSrc), widgets2 = _getWidgetsAndSrcsFor.widgets;
      return widgets2;
    };
    var filterValueSourcesForField = function filterValueSourcesForField2(config2, valueSrcs, fieldDefinition) {
      var _fieldDefinition$type;
      if (!fieldDefinition)
        return valueSrcs;
      var fieldType = (_fieldDefinition$type = fieldDefinition.type) !== null && _fieldDefinition$type !== void 0 ? _fieldDefinition$type : fieldDefinition.returnType;
      if (!valueSrcs)
        valueSrcs = Object.keys(config2.settings.valueSourcesInfo);
      return valueSrcs.filter(function(vs) {
        var canAdd = true;
        if (vs == "field") {
          if (config2.__fieldsCntByType) {
            var minCnt = fieldDefinition._isFuncArg ? 0 : 1;
            canAdd = canAdd && config2.__fieldsCntByType[fieldType] > minCnt;
          }
        }
        if (vs == "func") {
          if (config2.__funcsCntByType)
            canAdd = canAdd && !!config2.__funcsCntByType[fieldType];
          if (fieldDefinition.funcs)
            canAdd = canAdd && fieldDefinition.funcs.length > 0;
        }
        return canAdd;
      });
    };
    var getValueSourcesForFieldOp$1 = function getValueSourcesForFieldOp2(config2, field, operator) {
      var fieldDefinition = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _getWidgetsAndSrcsFor2 = _getWidgetsAndSrcsForFieldOp(config2, field, operator, null), valueSrcs = _getWidgetsAndSrcsFor2.valueSrcs;
      var filteredValueSrcs = filterValueSourcesForField(config2, valueSrcs, fieldDefinition);
      return filteredValueSrcs;
    };
    var getWidgetForFieldOp$3 = function getWidgetForFieldOp2(config2, field, operator) {
      var valueSrc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _getWidgetsAndSrcsFor3 = _getWidgetsAndSrcsForFieldOp(config2, field, operator, valueSrc), widgets2 = _getWidgetsAndSrcsFor3.widgets;
      var widget = null;
      if (widgets2.length)
        widget = widgets2[0];
      return widget;
    };
    var formatFieldName = function formatFieldName2(field, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
      if (!field)
        return;
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldParts = getFieldParts$4(field, config2);
      var fieldName = Array.isArray(field) ? field.join(fieldSeparator) : field;
      if (options !== null && options !== void 0 && options.useTableName && fieldDef.tableName) {
        var fieldPartsCopy = _toConsumableArray(fieldParts);
        fieldPartsCopy[0] = fieldDef.tableName;
        fieldName = fieldPartsCopy.join(fieldSeparator);
      }
      if (fieldDef.fieldName) {
        fieldName = fieldDef.fieldName;
      }
      if (parentField) {
        getFieldConfig$8(config2, parentField) || {};
        var parentFieldName = parentField;
        if (fieldName.indexOf(parentFieldName + fieldSeparator) == 0) {
          fieldName = fieldName.slice((parentFieldName + fieldSeparator).length);
        } else {
          if (fieldDef.fieldName)
            ;
          else {
            meta.errors.push("Can't cut group ".concat(parentFieldName, " from field ").concat(fieldName));
          }
        }
      }
      return fieldName;
    };
    var isEmptyItem = function isEmptyItem2(item, config2) {
      var liteCheck = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var type = item.get("type");
      var mode = item.getIn(["properties", "mode"]);
      if (type == "rule_group" && mode == "array") {
        return isEmptyRuleGroupExt(item, config2, liteCheck);
      } else if (type == "group" || type == "rule_group") {
        return isEmptyGroup(item, config2, liteCheck);
      } else {
        return isEmptyRule(item, config2, liteCheck);
      }
    };
    var isEmptyRuleGroupExt = function isEmptyRuleGroupExt2(item, config2) {
      var liteCheck = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var children = item.get("children1");
      var properties2 = item.get("properties");
      return isEmptyRuleGroupExtPropertiesAndChildren$1(properties2.toObject(), children, config2, liteCheck);
    };
    var isEmptyRuleGroupExtPropertiesAndChildren$1 = function isEmptyRuleGroupExtPropertiesAndChildren2(properties2, children, config2) {
      var _config$operators$ope, _config$operators$ope2;
      var liteCheck = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var operator = properties2.operator;
      var cardinality = (_config$operators$ope = (_config$operators$ope2 = config2.operators[operator]) === null || _config$operators$ope2 === void 0 ? void 0 : _config$operators$ope2.cardinality) !== null && _config$operators$ope !== void 0 ? _config$operators$ope : 1;
      var filledParts = [!isEmptyRuleProperties$1(properties2, config2, false), cardinality > 0 ? true : !isEmptyGroupChildren$1(children, config2, liteCheck)];
      var filledCnt = filledParts.filter(function(f2) {
        return !!f2;
      }).length;
      var isFilled2 = filledCnt == 2;
      return !isFilled2;
    };
    var isEmptyGroup = function isEmptyGroup2(group2, config2) {
      var liteCheck = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var children = group2.get("children1");
      return isEmptyGroupChildren$1(children, config2, liteCheck);
    };
    var isEmptyGroupChildren$1 = function isEmptyGroupChildren2(children, config2) {
      var liteCheck = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      return !children || children.size == 0 || children.size > 0 && children.filter(function(ch2) {
        return !isEmptyItem(ch2, config2, liteCheck);
      }).size == 0;
    };
    var isEmptyRuleProperties$1 = function isEmptyRuleProperties2(_ref3, config2) {
      var _config$operators$ope3, _config$operators$ope4;
      var field = _ref3.field, fieldSrc = _ref3.fieldSrc, fieldType = _ref3.fieldType, operator = _ref3.operator, value2 = _ref3.value, valueSrc = _ref3.valueSrc;
      _ref3.valueType;
      var liteCheck = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var cardinality = (_config$operators$ope3 = (_config$operators$ope4 = config2.operators[operator]) === null || _config$operators$ope4 === void 0 ? void 0 : _config$operators$ope4.cardinality) !== null && _config$operators$ope3 !== void 0 ? _config$operators$ope3 : 1;
      var filledParts = [liteCheck ? field !== null || fieldType != null : isCompletedValue(field, fieldSrc, config2, liteCheck), !!operator, value2.filter(function(val, delta) {
        var _valueSrc$get;
        return isCompletedValue(val, (valueSrc === null || valueSrc === void 0 || (_valueSrc$get = valueSrc.get) === null || _valueSrc$get === void 0 ? void 0 : _valueSrc$get.call(valueSrc, delta)) || (valueSrc === null || valueSrc === void 0 ? void 0 : valueSrc[delta]), config2, liteCheck);
      }).size >= cardinality];
      var filledCnt = filledParts.filter(function(f2) {
        return !!f2;
      }).length;
      var isFilled2 = filledCnt == 3;
      return !isFilled2;
    };
    var isEmptyRule = function isEmptyRule2(rule2, config2) {
      var liteCheck = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var properties2 = rule2.get("properties");
      return isEmptyRuleProperties$1(properties2.toObject(), config2, liteCheck);
    };
    var isCompletedValue = function isCompletedValue2(value2, valueSrc, config2) {
      var liteCheck = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      if (!liteCheck && valueSrc == "func" && value2) {
        var funcKey = value2.get("func");
        var funcConfig = getFuncConfig$2(config2, funcKey);
        if (funcConfig) {
          var args = value2.get("args");
          for (var argKey in funcConfig.args) {
            var argConfig = funcConfig.args[argKey];
            var argVal = args ? args.get(argKey) : void 0;
            var argValue = argVal ? argVal.get("value") : void 0;
            var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
            if (argValue == void 0 && (argConfig === null || argConfig === void 0 ? void 0 : argConfig.defaultValue) === void 0 && !(argConfig !== null && argConfig !== void 0 && argConfig.isOptional)) {
              return false;
            }
            if (argValue != void 0) {
              if (!isCompletedValue2(argValue, argValueSrc, config2, liteCheck)) {
                return false;
              }
            }
          }
          return true;
        }
      }
      return value2 != void 0;
    };
    var completeValue = function completeValue2(value2, valueSrc, config2) {
      if (valueSrc == "func")
        return completeFuncValue(value2, config2);
      else
        return value2;
    };
    const ruleUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      completeValue,
      filterValueSourcesForField,
      formatFieldName,
      getFieldPartsConfigs,
      getFieldPathLabels: getFieldPathLabels$2,
      getFirstField,
      getFirstOperator,
      getFuncPathLabels: getFuncPathLabels$1,
      getNewValueForFieldOp,
      getOperatorsForField,
      getOperatorsForType,
      getValueLabel: getValueLabel$1,
      getValueSourcesForFieldOp: getValueSourcesForFieldOp$1,
      getWidgetForFieldOp: getWidgetForFieldOp$3,
      getWidgetsForFieldOp,
      isCompletedValue,
      isEmptyGroupChildren: isEmptyGroupChildren$1,
      isEmptyItem,
      isEmptyRuleGroupExtPropertiesAndChildren: isEmptyRuleGroupExtPropertiesAndChildren$1,
      isEmptyRuleProperties: isEmptyRuleProperties$1,
      selectTypes
    }, Symbol.toStringTag, { value: "Module" }));
    var clone$4 = { exports: {} };
    (function(module2) {
      var clone2 = function() {
        function _instanceof(obj, type) {
          return type != null && obj instanceof type;
        }
        var nativeMap;
        try {
          nativeMap = Map;
        } catch (_2) {
          nativeMap = function() {
          };
        }
        var nativeSet;
        try {
          nativeSet = Set;
        } catch (_2) {
          nativeSet = function() {
          };
        }
        var nativePromise;
        try {
          nativePromise = Promise;
        } catch (_2) {
          nativePromise = function() {
          };
        }
        function clone3(parent2, circular, depth, prototype, includeNonEnumerable) {
          if (typeof circular === "object") {
            depth = circular.depth;
            prototype = circular.prototype;
            includeNonEnumerable = circular.includeNonEnumerable;
            circular = circular.circular;
          }
          var allParents = [];
          var allChildren = [];
          var useBuffer = typeof Buffer != "undefined";
          if (typeof circular == "undefined")
            circular = true;
          if (typeof depth == "undefined")
            depth = Infinity;
          function _clone(parent3, depth2) {
            if (parent3 === null)
              return null;
            if (depth2 === 0)
              return parent3;
            var child;
            var proto2;
            if (typeof parent3 != "object") {
              return parent3;
            }
            if (_instanceof(parent3, nativeMap)) {
              child = new nativeMap();
            } else if (_instanceof(parent3, nativeSet)) {
              child = new nativeSet();
            } else if (_instanceof(parent3, nativePromise)) {
              child = new nativePromise(function(resolve, reject) {
                parent3.then(function(value2) {
                  resolve(_clone(value2, depth2 - 1));
                }, function(err) {
                  reject(_clone(err, depth2 - 1));
                });
              });
            } else if (clone3.__isArray(parent3)) {
              child = [];
            } else if (clone3.__isRegExp(parent3)) {
              child = new RegExp(parent3.source, __getRegExpFlags(parent3));
              if (parent3.lastIndex)
                child.lastIndex = parent3.lastIndex;
            } else if (clone3.__isDate(parent3)) {
              child = new Date(parent3.getTime());
            } else if (useBuffer && Buffer.isBuffer(parent3)) {
              if (Buffer.allocUnsafe) {
                child = Buffer.allocUnsafe(parent3.length);
              } else {
                child = new Buffer(parent3.length);
              }
              parent3.copy(child);
              return child;
            } else if (_instanceof(parent3, Error)) {
              child = Object.create(parent3);
            } else {
              if (typeof prototype == "undefined") {
                proto2 = Object.getPrototypeOf(parent3);
                child = Object.create(proto2);
              } else {
                child = Object.create(prototype);
                proto2 = prototype;
              }
            }
            if (circular) {
              var index = allParents.indexOf(parent3);
              if (index != -1) {
                return allChildren[index];
              }
              allParents.push(parent3);
              allChildren.push(child);
            }
            if (_instanceof(parent3, nativeMap)) {
              parent3.forEach(function(value2, key) {
                var keyChild = _clone(key, depth2 - 1);
                var valueChild = _clone(value2, depth2 - 1);
                child.set(keyChild, valueChild);
              });
            }
            if (_instanceof(parent3, nativeSet)) {
              parent3.forEach(function(value2) {
                var entryChild = _clone(value2, depth2 - 1);
                child.add(entryChild);
              });
            }
            for (var i in parent3) {
              var attrs;
              if (proto2) {
                attrs = Object.getOwnPropertyDescriptor(proto2, i);
              }
              if (attrs && attrs.set == null) {
                continue;
              }
              child[i] = _clone(parent3[i], depth2 - 1);
            }
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(parent3);
              for (var i = 0; i < symbols.length; i++) {
                var symbol = symbols[i];
                var descriptor = Object.getOwnPropertyDescriptor(parent3, symbol);
                if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                  continue;
                }
                child[symbol] = _clone(parent3[symbol], depth2 - 1);
                if (!descriptor.enumerable) {
                  Object.defineProperty(child, symbol, {
                    enumerable: false
                  });
                }
              }
            }
            if (includeNonEnumerable) {
              var allPropertyNames = Object.getOwnPropertyNames(parent3);
              for (var i = 0; i < allPropertyNames.length; i++) {
                var propertyName = allPropertyNames[i];
                var descriptor = Object.getOwnPropertyDescriptor(parent3, propertyName);
                if (descriptor && descriptor.enumerable) {
                  continue;
                }
                child[propertyName] = _clone(parent3[propertyName], depth2 - 1);
                Object.defineProperty(child, propertyName, {
                  enumerable: false
                });
              }
            }
            return child;
          }
          return _clone(parent2, depth);
        }
        clone3.clonePrototype = function clonePrototype(parent2) {
          if (parent2 === null)
            return null;
          var c2 = function() {
          };
          c2.prototype = parent2;
          return new c2();
        };
        function __objToStr(o) {
          return Object.prototype.toString.call(o);
        }
        clone3.__objToStr = __objToStr;
        function __isDate(o) {
          return typeof o === "object" && __objToStr(o) === "[object Date]";
        }
        clone3.__isDate = __isDate;
        function __isArray(o) {
          return typeof o === "object" && __objToStr(o) === "[object Array]";
        }
        clone3.__isArray = __isArray;
        function __isRegExp(o) {
          return typeof o === "object" && __objToStr(o) === "[object RegExp]";
        }
        clone3.__isRegExp = __isRegExp;
        function __getRegExpFlags(re2) {
          var flags = "";
          if (re2.global)
            flags += "g";
          if (re2.ignoreCase)
            flags += "i";
          if (re2.multiline)
            flags += "m";
          return flags;
        }
        clone3.__getRegExpFlags = __getRegExpFlags;
        return clone3;
      }();
      if (module2.exports) {
        module2.exports = clone2;
      }
    })(clone$4);
    var cloneExports = clone$4.exports;
    const clone$3 = /* @__PURE__ */ getDefaultExportFromCjs(cloneExports);
    var logic = { exports: {} };
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory();
        }
      })(commonjsGlobal, function() {
        if (!Array.isArray) {
          Array.isArray = function(arg) {
            return Object.prototype.toString.call(arg) === "[object Array]";
          };
        }
        function arrayUnique(array) {
          var a = [];
          for (var i = 0, l2 = array.length; i < l2; i++) {
            if (a.indexOf(array[i]) === -1) {
              a.push(array[i]);
            }
          }
          return a;
        }
        var jsonLogic = {};
        var operations = {
          "==": function(a, b2) {
            return a == b2;
          },
          "===": function(a, b2) {
            return a === b2;
          },
          "!=": function(a, b2) {
            return a != b2;
          },
          "!==": function(a, b2) {
            return a !== b2;
          },
          ">": function(a, b2) {
            return a > b2;
          },
          ">=": function(a, b2) {
            return a >= b2;
          },
          "<": function(a, b2, c2) {
            return c2 === void 0 ? a < b2 : a < b2 && b2 < c2;
          },
          "<=": function(a, b2, c2) {
            return c2 === void 0 ? a <= b2 : a <= b2 && b2 <= c2;
          },
          "!!": function(a) {
            return jsonLogic.truthy(a);
          },
          "!": function(a) {
            return !jsonLogic.truthy(a);
          },
          "%": function(a, b2) {
            return a % b2;
          },
          "log": function(a) {
            console.log(a);
            return a;
          },
          "in": function(a, b2) {
            if (!b2 || typeof b2.indexOf === "undefined")
              return false;
            return b2.indexOf(a) !== -1;
          },
          "cat": function() {
            return Array.prototype.join.call(arguments, "");
          },
          "substr": function(source, start2, end2) {
            if (end2 < 0) {
              var temp = String(source).substr(start2);
              return temp.substr(0, temp.length + end2);
            }
            return String(source).substr(start2, end2);
          },
          "+": function() {
            return Array.prototype.reduce.call(arguments, function(a, b2) {
              return parseFloat(a, 10) + parseFloat(b2, 10);
            }, 0);
          },
          "*": function() {
            return Array.prototype.reduce.call(arguments, function(a, b2) {
              return parseFloat(a, 10) * parseFloat(b2, 10);
            });
          },
          "-": function(a, b2) {
            if (b2 === void 0) {
              return -a;
            } else {
              return a - b2;
            }
          },
          "/": function(a, b2) {
            return a / b2;
          },
          "min": function() {
            return Math.min.apply(this, arguments);
          },
          "max": function() {
            return Math.max.apply(this, arguments);
          },
          "merge": function() {
            return Array.prototype.reduce.call(arguments, function(a, b2) {
              return a.concat(b2);
            }, []);
          },
          "var": function(a, b2) {
            var not_found = b2 === void 0 ? null : b2;
            var data = this;
            if (typeof a === "undefined" || a === "" || a === null) {
              return data;
            }
            var sub_props = String(a).split(".");
            for (var i = 0; i < sub_props.length; i++) {
              if (data === null || data === void 0) {
                return not_found;
              }
              data = data[sub_props[i]];
              if (data === void 0) {
                return not_found;
              }
            }
            return data;
          },
          "missing": function() {
            var missing = [];
            var keys2 = Array.isArray(arguments[0]) ? arguments[0] : arguments;
            for (var i = 0; i < keys2.length; i++) {
              var key = keys2[i];
              var value2 = jsonLogic.apply({ "var": key }, this);
              if (value2 === null || value2 === "") {
                missing.push(key);
              }
            }
            return missing;
          },
          "missing_some": function(need_count, options) {
            var are_missing = jsonLogic.apply({ "missing": options }, this);
            if (options.length - are_missing.length >= need_count) {
              return [];
            } else {
              return are_missing;
            }
          }
        };
        jsonLogic.is_logic = function(logic2) {
          return typeof logic2 === "object" && // An object
          logic2 !== null && // but not null
          !Array.isArray(logic2) && // and not an array
          Object.keys(logic2).length === 1;
        };
        jsonLogic.truthy = function(value2) {
          if (Array.isArray(value2) && value2.length === 0) {
            return false;
          }
          return !!value2;
        };
        jsonLogic.get_operator = function(logic2) {
          return Object.keys(logic2)[0];
        };
        jsonLogic.get_values = function(logic2) {
          return logic2[jsonLogic.get_operator(logic2)];
        };
        jsonLogic.apply = function(logic2, data) {
          if (Array.isArray(logic2)) {
            return logic2.map(function(l2) {
              return jsonLogic.apply(l2, data);
            });
          }
          if (!jsonLogic.is_logic(logic2)) {
            return logic2;
          }
          var op = jsonLogic.get_operator(logic2);
          var values2 = logic2[op];
          var i;
          var current;
          var scopedLogic;
          var scopedData;
          var initial;
          if (!Array.isArray(values2)) {
            values2 = [values2];
          }
          if (op === "if" || op == "?:") {
            for (i = 0; i < values2.length - 1; i += 2) {
              if (jsonLogic.truthy(jsonLogic.apply(values2[i], data))) {
                return jsonLogic.apply(values2[i + 1], data);
              }
            }
            if (values2.length === i + 1) {
              return jsonLogic.apply(values2[i], data);
            }
            return null;
          } else if (op === "and") {
            for (i = 0; i < values2.length; i += 1) {
              current = jsonLogic.apply(values2[i], data);
              if (!jsonLogic.truthy(current)) {
                return current;
              }
            }
            return current;
          } else if (op === "or") {
            for (i = 0; i < values2.length; i += 1) {
              current = jsonLogic.apply(values2[i], data);
              if (jsonLogic.truthy(current)) {
                return current;
              }
            }
            return current;
          } else if (op === "filter") {
            scopedData = jsonLogic.apply(values2[0], data);
            scopedLogic = values2[1];
            if (!Array.isArray(scopedData)) {
              return [];
            }
            return scopedData.filter(function(datum) {
              return jsonLogic.truthy(jsonLogic.apply(scopedLogic, datum));
            });
          } else if (op === "map") {
            scopedData = jsonLogic.apply(values2[0], data);
            scopedLogic = values2[1];
            if (!Array.isArray(scopedData)) {
              return [];
            }
            return scopedData.map(function(datum) {
              return jsonLogic.apply(scopedLogic, datum);
            });
          } else if (op === "reduce") {
            scopedData = jsonLogic.apply(values2[0], data);
            scopedLogic = values2[1];
            initial = typeof values2[2] !== "undefined" ? values2[2] : null;
            if (!Array.isArray(scopedData)) {
              return initial;
            }
            return scopedData.reduce(
              function(accumulator, current2) {
                return jsonLogic.apply(
                  scopedLogic,
                  { current: current2, accumulator }
                );
              },
              initial
            );
          } else if (op === "all") {
            scopedData = jsonLogic.apply(values2[0], data);
            scopedLogic = values2[1];
            if (!Array.isArray(scopedData) || !scopedData.length) {
              return false;
            }
            for (i = 0; i < scopedData.length; i += 1) {
              if (!jsonLogic.truthy(jsonLogic.apply(scopedLogic, scopedData[i]))) {
                return false;
              }
            }
            return true;
          } else if (op === "none") {
            scopedData = jsonLogic.apply(values2[0], data);
            scopedLogic = values2[1];
            if (!Array.isArray(scopedData) || !scopedData.length) {
              return true;
            }
            for (i = 0; i < scopedData.length; i += 1) {
              if (jsonLogic.truthy(jsonLogic.apply(scopedLogic, scopedData[i]))) {
                return false;
              }
            }
            return true;
          } else if (op === "some") {
            scopedData = jsonLogic.apply(values2[0], data);
            scopedLogic = values2[1];
            if (!Array.isArray(scopedData) || !scopedData.length) {
              return false;
            }
            for (i = 0; i < scopedData.length; i += 1) {
              if (jsonLogic.truthy(jsonLogic.apply(scopedLogic, scopedData[i]))) {
                return true;
              }
            }
            return false;
          }
          values2 = values2.map(function(val) {
            return jsonLogic.apply(val, data);
          });
          if (operations.hasOwnProperty(op) && typeof operations[op] === "function") {
            return operations[op].apply(data, values2);
          } else if (op.indexOf(".") > 0) {
            var sub_ops = String(op).split(".");
            var operation = operations;
            for (i = 0; i < sub_ops.length; i++) {
              if (!operation.hasOwnProperty(sub_ops[i])) {
                throw new Error("Unrecognized operation " + op + " (failed at " + sub_ops.slice(0, i + 1).join(".") + ")");
              }
              operation = operation[sub_ops[i]];
            }
            return operation.apply(data, values2);
          }
          throw new Error("Unrecognized operation " + op);
        };
        jsonLogic.uses_data = function(logic2) {
          var collection = [];
          if (jsonLogic.is_logic(logic2)) {
            var op = jsonLogic.get_operator(logic2);
            var values2 = logic2[op];
            if (!Array.isArray(values2)) {
              values2 = [values2];
            }
            if (op === "var") {
              collection.push(values2[0]);
            } else {
              values2.forEach(function(val) {
                collection.push.apply(collection, jsonLogic.uses_data(val));
              });
            }
          }
          return arrayUnique(collection);
        };
        jsonLogic.add_operation = function(name, code) {
          operations[name] = code;
        };
        jsonLogic.rm_operation = function(name) {
          delete operations[name];
        };
        jsonLogic.rule_like = function(rule2, pattern) {
          if (pattern === rule2) {
            return true;
          }
          if (pattern === "@") {
            return true;
          }
          if (pattern === "number") {
            return typeof rule2 === "number";
          }
          if (pattern === "string") {
            return typeof rule2 === "string";
          }
          if (pattern === "array") {
            return Array.isArray(rule2) && !jsonLogic.is_logic(rule2);
          }
          if (jsonLogic.is_logic(pattern)) {
            if (jsonLogic.is_logic(rule2)) {
              var pattern_op = jsonLogic.get_operator(pattern);
              var rule_op = jsonLogic.get_operator(rule2);
              if (pattern_op === "@" || pattern_op === rule_op) {
                return jsonLogic.rule_like(
                  jsonLogic.get_values(rule2, false),
                  jsonLogic.get_values(pattern, false)
                );
              }
            }
            return false;
          }
          if (Array.isArray(pattern)) {
            if (Array.isArray(rule2)) {
              if (pattern.length !== rule2.length) {
                return false;
              }
              for (var i = 0; i < pattern.length; i += 1) {
                if (!jsonLogic.rule_like(rule2[i], pattern[i])) {
                  return false;
                }
              }
              return true;
            } else {
              return false;
            }
          }
          return false;
        };
        return jsonLogic;
      });
    })(logic);
    var logicExports = logic.exports;
    const JL = /* @__PURE__ */ getDefaultExportFromCjs(logicExports);
    function ownKeys$w(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$w(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$w(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$w(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function applyJsonLogic(logic2, data) {
      return JL.apply(logic2, data);
    }
    function addJsonLogicOperation(name, op) {
      return JL.add_operation(name, op);
    }
    var customJsonLogicOperations = {
      CALL: function CALL(fn, ctx2) {
        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }
        return fn.call.apply(fn, [ctx2].concat(args));
      },
      JSX: function JSX(type, props) {
        return {
          type,
          props
        };
      },
      mergeObjects: function mergeObjects(obj1, obj2) {
        return _objectSpread$w(_objectSpread$w({}, obj1), obj2);
      },
      fromEntries: function fromEntries(entries) {
        return Object.fromEntries(entries);
      },
      strlen: function strlen2(str) {
        return (str === null || str === void 0 ? void 0 : str.length) || 0;
      },
      regexTest: function regexTest(str, pattern, flags) {
        return (str === null || str === void 0 ? void 0 : str.match(new RegExp(pattern, flags))) != null;
      },
      now: function now2() {
        return /* @__PURE__ */ new Date();
      },
      date_add: function date_add(date, val, dim) {
        return hooks(date).add(val, dim).toDate();
      },
      toLowerCase: function toLowerCase(str) {
        return str.toLowerCase();
      },
      toUpperCase: function toUpperCase(str) {
        return str.toUpperCase();
      }
    };
    function addRequiredJsonLogicOperations() {
      for (var k2 in customJsonLogicOperations) {
        addJsonLogicOperation(k2, customJsonLogicOperations[k2]);
      }
    }
    function _createForOfIteratorHelper$b(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$b(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$b(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$b(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$b(o, minLen);
    }
    function _arrayLikeToArray$b(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$v(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$v(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$v(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$v(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    addRequiredJsonLogicOperations();
    function applyJsonLogicWithPath(logic2, data, path) {
      var ret;
      try {
        ret = JL.apply(logic2, data);
      } catch (e2) {
        e2.message = "".concat(path.join("."), " :: ").concat(e2.message);
        throw e2;
      }
      return ret;
    }
    function callContextFn(_this, fn, args, path) {
      var ret;
      try {
        ret = fn.call.apply(fn, [_this].concat(_toConsumableArray(args)));
      } catch (e2) {
        e2.message = "".concat(path.join("."), " :: ").concat(e2.message);
        throw e2;
      }
      return ret;
    }
    var configKeys$1 = ["conjunctions", "fields", "types", "operators", "widgets", "settings", "funcs", "ctx"];
    var compileMetaFieldSettings = {
      asyncFetch: {
        type: "f",
        args: ["search", "offset"]
      },
      labelYes: {
        type: "r"
      },
      labelNo: {
        type: "r"
      },
      marks: {
        type: "r",
        isArr: true
      },
      validateValue: {
        type: "f",
        args: ["val", "fieldSettings", "op", "opDef", "rightFieldDef"]
      }
    };
    var compileMetaWidget = _objectSpread$v(_objectSpread$v({}, compileMetaFieldSettings), {}, {
      factory: {
        type: "rf"
      },
      formatValue: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "isForDisplay", "op", "opDef", "rightFieldDef"]
      },
      sqlFormatValue: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "op", "opDef", "rightFieldDef"]
      },
      spelFormatValue: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "op", "opDef", "rightFieldDef"]
      },
      spelImportValue: {
        type: "f",
        args: ["val", "wgtDef", "args"]
      },
      mongoFormatValue: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "op", "opDef"]
      },
      elasticSearchFormatValue: {
        type: "f",
        args: ["queryType", "val", "op", "field", "config"]
      },
      jsonLogic: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "op", "opDef"]
      },
      validateValue: {
        type: "f",
        args: ["val", "fieldSettings", "op", "opDef", "rightFieldDef"]
      },
      // obsolete
      toJS: {
        type: "f",
        args: ["val"]
      }
    });
    var compileMetaOperator = {
      options: {
        // proximity
        factory: {
          type: "rf"
        }
      },
      formatOp: {
        type: "f",
        args: ["field", "op", "vals", "valueSrc", "valueType", "opDef", "operatorOptions", "isForDisplay", "fieldDef"]
      },
      mongoFormatOp: {
        type: "f",
        args: ["field", "op", "vals", "useExpr", "valueSrc", "valueType", "opDef", "operatorOptions", "fieldDef"]
      },
      sqlFormatOp: {
        type: "f",
        args: ["field", "op", "vals", "valueSrc", "valueType", "opDef", "operatorOptions", "fieldDef"]
      },
      spelFormatOp: {
        type: "f",
        args: ["field", "op", "vals", "valueSrc", "valueType", "opDef", "operatorOptions", "fieldDef"]
      },
      jsonLogic: {
        type: "f",
        ignore: "string",
        args: ["field", "op", "vals", "opDef", "operatorOptions", "fieldDef"]
      },
      elasticSearchQueryType: {
        type: "f",
        ignore: "string",
        args: ["valueType"]
      },
      textSeparators: {
        type: "r",
        isArr: true
      }
    };
    var compileMetaConjunction = {
      formatConj: {
        type: "f",
        args: ["children", "conj", "not", "isForDisplay"]
      },
      sqlFormatConj: {
        type: "f",
        args: ["children", "conj", "not"]
      },
      spelFormatConj: {
        type: "f",
        args: ["children", "conj", "not", "omitBrackets"]
      }
    };
    var compileMetaWidgetForType = {
      widgetProps: compileMetaWidget,
      opProps: compileMetaOperator
    };
    var compileMetaFunc = {
      renderBrackets: {
        type: "r",
        isArr: true
      },
      renderSeps: {
        type: "r",
        isArr: true
      },
      jsonLogic: {
        type: "f",
        ignore: "string",
        args: ["formattedArgs"]
      },
      jsonLogicImport: {
        type: "f",
        args: ["val"]
      },
      spelImport: {
        type: "f",
        args: ["spel"]
      },
      formatFunc: {
        type: "f",
        args: ["formattedArgs", "isForDisplay"]
      },
      sqlFormatFunc: {
        type: "f",
        args: ["formattedArgs"]
      },
      mongoFormatFunc: {
        type: "f",
        args: ["formattedArgs"]
      },
      spelFormatFunc: {
        type: "f",
        args: ["formattedArgs"]
      }
    };
    var compileMetaSettings = {
      locale: {
        mui: {
          type: "f",
          args: [],
          invokeWith: [],
          ignore: "jl"
        }
      },
      canCompareFieldWithField: {
        type: "f",
        args: ["leftField", "leftFieldConfig", "rightField", "rightFieldConfig", "op"]
      },
      formatReverse: {
        type: "f",
        args: ["q", "op", "reversedOp", "operatorDefinition", "revOperatorDefinition", "isForDisplay"]
      },
      sqlFormatReverse: {
        type: "f",
        args: ["q"]
      },
      spelFormatReverse: {
        type: "f",
        args: ["q"]
      },
      celFormatReverse: {
        type: "f",
        args: ["q"]
      },
      formatField: {
        type: "f",
        args: ["field", "parts", "label2", "fieldDefinition", "config", "isForDisplay"]
      },
      formatSpelField: {
        type: "f",
        args: ["field", "parentField", "parts", "partsExt", "fieldDefinition", "config"]
      },
      formatAggr: {
        type: "f",
        args: ["whereStr", "aggrField", "operator", "value", "valueSrc", "valueType", "opDef", "operatorOptions", "isForDisplay", "aggrFieldDef"]
      },
      normalizeListValues: {
        type: "f",
        args: ["listValues", "type", "fieldSettings"]
      },
      renderConfirm: {
        type: "f",
        args: ["props"]
      },
      useConfirm: {
        type: "f",
        args: []
      },
      renderField: {
        type: "rf"
      },
      renderOperator: {
        type: "rf"
      },
      renderFunc: {
        type: "rf"
      },
      renderConjs: {
        type: "rf"
      },
      renderButton: {
        type: "rf"
      },
      renderIcon: {
        type: "rf"
      },
      renderButtonGroup: {
        type: "rf"
      },
      renderValueSources: {
        type: "rf"
      },
      renderFieldSources: {
        type: "rf"
      },
      renderProvider: {
        type: "rf"
      },
      renderSwitch: {
        type: "rf"
      },
      renderSwitchPrefix: {
        type: "r"
      },
      renderItem: {
        type: "rf"
      },
      renderBeforeWidget: {
        type: "rf"
      },
      renderAfterWidget: {
        type: "rf"
      },
      renderBeforeActions: {
        type: "rf"
      },
      renderAfterActions: {
        type: "rf"
      },
      renderRuleError: {
        type: "rf"
      }
    };
    var compileMeta = {
      fields: {
        x: {
          fieldSettings: compileMetaFieldSettings,
          widgets: {
            x: compileMetaWidgetForType
          },
          mainWidgetProps: compileMetaWidget
        }
      },
      widgets: {
        x: compileMetaWidget
      },
      conjunctions: {
        x: compileMetaConjunction
      },
      operators: {
        x: compileMetaOperator
      },
      types: {
        x: {
          widgets: {
            x: compileMetaWidgetForType
          }
        }
      },
      funcs: {
        x: compileMetaFunc
      },
      settings: compileMetaSettings
    };
    var isObject$5 = function isObject2(v2) {
      return _typeof$1(v2) == "object" && v2 !== null && !Array.isArray(v2);
    };
    var compressConfig = function compressConfig2(config2, baseConfig2) {
      if (config2.__fieldNames) {
        throw new Error("Don't apply `compressConfig()` to extended config");
      }
      var zipConfig = pick$1(config2, configKeys$1);
      delete zipConfig.ctx;
      var _clean = function _clean2(target, base, path, meta) {
        if (isObject$5(target)) {
          if (isDirtyJSX(target)) {
            target = cleanJSX(target);
          }
          if (path[0] === "funcs" && !base) {
            var funcKey = path[path.length - 1];
            base = getFieldRawConfig({
              funcs: meta.BasicFuncs
            }, funcKey, "funcs", "subfields") || void 0;
            if (base) {
              target["$$key"] = funcKey;
            }
          }
          if (base !== void 0 && isObject$5(base)) {
            for (var k3 in base) {
              if (Object.prototype.hasOwnProperty.call(base, k3)) {
                if (!Object.keys(target).includes(k3) || target[k3] === void 0 && base[k3] !== void 0) {
                  target[k3] = "$$deleted";
                } else {
                  target[k3] = _clean2(target[k3], base[k3], [].concat(_toConsumableArray(path), [k3]), meta);
                  if (target[k3] === void 0) {
                    delete target[k3];
                  }
                }
              }
            }
          }
          for (var _k in target) {
            if (Object.prototype.hasOwnProperty.call(target, _k)) {
              if (!base || !Object.keys(base).includes(_k)) {
                var _base;
                target[_k] = _clean2(target[_k], (_base = base) === null || _base === void 0 ? void 0 : _base[_k], [].concat(_toConsumableArray(path), [_k]), meta);
              }
              if (target[_k] === void 0) {
                delete target[_k];
              }
            }
          }
          if (Object.keys(target).length === 0) {
            target = void 0;
          }
        } else if (Array.isArray(target)) {
          target.forEach(function(val, ind) {
            target[ind] = _clean2(target[ind], void 0, [].concat(_toConsumableArray(path), [ind]), meta);
          });
        }
        if (base !== void 0 && shallowEqual$2(target, base, true)) {
          return void 0;
        }
        if (typeof target === "function") {
          throw new Error("compressConfig: function at ".concat(path.join("."), " should be converted to JsonLogic"));
        }
        return target;
      };
      for (var _i = 0, _configKeys = configKeys$1; _i < _configKeys.length; _i++) {
        var rootKey = _configKeys[_i];
        if (rootKey === "ctx")
          ;
        else if (rootKey === "fields") {
          zipConfig[rootKey] = clone$3(zipConfig[rootKey]);
          _clean(zipConfig[rootKey], {}, [rootKey]);
        } else if (rootKey === "funcs") {
          zipConfig[rootKey] = clone$3(zipConfig[rootKey] || {});
          for (var k2 in zipConfig[rootKey]) {
            _clean(zipConfig[rootKey][k2], null, [rootKey, k2], {
              BasicFuncs
            });
          }
        } else {
          zipConfig[rootKey] = clone$3(zipConfig[rootKey]);
          _clean(zipConfig[rootKey], baseConfig2[rootKey], [rootKey]);
        }
      }
      return zipConfig;
    };
    var decompressConfig = function decompressConfig2(zipConfig, baseConfig2, ctx2) {
      if (!zipConfig.settings.useConfigCompress) {
        throw new Error("Please enable `useConfigCompress` in config settings to use decompressConfig()");
      }
      var unzipConfig = {};
      var _mergeDeep = function _mergeDeep2(target, mixin, path) {
        if (isObject$5(mixin)) {
          if (!isObject$5(target)) {
            target = {};
          }
          for (var k2 in mixin) {
            if (Object.prototype.hasOwnProperty.call(mixin, k2)) {
              if (mixin[k2] === "$$deleted") {
                delete target[k2];
              } else {
                target[k2] = _mergeDeep2(target[k2], mixin[k2], [].concat(_toConsumableArray(path), [k2]));
              }
            }
          }
        } else if (Array.isArray(mixin)) {
          target = clone$3(mixin);
        } else {
          target = mixin;
        }
        return target;
      };
      var _resolveAndMergeDeep = function _resolveAndMergeDeep2(target, path, meta) {
        var resolved = false;
        if (isObject$5(target) && Object.prototype.hasOwnProperty.call(target, "$$key") && target["$$key"]) {
          var func = getFieldRawConfig({
            funcs: meta.BasicFuncs
          }, target["$$key"], "funcs", "subfields");
          if (func) {
            delete target["$$key"];
            target = _mergeDeep(clone$3(func), target, path);
            resolved = true;
          } else {
            throw new Error("decompressConfig: basic function not found by key ".concat(target["$$key"], " at ").concat(path.join(".")));
          }
        }
        if (!resolved) {
          if (isObject$5(target)) {
            for (var k2 in target) {
              if (Object.prototype.hasOwnProperty.call(target, k2)) {
                target[k2] = _resolveAndMergeDeep2(target[k2], [].concat(_toConsumableArray(path), [k2]), meta);
              }
            }
          } else if (Array.isArray(target)) {
            var _iterator = _createForOfIteratorHelper$b(target), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var _k2 = _step.value;
                target[_k2] = _resolveAndMergeDeep2(target[_k2], [].concat(_toConsumableArray(path), [_k2]), meta);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }
        return target;
      };
      for (var _i2 = 0, _configKeys2 = configKeys$1; _i2 < _configKeys2.length; _i2++) {
        var rootKey = _configKeys2[_i2];
        if (rootKey === "ctx") {
          unzipConfig[rootKey] = merge$1({}, baseConfig2.ctx || {}, ctx2 || {});
        } else if (rootKey === "funcs") {
          unzipConfig[rootKey] = clone$3(zipConfig[rootKey] || {});
          _resolveAndMergeDeep(unzipConfig[rootKey], [rootKey], {
            BasicFuncs
          });
        } else if (rootKey === "fields") {
          unzipConfig[rootKey] = clone$3(zipConfig[rootKey] || {});
        } else {
          unzipConfig[rootKey] = clone$3(baseConfig2[rootKey] || {});
          _mergeDeep(unzipConfig[rootKey], zipConfig[rootKey] || {}, [rootKey]);
        }
      }
      return unzipConfig;
    };
    var compileConfig = function compileConfig2(config2) {
      if (config2.__compliled) {
        return config2;
      }
      config2 = clone$3(config2);
      var opts = {
        ctx: config2.ctx
      };
      var logs = [];
      _compileConfigParts(config2, config2, opts, compileMeta, logs);
      Object.defineProperty(config2, "__compliled", {
        enumerable: false,
        writable: false,
        value: true
      });
      return config2;
    };
    function _compileConfigParts(config2, subconfig, opts, meta, logs) {
      var path = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : [];
      if (!subconfig)
        return;
      !path.length;
      for (var k2 in meta) {
        var submeta = meta[k2];
        var newPath = k2 === "x" ? path : [].concat(_toConsumableArray(path), [k2]);
        if (submeta.type === "r") {
          var targetObj = subconfig;
          var val = targetObj[k2];
          if (submeta.isArr) {
            for (var ind in val) {
              var newVal = renderReactElement(val[ind], opts, [].concat(_toConsumableArray(newPath), [ind]));
              if (newVal !== val[ind]) {
                logs.push("Compiled ".concat(newPath.join("."), "[").concat(ind, "]"));
                val[ind] = newVal;
              }
            }
          } else {
            var _newVal = renderReactElement(val, opts, newPath, void 0);
            if (_newVal !== val) {
              logs.push("Compiled R ".concat(newPath.join(".")));
              targetObj[k2] = _newVal;
            }
          }
        } else if (submeta.type === "rf") {
          var _targetObj = subconfig;
          var _val = _targetObj[k2];
          var _newVal2 = compileJsonLogicReact(_val, opts, newPath, submeta.ignore);
          if (_newVal2 !== _val) {
            logs.push("Compiled JL-RF ".concat(newPath.join(".")));
            _targetObj[k2] = _newVal2;
          }
        } else if (submeta.type === "f") {
          var _targetObj2 = subconfig;
          var _val2 = _targetObj2[k2];
          var _newVal3 = compileJsonLogic(_val2, opts, newPath, submeta.args, submeta.ignore);
          if (submeta.invokeWith && _newVal3 && typeof _newVal3 === "function") {
            var _newVal4;
            _newVal3 = (_newVal4 = _newVal3).call.apply(_newVal4, [null].concat(_toConsumableArray(submeta.invokeWith)));
          }
          if (_newVal3 !== _val2) {
            logs.push("Compiled JL-F ".concat(newPath.join(".")));
            _targetObj2[k2] = _newVal3;
          }
        } else if (k2 === "x") {
          for (var field in subconfig) {
            newPath = [].concat(_toConsumableArray(path), [field]);
            var def = subconfig[field];
            _compileConfigParts(config2, def, opts, submeta, logs, newPath);
            if (def.subfields) {
              _compileConfigParts(config2, def.subfields, opts, meta, logs, newPath);
            }
          }
        } else {
          var _def = subconfig[k2];
          _compileConfigParts(config2, _def, opts, submeta, logs, newPath);
        }
      }
    }
    function compileJsonLogicReact(jl, opts, path) {
      if (isJsonLogic(jl)) {
        return function(props, ctx2) {
          ctx2 = ctx2 || (opts === null || opts === void 0 ? void 0 : opts.ctx);
          var data = {
            props,
            ctx: ctx2
          };
          var re2 = applyJsonLogicWithPath(jl, data, path);
          if (typeof re2 === "string") {
            re2 = {
              type: re2,
              props
            };
          }
          var ret = renderReactElement(re2, {
            ctx: ctx2
          }, path);
          return ret;
        };
      } else if (typeof jl === "string") {
        return function(props, ctx2) {
          ctx2 = ctx2 || (opts === null || opts === void 0 ? void 0 : opts.ctx);
          var fn = jl.split(".").reduce(function(o, k2) {
            return o === null || o === void 0 ? void 0 : o[k2];
          }, ctx2);
          if (fn) {
            return callContextFn(this, fn, [props, ctx2], path);
          } else {
            var re2 = {
              type: jl,
              props
            };
            var ret = renderReactElement(re2, {
              ctx: ctx2
            }, path);
            return ret;
          }
        };
      }
      return jl;
    }
    function compileJsonLogic(jl, opts, path, argNames) {
      var ignore = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : void 0;
      if (isJsonLogic(jl) && ignore !== "jl") {
        return (function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var ctx2 = this || (opts === null || opts === void 0 ? void 0 : opts.ctx);
          var data = (argNames || []).reduce(function(acc, k2, i) {
            return _objectSpread$v(_objectSpread$v({}, acc), {}, _defineProperty$2({}, k2, args[i]));
          }, {
            args,
            ctx: ctx2
          });
          var ret = applyJsonLogicWithPath(jl, data, path);
          return ret;
        }).bind(opts === null || opts === void 0 ? void 0 : opts.ctx);
      } else if (typeof jl === "string" && ignore !== "string") {
        return (function() {
          var ctx2 = this || (opts === null || opts === void 0 ? void 0 : opts.ctx);
          var fn = jl.split(".").reduce(function(o, k2) {
            return o === null || o === void 0 ? void 0 : o[k2];
          }, ctx2);
          if (fn) {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            return callContextFn(this, fn, args, path);
          } else {
            throw new Error("".concat(path.join("."), " :: Function ").concat(jl, " is not found in ctx"));
          }
        }).bind(opts === null || opts === void 0 ? void 0 : opts.ctx);
      }
      return jl;
    }
    function getReactComponentFromCtx(name, ctx2) {
      var _ctx$components;
      return (ctx2 === null || ctx2 === void 0 || (_ctx$components = ctx2.components) === null || _ctx$components === void 0 ? void 0 : _ctx$components[name]) || ctx2.W[name] || ctx2.O[name];
    }
    function renderReactElement(jsx, opts, path) {
      var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : void 0;
      if (isJSX(jsx)) {
        var _props;
        var type = jsx.type, props = jsx.props;
        if (typeof type !== "string") {
          throw new Error("renderReactElement for ".concat(path.join("."), ": type should be string"));
        }
        var Cmp = getReactComponentFromCtx(type, opts.ctx) || type.toLowerCase();
        var children;
        if (key !== void 0) {
          props = _objectSpread$v(_objectSpread$v({}, props), {}, {
            key
          });
        }
        if ((_props = props) !== null && _props !== void 0 && _props.children) {
          children = renderReactElement(props.children, opts, path);
          props = _objectSpread$v(_objectSpread$v({}, props), {}, {
            children
          });
        }
        var res = opts.ctx.RCE(Cmp, props);
        return res;
      } else if (jsx instanceof Array) {
        return jsx.map(function(el, i) {
          return renderReactElement(el, opts, path, "" + i);
        });
      }
      return jsx;
    }
    function ownKeys$u(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$u(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$u(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$u(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var _marked = /* @__PURE__ */ _regeneratorRuntime.mark(iterateFuncs), _marked2 = /* @__PURE__ */ _regeneratorRuntime.mark(iterateFields);
    function _createForOfIteratorHelper$a(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$a(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$a(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$a(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$a(o, minLen);
    }
    function _arrayLikeToArray$a(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    var extendConfig$1 = function extendConfig2(config2, configId) {
      var canCompile = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (config2.__configId) {
        return config2;
      }
      if (canCompile && config2.settings.useConfigCompress) {
        if (config2.__compliled) {
          config2 = clone$3(config2);
        } else {
          config2 = compileConfig(config2);
        }
      } else {
        config2 = clone$3(config2);
      }
      config2.settings = mergeWith$1({}, settings$3, config2.settings, mergeCustomizerNoArrays);
      config2.__fieldsCntByType = {};
      config2.__funcsCntByType = {};
      config2.__fieldNames = {};
      _extendTypesConfig(config2.types, config2);
      _extendFieldsConfig(config2.fields, config2);
      _extendFuncArgsConfig(config2.funcs, config2);
      var momentLocale = config2.settings.locale.moment;
      if (momentLocale) {
        hooks.locale(momentLocale);
      }
      Object.defineProperty(config2, "__configId", {
        enumerable: false,
        writable: false,
        value: configId || uuid$1()
      });
      deepFreeze(config2);
      return config2;
    };
    function _extendTypesConfig(typesConfig, config2) {
      for (var type in typesConfig) {
        var typeConfig = typesConfig[type];
        _extendTypeConfig(type, typeConfig, config2);
      }
    }
    function _extendTypeConfig(type, typeConfig, config2) {
      var operators2 = null, defaultOperator = null;
      typeConfig.mainWidget = typeConfig.mainWidget || Object.keys(typeConfig.widgets).filter(function(w2) {
        return w2 != "field" && w2 != "func";
      })[0];
      for (var widget in typeConfig.widgets) {
        var typeWidgetConfig = typeConfig.widgets[widget];
        if (typeWidgetConfig.operators) {
          var typeWidgetOperators = typeWidgetConfig.operators;
          if (typeConfig.excludeOperators) {
            typeWidgetOperators = typeWidgetOperators.filter(function(op) {
              return !typeConfig.excludeOperators.includes(op);
            });
          }
          operators2 = mergeArraysSmart(operators2, typeWidgetOperators);
        }
        if (typeWidgetConfig.defaultOperator)
          defaultOperator = typeWidgetConfig.defaultOperator;
        if (widget == typeConfig.mainWidget) {
          typeWidgetConfig = merge$1({}, {
            widgetProps: typeConfig.mainWidgetProps || {}
          }, typeWidgetConfig);
        }
        typeConfig.widgets[widget] = typeWidgetConfig;
      }
      if (!typeConfig.valueSources)
        typeConfig.valueSources = Object.keys(config2.settings.valueSourcesInfo);
      var _iterator = _createForOfIteratorHelper$a(typeConfig.valueSources), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var valueSrc = _step.value;
          if (valueSrc != "value" && !typeConfig.widgets[valueSrc]) {
            typeConfig.widgets[valueSrc] = {};
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (!typeConfig.operators && operators2)
        typeConfig.operators = Array.from(new Set(operators2));
      if (!typeConfig.defaultOperator && defaultOperator)
        typeConfig.defaultOperator = defaultOperator;
    }
    function _extendFieldsConfig(subconfig, config2) {
      var path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      for (var field in subconfig) {
        _extendFieldConfig(subconfig[field], config2, [].concat(_toConsumableArray(path), [field]));
        if (subconfig[field].subfields) {
          _extendFieldsConfig(subconfig[field].subfields, config2, [].concat(_toConsumableArray(path), [field]));
        }
      }
    }
    function _extendFuncArgsConfig(subconfig, config2) {
      var _config$settings;
      var path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      if (!subconfig)
        return;
      var fieldSeparator = (config2 === null || config2 === void 0 || (_config$settings = config2.settings) === null || _config$settings === void 0 ? void 0 : _config$settings.fieldSeparator) || ".";
      for (var funcKey in subconfig) {
        var funcPath = [].concat(_toConsumableArray(path), [funcKey]).join(fieldSeparator);
        var funcDef = subconfig[funcKey];
        if (funcDef.returnType) {
          if (!config2.__funcsCntByType[funcDef.returnType])
            config2.__funcsCntByType[funcDef.returnType] = 0;
          config2.__funcsCntByType[funcDef.returnType]++;
        }
        for (var argKey in funcDef.args) {
          _extendFieldConfig(funcDef.args[argKey], config2, null, true);
        }
        if (funcDef.args) {
          var argKeys = Object.keys(funcDef.args);
          var tmpIsOptional = true;
          var _iterator2 = _createForOfIteratorHelper$a(argKeys.reverse()), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var _argKey = _step2.value;
              var argDef = funcDef.args[_argKey];
              if (!tmpIsOptional && argDef.isOptional) {
                logger$1.info("Arg ".concat(_argKey, " for func ").concat(funcPath, " can't be optional"));
                delete argDef.isOptional;
              }
              if (!argDef.isOptional)
                tmpIsOptional = false;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
        if (funcDef.subfields) {
          _extendFuncArgsConfig(funcDef.subfields, config2, [].concat(_toConsumableArray(path), [funcKey]));
        }
      }
    }
    function _extendFieldConfig(fieldConfig, config2) {
      var path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var isFuncArg = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var operators2 = null, defaultOperator = null;
      var typeConfig = config2.types[fieldConfig.type];
      var excludeOperatorsForField = fieldConfig.excludeOperators || [];
      if (fieldConfig.type != "!struct" && fieldConfig.type != "!group") {
        var keysToPutInFieldSettings = ["listValues", "treeValues", "allowCustomValues", "validateValue"];
        if (!fieldConfig.fieldSettings)
          fieldConfig.fieldSettings = {};
        for (var _i = 0, _keysToPutInFieldSett = keysToPutInFieldSettings; _i < _keysToPutInFieldSett.length; _i++) {
          var k2 = _keysToPutInFieldSett[_i];
          if (fieldConfig[k2]) {
            fieldConfig.fieldSettings[k2] = fieldConfig[k2];
            delete fieldConfig[k2];
          }
        }
        if (fieldConfig.fieldSettings.listValues) {
          if (config2.settings.normalizeListValues) {
            fieldConfig.fieldSettings.listValues = config2.settings.normalizeListValues.call(config2.ctx, fieldConfig.fieldSettings.listValues, fieldConfig.type, fieldConfig.fieldSettings);
          }
        }
        if (fieldConfig.fieldSettings.treeValues) {
          if (config2.settings.normalizeListValues) {
            fieldConfig.fieldSettings.treeValues = config2.settings.normalizeListValues.call(config2.ctx, fieldConfig.fieldSettings.treeValues, fieldConfig.type, fieldConfig.fieldSettings);
          }
        }
        if (!typeConfig) {
          fieldConfig.disabled = true;
          return;
        }
        if (!isFuncArg) {
          if (!config2.__fieldsCntByType[fieldConfig.type])
            config2.__fieldsCntByType[fieldConfig.type] = 0;
          config2.__fieldsCntByType[fieldConfig.type]++;
        }
        if (!fieldConfig.widgets)
          fieldConfig.widgets = {};
        if (isFuncArg)
          fieldConfig._isFuncArg = true;
        fieldConfig.mainWidget = fieldConfig.mainWidget || typeConfig.mainWidget;
        fieldConfig.valueSources = fieldConfig.valueSources || typeConfig.valueSources;
        var excludeOperatorsForType = typeConfig.excludeOperators || [];
        var _loop = function _loop2() {
          var fieldWidgetConfig = fieldConfig.widgets[widget] || {};
          var typeWidgetConfig = typeConfig.widgets[widget] || {};
          if (!isFuncArg) {
            var excludeOperators = [].concat(_toConsumableArray(excludeOperatorsForField), _toConsumableArray(excludeOperatorsForType));
            var shouldIncludeOperators = fieldConfig.preferWidgets && (widget == "field" || fieldConfig.preferWidgets.includes(widget)) || excludeOperators.length > 0;
            if (fieldWidgetConfig.operators) {
              var addOperators = fieldWidgetConfig.operators.filter(function(o) {
                return !excludeOperators.includes(o);
              });
              operators2 = [].concat(_toConsumableArray(operators2 || []), _toConsumableArray(addOperators));
            } else if (shouldIncludeOperators && typeWidgetConfig.operators) {
              var _addOperators = typeWidgetConfig.operators.filter(function(o) {
                return !excludeOperators.includes(o);
              });
              operators2 = [].concat(_toConsumableArray(operators2 || []), _toConsumableArray(_addOperators));
            }
            if (fieldWidgetConfig.defaultOperator)
              defaultOperator = fieldWidgetConfig.defaultOperator;
          }
          if (widget == fieldConfig.mainWidget) {
            fieldWidgetConfig = merge$1({}, {
              widgetProps: fieldConfig.mainWidgetProps || {}
            }, fieldWidgetConfig);
          }
          fieldConfig.widgets[widget] = fieldWidgetConfig;
        };
        for (var widget in typeConfig.widgets) {
          _loop();
        }
        if (!isFuncArg) {
          if (!fieldConfig.operators && operators2)
            fieldConfig.operators = Array.from(new Set(operators2));
          fieldConfig._origDefaultOperator = fieldConfig.defaultOperator;
          if (!fieldConfig.defaultOperator && defaultOperator)
            fieldConfig.defaultOperator = defaultOperator;
        }
      }
      var _computeFieldName = computeFieldName(config2, path), fieldName = _computeFieldName.fieldName, inGroup = _computeFieldName.inGroup;
      if (fieldName) {
        fieldConfig.fieldName = fieldName;
        if (!config2.__fieldNames[fieldName])
          config2.__fieldNames[fieldName] = [];
        config2.__fieldNames[fieldName].push({
          fullPath: path,
          inGroup
        });
      }
    }
    var mergeCustomizerNoArrays = function mergeCustomizerNoArrays2(objValue, srcValue, _key, _object, _source, _stack) {
      if (Array.isArray(objValue)) {
        return srcValue;
      }
    };
    function iterateFuncs(config2) {
      return _regeneratorRuntime.wrap(function iterateFuncs$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(_iterateFields(config2, config2.funcs || {}, []), "t0", 1);
            case 1:
            case "end":
              return _context.stop();
          }
      }, _marked);
    }
    function iterateFields(config2) {
      return _regeneratorRuntime.wrap(function iterateFields$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.delegateYield(_iterateFields(config2, config2.fields || {}, []), "t0", 1);
            case 1:
            case "end":
              return _context2.stop();
          }
      }, _marked2);
    }
    function _iterateFields(config2, subfields, path) {
      var subfieldsKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "subfields";
      return /* @__PURE__ */ _regeneratorRuntime.mark(function _callee(_config$settings2) {
        var fieldSeparator, fieldKey, fieldConfig;
        return _regeneratorRuntime.wrap(function _callee$(_context3) {
          while (1)
            switch (_context3.prev = _context3.next) {
              case 0:
                fieldSeparator = (config2 === null || config2 === void 0 || (_config$settings2 = config2.settings) === null || _config$settings2 === void 0 ? void 0 : _config$settings2.fieldSeparator) || ".";
                _context3.t0 = _regeneratorRuntime.keys(subfields);
              case 2:
                if ((_context3.t1 = _context3.t0()).done) {
                  _context3.next = 13;
                  break;
                }
                fieldKey = _context3.t1.value;
                fieldConfig = subfields[fieldKey];
                if (!fieldConfig[subfieldsKey]) {
                  _context3.next = 9;
                  break;
                }
                return _context3.delegateYield(_iterateFields(config2, fieldConfig[subfieldsKey], [].concat(_toConsumableArray(path), [fieldKey]), subfieldsKey), "t2", 7);
              case 7:
                _context3.next = 11;
                break;
              case 9:
                _context3.next = 11;
                return [[].concat(_toConsumableArray(path), [fieldKey]).join(fieldSeparator), fieldConfig];
              case 11:
                _context3.next = 2;
                break;
              case 13:
              case "end":
                return _context3.stop();
            }
        }, _callee);
      })();
    }
    var getFieldRawConfig = function getFieldRawConfig2(config2, field) {
      var _config$settings3;
      var fieldsKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "fields";
      var subfieldsKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "subfields";
      if (!field)
        return null;
      if (field == "!case_value") {
        return {
          type: "case_value",
          mainWidget: "case_value",
          widgets: {
            "case_value": config2.widgets["case_value"]
          }
        };
      }
      var fieldSeparator = (config2 === null || config2 === void 0 || (_config$settings3 = config2.settings) === null || _config$settings3 === void 0 ? void 0 : _config$settings3.fieldSeparator) || ".";
      var parts = getFieldParts$4(field, config2);
      var targetFields = config2[fieldsKey];
      if (!targetFields)
        return null;
      var fields = targetFields;
      var fieldConfig = null;
      var path = [];
      for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        path.push(part);
        var pathKey = path.join(fieldSeparator);
        fieldConfig = fields[pathKey];
        if (i < parts.length - 1) {
          if (fieldConfig && fieldConfig[subfieldsKey]) {
            fields = fieldConfig[subfieldsKey];
            path = [];
          } else {
            fieldConfig = null;
          }
        }
      }
      return fieldConfig;
    };
    var computeFieldName = function computeFieldName2(config2, path) {
      if (!path)
        return {};
      var fieldSeparator = config2.settings.fieldSeparator;
      var _reduce = _toConsumableArray(path).reduce(function(_ref, f2, i, arr) {
        var computedPath2 = _ref.computedPath, computed2 = _ref.computed, inGroup2 = _ref.inGroup;
        var fullPath = [].concat(_toConsumableArray(arr.slice(0, i)), [f2]);
        var fConfig = getFieldRawConfig(config2, fullPath);
        if ((fConfig === null || fConfig === void 0 ? void 0 : fConfig.type) === "!group" && i < arr.length - 1) {
          inGroup2 = fullPath.join(fieldSeparator);
          computedPath2 = [];
        } else if (fConfig !== null && fConfig !== void 0 && fConfig.fieldName) {
          computed2 = true;
          computedPath2 = [fConfig.fieldName];
        } else {
          computedPath2 = [].concat(_toConsumableArray(computedPath2), [f2]);
        }
        return {
          computedPath: computedPath2,
          computed: computed2,
          inGroup: inGroup2
        };
      }, {
        computedPath: [],
        computed: false,
        inGroup: void 0
      }), computedPath = _reduce.computedPath, computed = _reduce.computed, inGroup = _reduce.inGroup;
      return computed ? {
        fieldName: computedPath.join(fieldSeparator),
        inGroup
      } : {};
    };
    var normalizeField = function normalizeField2(config2, field) {
      var _config$__fieldNames$, _config$__fieldNames$2;
      var parentField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var path = [parentField].concat(_toConsumableArray(field.split(fieldSeparator))).filter(function(f2) {
        return f2 != null;
      });
      var findStr = field;
      var normalizedPath = (_config$__fieldNames$ = config2.__fieldNames[findStr]) === null || _config$__fieldNames$ === void 0 || (_config$__fieldNames$2 = _config$__fieldNames$.find) === null || _config$__fieldNames$2 === void 0 || (_config$__fieldNames$2 = _config$__fieldNames$2.call(_config$__fieldNames$, function(_ref2) {
        var inGroup = _ref2.inGroup;
        if (inGroup)
          return parentField === null || parentField === void 0 ? void 0 : parentField.startsWith(inGroup);
        return true;
      })) === null || _config$__fieldNames$2 === void 0 ? void 0 : _config$__fieldNames$2.fullPath;
      return (normalizedPath || path).join(fieldSeparator);
    };
    var getFuncSignature = function getFuncSignature2(config2, func) {
      if (!func)
        return null;
      var funcConfig = getFieldRawConfig(config2, func, "funcs", "subfields");
      if (!funcConfig)
        return null;
      var returnType = funcConfig.returnType, args = funcConfig.args;
      var argsSignature = Object.fromEntries(Object.entries(args || {}).map(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2), k2 = _ref4[0], v2 = _ref4[1];
        var argSignature = pick$1(v2, [
          "type",
          "valueSources",
          "defaultValue",
          "fieldSettings",
          // "asyncListValues", // not supported
          "isOptional"
        ]);
        return [k2, argSignature];
      }));
      var signature = {
        returnType,
        args: argsSignature
      };
      return signature;
    };
    var getFuncConfig$2 = function getFuncConfig2(config2, func) {
      if (!func)
        return null;
      var funcConfig = getFieldRawConfig(config2, func, "funcs", "subfields");
      if (!funcConfig)
        return null;
      var typeConfig = config2.types[funcConfig.returnType] || {};
      return _objectSpread$u(_objectSpread$u(_objectSpread$u({}, typeConfig), funcConfig), {}, {
        type: funcConfig.returnType || funcConfig.type
      });
    };
    var getFuncArgConfig = function getFuncArgConfig2(config2, funcKey, argKey) {
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig)
        return null;
      var argConfig = funcConfig.args && funcConfig.args[argKey] || null;
      if (!argConfig)
        return null;
      var typeConfig = config2.types[argConfig.type] || {};
      var ret = mergeWith$1({}, typeConfig, argConfig || {}, mergeCustomizerNoArrays);
      return ret;
    };
    var isFieldDescendantOfField = function isFieldDescendantOfField2(field, parentField) {
      var _config$settings4;
      var config2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!parentField)
        return false;
      var fieldSeparator = (config2 === null || config2 === void 0 || (_config$settings4 = config2.settings) === null || _config$settings4 === void 0 ? void 0 : _config$settings4.fieldSeparator) || ".";
      var path = getFieldPath(field, config2);
      var parentPath = getFieldPath(parentField, config2);
      return path.startsWith(parentPath + fieldSeparator);
    };
    var getFieldPath = function getFieldPath2(field) {
      var _config$settings5;
      var config2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      if (typeof field === "string")
        return field;
      var fieldSeparator = (config2 === null || config2 === void 0 || (_config$settings5 = config2.settings) === null || _config$settings5 === void 0 ? void 0 : _config$settings5.fieldSeparator) || ".";
      return getFieldParts$4(field, config2).join(fieldSeparator);
    };
    var getFieldParts$4 = function getFieldParts2(field) {
      var _config$settings6, _field$get, _field$split;
      var config2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      if (!field)
        return [];
      if (Array.isArray(field))
        return field;
      var fieldSeparator = (config2 === null || config2 === void 0 || (_config$settings6 = config2.settings) === null || _config$settings6 === void 0 ? void 0 : _config$settings6.fieldSeparator) || ".";
      if (field !== null && field !== void 0 && field.func) {
        return Array.isArray(field.func) ? field.func : field.func.split(fieldSeparator);
      }
      if (field !== null && field !== void 0 && (_field$get = field.get) !== null && _field$get !== void 0 && _field$get.call(field, "func")) {
        var _field$get2;
        return field === null || field === void 0 || (_field$get2 = field.get) === null || _field$get2 === void 0 ? void 0 : _field$get2.call(field, "func").split(fieldSeparator);
      }
      return (field === null || field === void 0 || (_field$split = field.split) === null || _field$split === void 0 ? void 0 : _field$split.call(field, fieldSeparator)) || [];
    };
    var getFieldPathParts$3 = function getFieldPathParts2(field, config2) {
      var onlyKeys = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (!field)
        return null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parts = getFieldParts$4(field, config2);
      if (onlyKeys)
        return parts;
      else
        return parts.map(function(_curr, ind, arr) {
          return arr.slice(0, ind + 1);
        }).map(function(parts2) {
          return parts2.join(fieldSeparator);
        });
    };
    var getFieldSrc = function getFieldSrc2(field) {
      var _field$get3;
      if (!field)
        return null;
      if (_typeof$1(field) == "object") {
        if (!field.func && !!field.type) {
          return "field";
        }
        if (field.func) {
          if (field.func && field.arg) {
            return null;
          } else {
            return "func";
          }
        }
      }
      if (field !== null && field !== void 0 && (_field$get3 = field.get) !== null && _field$get3 !== void 0 && _field$get3.call(field, "func")) {
        if (field !== null && field !== void 0 && field.get("arg")) {
          return null;
        } else {
          return "func";
        }
      }
      return "field";
    };
    var getFieldConfig$8 = function getFieldConfig2(config2, field) {
      var _field$get4;
      if (!field)
        return null;
      if (_typeof$1(field) == "object") {
        if (!field.func && !!field.type) {
          return field;
        }
        if (field.func) {
          if (field.func && field.arg) {
            return getFuncArgConfig(config2, field.func, field.arg);
          } else {
            return getFuncConfig$2(config2, field.func);
          }
        }
      }
      if (field !== null && field !== void 0 && (_field$get4 = field.get) !== null && _field$get4 !== void 0 && _field$get4.call(field, "func")) {
        if (field !== null && field !== void 0 && field.get("arg")) {
          return getFuncArgConfig(config2, field.get("func"), field.get("arg"));
        } else {
          return getFuncConfig$2(config2, field.get("func"));
        }
      }
      var fieldConfig = getFieldRawConfig(config2, field);
      if (!fieldConfig)
        return null;
      var typeConfig = config2.types[fieldConfig.type] || {};
      var ret = mergeWith$1({}, typeConfig, fieldConfig || {}, mergeCustomizerNoArrays);
      return ret;
    };
    var getOperatorConfig$4 = function getOperatorConfig2(config2, operator) {
      var field = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!operator)
        return null;
      var opConfig = config2.operators[operator];
      if (field) {
        var fieldConfig = getFieldConfig$8(config2, field);
        var widget = getWidgetForFieldOp$3(config2, field, operator, null);
        var widgetConfig = config2.widgets[widget] || {};
        var fieldWidgetConfig = (fieldConfig && fieldConfig.widgets ? fieldConfig.widgets[widget] : {}) || {};
        var widgetOpProps = (widgetConfig.opProps || {})[operator];
        var fieldWidgetOpProps = (fieldWidgetConfig.opProps || {})[operator];
        var mergedOpConfig = merge$1({}, opConfig, widgetOpProps, fieldWidgetOpProps);
        return mergedOpConfig;
      } else {
        return opConfig;
      }
    };
    var getFieldWidgetConfig$3 = function getFieldWidgetConfig2(config2, field, operator) {
      var widget = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var valueSrc = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (!field)
        return null;
      if (!(operator || widget) && valueSrc != "const" && field != "!case_value")
        return null;
      var fieldConfig = getFieldConfig$8(config2, field);
      if (!widget)
        widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
      var widgetConfig = config2.widgets[widget] || {};
      var fieldWidgetConfig = (fieldConfig && fieldConfig.widgets ? fieldConfig.widgets[widget] : {}) || {};
      var fieldWidgetProps = fieldWidgetConfig.widgetProps || {};
      var valueFieldSettings = (valueSrc == "value" || !valueSrc) && fieldConfig && fieldConfig.fieldSettings || {};
      var mergedConfig = merge$1({}, widgetConfig, fieldWidgetProps, valueFieldSettings);
      return mergedConfig;
    };
    var _widgetDefKeysToOmit$1 = widgetDefKeysToOmit;
    const configUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      _widgetDefKeysToOmit: _widgetDefKeysToOmit$1,
      applyJsonLogic,
      cleanJSX,
      compileConfig,
      compressConfig,
      configKeys: configKeys$1,
      decompressConfig,
      extendConfig: extendConfig$1,
      getFieldConfig: getFieldConfig$8,
      getFieldParts: getFieldParts$4,
      getFieldPath,
      getFieldPathParts: getFieldPathParts$3,
      getFieldRawConfig,
      getFieldSrc,
      getFieldWidgetConfig: getFieldWidgetConfig$3,
      getFuncArgConfig,
      getFuncConfig: getFuncConfig$2,
      getFuncSignature,
      getOperatorConfig: getOperatorConfig$4,
      isDirtyJSX,
      isFieldDescendantOfField,
      isJSX,
      iterateFields,
      iterateFuncs,
      normalizeField
    }, Symbol.toStringTag, { value: "Module" }));
    function _createForOfIteratorHelper$9(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$9(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$9(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$9(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$9(o, minLen);
    }
    function _arrayLikeToArray$9(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$t(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$t(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$t(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$t(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var celFormat = function celFormat2(tree2, config2) {
      return _celFormat(tree2, config2, false);
    };
    var _celFormat = function _celFormat2(tree2, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var extendedConfig = extendConfig$1(config2, void 0, false);
      var res = formatItem$5(tree2, extendedConfig, meta);
      if (returnErrors) {
        return [res, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while exporting to CEL:", meta.errors);
        return res;
      }
    };
    var formatItem$5 = function formatItem2(item, config2, meta) {
      if (!item)
        return void 0;
      var type = item.get("type");
      item.get("children1");
      if (type === "group" || type === "rule_group") {
        return formatGroup$5(item, config2, meta);
      } else if (type === "rule") {
        return formatRule$5(item, config2, meta);
      }
      return void 0;
    };
    var formatGroup$5 = function formatGroup2(item, config2, meta) {
      var type = item.get("type");
      var properties2 = item.get("properties") || new immutableExports.Map();
      var children = item.get("children1") || new immutableExports.List();
      var isRuleGroup = type === "rule_group";
      var groupField = isRuleGroup ? properties2.get("field") : null;
      var groupFieldDef = getFieldConfig$8(config2, groupField) || {};
      var mode = groupFieldDef.mode;
      if (mode == "array") {
        meta.errors.push("Aggregation is not supported for ".concat(groupField));
      }
      var not = properties2.get("not");
      var list = children.map(function(currentChild) {
        return formatItem$5(currentChild, config2, meta);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!list.size)
        return void 0;
      var conjunction = properties2.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      return conjunctionDefinition.celFormatConj(list, conjunction, not);
    };
    var buildFnToFormatOp$3 = function buildFnToFormatOp2(operator, operatorDefinition) {
      var celOp = operatorDefinition.celOp || operator;
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var fn;
      if (cardinality == 0) {
        fn = function fn2(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " ").concat(celOp);
        };
      } else if (cardinality == 1) {
        fn = function fn2(field, op, value2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " ").concat(celOp, " ").concat(value2);
        };
      } else if (cardinality == 2) {
        fn = function fn2(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var valFrom = values2.first();
          var valTo = values2.get(1);
          return "".concat(field, " ").concat(celOp, " ").concat(valFrom, " && ").concat(valTo);
        };
      }
      return fn;
    };
    var formatRule$5 = function formatRule2(item, config2, meta) {
      var properties2 = item.get("properties") || new immutableExports.Map();
      var field = properties2.get("field");
      var fieldSrc = properties2.get("fieldSrc");
      var operator = properties2.get("operator");
      var operatorOptions = properties2.get("operatorOptions");
      var iValueSrc = properties2.get("valueSrc");
      var iValueType = properties2.get("valueType");
      var iValue = properties2.get("value");
      var asyncListValues = properties2.get("asyncListValues");
      if (field == null || operator == null)
        return void 0;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var opDef = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = opDef.reversedOp;
      var revOpDef = getOperatorConfig$4(config2, reversedOp, field) || {};
      var cardinality = defaultValue$1(opDef.cardinality, 1);
      var isRev = false;
      var canFormatOp = opDef.celOp || opDef.celFormatOp;
      var canFormatRevOp = revOpDef.celOp || revOpDef.celFormatOp;
      if (!canFormatOp && !canFormatRevOp) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      if (!canFormatOp && canFormatRevOp) {
        isRev = true;
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOpDef, opDef];
        opDef = _ref2[0];
        revOpDef = _ref2[1];
      }
      var valueSrcs = [];
      var valueTypes = [];
      var fvalue = iValue.map(function(currentValue, ind) {
        var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
        var valueType = iValueType ? iValueType.get(ind) : null;
        var cValue = completeValue(currentValue, valueSrc, config2);
        var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDefinition = omit$1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
        var fv = formatValue$4(meta, config2, cValue, valueSrc, valueType, fieldWidgetDefinition, fieldDefinition, operator, opDef, asyncListValues);
        if (fv !== void 0) {
          valueSrcs.push(valueSrc);
          valueTypes.push(valueType);
        }
        return fv;
      });
      var hasUndefinedValues = fvalue.filter(function(v2) {
        return v2 === void 0;
      }).size > 0;
      if (hasUndefinedValues || fvalue.size < cardinality)
        return void 0;
      var formattedValue = cardinality == 1 ? fvalue.first() : fvalue;
      var fn = opDef.celFormatOp || buildFnToFormatOp$3(operator, opDef);
      if (!fn) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var formattedField = fieldSrc == "func" ? formatFunc$4(meta, config2, field) : formatField$3(meta, config2, field);
      if (formattedField == void 0)
        return void 0;
      var args = [formattedField, operator, formattedValue, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0], omit$1(opDef, opDefKeysToOmit), operatorOptions, fieldDefinition];
      var ret;
      ret = fn.call.apply(fn, [config2.ctx].concat(args));
      if (isRev) {
        ret = config2.settings.celFormatReverse(ret);
      }
      if (ret === void 0) {
        meta.errors.push("Operator ".concat(operator, " is not supported for value source ").concat(valueSrcs.join(", ")));
        return void 0;
      }
      return ret;
    };
    var formatValue$4 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef, asyncListValues) {
      if (currentValue === void 0)
        return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField$3(meta, config2, currentValue);
      } else if (valueSrc == "func") {
        ret = formatFunc$4(meta, config2, currentValue);
      } else {
        if (typeof fieldWidgetDef.celFormatValue === "function") {
          var fn = fieldWidgetDef.celFormatValue;
          var args = [
            currentValue,
            _objectSpread$t(_objectSpread$t({}, pick$1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            //useful options: valueFormat for date/time
            omit$1(fieldWidgetDef, widgetDefKeysToOmit)
          ];
          if (operator) {
            args.push(operator);
            args.push(operatorDef);
          }
          if (valueSrc == "field") {
            var valFieldDefinition = getFieldConfig$8(config2, currentValue) || {};
            args.push(valFieldDefinition);
          }
          ret = fn.call.apply(fn, [config2.ctx].concat(args));
        } else {
          if (Array.isArray(currentValue)) {
            ret = currentValue.map(function(v2) {
              return celEscape(v2);
            });
          } else {
            ret = celEscape(currentValue);
          }
        }
      }
      return ret;
    };
    var formatField$3 = function formatField2(meta, config2, field) {
      if (!field)
        return;
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var fieldParts = getFieldParts$4(field, config2);
      var fieldPartsLabels = getFieldPathLabels$2(field, config2);
      var fieldFullLabel = fieldPartsLabels ? fieldPartsLabels.join(fieldSeparator) : null;
      var formatFieldFn = config2.settings.formatField;
      var fieldName = formatFieldName(field, config2, meta, null, {
        useTableName: true
      });
      var formattedField = formatFieldFn(fieldName, fieldParts, fieldFullLabel, fieldDefinition, config2);
      return formattedField;
    };
    var formatFunc$4 = function formatFunc2(meta, config2, currentValue) {
      var funcKey = currentValue.get("func");
      var args = currentValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig) {
        meta.errors.push("Func ".concat(funcKey, " is not defined in config"));
        return void 0;
      }
      var funcParts = getFieldParts$4(funcKey, config2);
      var funcLastKey = funcParts[funcParts.length - 1];
      var funcName = funcConfig.celFunc || funcLastKey;
      var formattedArgs = {};
      var gaps = [];
      var missingArgKeys = [];
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var _defaultValue = argConfig.defaultValue, isOptional = argConfig.isOptional;
        var defaultValueSrc = _defaultValue !== null && _defaultValue !== void 0 && _defaultValue.func ? "func" : "value";
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var formattedArgVal = formatValue$4(meta, config2, argValue, argValueSrc, argConfig.type, fieldDef, argConfig, null, null, argAsyncListValues);
        if (argValue != void 0 && formattedArgVal === void 0) {
          if (argValueSrc != "func")
            meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return void 0;
        }
        var formattedDefaultVal = void 0;
        if (formattedArgVal === void 0 && !isOptional && _defaultValue != void 0) {
          formattedDefaultVal = formatValue$4(meta, config2, _defaultValue, defaultValueSrc, argConfig.type, fieldDef, argConfig, null, null, argAsyncListValues);
          if (formattedDefaultVal === void 0) {
            if (defaultValueSrc != "func")
              meta.errors.push("Can't format default value of arg ".concat(argKey, " for func ").concat(funcKey));
            return void 0;
          }
        }
        var finalFormattedVal = formattedArgVal !== null && formattedArgVal !== void 0 ? formattedArgVal : formattedDefaultVal;
        if (finalFormattedVal !== void 0) {
          if (gaps.length) {
            var _iterator = _createForOfIteratorHelper$9(argKey), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var missedArgKey = _step.value;
                formattedArgs[missedArgKey] = void 0;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            gaps = [];
          }
          formattedArgs[argKey] = finalFormattedVal;
        } else {
          if (!isOptional)
            missingArgKeys.push(argKey);
          gaps.push(argKey);
        }
      }
      if (missingArgKeys.length) {
        return void 0;
      }
      var ret;
      if (typeof funcConfig.celFormatFunc === "function") {
        var fn = funcConfig.celFormatFunc;
        var _args = [formattedArgs];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else {
        var argsStr = Object.entries(formattedArgs).map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2);
          _ref4[0];
          var v2 = _ref4[1];
          return v2;
        }).join(", ");
        ret = "".concat(funcName, "(").concat(argsStr, ")");
      }
      return ret;
    };
    function ownKeys$s(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$s(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$s(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$s(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function buildEsGeoPoint(geoPointString) {
      if (geoPointString == null) {
        return null;
      }
      var coordsNumberArray = geoPointString.split(",").map(Number);
      return {
        top_left: {
          lat: coordsNumberArray[0],
          lon: coordsNumberArray[1]
        },
        bottom_right: {
          lat: coordsNumberArray[2],
          lon: coordsNumberArray[3]
        }
      };
    }
    function buildEsRangeParameters(value2, operator) {
      if (value2.length > 1) {
        return {
          gte: "".concat(value2[0]),
          lte: "".concat(value2[1])
        };
      }
      var dateTime = value2[0];
      switch (operator) {
        case "on_date":
        case "not_on_date":
        case "equal":
        case "select_equals":
        case "not_equal":
          return {
            gte: "".concat(dateTime, "||/d"),
            lte: "".concat(dateTime, "||+1d")
          };
        case "less_or_equal":
          return {
            lte: "".concat(dateTime)
          };
        case "greater_or_equal":
          return {
            gte: "".concat(dateTime)
          };
        case "less":
          return {
            lt: "".concat(dateTime)
          };
        case "greater":
          return {
            gt: "".concat(dateTime)
          };
        default:
          return void 0;
      }
    }
    function buildEsWildcardParameters(value2) {
      return {
        value: "*" + value2 + "*"
      };
    }
    function determineOccurrence(combinator, not) {
      switch (combinator) {
        case "AND":
          return not ? "must_not" : "must";
        case "OR":
          return not ? "should_not" : "should";
        case "NOT":
          return not ? "must" : "must_not";
        default:
          return void 0;
      }
    }
    function buildRegexpParameters(value2) {
      return {
        value: value2
      };
    }
    function determineField(fieldName, config2) {
      return fieldName;
    }
    function buildParameters(queryType, value2, operator, fieldName, config2, syntax) {
      var textField = determineField(fieldName);
      switch (queryType) {
        case "filter":
          return {
            script: config2.operators[operator].elasticSearchScript(fieldName, value2)
          };
        case "exists":
          return {
            field: fieldName
          };
        case "match":
          return _defineProperty$2({}, textField, value2[0]);
        case "term":
          return syntax === ES_7_SYNTAX ? _defineProperty$2({}, fieldName, {
            value: value2[0]
          }) : _defineProperty$2({}, fieldName, value2[0]);
        case "geo_bounding_box":
          return _defineProperty$2({}, fieldName, buildEsGeoPoint(value2[0]));
        case "range":
          return _defineProperty$2({}, fieldName, buildEsRangeParameters(value2, operator));
        case "wildcard":
          return _defineProperty$2({}, fieldName, buildEsWildcardParameters(value2[0]));
        case "regexp":
          return _defineProperty$2({}, fieldName, buildRegexpParameters(value2[0]));
        default:
          return void 0;
      }
    }
    function buildEsRule(fieldName, value2, operator, config2, valueSrc, syntax) {
      if (!fieldName || !operator || value2 == void 0)
        return void 0;
      var op = operator;
      var opConfig = config2.operators[op];
      if (!opConfig)
        return void 0;
      var _opConfig = opConfig, elasticSearchQueryType = _opConfig.elasticSearchQueryType;
      var not = false;
      if (!elasticSearchQueryType && opConfig.reversedOp) {
        not = true;
        op = opConfig.reversedOp;
        opConfig = config2.operators[op];
        var _opConfig2 = opConfig;
        elasticSearchQueryType = _opConfig2.elasticSearchQueryType;
      }
      var widget = getWidgetForFieldOp$3(config2, fieldName, op, valueSrc);
      var widgetConfig = config2.widgets[widget];
      if (!widgetConfig)
        return void 0;
      var elasticSearchFormatValue = widgetConfig.elasticSearchFormatValue;
      var queryType;
      if (typeof elasticSearchQueryType === "function") {
        queryType = elasticSearchQueryType(widget);
      } else {
        queryType = elasticSearchQueryType;
      }
      if (!queryType) {
        return void 0;
      }
      var parameters;
      if (typeof elasticSearchFormatValue === "function") {
        parameters = elasticSearchFormatValue(queryType, value2, op, fieldName, config2);
      } else {
        parameters = buildParameters(queryType, value2, op, fieldName, config2, syntax);
      }
      if (not) {
        return {
          bool: {
            must_not: _defineProperty$2({}, queryType, _objectSpread$s({}, parameters))
          }
        };
      } else {
        return _defineProperty$2({}, queryType, _objectSpread$s({}, parameters));
      }
    }
    function buildEsGroup(children, conjunction, not, recursiveFxn, config2, syntax) {
      if (!children || !children.size)
        return void 0;
      var childrenArray = children.valueSeq().toArray();
      var occurrence = determineOccurrence(conjunction, not);
      var result = childrenArray.map(function(c2) {
        return recursiveFxn(c2, config2, syntax);
      }).filter(function(v2) {
        return v2 !== void 0;
      });
      if (!result.length)
        return void 0;
      var resultFlat = result.flat(Infinity);
      return {
        bool: _defineProperty$2({}, occurrence, resultFlat)
      };
    }
    var ES_7_SYNTAX = "ES_7_SYNTAX";
    var ES_6_SYNTAX = "ES_6_SYNTAX";
    function elasticSearchFormat(tree2, config2) {
      var syntax = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ES_6_SYNTAX;
      if (!tree2)
        return void 0;
      var type = tree2.get("type");
      var properties2 = tree2.get("properties") || /* @__PURE__ */ new Map();
      if (type === "rule" && properties2.get("field")) {
        var _properties$get, _properties$get2;
        var operator = properties2.get("operator");
        var field = properties2.get("field");
        var fieldSrc = properties2.get("fieldSrc");
        var value2 = properties2.get("value").toJS();
        (_properties$get = properties2.get("valueType")) === null || _properties$get === void 0 ? void 0 : _properties$get.get(0);
        var valueSrc = (_properties$get2 = properties2.get("valueSrc")) === null || _properties$get2 === void 0 ? void 0 : _properties$get2.get(0);
        if (valueSrc === "func" || fieldSrc == "func") {
          return;
        }
        if (value2 && Array.isArray(value2[0])) {
          return value2[0].map(function(val) {
            return buildEsRule(field, [val], operator, config2, valueSrc, syntax);
          });
        } else {
          return buildEsRule(field, value2, operator, config2, valueSrc, syntax);
        }
      }
      if (type === "group" || type === "rule_group") {
        var not = properties2.get("not");
        var conjunction = properties2.get("conjunction");
        if (!conjunction)
          conjunction = defaultConjunction(config2);
        var children = tree2.get("children1");
        return buildEsGroup(children, conjunction, not, elasticSearchFormat, config2, syntax);
      }
    }
    function ownKeys$r(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$r(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$r(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$r(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createForOfIteratorHelper$8(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$8(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$8(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$8(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$8(o, minLen);
    }
    function _arrayLikeToArray$8(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    var jsonLogicFormat$1 = function jsonLogicFormat2(item, config2) {
      var meta = {
        usedFields: [],
        errors: []
      };
      var extendedConfig = extendConfig$1(config2, void 0, false);
      var logic2 = formatItem$4(item, extendedConfig, meta, true);
      var errors = meta.errors, usedFields = meta.usedFields;
      extendedConfig.settings.fieldSeparator;
      var data = {};
      var _iterator = _createForOfIteratorHelper$8(usedFields), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var ff2 = _step.value;
          var parts = getFieldParts$4(ff2, config2);
          var def = getFieldConfig$8(extendedConfig, ff2) || {};
          var tmp = data;
          for (var i = 0; i < parts.length; i++) {
            var p2 = parts[i];
            var pdef = getFieldConfig$8(extendedConfig, parts.slice(0, i + 1)) || {};
            if (i != parts.length - 1) {
              if (pdef.type == "!group" && pdef.mode != "struct") {
                if (!tmp[p2])
                  tmp[p2] = [{}];
                tmp = tmp[p2][0];
              } else {
                if (!tmp[p2])
                  tmp[p2] = {};
                tmp = tmp[p2];
              }
            } else {
              if (!tmp[p2])
                tmp[p2] = null;
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return {
        errors,
        logic: logic2,
        data
      };
    };
    var formatItem$4 = function formatItem2(item, config2, meta, isRoot) {
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (!item)
        return void 0;
      var type = item.get("type");
      var properties2 = item.get("properties") || new immutableExports.Map();
      var isLocked = properties2.get("isLocked");
      var lockedOp = config2.settings.jsonLogic.lockedOp;
      var ret;
      if (type === "group" || type === "rule_group") {
        ret = formatGroup$4(item, config2, meta, isRoot, parentField);
      } else if (type === "rule") {
        ret = formatRule$4(item, config2, meta, parentField);
      }
      if (isLocked && ret && lockedOp) {
        ret = _defineProperty$2({}, lockedOp, ret);
      }
      return ret;
    };
    var formatGroup$4 = function formatGroup2(item, config2, meta, isRoot) {
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var type = item.get("type");
      var properties2 = item.get("properties") || new immutableExports.Map();
      var mode = properties2.get("mode");
      var children = item.get("children1") || new immutableExports.List();
      var field = properties2.get("field");
      var conjunction = properties2.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var conj = conjunctionDefinition.jsonLogicConj || conjunction.toLowerCase();
      var not = properties2.get("not");
      var isRuleGroup = type === "rule_group" && !isRoot;
      var groupField = isRuleGroup && mode != "struct" ? field : parentField;
      var groupOperator = properties2.get("operator");
      var groupOperatorDefinition = groupOperator && getOperatorConfig$4(config2, groupOperator, field) || null;
      var formattedValue = formatItemValue$1(config2, properties2, meta, groupOperator, parentField);
      var isGroup0 = isRuleGroup && (!groupOperator || groupOperatorDefinition.cardinality == 0);
      var list = children.map(function(currentChild) {
        return formatItem$4(currentChild, config2, meta, false, groupField);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (isRuleGroup && mode != "struct" && !isGroup0) {
        if (formattedValue == void 0)
          return void 0;
      } else {
        if (!list.size)
          return void 0;
      }
      var resultQuery = {};
      if (list.size == 1 && !isRoot)
        resultQuery = list.first();
      else
        resultQuery[conj] = list.toList().toJS();
      if (not) {
        resultQuery = {
          "!": resultQuery
        };
      }
      if (isRuleGroup && mode != "struct") {
        var formattedField = formatField$2(meta, config2, field, parentField);
        if (isGroup0) {
          var op = groupOperator || "some";
          resultQuery = _defineProperty$2({}, op, [formattedField, resultQuery]);
        } else {
          var filter = !list.size ? formattedField : {
            "filter": [formattedField, resultQuery]
          };
          var count = {
            "reduce": [filter, {
              "+": [1, {
                "var": "accumulator"
              }]
            }, 0]
          };
          resultQuery = formatLogic(config2, properties2, count, formattedValue, groupOperator);
        }
      }
      return resultQuery;
    };
    var formatRule$4 = function formatRule2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var properties2 = item.get("properties") || new immutableExports.Map();
      var field = properties2.get("field");
      var fieldSrc = properties2.get("fieldSrc");
      var operator = properties2.get("operator");
      var operatorOptions = properties2.get("operatorOptions");
      operatorOptions = operatorOptions ? operatorOptions.toJS() : null;
      if (operatorOptions && !Object.keys(operatorOptions).length)
        operatorOptions = null;
      if (field == null || operator == null)
        return void 0;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = operatorDefinition.reversedOp;
      var revOperatorDefinition = getOperatorConfig$4(config2, reversedOp, field) || {};
      var isRev = false;
      if (!operatorDefinition.jsonLogic && !revOperatorDefinition.jsonLogic) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      if (!operatorDefinition.jsonLogic && revOperatorDefinition.jsonLogic) {
        isRev = true;
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOperatorDefinition, operatorDefinition];
        operatorDefinition = _ref2[0];
        revOperatorDefinition = _ref2[1];
      }
      var formattedValue = formatItemValue$1(config2, properties2, meta, operator, parentField);
      if (formattedValue === void 0)
        return void 0;
      var formattedField = fieldSrc === "func" ? formatFunc$3(meta, config2, field, parentField) : formatField$2(meta, config2, field, parentField);
      if (formattedField === void 0)
        return void 0;
      return formatLogic(config2, properties2, formattedField, formattedValue, operator, operatorOptions, fieldDefinition, isRev);
    };
    var formatItemValue$1 = function formatItemValue2(config2, properties2, meta, operator, parentField) {
      var field = properties2.get("field");
      var iValueSrc = properties2.get("valueSrc");
      var iValueType = properties2.get("valueType");
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var iValue = properties2.get("value");
      var asyncListValues = properties2.get("asyncListValues");
      if (iValue == void 0)
        return void 0;
      var oldUsedFields = meta.usedFields;
      var fvalue = iValue.map(function(currentValue, ind) {
        var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
        var valueType = iValueType ? iValueType.get(ind) : null;
        var cValue = completeValue(currentValue, valueSrc, config2);
        var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDef = omit$1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
        var fv = formatValue$3(meta, config2, cValue, valueSrc, valueType, fieldWidgetDef, fieldDefinition, operator, operatorDefinition, parentField, asyncListValues);
        return fv;
      });
      var hasUndefinedValues = fvalue.filter(function(v2) {
        return v2 === void 0;
      }).size > 0;
      if (fvalue.size < cardinality || hasUndefinedValues) {
        meta.usedFields = oldUsedFields;
        return void 0;
      }
      return cardinality > 1 ? fvalue.toArray() : cardinality == 1 ? fvalue.first() : null;
    };
    var formatValue$3 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef) {
      var parentField = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : null;
      var asyncListValues = arguments.length > 10 ? arguments[10] : void 0;
      if (currentValue === void 0)
        return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField$2(meta, config2, currentValue, parentField);
      } else if (valueSrc == "func") {
        ret = formatFunc$3(meta, config2, currentValue, parentField);
      } else if (typeof fieldWidgetDef.jsonLogic === "function") {
        var fn = fieldWidgetDef.jsonLogic;
        var args = [
          currentValue,
          _objectSpread$r(_objectSpread$r({}, pick$1(fieldDef, ["fieldSettings", "listValues"])), {}, {
            asyncListValues
          }),
          //useful options: valueFormat for date/time
          omit$1(fieldWidgetDef, widgetDefKeysToOmit)
        ];
        if (operator) {
          args.push(operator);
          args.push(operatorDef);
        }
        ret = fn.call.apply(fn, [config2.ctx].concat(args));
      } else {
        ret = currentValue;
      }
      return ret;
    };
    var formatFunc$3 = function formatFunc2(meta, config2, currentValue) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var funcKey = currentValue.get("func");
      var args = currentValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      var funcParts = getFieldParts$4(funcKey, config2);
      var funcLastKey = funcParts[funcParts.length - 1];
      if (!funcConfig) {
        meta.errors.push("Func ".concat(funcKey, " is not defined in config"));
        return void 0;
      }
      if (!(funcConfig !== null && funcConfig !== void 0 && funcConfig.jsonLogic)) {
        meta.errors.push("Func ".concat(funcKey, " is not supported"));
        return void 0;
      }
      var formattedArgs = {};
      var gaps = [];
      var missingArgKeys = [];
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var _defaultValue = argConfig.defaultValue, isOptional = argConfig.isOptional;
        var defaultValueSrc = _defaultValue !== null && _defaultValue !== void 0 && _defaultValue.func ? "func" : "value";
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var operator = null;
        var widget = getWidgetForFieldOp$3(config2, argConfig, operator, argValueSrc);
        var fieldWidgetDef = omit$1(getFieldWidgetConfig$3(config2, argConfig, operator, widget, argValueSrc), ["factory"]);
        var formattedArgVal = formatValue$3(meta, config2, argValue, argValueSrc, argConfig.type, fieldWidgetDef, fieldDef, null, null, parentField);
        if (argValue != void 0 && formattedArgVal === void 0) {
          if (argValueSrc != "func")
            meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return void 0;
        }
        var formattedDefaultVal = void 0;
        if (formattedArgVal === void 0 && !isOptional && _defaultValue != void 0) {
          var defaultWidget = getWidgetForFieldOp$3(config2, argConfig, operator, defaultValueSrc);
          var defaultFieldWidgetDef = omit$1(getFieldWidgetConfig$3(config2, argConfig, operator, defaultWidget, defaultValueSrc), ["factory"]);
          formattedDefaultVal = formatValue$3(meta, config2, _defaultValue, defaultValueSrc, argConfig.type, defaultFieldWidgetDef, fieldDef, null, null, parentField);
          if (formattedDefaultVal === void 0) {
            if (defaultValueSrc != "func")
              meta.errors.push("Can't format default value of arg ".concat(argKey, " for func ").concat(funcKey));
            return void 0;
          }
        }
        var finalFormattedVal = formattedArgVal !== null && formattedArgVal !== void 0 ? formattedArgVal : formattedDefaultVal;
        if (finalFormattedVal !== void 0) {
          if (gaps.length) {
            var _iterator2 = _createForOfIteratorHelper$8(gaps), _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                var missedArgKey = _step2.value;
                formattedArgs[missedArgKey] = void 0;
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
            gaps = [];
          }
          formattedArgs[argKey] = finalFormattedVal;
        } else {
          if (!isOptional)
            missingArgKeys.push(argKey);
          gaps.push(argKey);
        }
      }
      if (missingArgKeys.length) {
        return void 0;
      }
      var formattedArgsArr = Object.values(formattedArgs);
      var ret;
      if (typeof funcConfig.jsonLogic === "function") {
        var fn = funcConfig.jsonLogic;
        var _args = [formattedArgs];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else {
        var funcName = funcConfig.jsonLogic || funcLastKey;
        var isMethod = !!funcConfig.jsonLogicIsMethod;
        if (isMethod) {
          var obj = formattedArgsArr[0], params = formattedArgsArr.slice(1);
          if (params.length) {
            ret = {
              "method": [obj, funcName, params]
            };
          } else {
            ret = {
              "method": [obj, funcName]
            };
          }
        } else {
          ret = _defineProperty$2({}, funcName, formattedArgsArr);
        }
      }
      return ret;
    };
    var formatField$2 = function formatField2(meta, config2, field) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _config$settings = config2.settings, fieldSeparator = _config$settings.fieldSeparator, jsonLogic = _config$settings.jsonLogic;
      var ret;
      if (field) {
        if (Array.isArray(field))
          field = field.join(fieldSeparator);
        var fieldDef = getFieldConfig$8(config2, field) || {};
        var fieldName = formatFieldName(field, config2, meta, parentField);
        var varName = fieldDef.jsonLogicVar || (fieldDef.type == "!group" ? jsonLogic.groupVarKey : "var");
        ret = _defineProperty$2({}, varName, fieldName);
        if (meta.usedFields.indexOf(field) == -1)
          meta.usedFields.push(field);
      }
      return ret;
    };
    var buildFnToFormatOp$2 = function buildFnToFormatOp2(operator, operatorDefinition, formattedField, formattedValue) {
      var formatteOp = operator;
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var isReverseArgs = defaultValue$1(operatorDefinition._jsonLogicIsRevArgs, false);
      if (typeof operatorDefinition.jsonLogic == "string")
        formatteOp = operatorDefinition.jsonLogic;
      var rangeOps = ["<", "<=", ">", ">="];
      var eqOps = ["==", "!="];
      var fn = function fn2(field, op, val, opDef, opOpts) {
        if (cardinality == 0 && eqOps.includes(formatteOp))
          return _defineProperty$2({}, formatteOp, [formattedField, null]);
        else if (cardinality == 0)
          return _defineProperty$2({}, formatteOp, formattedField);
        else if (cardinality == 1 && isReverseArgs)
          return _defineProperty$2({}, formatteOp, [formattedValue, formattedField]);
        else if (cardinality == 1)
          return _defineProperty$2({}, formatteOp, [formattedField, formattedValue]);
        else if (cardinality == 2 && rangeOps.includes(formatteOp))
          return _defineProperty$2({}, formatteOp, [formattedValue[0], formattedField, formattedValue[1]]);
        else
          return _defineProperty$2({}, formatteOp, [formattedField].concat(_toConsumableArray(formattedValue)));
      };
      return fn;
    };
    var formatLogic = function formatLogic2(config2, properties2, formattedField, formattedValue, operator) {
      var operatorOptions = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var fieldDefinition = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var isRev = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : false;
      var field = properties2.get("field");
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var fn = typeof operatorDefinition.jsonLogic == "function" ? operatorDefinition.jsonLogic : buildFnToFormatOp$2(operator, operatorDefinition, formattedField, formattedValue);
      var args = [formattedField, operator, formattedValue, omit$1(operatorDefinition, opDefKeysToOmit), operatorOptions, fieldDefinition];
      var ruleQuery = fn.call.apply(fn, [config2.ctx].concat(args));
      if (isRev) {
        ruleQuery = {
          "!": ruleQuery
        };
      }
      return ruleQuery;
    };
    function _createForOfIteratorHelper$7(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$7(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$7(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$7(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$7(o, minLen);
    }
    function _arrayLikeToArray$7(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$q(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$q(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$q(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$q(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var isObject$4 = function isObject2(v2) {
      return _typeof$1(v2) == "object" && v2 !== null && !Array.isArray(v2);
    };
    var mongodbFormat$1 = function mongodbFormat2(tree2, config2) {
      return _mongodbFormat(tree2, config2, false);
    };
    var _mongodbFormat = function _mongodbFormat2(tree2, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var extendedConfig = extendConfig$1(config2, void 0, false);
      var res = formatItem$3([], tree2, extendedConfig, meta);
      if (returnErrors) {
        return [res, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while exporting to MongoDb:", meta.errors);
        return res;
      }
    };
    var formatItem$3 = function formatItem2(parents, item, config2, meta) {
      var _not = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var _canWrapExpr = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      var _formatFieldName = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : void 0;
      var _value = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : void 0;
      if (!item)
        return void 0;
      var type = item.get("type");
      if (type === "group" || type === "rule_group") {
        return formatGroup$3(parents, item, config2, meta, _not, _canWrapExpr, _formatFieldName, _value);
      } else if (type === "rule") {
        return formatRule$3(parents, item, config2, meta, _not, _canWrapExpr, _formatFieldName, _value);
      }
      return void 0;
    };
    var formatGroup$3 = function formatGroup2(parents, item, config2, meta) {
      var _not = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var type = item.get("type");
      var properties2 = item.get("properties") || new immutableExports.Map();
      var children = item.get("children1") || new immutableExports.List();
      var _config$settings = config2.settings, canShortMongoQuery = _config$settings.canShortMongoQuery, fieldSeparator = _config$settings.fieldSeparator;
      var sep = fieldSeparator;
      var hasParentRuleGroup = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).length > 0;
      var parentPath = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).map(function(it) {
        return it.get("properties").get("field");
      }).slice(-1).pop();
      var realParentPath = hasParentRuleGroup && parentPath;
      var groupField = type === "rule_group" ? properties2.get("field") : null;
      var groupFieldName = formatFieldName(groupField, config2, meta, realParentPath);
      var groupFieldDef = getFieldConfig$8(config2, groupField) || {};
      var mode = groupFieldDef.mode;
      var canHaveEmptyChildren = groupField && mode == "array";
      var not = _not ? !properties2.get("not") : properties2.get("not");
      var list = children.map(function(currentChild) {
        return formatItem$3([].concat(_toConsumableArray(parents), [item]), currentChild, config2, meta, not, mode != "array", mode == "array" ? function(f2) {
          return "$$el".concat(sep).concat(f2);
        } : void 0);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!canHaveEmptyChildren && !list.size)
        return void 0;
      var conjunction = properties2.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var reversedConj = conjunctionDefinition.reversedConj;
      if (not && reversedConj) {
        conjunction = reversedConj;
        conjunctionDefinition = config2.conjunctions[conjunction];
      }
      var mongoConj = conjunctionDefinition.mongoConj;
      var resultQuery;
      if (list.size == 1) {
        resultQuery = list.first();
      } else if (list.size > 1) {
        var rules = list.toList().toJS();
        var canShort = canShortMongoQuery && mongoConj == "$and";
        if (canShort) {
          resultQuery = rules.reduce(function(acc, rule2) {
            if (!acc)
              return void 0;
            for (var k2 in rule2) {
              if (k2[0] == "$") {
                acc = void 0;
                break;
              }
              if (acc[k2] == void 0) {
                acc[k2] = rule2[k2];
              } else {
                var prev2 = acc[k2], next2 = rule2[k2];
                if (!isObject$4(prev2)) {
                  prev2 = {
                    "$eq": prev2
                  };
                }
                if (!isObject$4(next2)) {
                  next2 = {
                    "$eq": next2
                  };
                }
                var prevOp = Object.keys(prev2)[0], nextOp = Object.keys(next2)[0];
                if (prevOp == nextOp) {
                  acc = void 0;
                  break;
                }
                acc[k2] = Object.assign({}, prev2, next2);
              }
            }
            return acc;
          }, {});
        }
        if (!resultQuery)
          resultQuery = _defineProperty$2({}, mongoConj, rules);
      }
      if (groupField) {
        if (mode == "array") {
          var totalQuery = {
            "$size": {
              "$ifNull": ["$" + groupFieldName, []]
            }
          };
          var filterQuery = resultQuery ? {
            "$size": {
              "$ifNull": [{
                "$filter": {
                  input: "$" + groupFieldName,
                  as: "el",
                  cond: resultQuery
                }
              }, []]
            }
          } : totalQuery;
          resultQuery = formatItem$3(parents, item.set("type", "rule"), config2, meta, false, false, function(_f) {
            return filterQuery;
          }, totalQuery);
          resultQuery = {
            "$expr": resultQuery
          };
        } else {
          resultQuery = _defineProperty$2({}, groupFieldName, {
            "$elemMatch": resultQuery
          });
        }
      }
      return resultQuery;
    };
    var formatRule$3 = function formatRule2(parents, item, config2, meta) {
      var _not = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var _canWrapExpr = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      var _formatFieldName = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : void 0;
      var _value = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : void 0;
      var properties2 = item.get("properties") || new immutableExports.Map();
      var hasParentRuleGroup = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).length > 0;
      var parentPath = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).map(function(it) {
        return it.get("properties").get("field");
      }).slice(-1).pop();
      var realParentPath = hasParentRuleGroup && parentPath;
      var operator = properties2.get("operator");
      var operatorOptions = properties2.get("operatorOptions");
      var field = properties2.get("field");
      var fieldSrc = properties2.get("fieldSrc");
      var iValue = properties2.get("value");
      var iValueSrc = properties2.get("valueSrc");
      var iValueType = properties2.get("valueType");
      var asyncListValues = properties2.get("asyncListValues");
      if (field == null || operator == null || iValue === void 0)
        return void 0;
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = operatorDefinition.reversedOp;
      var revOperatorDefinition = getOperatorConfig$4(config2, reversedOp, field) || {};
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var not = _not;
      if (not && reversedOp) {
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOperatorDefinition, operatorDefinition];
        operatorDefinition = _ref2[0];
        revOperatorDefinition = _ref2[1];
        not = false;
      }
      var formattedField;
      var useExpr = false;
      if (fieldSrc == "func") {
        var _formatFunc = formatFunc$2(meta, config2, field, realParentPath);
        var _formatFunc2 = _slicedToArray(_formatFunc, 2);
        formattedField = _formatFunc2[0];
        useExpr = _formatFunc2[1];
      } else {
        formattedField = formatFieldName(field, config2, meta, realParentPath);
        if (_formatFieldName) {
          useExpr = true;
          formattedField = _formatFieldName(formattedField);
        }
      }
      if (formattedField == void 0)
        return void 0;
      var valueSrcs = [];
      var valueTypes = [];
      var fvalue = iValue.map(function(currentValue, ind) {
        var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
        var valueType = iValueType ? iValueType.get(ind) : null;
        var cValue = completeValue(currentValue, valueSrc, config2);
        var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDef = omit$1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
        var _formatValue = formatValue$2(meta, config2, cValue, valueSrc, valueType, fieldWidgetDef, fieldDef, realParentPath, operator, operatorDefinition, asyncListValues), _formatValue2 = _slicedToArray(_formatValue, 2), fv = _formatValue2[0], fvUseExpr = _formatValue2[1];
        if (fv !== void 0) {
          useExpr = useExpr || fvUseExpr;
          valueSrcs.push(valueSrc);
          valueTypes.push(valueType);
        }
        return fv;
      });
      var wrapExpr = useExpr && _canWrapExpr;
      var hasUndefinedValues = fvalue.filter(function(v2) {
        return v2 === void 0;
      }).size > 0;
      if (fvalue.size < cardinality || hasUndefinedValues)
        return void 0;
      var formattedValue = cardinality > 1 ? fvalue.toArray() : cardinality == 1 ? fvalue.first() : null;
      var fn = operatorDefinition.mongoFormatOp;
      if (!fn) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var args = [formattedField, operator, _value !== void 0 && formattedValue == null ? _value : formattedValue, useExpr, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0], omit$1(operatorDefinition, opDefKeysToOmit), operatorOptions, fieldDef];
      var ruleQuery = fn.call.apply(fn, [config2.ctx].concat(args));
      if (wrapExpr) {
        ruleQuery = {
          "$expr": ruleQuery
        };
      }
      if (not) {
        ruleQuery = {
          "$not": ruleQuery
        };
      }
      return ruleQuery;
    };
    var formatValue$2 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, parentPath, operator, operatorDef, asyncListValues) {
      if (currentValue === void 0)
        return [void 0, false];
      var ret;
      var useExpr = false;
      if (valueSrc == "field") {
        var _formatRightField = formatRightField(meta, config2, currentValue, parentPath);
        var _formatRightField2 = _slicedToArray(_formatRightField, 2);
        ret = _formatRightField2[0];
        useExpr = _formatRightField2[1];
      } else if (valueSrc == "func") {
        var _formatFunc3 = formatFunc$2(meta, config2, currentValue, parentPath);
        var _formatFunc4 = _slicedToArray(_formatFunc3, 2);
        ret = _formatFunc4[0];
        useExpr = _formatFunc4[1];
      } else {
        if (typeof fieldWidgetDef.mongoFormatValue === "function") {
          var fn = fieldWidgetDef.mongoFormatValue;
          var args = [
            currentValue,
            _objectSpread$q(_objectSpread$q({}, pick$1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            //useful options: valueFormat for date/time
            omit$1(fieldWidgetDef, widgetDefKeysToOmit)
          ];
          if (operator) {
            args.push(operator);
            args.push(operatorDef);
          }
          ret = fn.call.apply(fn, [config2.ctx].concat(args));
        } else {
          ret = currentValue;
        }
      }
      return [ret, useExpr];
    };
    var formatRightField = function formatRightField2(meta, config2, rightField, parentPath) {
      var fieldSeparator = config2.settings.fieldSeparator;
      var ret;
      var useExpr = true;
      if (rightField) {
        var rightFieldDefinition = getFieldConfig$8(config2, rightField) || {};
        var fieldParts = getFieldParts$4(rightField, config2);
        var fieldPartsLabels = getFieldPathLabels$2(rightField, config2);
        var fieldFullLabel = fieldPartsLabels ? fieldPartsLabels.join(fieldSeparator) : null;
        var formatFieldFn = config2.settings.formatField;
        var rightFieldName = formatFieldName(rightField, config2, meta, parentPath);
        var formattedField = formatFieldFn(rightFieldName, fieldParts, fieldFullLabel, rightFieldDefinition, config2, false);
        ret = "$" + formattedField;
      }
      return [ret, useExpr];
    };
    var formatFunc$2 = function formatFunc2(meta, config2, currentValue, parentPath) {
      var useExpr = true;
      var ret;
      var funcKey = currentValue.get("func");
      var args = currentValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig) {
        meta.errors.push("Func ".concat(funcKey, " is not defined in config"));
        return [void 0, false];
      }
      var funcParts = getFieldParts$4(funcKey, config2);
      var funcLastKey = funcParts[funcParts.length - 1];
      var funcName = funcConfig.mongoFunc || funcLastKey;
      var mongoArgsAsObject = funcConfig.mongoArgsAsObject;
      var formattedArgs = {};
      var argsCnt = 0;
      var lastArg = void 0;
      var gaps = [];
      var missingArgKeys = [];
      for (var argKey in funcConfig.args) {
        argsCnt++;
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var _defaultValue = argConfig.defaultValue, isOptional = argConfig.isOptional;
        var defaultValueSrc = _defaultValue !== null && _defaultValue !== void 0 && _defaultValue.func ? "func" : "value";
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var operator = null;
        var widget = getWidgetForFieldOp$3(config2, argConfig, operator, argValueSrc);
        var fieldWidgetDef = omit$1(getFieldWidgetConfig$3(config2, argConfig, operator, widget, argValueSrc), ["factory"]);
        var _formatValue3 = formatValue$2(meta, config2, argValue, argValueSrc, argConfig.type, fieldWidgetDef, fieldDef, parentPath, null, null, argAsyncListValues), _formatValue4 = _slicedToArray(_formatValue3, 2), formattedArgVal = _formatValue4[0];
        _formatValue4[1];
        if (argValue != void 0 && formattedArgVal === void 0) {
          if (argValueSrc != "func")
            meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return [void 0, false];
        }
        var formattedDefaultVal = void 0;
        if (formattedArgVal === void 0 && !isOptional && _defaultValue != void 0) {
          var defaultWidget = getWidgetForFieldOp$3(config2, argConfig, operator, defaultValueSrc);
          var defaultFieldWidgetDef = omit$1(getFieldWidgetConfig$3(config2, argConfig, operator, defaultWidget, defaultValueSrc), ["factory"]);
          var _formatValue5 = formatValue$2(meta, config2, _defaultValue, defaultValueSrc, argConfig.type, defaultFieldWidgetDef, fieldDef, parentPath, null, null, argAsyncListValues);
          var _formatValue6 = _slicedToArray(_formatValue5, 2);
          formattedDefaultVal = _formatValue6[0];
          _formatValue6[1];
          if (formattedDefaultVal === void 0) {
            if (defaultValueSrc != "func")
              meta.errors.push("Can't format default value of arg ".concat(argKey, " for func ").concat(funcKey));
            return [void 0, false];
          }
        }
        var finalFormattedVal = formattedArgVal !== null && formattedArgVal !== void 0 ? formattedArgVal : formattedDefaultVal;
        if (finalFormattedVal !== void 0) {
          if (gaps.length) {
            var _iterator = _createForOfIteratorHelper$7(gaps), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var missedArgKey = _step.value;
                formattedArgs[missedArgKey] = void 0;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            gaps = [];
          }
          formattedArgs[argKey] = finalFormattedVal;
          lastArg = finalFormattedVal;
        } else {
          if (!isOptional)
            missingArgKeys.push(argKey);
          gaps.push(argKey);
        }
      }
      if (missingArgKeys.length) {
        return [void 0, false];
      }
      if (typeof funcConfig.mongoFormatFunc === "function") {
        var fn = funcConfig.mongoFormatFunc;
        var _args = [formattedArgs];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else if (funcConfig.mongoFormatFunc === null) {
        meta.errors.push("Functon ".concat(funcName, " is not supported"));
        return [void 0, false];
      } else {
        if (mongoArgsAsObject)
          ret = _defineProperty$2({}, funcName, formattedArgs);
        else if (argsCnt == 1 && lastArg !== void 0)
          ret = _defineProperty$2({}, funcName, lastArg);
        else
          ret = _defineProperty$2({}, funcName, Object.values(formattedArgs));
      }
      return [ret, useExpr];
    };
    function ownKeys$p(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$p(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$p(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$p(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var queryBuilderFormat$1 = function queryBuilderFormat2(item, config2) {
      var meta = {
        usedFields: []
      };
      var res = formatItem$2(item, config2, meta);
      if (!res)
        return void 0;
      return _objectSpread$p(_objectSpread$p({}, res), meta);
    };
    var formatItem$2 = function formatItem2(item, config2, meta) {
      if (!item)
        return void 0;
      var type = item.get("type");
      var children = item.get("children1");
      if ((type === "group" || type === "rule_group") && children && children.size) {
        return formatGroup$2(item, config2, meta);
      } else if (type === "rule") {
        return formatRule$2(item, config2, meta);
      }
      return void 0;
    };
    var formatGroup$2 = function formatGroup2(item, config2, meta) {
      var properties2 = item.get("properties") || new immutableExports.Map();
      var children = item.get("children1");
      var id2 = item.get("id");
      var list = children.map(function(currentChild) {
        return formatItem$2(currentChild, config2, meta);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!list.size)
        return void 0;
      var conjunction = properties2.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var not = properties2.get("not");
      var resultQuery = {
        id: id2,
        rules: list.toList(),
        condition: conjunction.toUpperCase(),
        not
      };
      return resultQuery;
    };
    var formatRule$2 = function formatRule2(item, config2, meta) {
      var _valueType;
      var properties2 = item.get("properties") || new immutableExports.Map();
      var id2 = item.get("id");
      var operator = properties2.get("operator");
      var options = properties2.get("operatorOptions");
      var field = properties2.get("field");
      var value2 = properties2.get("value");
      var valueSrc = properties2.get("valueSrc");
      var valueType = properties2.get("valueType");
      var hasUndefinedValues = value2.filter(function(v2) {
        return v2 === void 0;
      }).size > 0;
      if (field == null || operator == null || hasUndefinedValues)
        return void 0;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var fieldType = fieldDefinition.type || "undefined";
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var typeConfig = config2.types[fieldDefinition.type] || {};
      var fieldName = formatFieldName(field, config2, meta);
      if (value2.size < cardinality)
        return void 0;
      if (meta.usedFields.indexOf(field) == -1)
        meta.usedFields.push(field);
      value2 = value2.toArray();
      valueSrc = valueSrc.toArray();
      valueType = ((_valueType = valueType) === null || _valueType === void 0 ? void 0 : _valueType.toArray()) || [];
      var values2 = [];
      for (var i = 0; i < value2.length; i++) {
        var val = {
          type: valueType[i],
          value: value2[i]
        };
        values2.push(val);
        if (valueSrc[i] == "field") {
          var secondField = value2[i];
          if (meta.usedFields.indexOf(secondField) == -1)
            meta.usedFields.push(secondField);
        }
      }
      var operatorOptions = options ? options.toJS() : null;
      if (operatorOptions && !Object.keys(operatorOptions).length)
        operatorOptions = null;
      var ruleQuery = {
        id: id2,
        fieldName,
        type: fieldType,
        input: typeConfig.mainWidget,
        operator
      };
      if (operatorOptions)
        ruleQuery.operatorOptions = operatorOptions;
      ruleQuery.values = values2;
      return ruleQuery;
    };
    function _createForOfIteratorHelper$6(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$6(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$6(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$6(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$6(o, minLen);
    }
    function _arrayLikeToArray$6(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$o(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$o(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$o(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$o(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var queryString$1 = function queryString2(item, config2) {
      var isForDisplay = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var meta = {
        errors: []
      };
      var extendedConfig = extendConfig$1(config2, void 0, false);
      var res = formatItem$1(item, extendedConfig, meta, isForDisplay, null);
      if (meta.errors.length)
        console.warn("Errors while exporting to string:", meta.errors);
      return res;
    };
    var formatItem$1 = function formatItem2(item, config2, meta) {
      var isForDisplay = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (!item)
        return void 0;
      var type = item.get("type");
      item.get("children1");
      if (type === "group" || type === "rule_group") {
        return formatGroup$1(item, config2, meta, isForDisplay, parentField);
      } else if (type === "rule") {
        return formatRule$1(item, config2, meta, isForDisplay, parentField);
      }
      return void 0;
    };
    var formatGroup$1 = function formatGroup2(item, config2, meta) {
      var isForDisplay = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var type = item.get("type");
      var properties2 = item.get("properties") || new immutableExports.Map();
      var mode = properties2.get("mode");
      var children = item.get("children1") || new immutableExports.List();
      var isRuleGroup = type === "rule_group";
      var groupField = isRuleGroup && mode == "array" ? properties2.get("field") : null;
      var canHaveEmptyChildren = isRuleGroup && mode == "array";
      var not = properties2.get("not");
      var list = children.map(function(currentChild) {
        return formatItem$1(currentChild, config2, meta, isForDisplay, groupField);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!canHaveEmptyChildren && !list.size)
        return void 0;
      var conjunction = properties2.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var conjStr = list.size ? conjunctionDefinition.formatConj(list, conjunction, not, isForDisplay) : null;
      var ret;
      if (groupField) {
        var aggrArgs = formatRule$1(item, config2, meta, isForDisplay, parentField, true);
        if (aggrArgs) {
          var _config$settings;
          var isRev = aggrArgs.pop();
          var args = [conjStr].concat(_toConsumableArray(aggrArgs));
          ret = (_config$settings = config2.settings).formatAggr.apply(_config$settings, _toConsumableArray(args));
          if (isRev) {
            ret = config2.settings.formatReverse(ret, null, null, null, null, isForDisplay);
          }
        }
      } else {
        ret = conjStr;
      }
      return ret;
    };
    var formatItemValue = function formatItemValue2(config2, properties2, meta, _operator, isForDisplay, parentField) {
      var field = properties2.get("field");
      var iValueSrc = properties2.get("valueSrc");
      var iValueType = properties2.get("valueType");
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operator = _operator || properties2.get("operator");
      var operatorDef = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = defaultValue$1(operatorDef.cardinality, 1);
      var iValue = properties2.get("value");
      var asyncListValues = properties2.get("asyncListValues");
      var valueSrcs = [];
      var valueTypes = [];
      var formattedValue;
      if (iValue != void 0) {
        var fvalue = iValue.map(function(currentValue, ind) {
          var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
          var valueType = iValueType ? iValueType.get(ind) : null;
          var cValue = completeValue(currentValue, valueSrc, config2);
          var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
          var fieldWidgetDef = omit$1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
          var fv = formatValue$1(config2, meta, cValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef, isForDisplay, parentField, asyncListValues);
          if (fv !== void 0) {
            valueSrcs.push(valueSrc);
            valueTypes.push(valueType);
          }
          return fv;
        });
        var hasUndefinedValues = fvalue.filter(function(v2) {
          return v2 === void 0;
        }).size > 0;
        if (!(hasUndefinedValues || fvalue.size < cardinality)) {
          formattedValue = cardinality == 1 ? fvalue.first() : fvalue;
        }
      }
      return [formattedValue, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0]];
    };
    var buildFnToFormatOp$1 = function buildFnToFormatOp2(operator, operatorDefinition) {
      var fop = operatorDefinition.labelForFormat || operator;
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var fn;
      if (cardinality == 0) {
        fn = function fn2(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return "".concat(field, " ").concat(fop);
        };
      } else if (cardinality == 1) {
        fn = function fn2(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return "".concat(field, " ").concat(fop, " ").concat(values2);
        };
      } else if (cardinality == 2) {
        fn = function fn2(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var valFrom = values2.first();
          var valTo = values2.get(1);
          return "".concat(field, " ").concat(fop, " ").concat(valFrom, " AND ").concat(valTo);
        };
      }
      return fn;
    };
    var formatRule$1 = function formatRule2(item, config2, meta) {
      var isForDisplay = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var returnArgs = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
      var properties2 = item.get("properties") || new immutableExports.Map();
      var field = properties2.get("field");
      var fieldSrc = properties2.get("fieldSrc");
      var operator = properties2.get("operator");
      var operatorOptions = properties2.get("operatorOptions");
      if (field == null || operator == null)
        return void 0;
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operatorDef = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = operatorDef.reversedOp;
      var revOperatorDef = getOperatorConfig$4(config2, reversedOp, field) || {};
      var isRev = false;
      var fn = operatorDef.formatOp;
      if (!fn && reversedOp) {
        fn = revOperatorDef.formatOp;
        if (fn) {
          isRev = true;
          var _ref = [reversedOp, operator];
          operator = _ref[0];
          reversedOp = _ref[1];
          var _ref2 = [revOperatorDef, operatorDef];
          operatorDef = _ref2[0];
          revOperatorDef = _ref2[1];
        }
      }
      if (!fn)
        fn = buildFnToFormatOp$1(operator, operatorDef);
      if (!fn)
        return void 0;
      var formattedField = fieldSrc === "func" ? formatFunc$1(config2, meta, field, isForDisplay, parentField) : formatField$1(config2, meta, field, isForDisplay, parentField);
      if (formattedField == void 0)
        return void 0;
      var _formatItemValue = formatItemValue(config2, properties2, meta, operator, isForDisplay, parentField), _formatItemValue2 = _slicedToArray(_formatItemValue, 3), formattedValue = _formatItemValue2[0], valueSrc = _formatItemValue2[1], valueType = _formatItemValue2[2];
      if (formattedValue === void 0)
        return void 0;
      var args = [formattedField, operator, formattedValue, valueSrc, valueType, omit$1(operatorDef, opDefKeysToOmit), operatorOptions, isForDisplay, fieldDef, isRev];
      if (returnArgs) {
        return args;
      } else {
        var _fn;
        var ret = (_fn = fn).call.apply(_fn, [config2.ctx].concat(args));
        if (isRev) {
          ret = config2.settings.formatReverse(ret, operator, reversedOp, operatorDef, revOperatorDef, isForDisplay);
        }
        return ret;
      }
    };
    var formatValue$1 = function formatValue2(config2, meta, value2, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, opDef, isForDisplay) {
      var parentField = arguments.length > 10 && arguments[10] !== void 0 ? arguments[10] : null;
      var asyncListValues = arguments.length > 11 ? arguments[11] : void 0;
      if (value2 === void 0)
        return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField$1(config2, meta, value2, isForDisplay, parentField);
      } else if (valueSrc == "func") {
        ret = formatFunc$1(config2, meta, value2, isForDisplay, parentField);
      } else {
        if (typeof fieldWidgetDef.formatValue === "function") {
          var fn = fieldWidgetDef.formatValue;
          var args = [
            value2,
            _objectSpread$o(_objectSpread$o({}, pick$1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            //useful options: valueFormat for date/time
            omit$1(fieldWidgetDef, widgetDefKeysToOmit),
            isForDisplay
          ];
          if (operator) {
            args.push(operator);
            args.push(opDef);
          }
          if (valueSrc == "field") {
            var valFieldDefinition = getFieldConfig$8(config2, value2) || {};
            args.push(valFieldDefinition);
          }
          ret = fn.call.apply(fn, [config2.ctx].concat(args));
        } else {
          ret = value2;
        }
      }
      return ret;
    };
    var formatField$1 = function formatField2(config2, meta, field, isForDisplay) {
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var cutParentField = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      var _config$settings2 = config2.settings;
      _config$settings2.fieldSeparator;
      var fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
      var ret = null;
      if (field) {
        var fieldDefinition = getFieldConfig$8(config2, field) || {};
        var fieldParts = getFieldParts$4(field, config2);
        var fieldPartsLabels = getFieldPathLabels$2(field, config2, cutParentField ? parentField : null);
        var fieldFullLabel = fieldPartsLabels ? fieldPartsLabels.join(fieldSeparatorDisplay) : null;
        var fieldLabel2 = fieldDefinition.label2 || fieldFullLabel;
        var formatFieldFn = config2.settings.formatField;
        var fieldName = formatFieldName(field, config2, meta, cutParentField ? parentField : null, {
          useTableName: true
        });
        ret = formatFieldFn(fieldName, fieldParts, fieldLabel2, fieldDefinition, config2, isForDisplay);
      }
      return ret;
    };
    var formatFunc$1 = function formatFunc2(config2, meta, funcValue, isForDisplay) {
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var funcKey = funcValue.get("func");
      var args = funcValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig) {
        meta.errors.push("Func ".concat(funcKey, " is not defined in config"));
        return void 0;
      }
      var funcParts = getFieldParts$4(funcKey, config2);
      var funcLastKey = funcParts[funcParts.length - 1];
      var funcName = isForDisplay && funcConfig.label || funcLastKey;
      var formattedArgs = {};
      var gaps = [];
      var missingArgKeys = [];
      var formattedArgsWithNames = {};
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var _defaultValue = argConfig.defaultValue, isOptional = argConfig.isOptional;
        var defaultValueSrc = _defaultValue !== null && _defaultValue !== void 0 && _defaultValue.func ? "func" : "value";
        var argName = isForDisplay && argConfig.label || argKey;
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var formattedArgVal = formatValue$1(config2, meta, argValue, argValueSrc, argConfig.type, fieldDef, argConfig, null, null, isForDisplay, parentField, argAsyncListValues);
        if (argValue != void 0 && formattedArgVal === void 0) {
          if (argValueSrc != "func")
            meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return void 0;
        }
        var formattedDefaultVal = void 0;
        if (formattedArgVal === void 0 && !isOptional && _defaultValue != void 0) {
          formattedDefaultVal = formatValue$1(config2, meta, _defaultValue, defaultValueSrc, argConfig.type, fieldDef, argConfig, null, null, isForDisplay, parentField, argAsyncListValues);
          if (formattedDefaultVal === void 0) {
            if (defaultValueSrc != "func")
              meta.errors.push("Can't format default value of arg ".concat(argKey, " for func ").concat(funcKey));
            return void 0;
          }
        }
        var finalFormattedVal = formattedArgVal !== null && formattedArgVal !== void 0 ? formattedArgVal : formattedDefaultVal;
        if (finalFormattedVal !== void 0) {
          if (gaps.length) {
            var _iterator = _createForOfIteratorHelper$6(argKey), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var _step$value = _slicedToArray(_step.value, 2), missedArgKey = _step$value[0], missedArgName = _step$value[1];
                formattedArgs[missedArgKey] = void 0;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            gaps = [];
          }
          formattedArgs[argKey] = finalFormattedVal;
          formattedArgsWithNames[argName] = finalFormattedVal;
        } else {
          if (!isOptional)
            missingArgKeys.push(argKey);
          gaps.push([argKey, argName]);
        }
      }
      if (missingArgKeys.length) {
        return void 0;
      }
      var ret = null;
      if (typeof funcConfig.formatFunc === "function") {
        var fn = funcConfig.formatFunc;
        var _args = [formattedArgs, isForDisplay];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else {
        var argsStr = Object.entries(isForDisplay ? formattedArgsWithNames : formattedArgs).map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), k2 = _ref4[0], v2 = _ref4[1];
          return isForDisplay ? "".concat(k2, ": ").concat(v2) : "".concat(v2);
        }).join(", ");
        ret = "".concat(funcName, "(").concat(argsStr, ")");
      }
      return ret;
    };
    function _createForOfIteratorHelper$5(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$5(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$5(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$5(o, minLen);
    }
    function _arrayLikeToArray$5(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$n(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$n(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$n(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$n(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var sqlFormat$1 = function sqlFormat2(tree2, config2) {
      return _sqlFormat(tree2, config2, false);
    };
    var _sqlFormat = function _sqlFormat2(tree2, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var extendedConfig = extendConfig$1(config2, void 0, false);
      var res = formatItem(tree2, extendedConfig, meta);
      if (returnErrors) {
        return [res, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while exporting to SQL:", meta.errors);
        return res;
      }
    };
    var formatItem = function formatItem2(item, config2, meta) {
      if (!item)
        return void 0;
      var type = item.get("type");
      item.get("children1");
      if (type === "group" || type === "rule_group") {
        return formatGroup(item, config2, meta);
      } else if (type === "rule") {
        return formatRule(item, config2, meta);
      }
      return void 0;
    };
    var formatGroup = function formatGroup2(item, config2, meta) {
      var type = item.get("type");
      var properties2 = item.get("properties") || new immutableExports.Map();
      var children = item.get("children1") || new immutableExports.List();
      var isRuleGroup = type === "rule_group";
      var groupField = isRuleGroup ? properties2.get("field") : null;
      var groupFieldDef = getFieldConfig$8(config2, groupField) || {};
      var mode = groupFieldDef.mode;
      if (mode == "array") {
        meta.errors.push("Aggregation is not supported for ".concat(groupField));
      }
      var not = properties2.get("not");
      var list = children.map(function(currentChild) {
        return formatItem(currentChild, config2, meta);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!list.size)
        return void 0;
      var conjunction = properties2.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      return conjunctionDefinition.sqlFormatConj(list, conjunction, not);
    };
    var buildFnToFormatOp = function buildFnToFormatOp2(operator, operatorDefinition) {
      var sqlOp = operatorDefinition.sqlOp || operator;
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var fn;
      if (cardinality == 0) {
        fn = function fn2(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " ").concat(sqlOp);
        };
      } else if (cardinality == 1) {
        fn = function fn2(field, op, value2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " ").concat(sqlOp, " ").concat(value2);
        };
      } else if (cardinality == 2) {
        fn = function fn2(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var valFrom = values2.first();
          var valTo = values2.get(1);
          return "".concat(field, " ").concat(sqlOp, " ").concat(valFrom, " AND ").concat(valTo);
        };
      }
      return fn;
    };
    var formatRule = function formatRule2(item, config2, meta) {
      var properties2 = item.get("properties") || new immutableExports.Map();
      var field = properties2.get("field");
      var fieldSrc = properties2.get("fieldSrc");
      var operator = properties2.get("operator");
      var operatorOptions = properties2.get("operatorOptions");
      var iValueSrc = properties2.get("valueSrc");
      var iValueType = properties2.get("valueType");
      var iValue = properties2.get("value");
      var asyncListValues = properties2.get("asyncListValues");
      if (field == null || operator == null)
        return void 0;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var opDef = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = opDef.reversedOp;
      var revOpDef = getOperatorConfig$4(config2, reversedOp, field) || {};
      var cardinality = defaultValue$1(opDef.cardinality, 1);
      var isRev = false;
      var canFormatOp = opDef.sqlOp || opDef.sqlFormatOp;
      var canFormatRevOp = revOpDef.sqlOp || revOpDef.sqlFormatOp;
      if (!canFormatOp && !canFormatRevOp) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      if (!canFormatOp && canFormatRevOp) {
        isRev = true;
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOpDef, opDef];
        opDef = _ref2[0];
        revOpDef = _ref2[1];
      }
      var valueSrcs = [];
      var valueTypes = [];
      var fvalue = iValue.map(function(currentValue, ind) {
        var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
        var valueType = iValueType ? iValueType.get(ind) : null;
        var cValue = completeValue(currentValue, valueSrc, config2);
        var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDefinition = omit$1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
        var fv = formatValue(meta, config2, cValue, valueSrc, valueType, fieldWidgetDefinition, fieldDefinition, operator, opDef, asyncListValues);
        if (fv !== void 0) {
          valueSrcs.push(valueSrc);
          valueTypes.push(valueType);
        }
        return fv;
      });
      var hasUndefinedValues = fvalue.filter(function(v2) {
        return v2 === void 0;
      }).size > 0;
      if (hasUndefinedValues || fvalue.size < cardinality)
        return void 0;
      var formattedValue = cardinality == 1 ? fvalue.first() : fvalue;
      var fn = opDef.sqlFormatOp || buildFnToFormatOp(operator, opDef);
      if (!fn) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var formattedField = fieldSrc == "func" ? formatFunc(meta, config2, field) : formatField(meta, config2, field);
      if (formattedField == void 0)
        return void 0;
      var args = [formattedField, operator, formattedValue, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0], omit$1(opDef, opDefKeysToOmit), operatorOptions, fieldDefinition];
      var ret;
      ret = fn.call.apply(fn, [config2.ctx].concat(args));
      if (isRev) {
        ret = config2.settings.sqlFormatReverse(ret);
      }
      if (ret === void 0) {
        meta.errors.push("Operator ".concat(operator, " is not supported for value source ").concat(valueSrcs.join(", ")));
        return void 0;
      }
      return ret;
    };
    var formatValue = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef, asyncListValues) {
      if (currentValue === void 0)
        return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField(meta, config2, currentValue);
      } else if (valueSrc == "func") {
        ret = formatFunc(meta, config2, currentValue);
      } else {
        if (typeof fieldWidgetDef.sqlFormatValue === "function") {
          var fn = fieldWidgetDef.sqlFormatValue;
          var args = [
            currentValue,
            _objectSpread$n(_objectSpread$n({}, pick$1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            //useful options: valueFormat for date/time
            omit$1(fieldWidgetDef, widgetDefKeysToOmit)
          ];
          if (operator) {
            args.push(operator);
            args.push(operatorDef);
          }
          if (valueSrc == "field") {
            var valFieldDefinition = getFieldConfig$8(config2, currentValue) || {};
            args.push(valFieldDefinition);
          }
          ret = fn.call.apply(fn, [config2.ctx].concat(args));
        } else {
          if (Array.isArray(currentValue)) {
            ret = currentValue.map(function(v2) {
              return SqlString.escape(v2);
            });
          } else {
            ret = SqlString.escape(currentValue);
          }
        }
      }
      return ret;
    };
    var formatField = function formatField2(meta, config2, field) {
      if (!field)
        return;
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var fieldParts = getFieldParts$4(field, config2);
      var fieldPartsLabels = getFieldPathLabels$2(field, config2);
      var fieldFullLabel = fieldPartsLabels ? fieldPartsLabels.join(fieldSeparator) : null;
      var formatFieldFn = config2.settings.formatField;
      var fieldName = formatFieldName(field, config2, meta, null, {
        useTableName: true
      });
      var formattedField = formatFieldFn(fieldName, fieldParts, fieldFullLabel, fieldDefinition, config2);
      return formattedField;
    };
    var formatFunc = function formatFunc2(meta, config2, currentValue) {
      var funcKey = currentValue.get("func");
      var args = currentValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig) {
        meta.errors.push("Func ".concat(funcKey, " is not defined in config"));
        return void 0;
      }
      var funcParts = getFieldParts$4(funcKey, config2);
      var funcLastKey = funcParts[funcParts.length - 1];
      var funcName = funcConfig.sqlFunc || funcLastKey;
      var formattedArgs = {};
      var gaps = [];
      var missingArgKeys = [];
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var _defaultValue = argConfig.defaultValue, isOptional = argConfig.isOptional;
        var defaultValueSrc = _defaultValue !== null && _defaultValue !== void 0 && _defaultValue.func ? "func" : "value";
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var formattedArgVal = formatValue(meta, config2, argValue, argValueSrc, argConfig.type, fieldDef, argConfig, null, null, argAsyncListValues);
        if (argValue != void 0 && formattedArgVal === void 0) {
          if (argValueSrc != "func")
            meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return void 0;
        }
        var formattedDefaultVal = void 0;
        if (formattedArgVal === void 0 && !isOptional && _defaultValue != void 0) {
          formattedDefaultVal = formatValue(meta, config2, _defaultValue, defaultValueSrc, argConfig.type, fieldDef, argConfig, null, null, argAsyncListValues);
          if (formattedDefaultVal === void 0) {
            if (defaultValueSrc != "func")
              meta.errors.push("Can't format default value of arg ".concat(argKey, " for func ").concat(funcKey));
            return void 0;
          }
        }
        var finalFormattedVal = formattedArgVal !== null && formattedArgVal !== void 0 ? formattedArgVal : formattedDefaultVal;
        if (finalFormattedVal !== void 0) {
          if (gaps.length) {
            var _iterator = _createForOfIteratorHelper$5(argKey), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var missedArgKey = _step.value;
                formattedArgs[missedArgKey] = void 0;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            gaps = [];
          }
          formattedArgs[argKey] = finalFormattedVal;
        } else {
          if (!isOptional)
            missingArgKeys.push(argKey);
          gaps.push(argKey);
        }
      }
      if (missingArgKeys.length) {
        return void 0;
      }
      var ret;
      if (typeof funcConfig.sqlFormatFunc === "function") {
        var fn = funcConfig.sqlFormatFunc;
        var _args = [formattedArgs];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else {
        var argsStr = Object.entries(formattedArgs).map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2);
          _ref4[0];
          var v2 = _ref4[1];
          return v2;
        }).join(", ");
        ret = "".concat(funcName, "(").concat(argsStr, ")");
      }
      return ret;
    };
    const Export = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      ES_6_SYNTAX,
      ES_7_SYNTAX,
      _celFormat,
      _mongodbFormat,
      _spelFormat,
      _sqlFormat,
      celFormat,
      compareToSign,
      elasticSearchFormat,
      jsonLogicFormat: jsonLogicFormat$1,
      mongodbFormat: mongodbFormat$1,
      queryBuilderFormat: queryBuilderFormat$1,
      queryString: queryString$1,
      spelFormat,
      sqlFormat: sqlFormat$1
    }, Symbol.toStringTag, { value: "Module" }));
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value2 = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value2);
      } else {
        Promise.resolve(value2).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self2, args);
          function _next(value2) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value2);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    var _excluded$H = ["title", "value", "disabled", "groupTitle", "grouplabel", "renderTitle", "children", "label", "isCustom", "isHidden"];
    function _createForOfIteratorHelper$4(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$4(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$4(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$4(o, minLen);
    }
    function _arrayLikeToArray$4(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$m(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$m(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$m(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$m(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var findLastIndex = function findLastIndex2(arr, fn) {
      if (arr.findLastIndex) {
        return arr.findLastIndex(fn);
      } else {
        var ind = _toConsumableArray(arr).reverse().findIndex(fn);
        return ind == -1 ? -1 : arr.length - 1 - ind;
      }
    };
    var simulateAsyncFetch$1 = function simulateAsyncFetch2(all) {
      var cPageSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var delay = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1e3;
      return /* @__PURE__ */ function() {
        var _ref = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime.mark(function _callee(search, offset2, meta) {
          var pageSize2, filtered, currentOffset, values2, newOffset, hasMore;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1)
              switch (_context.prev = _context.next) {
                case 0:
                  pageSize2 = (meta === null || meta === void 0 ? void 0 : meta.pageSize) != void 0 ? meta.pageSize : cPageSize;
                  filtered = listValuesToArray$1(all).filter(function(_ref2) {
                    var title = _ref2.title, value2 = _ref2.value;
                    return search == null ? true : title.toUpperCase().indexOf(search.toUpperCase()) != -1 || "".concat(value2).toUpperCase().indexOf(search.toUpperCase()) != -1;
                  });
                  pageSize2 ? Math.ceil(filtered.length / pageSize2) : 0;
                  currentOffset = offset2 || 0;
                  values2 = pageSize2 ? filtered.slice(currentOffset, currentOffset + pageSize2) : filtered;
                  newOffset = pageSize2 ? currentOffset + values2.length : null;
                  hasMore = pageSize2 ? newOffset < filtered.length : false;
                  if (!delay) {
                    _context.next = 11;
                    break;
                  }
                  _context.next = 11;
                  return sleep$1(delay);
                case 11:
                  return _context.abrupt("return", {
                    values: values2,
                    hasMore
                  });
                case 12:
                case "end":
                  return _context.stop();
              }
          }, _callee);
        }));
        return function(_x, _x2, _x3) {
          return _ref.apply(this, arguments);
        };
      }();
    };
    var mergeListValues$1 = function mergeListValues2(values2, newValues) {
      var toStart = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var hideNewValues = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      if (!newValues)
        return values2;
      var old = values2 || [];
      var newFiltered = newValues.filter(function(v2) {
        return old.find(function(av) {
          return "" + av.value == "" + v2.value;
        }) == void 0;
      }).map(function(v2) {
        return hideNewValues ? _objectSpread$m(_objectSpread$m({}, v2), {}, {
          isHidden: true
        }) : v2;
      });
      var merged = toStart ? [].concat(_toConsumableArray(newFiltered), _toConsumableArray(old)) : [].concat(_toConsumableArray(old), _toConsumableArray(newFiltered));
      return merged;
    };
    var optionToListValue$1 = function optionToListValue2(val, listValues2, allowCustomValues) {
      var _val$value;
      var v2 = val == null || val == "" ? void 0 : (_val$value = val === null || val === void 0 ? void 0 : val.value) !== null && _val$value !== void 0 ? _val$value : val;
      var item = getListValue$1(v2, listValues2);
      var customItem = allowCustomValues && !item ? makeCustomListValue$1(v2) : void 0;
      var listValue = item || customItem;
      var lvs = listValue ? [listValue] : void 0;
      return [v2, lvs];
    };
    var optionsToListValues$1 = function optionsToListValues2(vals, listValues2, allowCustomValues) {
      var newSelectedListValues = vals.map(function(val, _i) {
        var _val$value2;
        var v2 = val == null || val == "" ? void 0 : (_val$value2 = val === null || val === void 0 ? void 0 : val.value) !== null && _val$value2 !== void 0 ? _val$value2 : val;
        var item = getListValue$1(v2, listValues2);
        var customItem = allowCustomValues && !item ? makeCustomListValue$1(v2) : void 0;
        var listValue = item || customItem;
        return listValue;
      }).filter(function(o) {
        return o != void 0;
      });
      var newSelectedValues = newSelectedListValues.map(function(o) {
        var _o$value;
        return (_o$value = o === null || o === void 0 ? void 0 : o.value) !== null && _o$value !== void 0 ? _o$value : o;
      });
      if (!newSelectedValues.length)
        newSelectedValues = void 0;
      return [newSelectedValues, newSelectedListValues];
    };
    var listValueToOption$1 = function listValueToOption2(lv) {
      if (lv == null)
        return null;
      var title = lv.title, value2 = lv.value, disabled = lv.disabled, groupTitle = lv.groupTitle, grouplabel = lv.grouplabel, renderTitle = lv.renderTitle, children = lv.children, label = lv.label, isCustom = lv.isCustom, isHidden = lv.isHidden, rest = _objectWithoutProperties(lv, _excluded$H);
      var option = {
        value: value2,
        title: title || label || children
        // fix issue #930 for AntD
      };
      if (disabled)
        option.disabled = disabled;
      if (isCustom)
        option.isCustom = isCustom;
      if (isHidden)
        option.isHidden = isHidden;
      if (groupTitle || grouplabel)
        option.groupTitle = groupTitle || grouplabel;
      if (renderTitle)
        option.renderTitle = renderTitle;
      option = _objectSpread$m(_objectSpread$m({}, option), rest);
      return option;
    };
    var fixListValuesGroupOrder$1 = function fixListValuesGroupOrder2(listValues2) {
      var newValues = [];
      var groupTitles = [];
      var _iterator = _createForOfIteratorHelper$4(listValues2), _step;
      try {
        var _loop = function _loop2() {
          var lv = _step.value;
          var i = findLastIndex(newValues, function(lv1) {
            var _lv1$groupTitle, _lv$groupTitle;
            return ((_lv1$groupTitle = lv1.groupTitle) !== null && _lv1$groupTitle !== void 0 ? _lv1$groupTitle : "") == ((_lv$groupTitle = lv.groupTitle) !== null && _lv$groupTitle !== void 0 ? _lv$groupTitle : "");
          });
          if (lv.groupTitle != void 0 && !groupTitles.includes(lv.groupTitle)) {
            groupTitles.push(lv.groupTitle);
            if (groupTitles.length === 1) {
              newValues = newValues.map(function(nv) {
                return _objectSpread$m(_objectSpread$m({}, nv), {}, {
                  groupTitle: ""
                });
              });
            }
          }
          if (lv.groupTitle == void 0 && groupTitles.length) {
            lv = _objectSpread$m(_objectSpread$m({}, lv), {}, {
              groupTitle: ""
            });
          }
          if (i != -1) {
            newValues.splice(i + 1, 0, lv);
          } else {
            newValues.push(lv);
          }
        };
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return newValues;
    };
    const autocomplete = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      fixListValuesGroupOrder: fixListValuesGroupOrder$1,
      getListValue: getListValue$1,
      listValueToOption: listValueToOption$1,
      mergeListValues: mergeListValues$1,
      optionToListValue: optionToListValue$1,
      optionsToListValues: optionsToListValues$1,
      simulateAsyncFetch: simulateAsyncFetch$1
    }, Symbol.toStringTag, { value: "Module" }));
    const BasicUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      Autocomplete: autocomplete,
      ConfigUtils: configUtils,
      DefaultUtils: defaultUtils,
      ExportUtils: _export,
      FuncUtils: funcUtils,
      ListUtils: listValues,
      OtherUtils: stuff,
      RuleUtils: ruleUtils,
      TreeUtils: treeUtils,
      clone: clone$3,
      compressConfig,
      decompressConfig,
      getSwitchValues,
      moment: hooks,
      uuid: uuid$1,
      validateAndFixTree: validateAndFixTree$1,
      validateTree
    }, Symbol.toStringTag, { value: "Module" }));
    var NOW = {
      label: "Now",
      returnType: "datetime",
      jsonLogic: "now",
      jsonLogicCustomOps: {
        now: {}
      },
      //spelFunc: "new java.util.Date()",
      spelFunc: "T(java.time.LocalDateTime).now()",
      celFunc: "T(java.time.LocalDateTime).now()",
      sqlFormatFunc: function sqlFormatFunc() {
        return "NOW()";
      },
      mongoFormatFunc: function mongoFormatFunc() {
        return /* @__PURE__ */ new Date();
      },
      formatFunc: function formatFunc2() {
        return "NOW";
      }
    };
    var RELATIVE_DATETIME = {
      label: "Relative",
      returnType: "datetime",
      renderBrackets: ["", ""],
      renderSeps: ["", "", ""],
      spelFormatFunc: function spelFormatFunc(_ref) {
        var date = _ref.date, op = _ref.op, val = _ref.val, dim = _ref.dim;
        var dimPlural = dim.charAt(0).toUpperCase() + dim.slice(1) + "s";
        var method = op + dimPlural;
        return "".concat(date, ".").concat(method, "(").concat(val, ")");
      },
      spelImport: function spelImport(spel) {
        var _spel$methodName;
        var date, op, val, dim;
        var matchRes = (_spel$methodName = spel.methodName) === null || _spel$methodName === void 0 ? void 0 : _spel$methodName.match(/^(minus|plus)(\w+)s$/);
        if (matchRes) {
          dim = matchRes[2].toLowerCase();
          op = matchRes[1];
          if (["minus", "plus"].includes(op)) {
            if (["day", "week", "month", "year"].includes(dim)) {
              op = {
                type: "string",
                val: op
              };
              dim = {
                type: "string",
                val: dim
              };
              val = spel.args[0];
              date = spel.obj;
              return {
                date,
                op,
                val,
                dim
              };
            }
          }
        }
      },
      jsonLogic: function jsonLogic(_ref2) {
        var date = _ref2.date, op = _ref2.op, val = _ref2.val, dim = _ref2.dim;
        return {
          date_add: [date, val * (op == "minus" ? -1 : 1), dim]
        };
      },
      jsonLogicImport: function jsonLogicImport(v2) {
        var date = v2["date_add"][0];
        var val = Math.abs(v2["date_add"][1]);
        var op = v2["date_add"][1] >= 0 ? "plus" : "minus";
        var dim = v2["date_add"][2];
        return [date, op, val, dim];
      },
      jsonLogicCustomOps: {
        date_add: {}
      },
      // MySQL
      //todo: other SQL dialects?
      sqlFormatFunc: function sqlFormatFunc(_ref3) {
        var date = _ref3.date, op = _ref3.op, val = _ref3.val, dim = _ref3.dim;
        return "DATE_ADD(".concat(date, ", INTERVAL ").concat(parseInt(val) * (op == "minus" ? -1 : 1), " ").concat(dim.replace(/^'|'$/g, ""), ")");
      },
      mongoFormatFunc: null,
      //todo: support?
      formatFunc: function formatFunc2(_ref4) {
        var date = _ref4.date, op = _ref4.op, val = _ref4.val, dim = _ref4.dim;
        return !val ? date : "".concat(date, " ").concat(op == "minus" ? "-" : "+", " ").concat(val, " ").concat(dim);
      },
      args: {
        date: {
          label: "Date",
          type: "datetime",
          defaultValue: {
            func: "NOW",
            args: []
          },
          valueSources: ["func", "field", "value"],
          spelEscapeForFormat: true
        },
        op: {
          label: "Op",
          type: "select",
          defaultValue: "plus",
          valueSources: ["value"],
          mainWidgetProps: {
            customProps: {
              showSearch: false
            }
          },
          fieldSettings: {
            listValues: {
              plus: "+",
              minus: "-"
            }
          },
          spelEscapeForFormat: false
        },
        val: {
          label: "Value",
          type: "number",
          fieldSettings: {
            min: 0
          },
          defaultValue: 0,
          valueSources: ["value"],
          spelEscapeForFormat: false
        },
        dim: {
          label: "Dimension",
          type: "select",
          defaultValue: "day",
          valueSources: ["value"],
          mainWidgetProps: {
            customProps: {
              showSearch: false
            }
          },
          fieldSettings: {
            listValues: {
              day: "day",
              week: "week",
              month: "month",
              year: "year"
            }
          },
          spelEscapeForFormat: false
        }
      }
    };
    var LOWER = {
      label: "Lowercase",
      mongoFunc: "$toLower",
      jsonLogic: "toLowerCase",
      spelFunc: "${str}.toLowerCase()",
      //jsonLogicIsMethod: true, // Removed in JsonLogic 2.x due to Prototype Pollution
      jsonLogicCustomOps: {
        toLowerCase: {}
      },
      returnType: "text",
      args: {
        str: {
          label: "String",
          type: "text",
          valueSources: ["value", "field", "func"]
        }
      }
    };
    var UPPER = {
      label: "Uppercase",
      mongoFunc: "$toUpper",
      jsonLogic: "toUpperCase",
      spelFunc: "${str}.toUpperCase()",
      //jsonLogicIsMethod: true, // Removed in JsonLogic 2.x due to Prototype Pollution
      jsonLogicCustomOps: {
        toUpperCase: {}
      },
      returnType: "text",
      args: {
        str: {
          label: "String",
          type: "text",
          valueSources: ["value", "field", "func"]
        }
      }
    };
    var LINEAR_REGRESSION = {
      label: "Linear regression",
      returnType: "number",
      formatFunc: function formatFunc2(_ref5, _2) {
        var coef = _ref5.coef, bias = _ref5.bias, val = _ref5.val;
        return "(".concat(coef, " * ").concat(val, " + ").concat(bias, ")");
      },
      sqlFormatFunc: function sqlFormatFunc(_ref6) {
        var coef = _ref6.coef, bias = _ref6.bias, val = _ref6.val;
        return "(".concat(coef, " * ").concat(val, " + ").concat(bias, ")");
      },
      spelFormatFunc: function spelFormatFunc(_ref7) {
        var coef = _ref7.coef, bias = _ref7.bias, val = _ref7.val;
        return "(".concat(coef, " * ").concat(val, " + ").concat(bias, ")");
      },
      spelImport: function spelImport(spel) {
        var coef, val, bias, a;
        if (spel.type === "op-plus") {
          var _spel$children = _slicedToArray(spel.children, 2);
          a = _spel$children[0];
          bias = _spel$children[1];
          if (a.type === "op-multiply") {
            var _a$children = _slicedToArray(a.children, 2);
            coef = _a$children[0];
            val = _a$children[1];
            return {
              coef,
              val,
              bias
            };
          }
        }
      },
      celFormatFunc: function celFormatFunc(_ref8) {
        var coef = _ref8.coef, bias = _ref8.bias, val = _ref8.val;
        return "(".concat(coef, " * ").concat(val, " + ").concat(bias, ")");
      },
      mongoFormatFunc: function mongoFormatFunc(_ref9) {
        var coef = _ref9.coef, bias = _ref9.bias, val = _ref9.val;
        return {
          $sum: [{
            $multiply: [coef, val]
          }, bias]
        };
      },
      jsonLogic: function jsonLogic(_ref10) {
        var coef = _ref10.coef, bias = _ref10.bias, val = _ref10.val;
        return {
          "+": [{
            "*": [coef, val]
          }, bias]
        };
      },
      jsonLogicImport: function jsonLogicImport(v2) {
        var coef = v2["+"][0]["*"][0];
        var val = v2["+"][0]["*"][1];
        var bias = v2["+"][1];
        return [coef, val, bias];
      },
      renderBrackets: ["", ""],
      renderSeps: [" * ", " + "],
      args: {
        coef: {
          label: "Coef",
          type: "number",
          defaultValue: 1,
          valueSources: ["value"]
        },
        val: {
          label: "Value",
          type: "number",
          valueSources: ["value", "field"]
        },
        bias: {
          label: "Bias",
          type: "number",
          defaultValue: 0,
          valueSources: ["value"]
        }
      }
    };
    var mongoFormatOp1 = function mongoFormatOp12(mop, mc2, not, field, _op, value2, useExpr, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
      var $field = typeof field == "string" && !field.startsWith("$") ? "$" + field : field;
      var mv = mc2(value2, fieldDef);
      if (mv === void 0)
        return void 0;
      if (not) {
        if (!useExpr && (!mop || mop == "$eq"))
          return _defineProperty$2({}, field, {
            $ne: mv
          });
        return !useExpr ? _defineProperty$2({}, field, {
          $not: _defineProperty$2({}, mop, mv)
        }) : {
          $not: _defineProperty$2({}, mop, [$field, mv])
        };
      } else {
        if (!useExpr && (!mop || mop == "$eq"))
          return _defineProperty$2({}, field, mv);
        return !useExpr ? _defineProperty$2({}, field, _defineProperty$2({}, mop, mv)) : _defineProperty$2({}, mop, [$field, mv]);
      }
    };
    var mongoFormatOp2 = function mongoFormatOp22(mops, not, field, _op, values2, useExpr, valueSrcs, valueTypes, opDef, operatorOptions, fieldDef) {
      var $field = typeof field == "string" && !field.startsWith("$") ? "$" + field : field;
      if (not) {
        var _$not3;
        return !useExpr ? _defineProperty$2({}, field, {
          $not: (_$not3 = {}, _defineProperty$2(_$not3, mops[0], values2[0]), _defineProperty$2(_$not3, mops[1], values2[1]), _$not3)
        }) : {
          $not: {
            $and: [_defineProperty$2({}, mops[0], [$field, values2[0]]), _defineProperty$2({}, mops[1], [$field, values2[1]])]
          }
        };
      } else {
        var _field2;
        return !useExpr ? _defineProperty$2({}, field, (_field2 = {}, _defineProperty$2(_field2, mops[0], values2[0]), _defineProperty$2(_field2, mops[1], values2[1]), _field2)) : {
          $and: [_defineProperty$2({}, mops[0], [$field, values2[0]]), _defineProperty$2({}, mops[1], [$field, values2[1]])]
        };
      }
    };
    var ctx$2 = {
      utils: {
        SqlString,
        moment: hooks,
        mongoFormatOp1,
        mongoFormatOp2,
        mongoEmptyValue,
        escapeRegExp,
        sqlEmptyValue,
        stringifyForDisplay,
        getTitleInListValues: getTitleInListValues$1,
        spelEscape,
        celEscape,
        spelFixList
      }
    };
    function _createForOfIteratorHelper$3(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$3(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$3(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$3(o, minLen);
    }
    function _arrayLikeToArray$3(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$l(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$l(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$l(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$l(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var conjunctions$1 = {
      AND: {
        label: "And",
        mongoConj: "$and",
        jsonLogicConj: "and",
        sqlConj: "AND",
        spelConj: "and",
        celConj: "and",
        spelConjs: ["and", "&&"],
        reversedConj: "OR",
        formatConj: function formatConj(children, conj, not, isForDisplay) {
          return children.size > 1 ? (not ? "NOT " : "") + "(" + children.join(" " + (isForDisplay ? "AND" : "&&") + " ") + ")" : (not ? "NOT (" : "") + children.first() + (not ? ")" : "");
        },
        sqlFormatConj: function sqlFormatConj(children, conj, not) {
          return children.size > 1 ? (not ? "NOT " : "") + "(" + children.join(" AND ") + ")" : (not ? "NOT (" : "") + children.first() + (not ? ")" : "");
        },
        spelFormatConj: function spelFormatConj(children, conj, not, omitBrackets) {
          if (not)
            omitBrackets = false;
          return children.size > 1 ? (not ? "!" : "") + (omitBrackets ? "" : "(") + children.join(" && ") + (omitBrackets ? "" : ")") : (not ? "!(" : "") + children.first() + (not ? ")" : "");
        },
        celFormatConj: function celFormatConj(children, conj, not, omitBrackets) {
          return children.size > 1 ? (not ? "!" : "") + "(" + children.join(" && ") + ")" : (not ? "!(" : "") + children.first() + (not ? ")" : "");
        }
      },
      OR: {
        label: "Or",
        mongoConj: "$or",
        jsonLogicConj: "or",
        sqlConj: "OR",
        spelConj: "or",
        celConj: "or",
        spelConjs: ["or", "||"],
        reversedConj: "AND",
        formatConj: function formatConj(children, conj, not, isForDisplay) {
          return children.size > 1 ? (not ? "NOT " : "") + "(" + children.join(" " + (isForDisplay ? "OR" : "||") + " ") + ")" : (not ? "NOT (" : "") + children.first() + (not ? ")" : "");
        },
        sqlFormatConj: function sqlFormatConj(children, conj, not) {
          return children.size > 1 ? (not ? "NOT " : "") + "(" + children.join(" OR ") + ")" : (not ? "NOT (" : "") + children.first() + (not ? ")" : "");
        },
        spelFormatConj: function spelFormatConj(children, conj, not, omitBrackets) {
          if (not)
            omitBrackets = false;
          return children.size > 1 ? (not ? "!" : "") + (omitBrackets ? "" : "(") + children.join(" || ") + (omitBrackets ? "" : ")") : (not ? "!(" : "") + children.first() + (not ? ")" : "");
        },
        celFormatConj: function celFormatConj(children, conj, not, omitBrackets) {
          return children.size > 1 ? (not ? "!" : "") + "(" + children.join(" || ") + ")" : (not ? "!(" : "") + children.first() + (not ? ")" : "");
        }
      }
    };
    var operators$1 = {
      equal: {
        label: "==",
        labelForFormat: "==",
        sqlOp: "=",
        spelOp: "==",
        celOp: "==",
        spelOps: ["==", "eq"],
        reversedOp: "not_equal",
        formatOp: function formatOp(field, op, value2, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay, fieldDef) {
          var opStr = isForDisplay ? "=" : opDef.label;
          if (valueTypes == "boolean" && isForDisplay)
            return value2 == "No" ? "NOT ".concat(field) : "".concat(field);
          else
            return "".concat(field, " ").concat(opStr, " ").concat(value2);
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return (_this$utils = this.utils).mongoFormatOp1.apply(_this$utils, ["$eq", function(v2) {
            return v2;
          }, false].concat(args));
        },
        jsonLogic: "==",
        elasticSearchQueryType: "term"
      },
      not_equal: {
        isNotOp: true,
        label: "!=",
        labelForFormat: "!=",
        sqlOp: "<>",
        spelOp: "!=",
        celOp: "!=",
        spelOps: ["!=", "ne"],
        reversedOp: "equal",
        formatOp: function formatOp(field, op, value2, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay, fieldDef) {
          if (valueTypes == "boolean" && isForDisplay)
            return value2 == "No" ? "".concat(field) : "NOT ".concat(field);
          else
            return "".concat(field, " ").concat(opDef.label, " ").concat(value2);
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils2;
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return (_this$utils2 = this.utils).mongoFormatOp1.apply(_this$utils2, ["$ne", function(v2) {
            return v2;
          }, false].concat(args));
        },
        jsonLogic: "!="
      },
      less: {
        label: "<",
        labelForFormat: "<",
        sqlOp: "<",
        spelOp: "<",
        celOp: "<",
        spelOps: ["<", "lt"],
        reversedOp: "greater_or_equal",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils3;
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          return (_this$utils3 = this.utils).mongoFormatOp1.apply(_this$utils3, ["$lt", function(v2) {
            return v2;
          }, false].concat(args));
        },
        jsonLogic: "<",
        elasticSearchQueryType: "range"
      },
      less_or_equal: {
        label: "<=",
        labelForFormat: "<=",
        sqlOp: "<=",
        spelOp: "<=",
        celOp: "<=",
        spelOps: ["<=", "le"],
        reversedOp: "greater",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils4;
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          return (_this$utils4 = this.utils).mongoFormatOp1.apply(_this$utils4, ["$lte", function(v2) {
            return v2;
          }, false].concat(args));
        },
        jsonLogic: "<=",
        elasticSearchQueryType: "range"
      },
      greater: {
        label: ">",
        labelForFormat: ">",
        sqlOp: ">",
        spelOp: ">",
        celOp: ">",
        spelOps: [">", "gt"],
        reversedOp: "less_or_equal",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils5;
          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }
          return (_this$utils5 = this.utils).mongoFormatOp1.apply(_this$utils5, ["$gt", function(v2) {
            return v2;
          }, false].concat(args));
        },
        jsonLogic: ">",
        elasticSearchQueryType: "range"
      },
      greater_or_equal: {
        label: ">=",
        labelForFormat: ">=",
        sqlOp: ">=",
        spelOp: ">=",
        celOp: ">=",
        spelOps: [">=", "ge"],
        reversedOp: "less",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils6;
          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            args[_key6] = arguments[_key6];
          }
          return (_this$utils6 = this.utils).mongoFormatOp1.apply(_this$utils6, ["$gte", function(v2) {
            return v2;
          }, false].concat(args));
        },
        jsonLogic: ">=",
        elasticSearchQueryType: "range"
      },
      like: {
        label: "Contains",
        labelForFormat: "Contains",
        reversedOp: "not_like",
        sqlOp: "LIKE",
        spelOp: "${0}.contains(${1})",
        celOp: "${1} in ${0}",
        valueTypes: ["text"],
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils7, _this = this;
          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            args[_key7] = arguments[_key7];
          }
          return (_this$utils7 = this.utils).mongoFormatOp1.apply(_this$utils7, ["$regex", function(v2) {
            return typeof v2 == "string" ? _this.utils.escapeRegExp(v2) : void 0;
          }, false].concat(args));
        },
        //jsonLogic: (field, op, val) => ({ "in": [val, field] }),
        jsonLogic: "in",
        _jsonLogicIsRevArgs: true,
        valueSources: ["value"],
        elasticSearchQueryType: "regexp"
      },
      not_like: {
        isNotOp: true,
        label: "Not contains",
        reversedOp: "like",
        labelForFormat: "Not Contains",
        sqlOp: "NOT LIKE",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils8, _this2 = this;
          for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
            args[_key8] = arguments[_key8];
          }
          return (_this$utils8 = this.utils).mongoFormatOp1.apply(_this$utils8, ["$regex", function(v2) {
            return typeof v2 == "string" ? _this2.utils.escapeRegExp(v2) : void 0;
          }, true].concat(args));
        },
        valueSources: ["value"]
      },
      starts_with: {
        label: "Starts with",
        labelForFormat: "Starts with",
        sqlOp: "LIKE",
        spelOp: "${0}.startsWith(${1})",
        celOp: "${0}.startsWith(${1})",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils9, _this3 = this;
          for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
            args[_key9] = arguments[_key9];
          }
          return (_this$utils9 = this.utils).mongoFormatOp1.apply(_this$utils9, ["$regex", function(v2) {
            return typeof v2 == "string" ? "^" + _this3.utils.escapeRegExp(v2) : void 0;
          }, false].concat(args));
        },
        jsonLogic: void 0,
        // not supported
        valueSources: ["value"]
      },
      ends_with: {
        label: "Ends with",
        labelForFormat: "Ends with",
        sqlOp: "LIKE",
        spelOp: "${0}.endsWith(${1})",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils10, _this4 = this;
          for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
            args[_key10] = arguments[_key10];
          }
          return (_this$utils10 = this.utils).mongoFormatOp1.apply(_this$utils10, ["$regex", function(v2) {
            return typeof v2 == "string" ? _this4.utils.escapeRegExp(v2) + "$" : void 0;
          }, false].concat(args));
        },
        jsonLogic: void 0,
        // not supported
        valueSources: ["value"]
      },
      between: {
        label: "Between",
        labelForFormat: "BETWEEN",
        sqlOp: "BETWEEN",
        cardinality: 2,
        formatOp: function formatOp(field, op, values2, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay) {
          var valFrom = values2.first();
          var valTo = values2.get(1);
          if (isForDisplay)
            return "".concat(field, " BETWEEN ").concat(valFrom, " AND ").concat(valTo);
          else
            return "".concat(field, " >= ").concat(valFrom, " && ").concat(field, " <= ").concat(valTo);
        },
        spelFormatOp: function spelFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          var valFrom = values2[0];
          var valTo = values2[1];
          return "".concat(field, " >= ").concat(valFrom, " && ").concat(field, " <= ").concat(valTo);
        },
        celFormatOp: function celFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          var _values$_tail, _values$_tail2;
          var valFrom = values2 === null || values2 === void 0 || (_values$_tail = values2._tail) === null || _values$_tail === void 0 ? void 0 : _values$_tail.array[0];
          var valTo = values2 === null || values2 === void 0 || (_values$_tail2 = values2._tail) === null || _values$_tail2 === void 0 ? void 0 : _values$_tail2.array[1];
          return "(".concat(field, " >= ").concat(valFrom, " && ").concat(field, " <= ").concat(valTo, ")");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils11;
          for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
            args[_key11] = arguments[_key11];
          }
          return (_this$utils11 = this.utils).mongoFormatOp2.apply(_this$utils11, [["$gte", "$lte"], false].concat(args));
        },
        valueLabels: ["Value from", "Value to"],
        textSeparators: [null, "and"],
        reversedOp: "not_between",
        jsonLogic: "<=",
        validateValues: function validateValues(values2) {
          if (values2[0] != void 0 && values2[1] != void 0) {
            return values2[0] <= values2[1] ? null : "Invalid range";
          }
          return null;
        },
        elasticSearchQueryType: function elasticSearchQueryType(type) {
          return type === "time" ? "filter" : "range";
        }
      },
      not_between: {
        isNotOp: true,
        label: "Not between",
        labelForFormat: "NOT BETWEEN",
        sqlOp: "NOT BETWEEN",
        cardinality: 2,
        formatOp: function formatOp(field, op, values2, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay) {
          var valFrom = values2.first();
          var valTo = values2.get(1);
          if (isForDisplay)
            return "".concat(field, " NOT BETWEEN ").concat(valFrom, " AND ").concat(valTo);
          else
            return "(".concat(field, " < ").concat(valFrom, " || ").concat(field, " > ").concat(valTo, ")");
        },
        spelFormatOp: function spelFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          var valFrom = values2[0];
          var valTo = values2[1];
          return "(".concat(field, " < ").concat(valFrom, " || ").concat(field, " > ").concat(valTo, ")");
        },
        celFormatOp: function celFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          var _values$_tail3, _values$_tail4;
          var valFrom = values2 === null || values2 === void 0 || (_values$_tail3 = values2._tail) === null || _values$_tail3 === void 0 ? void 0 : _values$_tail3.array[0];
          var valTo = values2 === null || values2 === void 0 || (_values$_tail4 = values2._tail) === null || _values$_tail4 === void 0 ? void 0 : _values$_tail4.array[1];
          return "(".concat(field, " < ").concat(valFrom, " || ").concat(field, " > ").concat(valTo, ")");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils12;
          for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
            args[_key12] = arguments[_key12];
          }
          return (_this$utils12 = this.utils).mongoFormatOp2.apply(_this$utils12, [["$gte", "$lte"], true].concat(args));
        },
        valueLabels: ["Value from", "Value to"],
        textSeparators: [null, "and"],
        reversedOp: "between",
        validateValues: function validateValues(values2) {
          if (values2[0] != void 0 && values2[1] != void 0) {
            return values2[0] <= values2[1] ? null : "Invalid range";
          }
          return null;
        }
      },
      is_empty: {
        label: "Is empty",
        labelForFormat: "IS EMPTY",
        cardinality: 0,
        reversedOp: "is_not_empty",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS EMPTY") : "!".concat(field);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var empty = this.utils.sqlEmptyValue(fieldDef);
          return "COALESCE(".concat(field, ", ").concat(empty, ") = ").concat(empty);
        },
        spelFormatOp: function spelFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " <= ''");
        },
        celFormatOp: function celFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " <= ''");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils13, _this5 = this;
          for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
            args[_key13] = arguments[_key13];
          }
          return (_this$utils13 = this.utils).mongoFormatOp1.apply(_this$utils13, ["$in", function(v2, fieldDef) {
            return [_this5.utils.mongoEmptyValue(fieldDef), null];
          }, false].concat(args));
        },
        jsonLogic: "!"
      },
      is_not_empty: {
        isNotOp: true,
        label: "Is not empty",
        labelForFormat: "IS NOT EMPTY",
        cardinality: 0,
        reversedOp: "is_empty",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS NOT EMPTY") : "!!".concat(field);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var empty = this.utils.sqlEmptyValue(fieldDef);
          return "COALESCE(".concat(field, ", ").concat(empty, ") <> ").concat(empty);
        },
        spelFormatOp: function spelFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " > ''");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils14, _this6 = this;
          for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
            args[_key14] = arguments[_key14];
          }
          return (_this$utils14 = this.utils).mongoFormatOp1.apply(_this$utils14, ["$nin", function(v2, fieldDef) {
            return [_this6.utils.mongoEmptyValue(fieldDef), null];
          }, false].concat(args));
        },
        jsonLogic: "!!",
        elasticSearchQueryType: "exists"
      },
      is_null: {
        label: "Is null",
        labelForFormat: "IS NULL",
        sqlOp: "IS NULL",
        cardinality: 0,
        reversedOp: "is_not_null",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS NULL") : "!".concat(field);
        },
        spelFormatOp: function spelFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " == null");
        },
        celFormatOp: function celFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " == null");
        },
        // check if value is null OR not exists
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils15;
          for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
            args[_key15] = arguments[_key15];
          }
          return (_this$utils15 = this.utils).mongoFormatOp1.apply(_this$utils15, ["$eq", function(v2) {
            return null;
          }, false].concat(args));
        },
        jsonLogic: "=="
      },
      is_not_null: {
        label: "Is not null",
        labelForFormat: "IS NOT NULL",
        sqlOp: "IS NOT NULL",
        cardinality: 0,
        reversedOp: "is_null",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS NOT NULL") : "!!".concat(field);
        },
        spelFormatOp: function spelFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " != null");
        },
        // check if value exists and is not null
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils16;
          for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
            args[_key16] = arguments[_key16];
          }
          return (_this$utils16 = this.utils).mongoFormatOp1.apply(_this$utils16, ["$ne", function(v2) {
            return null;
          }, false].concat(args));
        },
        jsonLogic: "!=",
        elasticSearchQueryType: "exists"
      },
      select_equals: {
        label: "==",
        labelForFormat: "==",
        sqlOp: "=",
        // enum/set
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var opStr = isForDisplay ? "=" : "==";
          return "".concat(field, " ").concat(opStr, " ").concat(value2);
        },
        spelOp: "==",
        celOp: "==",
        spelOps: ["==", "eq"],
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils17;
          for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
            args[_key17] = arguments[_key17];
          }
          return (_this$utils17 = this.utils).mongoFormatOp1.apply(_this$utils17, ["$eq", function(v2) {
            return v2;
          }, false].concat(args));
        },
        reversedOp: "select_not_equals",
        jsonLogic: "==",
        elasticSearchQueryType: "term"
      },
      select_not_equals: {
        isNotOp: true,
        label: "!=",
        labelForFormat: "!=",
        sqlOp: "<>",
        // enum/set
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return "".concat(field, " != ").concat(value2);
        },
        spelOp: "!=",
        celOp: "!=",
        spelOps: ["!=", "ne"],
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils18;
          for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
            args[_key18] = arguments[_key18];
          }
          return (_this$utils18 = this.utils).mongoFormatOp1.apply(_this$utils18, ["$ne", function(v2) {
            return v2;
          }, false].concat(args));
        },
        reversedOp: "select_equals",
        jsonLogic: "!="
      },
      select_any_in: {
        label: "Any in",
        labelForFormat: "IN",
        sqlOp: "IN",
        formatOp: function formatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " IN (").concat(values2.join(", "), ")");
          else
            return "".concat(field, " IN (").concat(values2, ")");
        },
        celFormatOp: function celFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          return "".concat(values2, " in ").concat(field);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          if (valueSrc == "value") {
            return "".concat(field, " IN (").concat(values2.join(", "), ")");
          } else
            return void 0;
        },
        valueTypes: ["multiselect"],
        spelOp: "${1}.contains(${0})",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils19;
          for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
            args[_key19] = arguments[_key19];
          }
          return (_this$utils19 = this.utils).mongoFormatOp1.apply(_this$utils19, ["$in", function(v2) {
            return v2;
          }, false].concat(args));
        },
        reversedOp: "select_not_any_in",
        jsonLogic: "in",
        elasticSearchQueryType: "term"
      },
      select_not_any_in: {
        isNotOp: true,
        label: "Not in",
        labelForFormat: "NOT IN",
        sqlOp: "NOT IN",
        formatOp: function formatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " NOT IN (").concat(values2.join(", "), ")");
          else
            return "".concat(field, " NOT IN (").concat(values2, ")");
        },
        sqlFormatOp: function sqlFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          if (valueSrc == "value") {
            return "".concat(field, " NOT IN (").concat(values2.join(", "), ")");
          } else
            return void 0;
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils20;
          for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
            args[_key20] = arguments[_key20];
          }
          return (_this$utils20 = this.utils).mongoFormatOp1.apply(_this$utils20, ["$nin", function(v2) {
            return v2;
          }, false].concat(args));
        },
        reversedOp: "select_any_in"
      },
      // it's not "contains all", but "contains any" operator
      multiselect_contains: {
        label: "Contains",
        labelForFormat: "CONTAINS",
        formatOp: function formatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " CONTAINS [").concat(values2.join(", "), "]");
          else
            return "".concat(field, " CONTAINS ").concat(values2);
        },
        celFormatOp: function celFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return "".concat(values2, " in ").concat(field);
        },
        reversedOp: "multiselect_not_contains",
        jsonLogic2: "some-in",
        jsonLogic: function jsonLogic(field, op, vals) {
          return {
            some: [field, {
              "in": [{
                "var": ""
              }, vals]
            }]
          };
        },
        //spelOp: "${0}.containsAll(${1})",
        spelOp: "T(CollectionUtils).containsAny(${0}, ${1})",
        elasticSearchQueryType: "term",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils21;
          for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
            args[_key21] = arguments[_key21];
          }
          return (_this$utils21 = this.utils).mongoFormatOp1.apply(_this$utils21, ["$in", function(v2) {
            return v2;
          }, false].concat(args));
        }
      },
      multiselect_not_contains: {
        isNotOp: true,
        label: "Not contains",
        labelForFormat: "NOT CONTAINS",
        formatOp: function formatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " NOT CONTAINS [").concat(values2.join(", "), "]");
          else
            return "".concat(field, " NOT CONTAINS ").concat(values2);
        },
        reversedOp: "multiselect_contains"
      },
      multiselect_equals: {
        label: "Equals",
        labelForFormat: "==",
        sqlOp: "=",
        formatOp: function formatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var opStr = isForDisplay ? "=" : "==";
          if (valueSrc == "value")
            return "".concat(field, " ").concat(opStr, " [").concat(values2.join(", "), "]");
          else
            return "".concat(field, " ").concat(opStr, " ").concat(values2);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var _this7 = this;
          if (valueSrc == "value")
            return "".concat(field, " = '").concat(values2.map(function(v2) {
              return _this7.utils.SqlString.trim(v2);
            }).join(","), "'");
          else
            return void 0;
        },
        celOp: "==",
        spelOp: "${0}.equals(${1})",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils22;
          for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {
            args[_key22] = arguments[_key22];
          }
          return (_this$utils22 = this.utils).mongoFormatOp1.apply(_this$utils22, ["$eq", function(v2) {
            return v2;
          }, false].concat(args));
        },
        reversedOp: "multiselect_not_equals",
        jsonLogic2: "all-in",
        jsonLogic: function jsonLogic(field, op, vals) {
          return {
            // it's not "equals", but "includes" operator - just for example
            all: [field, {
              "in": [{
                "var": ""
              }, vals]
            }]
          };
        },
        elasticSearchQueryType: "term"
      },
      multiselect_not_equals: {
        isNotOp: true,
        label: "Not equals",
        labelForFormat: "!=",
        sqlOp: "<>",
        formatOp: function formatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " != [").concat(values2.join(", "), "]");
          else
            return "".concat(field, " != ").concat(values2);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var _this8 = this;
          if (valueSrc == "value")
            return "".concat(field, " != '").concat(values2.map(function(v2) {
              return _this8.utils.SqlString.trim(v2);
            }).join(","), "'");
          else
            return void 0;
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils23;
          for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {
            args[_key23] = arguments[_key23];
          }
          return (_this$utils23 = this.utils).mongoFormatOp1.apply(_this$utils23, ["$ne", function(v2) {
            return v2;
          }, false].concat(args));
        },
        reversedOp: "multiselect_equals"
      },
      proximity: {
        label: "Proximity search",
        cardinality: 2,
        valueLabels: [{
          label: "Word 1",
          placeholder: "Enter first word"
        }, {
          label: "Word 2",
          placeholder: "Enter second word"
        }],
        textSeparators: [
          //'Word 1',
          //'Word 2'
        ],
        formatOp: function formatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var val1 = values2.first();
          var val2 = values2.get(1);
          var prox = operatorOptions.get("proximity");
          return "".concat(field, " ").concat(val1, " NEAR/").concat(prox, " ").concat(val2);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var val1 = values2.first();
          var val2 = values2.get(1);
          var aVal1 = this.utils.SqlString.trim(val1);
          var aVal2 = this.utils.SqlString.trim(val2);
          var prox = operatorOptions.get("proximity");
          return "CONTAINS(".concat(field, ", 'NEAR((").concat(aVal1, ", ").concat(aVal2, "), ").concat(prox, ")')");
        },
        mongoFormatOp: void 0,
        // not supported
        jsonLogic: void 0,
        // not supported
        options: {
          optionLabel: "Near",
          // label on top of "near" selectbox (for config.settings.showLabels==true)
          optionTextBefore: "Near",
          // label before "near" selectbox (for config.settings.showLabels==false)
          optionPlaceholder: "Select words between",
          // placeholder for "near" selectbox
          minProximity: 2,
          maxProximity: 10,
          defaults: {
            proximity: 2
          }
        }
      },
      some: {
        label: "Some",
        labelForFormat: "SOME",
        cardinality: 0,
        jsonLogic: "some",
        spelFormatOp: function spelFormatOp(filteredSize) {
          return "".concat(filteredSize, " > 0");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils24;
          for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {
            args[_key24] = arguments[_key24];
          }
          return (_this$utils24 = this.utils).mongoFormatOp1.apply(_this$utils24, ["$gt", function(v2) {
            return 0;
          }, false].concat(args));
        }
      },
      all: {
        label: "All",
        labelForFormat: "ALL",
        cardinality: 0,
        jsonLogic: "all",
        spelFormatOp: function spelFormatOp(filteredSize, op, fullSize) {
          return "".concat(filteredSize, " == ").concat(fullSize);
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils25;
          for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {
            args[_key25] = arguments[_key25];
          }
          return (_this$utils25 = this.utils).mongoFormatOp1.apply(_this$utils25, ["$eq", function(v2) {
            return v2;
          }, false].concat(args));
        }
      },
      none: {
        label: "None",
        labelForFormat: "NONE",
        cardinality: 0,
        jsonLogic: "none",
        spelFormatOp: function spelFormatOp(filteredSize) {
          return "".concat(filteredSize, " == 0");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils26;
          for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {
            args[_key26] = arguments[_key26];
          }
          return (_this$utils26 = this.utils).mongoFormatOp1.apply(_this$utils26, ["$eq", function(v2) {
            return 0;
          }, false].concat(args));
        }
      }
    };
    var widgets$2 = {
      text: {
        type: "text",
        jsType: "string",
        valueSrc: "value",
        valueLabel: "String",
        valuePlaceholder: "Enter string",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.spelEscape(val);
        },
        celFormatValue: function celFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.celEscape(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          if (opDef.sqlOp == "LIKE" || opDef.sqlOp == "NOT LIKE") {
            return this.utils.SqlString.escapeLike(val, op != "starts_with", op != "ends_with");
          } else {
            return this.utils.SqlString.escape(val);
          }
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      textarea: {
        type: "text",
        jsType: "string",
        valueSrc: "value",
        valueLabel: "Text",
        valuePlaceholder: "Enter text",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          if (opDef.sqlOp == "LIKE" || opDef.sqlOp == "NOT LIKE") {
            return this.utils.SqlString.escapeLike(val, op != "starts_with", op != "ends_with");
          } else {
            return this.utils.SqlString.escape(val);
          }
        },
        spelFormatValue: function spelFormatValue(val) {
          return this.utils.spelEscape(val);
        },
        celFormatValue: function celFormatValue(val) {
          return this.utils.celEscape(val);
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        },
        fullWidth: true
      },
      number: {
        type: "number",
        jsType: "number",
        valueSrc: "value",
        valueLabel: "Number",
        valuePlaceholder: "Enter number",
        valueLabels: [{
          label: "Number from",
          placeholder: "Enter number from"
        }, {
          label: "Number to",
          placeholder: "Enter number to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef) {
          var isFloat = wgtDef.step && !Number.isInteger(wgtDef.step);
          return this.utils.spelEscape(val, isFloat);
        },
        celFormatValue: function celFormatValue(val, fieldDef, wgtDef) {
          var isFloat = wgtDef.step && !Number.isInteger(wgtDef.step);
          return this.utils.celEscape(val, isFloat);
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      slider: {
        type: "number",
        jsType: "number",
        valueSrc: "value",
        valueLabel: "Number",
        valuePlaceholder: "Enter number or move slider",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val) {
          return this.utils.spelEscape(val);
        },
        celFormatValue: function celFormatValue(val) {
          return this.utils.celEscape(val);
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      select: {
        type: "select",
        jsType: "string",
        valueSrc: "value",
        valueLabel: "Value",
        valuePlaceholder: "Select value",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var valLabel = this.utils.getTitleInListValues(fieldDef.fieldSettings.listValues || fieldDef.asyncListValues, val);
          return isForDisplay ? this.utils.stringifyForDisplay(valLabel) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val) {
          return this.utils.spelEscape(val);
        },
        celFormatValue: function celFormatValue(val) {
          return this.utils.celEscape(val);
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      multiselect: {
        type: "multiselect",
        jsType: "array",
        valueSrc: "value",
        valueLabel: "Values",
        valuePlaceholder: "Select values",
        formatValue: function formatValue2(vals, fieldDef, wgtDef, isForDisplay) {
          var _this9 = this;
          var valsLabels = vals.map(function(v2) {
            return _this9.utils.getTitleInListValues(fieldDef.fieldSettings.listValues || fieldDef.asyncListValues, v2);
          });
          return isForDisplay ? valsLabels.map(this.utils.stringifyForDisplay) : vals.map(JSON.stringify);
        },
        sqlFormatValue: function sqlFormatValue(vals, fieldDef, wgtDef, op, opDef) {
          var _this10 = this;
          return vals.map(function(v2) {
            return _this10.utils.SqlString.escape(v2);
          });
        },
        spelFormatValue: function spelFormatValue(vals, fieldDef, wgtDef, op, opDef) {
          var isCallable = opDef.spelOp && opDef.spelOp.startsWith("${1}");
          var res = this.utils.spelEscape(vals);
          if (isCallable) {
            res = this.utils.spelFixList(res);
          }
          return res;
        },
        celFormatValue: function celFormatValue(vals, fieldDef, wgtDef, op, opDef) {
          opDef.spelOp && opDef.spelOp.startsWith("${1}");
          var res = this.utils.celEscape(vals);
          return res;
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      date: {
        type: "date",
        jsType: "string",
        valueSrc: "value",
        dateFormat: "DD.MM.YYYY",
        valueFormat: "YYYY-MM-DD",
        valueLabel: "Date",
        valuePlaceholder: "Enter date",
        valueLabels: [{
          label: "Date from",
          placeholder: "Enter date from"
        }, {
          label: "Date to",
          placeholder: "Enter date to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return isForDisplay ? dateVal.format(wgtDef.dateFormat) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return this.utils.SqlString.escape(dateVal.format("YYYY-MM-DD"));
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          var v2 = dateVal.format("YYYY-MM-DD");
          var fmt = "yyyy-MM-dd";
          return "T(java.time.LocalDate).parse('".concat(v2, "', T(java.time.format.DateTimeFormatter).ofPattern('").concat(fmt, "'))");
        },
        spelImportFuncs: [
          //"new java.text.SimpleDateFormat(${fmt}).parse(${v})",
          {
            obj: {
              cls: ["java", "time", "LocalDate"]
            },
            methodName: "parse",
            args: [{
              "var": "v"
            }, {
              obj: {
                cls: ["java", "time", "format", "DateTimeFormatter"]
              },
              methodName: "ofPattern",
              args: [{
                "var": "fmt"
              }]
            }]
          }
        ],
        spelImportValue: function spelImportValue(val, wgtDef, args) {
          var _args$fmt, _args$fmt$includes, _args$fmt2, _args$fmt2$toLowerCas;
          if (!wgtDef)
            return [void 0, "No widget def to get value format"];
          if (args !== null && args !== void 0 && (_args$fmt = args.fmt) !== null && _args$fmt !== void 0 && (_args$fmt = _args$fmt.value) !== null && _args$fmt !== void 0 && (_args$fmt$includes = _args$fmt.includes) !== null && _args$fmt$includes !== void 0 && _args$fmt$includes.call(_args$fmt, " ") || (_args$fmt2 = args.fmt) !== null && _args$fmt2 !== void 0 && (_args$fmt2 = _args$fmt2.value) !== null && _args$fmt2 !== void 0 && (_args$fmt2$toLowerCas = _args$fmt2.toLowerCase) !== null && _args$fmt2$toLowerCas !== void 0 && _args$fmt2$toLowerCas.call(_args$fmt2).includes("hh:mm"))
            return [void 0, "Invalid date format ".concat(JSON.stringify(args.fmt))];
          var dateVal = this.utils.moment(val.value, this.utils.moment.ISO_8601);
          if (dateVal.isValid()) {
            return [dateVal.format(wgtDef === null || wgtDef === void 0 ? void 0 : wgtDef.valueFormat), []];
          } else {
            return [void 0, "Invalid date"];
          }
        },
        celFormatValue: function celFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          var v2 = dateVal.format("YYYY-MM-DD");
          var fmt = "yyyy-MM-dd";
          return "T(java.time.LocalDate).parse('".concat(v2, "', T(java.time.format.DateTimeFormatter).ofPattern('").concat(fmt, "'))");
        },
        celImportFuncs: [
          //"new java.text.SimpleDateFormat(${fmt}).parse(${v})",
          {
            obj: {
              cls: ["java", "time", "LocalDate"]
            },
            methodName: "parse",
            args: [{
              "var": "v"
            }, {
              obj: {
                cls: ["java", "time", "format", "DateTimeFormatter"]
              },
              methodName: "ofPattern",
              args: [{
                "var": "fmt"
              }]
            }]
          }
        ],
        celImportValue: function celImportValue(val, wgtDef, args) {
          var _args$fmt3, _args$fmt3$includes, _args$fmt4, _args$fmt4$toLowerCas;
          if (!wgtDef)
            return [void 0, "No widget def to get value format"];
          if (args !== null && args !== void 0 && (_args$fmt3 = args.fmt) !== null && _args$fmt3 !== void 0 && (_args$fmt3 = _args$fmt3.value) !== null && _args$fmt3 !== void 0 && (_args$fmt3$includes = _args$fmt3.includes) !== null && _args$fmt3$includes !== void 0 && _args$fmt3$includes.call(_args$fmt3, " ") || (_args$fmt4 = args.fmt) !== null && _args$fmt4 !== void 0 && (_args$fmt4 = _args$fmt4.value) !== null && _args$fmt4 !== void 0 && (_args$fmt4$toLowerCas = _args$fmt4.toLowerCase) !== null && _args$fmt4$toLowerCas !== void 0 && _args$fmt4$toLowerCas.call(_args$fmt4).includes("hh:mm"))
            return [void 0, "Invalid date format ".concat(JSON.stringify(args.fmt))];
          var dateVal = this.utils.moment(val.value, this.utils.moment.ISO_8601);
          if (dateVal.isValid()) {
            return [dateVal.format(wgtDef === null || wgtDef === void 0 ? void 0 : wgtDef.valueFormat), []];
          } else {
            return [void 0, "Invalid date"];
          }
        },
        jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {
          return this.utils.moment(val, wgtDef.valueFormat).toDate();
        },
        toJS: function toJS(val, fieldSettings) {
          var dateVal = this.utils.moment(val, fieldSettings.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        }
      },
      time: {
        type: "time",
        jsType: "string",
        valueSrc: "value",
        timeFormat: "HH:mm",
        valueFormat: "HH:mm:ss",
        use12Hours: false,
        valueLabel: "Time",
        valuePlaceholder: "Enter time",
        valueLabels: [{
          label: "Time from",
          placeholder: "Enter time from"
        }, {
          label: "Time to",
          placeholder: "Enter time to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return isForDisplay ? dateVal.format(wgtDef.timeFormat) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return this.utils.SqlString.escape(dateVal.format("HH:mm:ss"));
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          var v2 = dateVal.format("HH:mm:ss");
          return "T(java.time.LocalTime).parse('".concat(v2, "')");
        },
        spelImportFuncs: [
          "T(java.time.LocalTime).parse(${v})"
          //"new java.text.SimpleDateFormat(${fmt}).parse(${v})"
        ],
        spelImportValue: function spelImportValue(val, wgtDef, args) {
          var _args$fmt5, _args$fmt5$toLowerCas, _args$fmt6;
          if (!wgtDef)
            return [void 0, "No widget def to get value format"];
          if (args !== null && args !== void 0 && args.fmt && (!((_args$fmt5 = args.fmt) !== null && _args$fmt5 !== void 0 && (_args$fmt5 = _args$fmt5.value) !== null && _args$fmt5 !== void 0 && (_args$fmt5$toLowerCas = _args$fmt5.toLowerCase) !== null && _args$fmt5$toLowerCas !== void 0 && _args$fmt5$toLowerCas.call(_args$fmt5).includes("hh:mm")) || (_args$fmt6 = args.fmt) !== null && _args$fmt6 !== void 0 && (_args$fmt6 = _args$fmt6.value) !== null && _args$fmt6 !== void 0 && _args$fmt6.includes(" ")))
            return [void 0, "Invalid time format ".concat(JSON.stringify(args.fmt))];
          var dateVal = this.utils.moment(val.value, "HH:mm:ss");
          if (dateVal.isValid()) {
            return [dateVal.format(wgtDef === null || wgtDef === void 0 ? void 0 : wgtDef.valueFormat), []];
          } else {
            return [void 0, "Invalid date"];
          }
        },
        celFormatValue: function celFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          var v2 = dateVal.format("HH:mm:ss");
          return "T(java.time.LocalTime).parse('".concat(v2, "')");
        },
        celImportFuncs: [
          "T(java.time.LocalTime).parse(${v})"
          //"new java.text.SimpleDateFormat(${fmt}).parse(${v})"
        ],
        celImportValue: function celImportValue(val, wgtDef, args) {
          var _args$fmt7, _args$fmt7$toLowerCas, _args$fmt8;
          if (!wgtDef)
            return [void 0, "No widget def to get value format"];
          if (args !== null && args !== void 0 && args.fmt && (!((_args$fmt7 = args.fmt) !== null && _args$fmt7 !== void 0 && (_args$fmt7 = _args$fmt7.value) !== null && _args$fmt7 !== void 0 && (_args$fmt7$toLowerCas = _args$fmt7.toLowerCase) !== null && _args$fmt7$toLowerCas !== void 0 && _args$fmt7$toLowerCas.call(_args$fmt7).includes("hh:mm")) || (_args$fmt8 = args.fmt) !== null && _args$fmt8 !== void 0 && (_args$fmt8 = _args$fmt8.value) !== null && _args$fmt8 !== void 0 && _args$fmt8.includes(" ")))
            return [void 0, "Invalid time format ".concat(JSON.stringify(args.fmt))];
          var dateVal = this.utils.moment(val.value, "HH:mm:ss");
          if (dateVal.isValid()) {
            return [dateVal.format(wgtDef === null || wgtDef === void 0 ? void 0 : wgtDef.valueFormat), []];
          } else {
            return [void 0, "Invalid date"];
          }
        },
        jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return dateVal.get("hour") * 60 * 60 + dateVal.get("minute") * 60 + dateVal.get("second");
        },
        toJS: function toJS(val, fieldSettings) {
          var dateVal = this.utils.moment(val, fieldSettings.valueFormat);
          return dateVal.isValid() ? dateVal.get("hour") * 60 * 60 + dateVal.get("minute") * 60 + dateVal.get("second") : void 0;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return dateVal.get("hour") * 60 * 60 + dateVal.get("minute") * 60 + dateVal.get("second");
        },
        elasticSearchFormatValue: function elasticSearchFormatValue(queryType, value2, operator, fieldName) {
          return {
            script: {
              script: {
                source: "doc[".concat(fieldName, "][0].getHour() >== params.min && doc[").concat(fieldName, "][0].getHour() <== params.max"),
                params: {
                  min: value2[0],
                  max: value2[1]
                }
              }
            }
          };
        }
      },
      datetime: {
        type: "datetime",
        jsType: "string",
        valueSrc: "value",
        timeFormat: "HH:mm",
        dateFormat: "DD.MM.YYYY",
        valueFormat: "YYYY-MM-DD HH:mm:ss",
        use12Hours: false,
        valueLabel: "Datetime",
        valuePlaceholder: "Enter datetime",
        valueLabels: [{
          label: "Datetime from",
          placeholder: "Enter datetime from"
        }, {
          label: "Datetime to",
          placeholder: "Enter datetime to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return isForDisplay ? dateVal.format(wgtDef.dateFormat + " " + wgtDef.timeFormat) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return this.utils.SqlString.escape(dateVal.toDate());
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          var v2 = dateVal.format("YYYY-MM-DD HH:mm:ss");
          var fmt = "yyyy-MM-dd HH:mm:ss";
          return "T(java.time.LocalDateTime).parse('".concat(v2, "', T(java.time.format.DateTimeFormatter).ofPattern('").concat(fmt, "'))");
        },
        spelImportFuncs: [
          //"new java.text.SimpleDateFormat(${fmt}).parse(${v})",
          {
            obj: {
              cls: ["java", "time", "LocalDateTime"]
            },
            methodName: "parse",
            args: [{
              "var": "v"
            }, {
              obj: {
                cls: ["java", "time", "format", "DateTimeFormatter"]
              },
              methodName: "ofPattern",
              args: [{
                "var": "fmt"
              }]
            }]
          }
        ],
        spelImportValue: function spelImportValue(val, wgtDef, args) {
          var _args$fmt9, _args$fmt9$includes;
          if (!wgtDef)
            return [void 0, "No widget def to get value format"];
          if (!(args !== null && args !== void 0 && (_args$fmt9 = args.fmt) !== null && _args$fmt9 !== void 0 && (_args$fmt9 = _args$fmt9.value) !== null && _args$fmt9 !== void 0 && (_args$fmt9$includes = _args$fmt9.includes) !== null && _args$fmt9$includes !== void 0 && _args$fmt9$includes.call(_args$fmt9, " ")))
            return [void 0, "Invalid datetime format ".concat(JSON.stringify(args.fmt))];
          var dateVal = this.utils.moment(val.value, this.utils.moment.ISO_8601);
          if (dateVal.isValid()) {
            return [dateVal.format(wgtDef === null || wgtDef === void 0 ? void 0 : wgtDef.valueFormat), []];
          } else {
            return [void 0, "Invalid date"];
          }
        },
        celFormatValue: function celFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          var v2 = dateVal.format("YYYY-MM-DD HH:mm:ss");
          var fmt = "yyyy-MM-dd HH:mm:ss";
          return "T(java.time.LocalDateTime).parse('".concat(v2, "', T(java.time.format.DateTimeFormatter).ofPattern('").concat(fmt, "'))");
        },
        celImportFuncs: [
          //"new java.text.SimpleDateFormat(${fmt}).parse(${v})",
          {
            obj: {
              cls: ["java", "time", "LocalDateTime"]
            },
            methodName: "parse",
            args: [{
              "var": "v"
            }, {
              obj: {
                cls: ["java", "time", "format", "DateTimeFormatter"]
              },
              methodName: "ofPattern",
              args: [{
                "var": "fmt"
              }]
            }]
          }
        ],
        celImportValue: function celImportValue(val, wgtDef, args) {
          var _args$fmt10, _args$fmt10$includes;
          if (!wgtDef)
            return [void 0, "No widget def to get value format"];
          if (!(args !== null && args !== void 0 && (_args$fmt10 = args.fmt) !== null && _args$fmt10 !== void 0 && (_args$fmt10 = _args$fmt10.value) !== null && _args$fmt10 !== void 0 && (_args$fmt10$includes = _args$fmt10.includes) !== null && _args$fmt10$includes !== void 0 && _args$fmt10$includes.call(_args$fmt10, " ")))
            return [void 0, "Invalid datetime format ".concat(JSON.stringify(args.fmt))];
          var dateVal = this.utils.moment(val.value, this.utils.moment.ISO_8601);
          if (dateVal.isValid()) {
            return [dateVal.format(wgtDef === null || wgtDef === void 0 ? void 0 : wgtDef.valueFormat), []];
          } else {
            return [void 0, "Invalid date"];
          }
        },
        jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {
          return this.utils.moment(val, wgtDef.valueFormat).toDate();
        },
        toJS: function toJS(val, fieldSettings) {
          var dateVal = this.utils.moment(val, fieldSettings.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        }
      },
      "boolean": {
        type: "boolean",
        jsType: "boolean",
        valueSrc: "value",
        labelYes: "Yes",
        labelNo: "No",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? val ? "Yes" : "No" : JSON.stringify(!!val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.spelEscape(val);
        },
        celFormatValue: function celFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.celEscape(val);
        },
        defaultValue: false,
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      field: {
        valueSrc: "field",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay, op, opDef, rightFieldDef) {
          return isForDisplay ? rightFieldDef.label || val : val;
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef, rightFieldDef) {
          return val;
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return val;
        },
        celFormatValue: function celFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return val;
        },
        valueLabel: "Field to compare",
        valuePlaceholder: "Select field to compare"
      },
      func: {
        valueSrc: "func",
        valueLabel: "Function",
        valuePlaceholder: "Select function"
      },
      case_value: {
        valueSrc: "value",
        type: "case_value",
        spelFormatValue: function spelFormatValue(val) {
          return this.utils.spelEscape(val === "" ? null : val);
        },
        spelImportValue: function spelImportValue(val) {
          return [val.value, []];
        },
        celFormatValue: function celFormatValue(val) {
          return this.utils.celEscape(val === "" ? null : val);
        },
        celImportValue: function celImportValue(val) {
          return [val.value, []];
        }
      }
    };
    var types$3 = {
      text: {
        defaultOperator: "equal",
        mainWidget: "text",
        widgets: {
          text: {
            operators: ["equal", "not_equal", "like", "not_like", "starts_with", "ends_with", "proximity", "is_empty", "is_not_empty", "is_null", "is_not_null"],
            widgetProps: {},
            opProps: {}
          },
          textarea: {
            operators: ["equal", "not_equal", "like", "not_like", "starts_with", "ends_with", "is_empty", "is_not_empty", "is_null", "is_not_null"],
            widgetProps: {},
            opProps: {}
          },
          field: {
            operators: [
              //unary ops (like `is_empty`) will be excluded anyway, see getWidgetsForFieldOp()
              "equal",
              "not_equal",
              "proximity"
              //can exclude if you want
            ]
          }
        }
      },
      number: {
        defaultOperator: "equal",
        mainWidget: "number",
        widgets: {
          number: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          },
          slider: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      date: {
        defaultOperator: "equal",
        widgets: {
          date: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      time: {
        defaultOperator: "equal",
        widgets: {
          time: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      datetime: {
        defaultOperator: "equal",
        widgets: {
          datetime: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      select: {
        mainWidget: "select",
        defaultOperator: "select_equals",
        widgets: {
          select: {
            operators: [
              "select_equals",
              "select_not_equals",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          },
          multiselect: {
            operators: [
              "select_any_in",
              "select_not_any_in",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      multiselect: {
        defaultOperator: "multiselect_equals",
        widgets: {
          multiselect: {
            operators: [
              "multiselect_contains",
              "multiselect_not_contains",
              "multiselect_equals",
              "multiselect_not_equals",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      "boolean": {
        defaultOperator: "equal",
        widgets: {
          "boolean": {
            operators: ["equal", "not_equal", "is_null", "is_not_null"],
            widgetProps: {
              //you can enable this if you don't use fields as value sources
              // hideOperator: true,
              // operatorInlineLabel: "is",
            }
          },
          field: {
            operators: ["equal", "not_equal"]
          }
        }
      },
      "!group": {
        defaultOperator: "some",
        mainWidget: "number",
        widgets: {
          number: {
            widgetProps: {
              min: 0
            },
            operators: [
              // w/o operand
              "some",
              "all",
              "none",
              // w/ operand - count
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between"
            ],
            opProps: {
              equal: {
                label: "Count =="
              },
              not_equal: {
                label: "Count !="
              },
              less: {
                label: "Count <"
              },
              less_or_equal: {
                label: "Count <="
              },
              greater: {
                label: "Count >"
              },
              greater_or_equal: {
                label: "Count >="
              },
              between: {
                label: "Count between"
              },
              not_between: {
                label: "Count not between"
              }
            }
          }
        }
      },
      case_value: {
        mainWidget: "case_value",
        widgets: {
          case_value: {}
        }
      }
    };
    var settings$2 = _objectSpread$l(_objectSpread$l({}, settings$3), {}, {
      convertableWidgets: {
        number: ["slider", "rangeslider"],
        slider: ["number", "rangeslider"],
        rangeslider: ["number", "slider"],
        text: ["textarea"],
        textarea: ["text"]
      },
      formatCelField: function formatCelField(field, parentField, parts, partsExt, fieldDefinition, config2) {
        var fieldName = partsExt.map(function(_ref, ind) {
          var key = _ref.key;
          _ref.parent;
          var sep = _ref.fieldSeparator;
          return "".concat(ind ? sep : "").concat(key);
        }).join("");
        if (fieldDefinition.fieldName) {
          fieldName = field;
        }
        return fieldName;
      },
      formatSpelField: function formatSpelField(field, parentField, parts, partsExt, fieldDefinition, config2) {
        var _this11 = this;
        var fieldName = partsExt.map(function(_ref2, ind) {
          var key = _ref2.key, parent2 = _ref2.parent, sep = _ref2.fieldSeparator;
          if (ind == 0) {
            if (parent2 == "[map]")
              return "#this[".concat(_this11.utils.spelEscape(key), "]");
            else if (parent2 == "[class]")
              return key;
            else
              return key;
          } else {
            if (parent2 == "map" || parent2 == "[map]")
              return "[".concat(_this11.utils.spelEscape(key), "]");
            else if (parent2 == "class" || parent2 == "[class]")
              return "".concat(sep).concat(key);
            else
              return "".concat(sep).concat(key);
          }
        }).join("");
        if (fieldDefinition.fieldName) {
          fieldName = field;
        }
        if (fieldDefinition.isSpelVariable) {
          fieldName = "#" + fieldName;
        }
        return fieldName;
      },
      sqlFormatReverse: function sqlFormatReverse(q2) {
        if (q2 == void 0)
          return void 0;
        return "NOT(" + q2 + ")";
      },
      spelFormatReverse: function spelFormatReverse(q2) {
        if (q2 == void 0)
          return void 0;
        return "!(" + q2 + ")";
      },
      celFormatReverse: function celFormatReverse(q2) {
        if (q2 == void 0)
          return void 0;
        return "!(" + q2 + ")";
      },
      formatReverse: function formatReverse(q2, operator, reversedOp, operatorDefinition, revOperatorDefinition, isForDisplay) {
        if (q2 == void 0)
          return void 0;
        if (isForDisplay)
          return "NOT (" + q2 + ")";
        else
          return "!(" + q2 + ")";
      },
      formatAggr: function formatAggr(whereStr, aggrField, operator, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay, aggrFieldDef) {
        var labelForFormat = opDef.labelForFormat, cardinality = opDef.cardinality;
        if (cardinality == 0) {
          var cond = whereStr ? " HAVE ".concat(whereStr) : "";
          return "".concat(labelForFormat, " OF ").concat(aggrField).concat(cond);
        } else if (cardinality == void 0 || cardinality == 1) {
          var _cond = whereStr ? " WHERE ".concat(whereStr) : "";
          return "COUNT OF ".concat(aggrField).concat(_cond, " ").concat(labelForFormat, " ").concat(value2);
        } else if (cardinality == 2) {
          var _cond2 = whereStr ? " WHERE ".concat(whereStr) : "";
          var valFrom = value2.first();
          var valTo = value2.get(1);
          return "COUNT OF ".concat(aggrField).concat(_cond2, " ").concat(labelForFormat, " ").concat(valFrom, " AND ").concat(valTo);
        }
      },
      jsonLogic: {
        groupVarKey: "var",
        altVarKey: "var",
        lockedOp: "locked"
      },
      canCompareFieldWithField: function canCompareFieldWithField(leftField, leftFieldConfig, rightField, rightFieldConfig) {
        return true;
      },
      // enable compare fields
      valueSourcesInfo: {
        value: {
          label: "Value"
        },
        field: {
          label: "Field",
          widget: "field"
        },
        func: {
          label: "Function",
          widget: "func"
        }
      }
    });
    var _addMixins = function _addMixins2(config2, mixins) {
      var doAdd = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var mixinFuncs = {
        rangeslider: mixinWidgetRangeslider,
        treeselect: mixinWidgetTreeselect,
        treemultiselect: mixinWidgetTreemultiselect,
        rangeable__date: mixinRangeableWidget("date", "date")
      };
      var _iterator = _createForOfIteratorHelper$3(mixins), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var mixName = _step.value;
          var mixinFunc = mixinFuncs[mixName];
          if (mixinFunc) {
            config2 = mixinFunc(config2, doAdd);
          } else {
            throw new Error("Can't ".concat(doAdd ? "add" : "remove", " mixin ").concat(mixName));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return config2;
    };
    var addMixins = function addMixins2(config2, mixins) {
      return _addMixins(config2, mixins, true);
    };
    var removeMixins = function removeMixins2(config2, mixins) {
      return _addMixins(config2, mixins, false);
    };
    var mixinRangeableWidget = function mixinRangeableWidget2(type, widget) {
      return function(config2) {
        var addMixin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
        var types2 = config2.types;
        types2 = _objectSpread$l(_objectSpread$l({}, types2), {}, _defineProperty$2({}, type, _objectSpread$l(_objectSpread$l({}, types2[type]), {}, {
          widgets: _objectSpread$l({}, types2[type].widgets)
        })));
        if (addMixin) {
          types2[type].widgets[widget] = _objectSpread$l({
            opProps: {
              between: {
                isSpecialRange: true,
                textSeparators: [null, null]
              },
              not_between: {
                isSpecialRange: true,
                textSeparators: [null, null]
              }
            }
          }, types2[type].widgets[widget]);
        } else {
          delete types2[type].widgets[widget];
        }
        return _objectSpread$l(_objectSpread$l({}, config2), {}, {
          types: types2
        });
      };
    };
    var mixinWidgetRangeslider = function mixinWidgetRangeslider2(config2) {
      var addMixin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var widgets2 = config2.widgets, types2 = config2.types;
      widgets2 = _objectSpread$l({}, widgets2);
      if (addMixin) {
        widgets2.rangeslider = _objectSpread$l({
          type: "number",
          jsType: "number",
          valueSrc: "value",
          valueLabel: "Range",
          valuePlaceholder: "Select range",
          valueLabels: [{
            label: "Number from",
            placeholder: "Enter number from"
          }, {
            label: "Number to",
            placeholder: "Enter number to"
          }],
          formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
            return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
          },
          sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
            return this.utils.SqlString.escape(val);
          },
          celFormatValue: function celFormatValue(val) {
            return this.utils.celEscape(val);
          },
          spelFormatValue: function spelFormatValue(val) {
            return this.utils.spelEscape(val);
          },
          singleWidget: "slider",
          toJS: function toJS(val, fieldSettings) {
            return val;
          }
        }, widgets2.rangeslider);
      } else {
        delete widgets2.rangeslider;
      }
      types2 = _objectSpread$l(_objectSpread$l({}, types2), {}, {
        number: _objectSpread$l(_objectSpread$l({}, types2.number), {}, {
          widgets: _objectSpread$l({}, types2.number.widgets)
        })
      });
      if (addMixin) {
        types2.number.widgets.rangeslider = _objectSpread$l({
          opProps: {
            between: {
              isSpecialRange: true
            },
            not_between: {
              isSpecialRange: true
            }
          },
          operators: [
            "between",
            "not_between",
            // "is_empty",
            // "is_not_empty",
            "is_null",
            "is_not_null"
          ]
        }, types2.number.widgets.rangeslider);
      } else {
        delete types2.number.widgets.rangeslider;
      }
      return _objectSpread$l(_objectSpread$l({}, config2), {}, {
        widgets: widgets2,
        types: types2
      });
    };
    var mixinWidgetTreeselect = function mixinWidgetTreeselect2(config2) {
      var addMixin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var widgets2 = config2.widgets, types2 = config2.types;
      widgets2 = _objectSpread$l({}, widgets2);
      if (addMixin) {
        widgets2.treeselect = _objectSpread$l({
          type: "treeselect",
          jsType: "string",
          valueSrc: "value",
          valueLabel: "Value",
          valuePlaceholder: "Select value",
          formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
            var treeData = fieldDef.fieldSettings.treeValues || fieldDef.fieldSettings.listValues || fieldDef.asyncListValues;
            var valLabel = this.utils.getTitleInListValues(treeData, val);
            return isForDisplay ? this.utils.stringifyForDisplay(valLabel) : JSON.stringify(val);
          },
          sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
            return this.utils.SqlString.escape(val);
          },
          spelFormatValue: function spelFormatValue(val) {
            return this.utils.spelEscape(val);
          },
          celFormatValue: function celFormatValue(val) {
            return this.utils.SqlString.escape(val);
          },
          toJS: function toJS(val, fieldSettings) {
            return val;
          }
        }, widgets2.treeselect);
      } else {
        delete widgets2.treeselect;
      }
      types2 = _objectSpread$l({}, types2);
      if (addMixin) {
        types2.treeselect = _objectSpread$l({
          mainWidget: "treeselect",
          defaultOperator: "select_equals",
          widgets: {
            treeselect: {
              operators: ["select_equals", "select_not_equals"]
            },
            treemultiselect: {
              operators: ["select_any_in", "select_not_any_in"]
            }
          }
        }, types2.treeselect);
      } else {
        delete types2.treeselect;
      }
      return _objectSpread$l(_objectSpread$l({}, config2), {}, {
        widgets: widgets2,
        types: types2
      });
    };
    var mixinWidgetTreemultiselect = function mixinWidgetTreemultiselect2(config2) {
      var addMixin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var widgets2 = config2.widgets, types2 = config2.types;
      widgets2 = _objectSpread$l({}, widgets2);
      if (addMixin) {
        widgets2.treemultiselect = _objectSpread$l({
          type: "treemultiselect",
          jsType: "array",
          valueSrc: "value",
          valueLabel: "Values",
          valuePlaceholder: "Select values",
          formatValue: function formatValue2(vals, fieldDef, wgtDef, isForDisplay) {
            var _this12 = this;
            var treeData = fieldDef.fieldSettings.treeValues || fieldDef.fieldSettings.listValues || fieldDef.asyncListValues;
            var valsLabels = vals.map(function(v2) {
              return _this12.utils.getTitleInListValues(treeData, v2);
            });
            return isForDisplay ? valsLabels.map(this.utils.stringifyForDisplay) : vals.map(JSON.stringify);
          },
          sqlFormatValue: function sqlFormatValue(vals, fieldDef, wgtDef, op, opDef) {
            var _this13 = this;
            return vals.map(function(v2) {
              return _this13.utils.SqlString.escape(v2);
            });
          },
          spelFormatValue: function spelFormatValue(val) {
            return this.utils.spelEscape(val);
          },
          celFormatValue: function celFormatValue(val) {
            return this.utils.celEscape(val);
          },
          toJS: function toJS(val, fieldSettings) {
            return val;
          }
        }, widgets2.treemultiselect);
      } else {
        delete widgets2.treemultiselect;
      }
      types2 = _objectSpread$l({}, types2);
      if (addMixin) {
        types2.treemultiselect = _objectSpread$l({
          defaultOperator: "multiselect_equals",
          widgets: {
            treemultiselect: {
              operators: ["multiselect_equals", "multiselect_not_equals"]
            }
          }
        }, types2.treemultiselect);
      } else {
        delete types2.treemultiselect;
      }
      return _objectSpread$l(_objectSpread$l({}, config2), {}, {
        widgets: widgets2,
        types: types2
      });
    };
    var ConfigMixins = {
      addMixins,
      removeMixins
    };
    var config$3 = {
      conjunctions: conjunctions$1,
      operators: operators$1,
      widgets: widgets$2,
      types: types$3,
      settings: settings$2,
      ctx: ctx$2
    };
    config$3 = addMixins(config$3, ["rangeslider", "treeselect", "treemultiselect"]);
    const CoreConfig = config$3;
    var ADD_GROUP = "ADD_GROUP";
    var ADD_CASE_GROUP = "ADD_CASE_GROUP";
    var REMOVE_GROUP = "REMOVE_GROUP";
    var SET_CONJUNCTION = "SET_CONJUNCTION";
    var SET_NOT = "SET_NOT";
    var ADD_RULE = "ADD_RULE";
    var REMOVE_RULE = "REMOVE_RULE";
    var SET_FIELD = "SET_FIELD";
    var SET_FIELD_SRC = "SET_FIELD_SRC";
    var SET_OPERATOR = "SET_OPERATOR";
    var SET_VALUE = "SET_VALUE";
    var SET_VALUE_SRC = "SET_VALUE_SRC";
    var SET_OPERATOR_OPTION = "SET_OPERATOR_OPTION";
    var SET_LOCK = "SET_LOCK";
    var SET_TREE = "SET_TREE";
    var MOVE_ITEM = "MOVE_ITEM";
    var PLACEMENT_AFTER$1 = "after";
    var PLACEMENT_BEFORE$1 = "before";
    var PLACEMENT_APPEND$1 = "append";
    var PLACEMENT_PREPEND$1 = "prepend";
    var SET_DRAG_PROGRESS$1 = "SET_DRAG_PROGRESS";
    var SET_DRAG_START$1 = "SET_DRAG_START";
    var SET_DRAG_END$1 = "SET_DRAG_END";
    var baseFor = _baseFor, keys$1 = keys_1;
    function baseForOwn$1(object, iteratee) {
      return object && baseFor(object, iteratee, keys$1);
    }
    var _baseForOwn = baseForOwn$1;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd$1(value2) {
      this.__data__.set(value2, HASH_UNDEFINED);
      return this;
    }
    var _setCacheAdd = setCacheAdd$1;
    function setCacheHas$1(value2) {
      return this.__data__.has(value2);
    }
    var _setCacheHas = setCacheHas$1;
    var MapCache = _MapCache, setCacheAdd = _setCacheAdd, setCacheHas = _setCacheHas;
    function SetCache$1(values2) {
      var index = -1, length2 = values2 == null ? 0 : values2.length;
      this.__data__ = new MapCache();
      while (++index < length2) {
        this.add(values2[index]);
      }
    }
    SetCache$1.prototype.add = SetCache$1.prototype.push = setCacheAdd;
    SetCache$1.prototype.has = setCacheHas;
    var _SetCache = SetCache$1;
    function arraySome$1(array, predicate) {
      var index = -1, length2 = array == null ? 0 : array.length;
      while (++index < length2) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    var _arraySome = arraySome$1;
    function cacheHas$1(cache, key) {
      return cache.has(key);
    }
    var _cacheHas = cacheHas$1;
    var SetCache = _SetCache, arraySome = _arraySome, cacheHas = _cacheHas;
    var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
    function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    var _equalArrays = equalArrays$2;
    function mapToArray$1(map2) {
      var index = -1, result = Array(map2.size);
      map2.forEach(function(value2, key) {
        result[++index] = [key, value2];
      });
      return result;
    }
    var _mapToArray = mapToArray$1;
    function setToArray$1(set2) {
      var index = -1, result = Array(set2.size);
      set2.forEach(function(value2) {
        result[++index] = value2;
      });
      return result;
    }
    var _setToArray = setToArray$1;
    var Symbol$1 = _Symbol, Uint8Array2 = _Uint8Array, eq = eq_1, equalArrays$1 = _equalArrays, mapToArray = _mapToArray, setToArray = _setToArray;
    var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
    var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
    var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG$2;
          stack.set(object, other);
          var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    var _equalByTag = equalByTag$1;
    var getAllKeys = _getAllKeys;
    var COMPARE_PARTIAL_FLAG$3 = 1;
    var objectProto$1 = Object.prototype;
    var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
    function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    var _equalObjects = equalObjects$1;
    var Stack$1 = _Stack, equalArrays = _equalArrays, equalByTag = _equalByTag, equalObjects = _equalObjects, getTag = _getTag, isArray$1 = isArray_1, isBuffer = isBufferExports, isTypedArray = isTypedArray_1;
    var COMPARE_PARTIAL_FLAG$2 = 1;
    var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray$1(object), othIsArr = isArray$1(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack$1());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack$1());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack$1());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    var _baseIsEqualDeep = baseIsEqualDeep$1;
    var baseIsEqualDeep = _baseIsEqualDeep, isObjectLike = isObjectLike_1;
    function baseIsEqual$2(value2, other, bitmask, customizer, stack) {
      if (value2 === other) {
        return true;
      }
      if (value2 == null || other == null || !isObjectLike(value2) && !isObjectLike(other)) {
        return value2 !== value2 && other !== other;
      }
      return baseIsEqualDeep(value2, other, bitmask, customizer, baseIsEqual$2, stack);
    }
    var _baseIsEqual = baseIsEqual$2;
    var Stack = _Stack, baseIsEqual$1 = _baseIsEqual;
    var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
    function baseIsMatch$1(object, source, matchData, customizer) {
      var index = matchData.length, length2 = index, noCustomizer = !customizer;
      if (object == null) {
        return !length2;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length2) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    var _baseIsMatch = baseIsMatch$1;
    var isObject$3 = isObject_1;
    function isStrictComparable$2(value2) {
      return value2 === value2 && !isObject$3(value2);
    }
    var _isStrictComparable = isStrictComparable$2;
    var isStrictComparable$1 = _isStrictComparable, keys = keys_1;
    function getMatchData$1(object) {
      var result = keys(object), length2 = result.length;
      while (length2--) {
        var key = result[length2], value2 = object[key];
        result[length2] = [key, value2, isStrictComparable$1(value2)];
      }
      return result;
    }
    var _getMatchData = getMatchData$1;
    function matchesStrictComparable$2(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    var _matchesStrictComparable = matchesStrictComparable$2;
    var baseIsMatch = _baseIsMatch, getMatchData = _getMatchData, matchesStrictComparable$1 = _matchesStrictComparable;
    function baseMatches$1(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    var _baseMatches = baseMatches$1;
    var baseGet$1 = _baseGet;
    function get$1(object, path, defaultValue2) {
      var result = object == null ? void 0 : baseGet$1(object, path);
      return result === void 0 ? defaultValue2 : result;
    }
    var get_1 = get$1;
    var baseIsEqual = _baseIsEqual, get = get_1, hasIn = hasIn_1, isKey$1 = _isKey, isStrictComparable = _isStrictComparable, matchesStrictComparable = _matchesStrictComparable, toKey$1 = _toKey;
    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty$1(path, srcValue) {
      if (isKey$1(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey$1(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    var _baseMatchesProperty = baseMatchesProperty$1;
    function baseProperty$1(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    var _baseProperty = baseProperty$1;
    var baseGet = _baseGet;
    function basePropertyDeep$1(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    var _basePropertyDeep = basePropertyDeep$1;
    var baseProperty = _baseProperty, basePropertyDeep = _basePropertyDeep, isKey = _isKey, toKey = _toKey;
    function property$1(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    var property_1 = property$1;
    var baseMatches = _baseMatches, baseMatchesProperty = _baseMatchesProperty, identity = identity_1, isArray = isArray_1, property = property_1;
    function baseIteratee$2(value2) {
      if (typeof value2 == "function") {
        return value2;
      }
      if (value2 == null) {
        return identity;
      }
      if (typeof value2 == "object") {
        return isArray(value2) ? baseMatchesProperty(value2[0], value2[1]) : baseMatches(value2);
      }
      return property(value2);
    }
    var _baseIteratee = baseIteratee$2;
    var baseAssignValue = _baseAssignValue, baseForOwn = _baseForOwn, baseIteratee$1 = _baseIteratee;
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = baseIteratee$1(iteratee);
      baseForOwn(object, function(value2, key, object2) {
        baseAssignValue(result, key, iteratee(value2, key, object2));
      });
      return result;
    }
    var mapValues_1 = mapValues;
    const mapValues$1 = /* @__PURE__ */ getDefaultExportFromCjs(mapValues_1);
    function _createForOfIteratorHelper$2(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$2(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$2(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$2(o, minLen);
    }
    function _arrayLikeToArray$2(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$k(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$k(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$k(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$k(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var addNewGroup = function addNewGroup2(state, path, type, groupUuid, properties2, config2) {
      var children = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var meta = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : {};
      var shouldCreateEmptyGroup = config2.settings.shouldCreateEmptyGroup;
      var groupPath = path.push(groupUuid);
      var canAddNewRule = !shouldCreateEmptyGroup;
      var isDefaultCase = !!(meta !== null && meta !== void 0 && meta.isDefaultCase);
      var origState = state;
      state = addItem(state, path, type, groupUuid, defaultGroupProperties(config2).merge(properties2 || {}), config2, children);
      if (state !== origState) {
        if (!children && !isDefaultCase) {
          state = state.setIn(expandTreePath(groupPath, "children1"), new Immutable.OrderedMap());
          if (canAddNewRule) {
            state = addItem(state, groupPath, "rule", uuid$1(), defaultRuleProperties(config2), config2);
          }
        }
        state = fixPathsInTree(state);
      }
      return state;
    };
    var removeGroup$1 = function removeGroup2(state, path, config2) {
      state = removeItem(state, path);
      var canLeaveEmptyGroup = config2.settings.canLeaveEmptyGroup;
      var parentPath = path.slice(0, -1);
      var isEmptyParentGroup = !hasChildren(state, parentPath);
      if (isEmptyParentGroup && !canLeaveEmptyGroup) {
        state = fixEmptyGroupsInTree(state);
        if (isEmptyTree(state) && !canLeaveEmptyGroup) {
          var canUseDefaultFieldAndOp = false;
          var canGetFirst = false;
          state = addItem(state, new Immutable.List(), "rule", uuid$1(), defaultRuleProperties(config2, void 0, void 0, canUseDefaultFieldAndOp, canGetFirst), config2);
        }
      }
      state = fixPathsInTree(state);
      return state;
    };
    var removeRule$1 = function removeRule2(state, path, config2) {
      state = removeItem(state, path);
      var canLeaveEmptyGroup = config2.settings.canLeaveEmptyGroup;
      var parentPath = path.pop();
      var parent2 = state.getIn(expandTreePath(parentPath));
      var parentField = parent2.getIn(["properties", "field"]);
      var parentOperator = parent2.getIn(["properties", "operator"]);
      parent2.getIn(["properties", "value", 0]);
      var parentFieldConfig = parentField ? getFieldConfig$8(config2, parentField) : null;
      var parentOperatorConfig = parentOperator ? getOperatorConfig$4(config2, parentOperator, parentField) : null;
      var hasGroupCountRule = parentField && parentOperator && parentOperatorConfig.cardinality != 0;
      var isParentRuleGroup = parent2.get("type") == "rule_group";
      var isEmptyParentGroup = !hasChildren(state, parentPath);
      var canLeaveEmpty = isParentRuleGroup ? hasGroupCountRule && parentFieldConfig.initialEmptyWhere : canLeaveEmptyGroup;
      if (isEmptyParentGroup && !canLeaveEmpty) {
        if (isParentRuleGroup) {
          state = state.deleteIn(expandTreePath(parentPath));
        }
        state = fixEmptyGroupsInTree(state);
        if (isEmptyTree(state) && !canLeaveEmptyGroup) {
          var canUseDefaultFieldAndOp = false;
          var canGetFirst = false;
          state = addItem(state, new Immutable.List(), "rule", uuid$1(), defaultRuleProperties(config2, void 0, void 0, canUseDefaultFieldAndOp, canGetFirst), config2);
        }
      }
      state = fixPathsInTree(state);
      return state;
    };
    var setNot$1 = function setNot2(state, path, not) {
      return state.setIn(expandTreePath(path, "properties", "not"), not);
    };
    var setLock$1 = function setLock2(state, path, lock) {
      return removeIsLockedInTree(state.setIn(expandTreePath(path, "properties", "isLocked"), lock));
    };
    var setConjunction$1 = function setConjunction2(state, path, conjunction) {
      return state.setIn(expandTreePath(path, "properties", "conjunction"), conjunction);
    };
    var _addChildren1 = function _addChildren12(config2, item, children) {
      if (children && Array.isArray(children)) {
        item.children1 = new Immutable.OrderedMap(children.reduce(function(map2, it) {
          var id1 = uuid$1();
          var it1 = _objectSpread$k(_objectSpread$k({}, it), {}, {
            properties: defaultItemProperties(config2, it).merge(it.properties || {}),
            id: id1
          });
          _addChildren12(config2, it1, it1.children1);
          return _objectSpread$k(_objectSpread$k({}, map2), {}, _defineProperty$2({}, id1, new Immutable.Map(it1)));
        }, {}));
      }
    };
    var addItem = function addItem2(state, path, type, id2, properties2, config2) {
      var children = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if (type == "switch_group")
        throw new Error("Can't add switch_group programmatically");
      var _config$settings = config2.settings, maxNumberOfCases = _config$settings.maxNumberOfCases, maxNumberOfRules = _config$settings.maxNumberOfRules, maxNesting = _config$settings.maxNesting;
      var rootType = state.get("type");
      var isTernary = rootType == "switch_group";
      var targetItem = state.getIn(expandTreePath(path));
      var caseGroup = isTernary ? state.getIn(expandTreePath(path.take(2))) : null;
      var childrenPath = expandTreePath(path, "children1");
      var targetChildren = state.getIn(childrenPath);
      var hasChildren2 = !!targetChildren && targetChildren.size;
      var targetChildrenSize = hasChildren2 ? targetChildren.size : null;
      var currentNumber, maxNumber;
      if (type == "case_group") {
        currentNumber = targetChildrenSize;
        maxNumber = maxNumberOfCases;
      } else if (type == "group") {
        currentNumber = path.size;
        maxNumber = maxNesting;
      } else if ((targetItem === null || targetItem === void 0 ? void 0 : targetItem.get("type")) == "rule_group")
        ;
      else {
        currentNumber = isTernary ? getTotalRulesCountInTree$2(caseGroup) : getTotalRulesCountInTree$2(state);
        maxNumber = maxNumberOfRules;
      }
      var canAdd = maxNumber && currentNumber ? currentNumber < maxNumber : true;
      var item = {
        type,
        id: id2,
        properties: properties2
      };
      _addChildren1(config2, item, children);
      var isLastDefaultCase = type == "case_group" && hasChildren2 && targetChildren.last().get("children1") == null;
      if (canAdd) {
        var newChildren = new Immutable.OrderedMap(_defineProperty$2({}, id2, new Immutable.Map(item)));
        if (!hasChildren2) {
          state = state.setIn(childrenPath, newChildren);
        } else if (isLastDefaultCase) {
          var _Immutable$OrderedMap2;
          var last2 = targetChildren.last();
          var newChildrenWithLast = new Immutable.OrderedMap((_Immutable$OrderedMap2 = {}, _defineProperty$2(_Immutable$OrderedMap2, id2, new Immutable.Map(item)), _defineProperty$2(_Immutable$OrderedMap2, last2.get("id"), last2), _Immutable$OrderedMap2));
          state = state.deleteIn(expandTreePath(childrenPath, "children1", last2.get("id")));
          state = state.mergeIn(childrenPath, newChildrenWithLast);
        } else {
          state = state.mergeIn(childrenPath, newChildren);
        }
        state = fixPathsInTree(state);
      }
      return state;
    };
    var removeItem = function removeItem2(state, path) {
      state = state.deleteIn(expandTreePath(path));
      state = fixPathsInTree(state);
      return state;
    };
    var moveItem$1 = function moveItem2(state, fromPath, toPath, placement, config2) {
      var from2 = getItemByPath(state, fromPath);
      var sourcePath = fromPath.pop();
      var source = fromPath.size > 1 ? getItemByPath(state, sourcePath) : null;
      var sourceChildren = source ? source.get("children1") : null;
      var to2 = getItemByPath(state, toPath);
      var targetPath = placement == PLACEMENT_APPEND$1 || placement == PLACEMENT_PREPEND$1 ? toPath : toPath.pop();
      var target = placement == PLACEMENT_APPEND$1 || placement == PLACEMENT_PREPEND$1 ? to2 : toPath.size > 1 ? getItemByPath(state, targetPath) : null;
      var targetChildren = target ? target.get("children1") : null;
      if (!source || !target || !from2)
        return state;
      var isSameParent = source.get("id") == target.get("id");
      var isSourceInsideTarget = targetPath.size < sourcePath.size && deepEqual(targetPath.toArray(), sourcePath.toArray().slice(0, targetPath.size));
      var isTargetInsideSource = targetPath.size > sourcePath.size && deepEqual(sourcePath.toArray(), targetPath.toArray().slice(0, sourcePath.size));
      var sourceSubpathFromTarget = null;
      var targetSubpathFromSource = null;
      if (isSourceInsideTarget) {
        sourceSubpathFromTarget = Immutable.List(sourcePath.toArray().slice(targetPath.size));
      } else if (isTargetInsideSource) {
        targetSubpathFromSource = Immutable.List(targetPath.toArray().slice(sourcePath.size));
      }
      var newTargetChildren = targetChildren, newSourceChildren = sourceChildren;
      if (!isTargetInsideSource)
        newSourceChildren = newSourceChildren["delete"](from2.get("id"));
      if (isSameParent) {
        newTargetChildren = newSourceChildren;
      } else if (isSourceInsideTarget) {
        newTargetChildren = newTargetChildren.updateIn(expandTreeSubpath(sourceSubpathFromTarget, "children1"), function(_oldChildren) {
          return newSourceChildren;
        });
      }
      if (placement == PLACEMENT_BEFORE$1 || placement == PLACEMENT_AFTER$1) {
        newTargetChildren = Immutable.OrderedMap().withMutations(function(r2) {
          var _iterator = _createForOfIteratorHelper$2(newTargetChildren.entries()), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var _step$value = _slicedToArray(_step.value, 2), itemId = _step$value[0], item = _step$value[1];
              if (itemId == to2.get("id") && placement == PLACEMENT_BEFORE$1) {
                r2.set(from2.get("id"), from2);
              }
              r2.set(itemId, item);
              if (itemId == to2.get("id") && placement == PLACEMENT_AFTER$1) {
                r2.set(from2.get("id"), from2);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        });
      } else if (placement == PLACEMENT_APPEND$1) {
        newTargetChildren = newTargetChildren.merge(_defineProperty$2({}, from2.get("id"), from2));
      } else if (placement == PLACEMENT_PREPEND$1) {
        newTargetChildren = Immutable.OrderedMap(_defineProperty$2({}, from2.get("id"), from2)).merge(newTargetChildren);
      }
      if (isTargetInsideSource) {
        newSourceChildren = newSourceChildren.updateIn(expandTreeSubpath(targetSubpathFromSource, "children1"), function(_oldChildren) {
          return newTargetChildren;
        });
        newSourceChildren = newSourceChildren["delete"](from2.get("id"));
      }
      if (!isSameParent && !isSourceInsideTarget)
        state = state.updateIn(expandTreePath(sourcePath, "children1"), function(_oldChildren) {
          return newSourceChildren;
        });
      if (!isTargetInsideSource)
        state = state.updateIn(expandTreePath(targetPath, "children1"), function(_oldChildren) {
          return newTargetChildren;
        });
      state = fixPathsInTree(state);
      return state;
    };
    var setFieldSrc$1 = function setFieldSrc2(state, path, srcKey, config2) {
      var keepInputOnChangeFieldSrc = config2.settings.keepInputOnChangeFieldSrc;
      var currentRule = state.getIn(expandTreePath(path));
      currentRule.get("type");
      var currentProperties = currentRule.get("properties");
      var currentField = currentProperties.get("field");
      var currentFielType = currentProperties.get("fieldType");
      var currentFieldConfig = getFieldConfig$8(config2, currentField);
      var fieldType = (currentFieldConfig === null || currentFieldConfig === void 0 ? void 0 : currentFieldConfig.type) || currentFielType;
      if (!fieldType || fieldType === "!group" || fieldType === "!struct") {
        fieldType = null;
      }
      var canReuseValue = !selectTypes.includes(fieldType);
      var keepInput = keepInputOnChangeFieldSrc && !isEmptyItem(currentRule, config2, true) && canReuseValue;
      if (!keepInput) {
        state = state.setIn(expandTreePath(path, "properties"), defaultRuleProperties(config2, null, null, false));
      } else {
        state = state.setIn(expandTreePath(path, "properties", "field"), null);
        state = state.setIn(expandTreePath(path, "properties", "fieldType"), fieldType);
      }
      state = state.setIn(expandTreePath(path, "properties", "fieldSrc"), srcKey);
      return state;
    };
    var setField$1 = function setField2(state, path, newField, config2, asyncListValues, __isInternal2) {
      var _newFieldConfig$opera;
      var isInternalValueChange;
      if (!newField)
        return {
          tree: removeItem(state, path),
          isInternalValueChange
        };
      var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, setOpOnChangeField = _config$settings2.setOpOnChangeField, showErrorMessage = _config$settings2.showErrorMessage;
      _config$settings2.keepInputOnChangeFieldSrc;
      if (Array.isArray(newField))
        newField = newField.join(fieldSeparator);
      var currentType = state.getIn(expandTreePath(path, "type"));
      var currentProperties = state.getIn(expandTreePath(path, "properties"));
      var wasRuleGroup = currentType == "rule_group";
      var currentFieldSrc = currentProperties.get("fieldSrc");
      var newFieldConfig = getFieldConfig$8(config2, newField);
      if (!newFieldConfig) {
        console.warn("No config for LHS ".concat(newField));
        return {
          tree: state,
          isInternalValueChange
        };
      }
      var fieldType = newFieldConfig.type;
      if (fieldType === "!group" || fieldType === "!struct") {
        fieldType = null;
      }
      var currentOperator = currentProperties.get("operator");
      var currentOperatorOptions = currentProperties.get("operatorOptions");
      currentProperties.get("field");
      currentProperties.get("value");
      currentProperties.get("valueSrc", new Immutable.List());
      currentProperties.get("valueType", new Immutable.List());
      var isRuleGroup = newFieldConfig.type == "!group";
      var isRuleGroupExt = isRuleGroup && newFieldConfig.mode == "array";
      var isChangeToAnotherType = wasRuleGroup != isRuleGroup;
      var lastOp = newFieldConfig && ((_newFieldConfig$opera = newFieldConfig.operators) === null || _newFieldConfig$opera === void 0 ? void 0 : _newFieldConfig$opera.indexOf(currentOperator)) !== -1 ? currentOperator : null;
      var newOperator = null;
      var availOps = currentFieldSrc === "func" ? getOperatorsForType(config2, fieldType) : getOperatorsForField(config2, newField);
      if (availOps && availOps.length == 1)
        newOperator = availOps[0];
      else if (availOps && availOps.length > 1) {
        var _iterator2 = _createForOfIteratorHelper$2(setOpOnChangeField || []), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var strategy = _step2.value;
            if (strategy == "keep" && !isChangeToAnotherType)
              newOperator = lastOp;
            else if (strategy == "default")
              newOperator = getDefaultOperator(config2, newField, false);
            else if (strategy == "first")
              newOperator = getFirstOperator(config2, newField);
            if (newOperator)
              break;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      if (!isRuleGroup && !newFieldConfig.operators) {
        console.warn("Type ".concat(newFieldConfig.type, " is not supported"));
        return {
          tree: state,
          isInternalValueChange
        };
      }
      if (wasRuleGroup && !isRuleGroup) {
        state = state.setIn(expandTreePath(path, "type"), "rule");
        state = state.deleteIn(expandTreePath(path, "children1"));
        state = state.setIn(expandTreePath(path, "properties"), new Immutable.OrderedMap());
      }
      if (isRuleGroup) {
        state = state.setIn(expandTreePath(path, "type"), "rule_group");
        var _getNewValueForFieldO = getNewValueForFieldOp(config2, config2, currentProperties, newField, newOperator, "field", true);
        _getNewValueForFieldO.canReuseValue;
        var newValue = _getNewValueForFieldO.newValue, newValueSrc = _getNewValueForFieldO.newValueSrc, newValueType = _getNewValueForFieldO.newValueType, operatorCardinality = _getNewValueForFieldO.operatorCardinality;
        var groupProperties = defaultGroupProperties(config2, newFieldConfig).merge({
          field: newField,
          fieldSrc: "field",
          mode: newFieldConfig.mode
        });
        if (isRuleGroupExt) {
          groupProperties = groupProperties.merge({
            operator: newOperator,
            value: newValue,
            valueSrc: newValueSrc,
            valueType: newValueType
          });
        }
        state = state.setIn(expandTreePath(path, "children1"), new Immutable.OrderedMap());
        state = state.setIn(expandTreePath(path, "properties"), groupProperties);
        if (newFieldConfig.initialEmptyWhere && operatorCardinality == 1)
          ;
        else {
          state = addItem(state, path, "rule", uuid$1(), defaultRuleProperties(config2, newField), config2);
        }
        state = fixPathsInTree(state);
      } else {
        state = state.updateIn(expandTreePath(path, "properties"), function(map2) {
          return map2.withMutations(function(current) {
            var _getNewValueForFieldO2 = getNewValueForFieldOp(config2, config2, current, newField, newOperator, "field", true), canReuseValue = _getNewValueForFieldO2.canReuseValue, newValue2 = _getNewValueForFieldO2.newValue, newValueSrc2 = _getNewValueForFieldO2.newValueSrc, newValueType2 = _getNewValueForFieldO2.newValueType, newValueError = _getNewValueForFieldO2.newValueError;
            if (showErrorMessage) {
              current = current.set("valueError", newValueError);
            }
            var newOperatorOptions = canReuseValue ? currentOperatorOptions : defaultOperatorOptions(config2, newOperator, newField);
            isInternalValueChange = __isInternal2;
            return current.set("field", newField)["delete"]("fieldType").set("fieldSrc", currentFieldSrc).set("operator", newOperator).set("operatorOptions", newOperatorOptions).set("value", newValue2).set("valueSrc", newValueSrc2).set("valueType", newValueType2)["delete"]("asyncListValues");
          });
        });
      }
      return {
        tree: state,
        isInternalValueChange
      };
    };
    var setOperator$1 = function setOperator2(state, path, newOperator, config2) {
      var showErrorMessage = config2.settings.showErrorMessage;
      var properties2 = state.getIn(expandTreePath(path, "properties"));
      var children = state.getIn(expandTreePath(path, "children1"));
      var currentField = properties2.get("field");
      properties2.get("fieldSrc");
      var fieldConfig = getFieldConfig$8(config2, currentField);
      var isRuleGroup = (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type) == "!group";
      var operatorConfig = getOperatorConfig$4(config2, newOperator, currentField);
      var operatorCardinality = operatorConfig ? defaultValue$1(operatorConfig.cardinality, 1) : null;
      state = state.updateIn(expandTreePath(path, "properties"), function(map2) {
        return map2.withMutations(function(current) {
          var currentField2 = current.get("field");
          var currentOperatorOptions = current.get("operatorOptions");
          current.get("value", new Immutable.List());
          current.get("valueSrc", new Immutable.List());
          current.get("operator");
          var _getNewValueForFieldO3 = getNewValueForFieldOp(config2, config2, current, currentField2, newOperator, "operator", true), canReuseValue = _getNewValueForFieldO3.canReuseValue, newValue = _getNewValueForFieldO3.newValue, newValueSrc = _getNewValueForFieldO3.newValueSrc, newValueType = _getNewValueForFieldO3.newValueType, newValueError = _getNewValueForFieldO3.newValueError;
          if (showErrorMessage) {
            current = current.set("valueError", newValueError);
          }
          var newOperatorOptions = canReuseValue ? currentOperatorOptions : defaultOperatorOptions(config2, newOperator, currentField2);
          if (!canReuseValue) {
            current = current["delete"]("asyncListValues");
          }
          return current.set("operator", newOperator).set("operatorOptions", newOperatorOptions).set("value", newValue).set("valueSrc", newValueSrc).set("valueType", newValueType);
        });
      });
      if (isRuleGroup) {
        if (operatorCardinality == 0 && children.size == 0) {
          state = addItem(state, path, "rule", uuid$1(), defaultRuleProperties(config2, currentField), config2);
        }
      }
      return state;
    };
    var setValue$1 = function setValue2(state, path, delta, value2, valueType, config2, asyncListValues, __isInternal2) {
      var _config$settings3 = config2.settings, fieldSeparator = _config$settings3.fieldSeparator, showErrorMessage = _config$settings3.showErrorMessage;
      var isInternalValueChange;
      var valueSrc = state.getIn(expandTreePath(path, "properties", "valueSrc", delta + "")) || null;
      if (valueSrc === "field" && Array.isArray(value2))
        value2 = value2.join(fieldSeparator);
      var field = state.getIn(expandTreePath(path, "properties", "field")) || null;
      var operator = state.getIn(expandTreePath(path, "properties", "operator")) || null;
      var operatorConfig = getOperatorConfig$4(config2, operator, field);
      var operatorCardinality = operator ? defaultValue$1(operatorConfig.cardinality, 1) : null;
      var isEndValue = false;
      var calculatedValueType = valueType || calculateValueType(value2, valueSrc, config2);
      var canFix = false;
      var _validateValue = validateValue(config2, field, field, operator, value2, calculatedValueType, valueSrc, asyncListValues, canFix, isEndValue, true), _validateValue2 = _slicedToArray(_validateValue, 2), validateError = _validateValue2[0], fixedValue = _validateValue2[1];
      var isValid2 = !validateError;
      if (fixedValue !== value2) {
        value2 = fixedValue;
      }
      if (showErrorMessage) {
        var w2 = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDefinition = getFieldWidgetConfig$3(config2, field, operator, w2, valueSrc);
        var valueSrcs = Array.from({
          length: operatorCardinality
        }, function(_2, i) {
          return state.getIn(expandTreePath(path, "properties", "valueSrc", i + "")) || null;
        });
        if (operatorConfig && operatorConfig.validateValues && valueSrcs.filter(function(vs) {
          return vs == "value" || vs == null;
        }).length == operatorCardinality) {
          var values2 = Array.from({
            length: operatorCardinality
          }, function(_2, i) {
            return i == delta ? value2 : state.getIn(expandTreePath(path, "properties", "value", i + "")) || null;
          });
          var jsValues = fieldWidgetDefinition && fieldWidgetDefinition.toJS ? values2.map(function(v2) {
            return fieldWidgetDefinition.toJS.call(config2.ctx, v2, fieldWidgetDefinition);
          }) : values2;
          var rangeValidateError = operatorConfig.validateValues(jsValues);
          state = state.setIn(expandTreePath(path, "properties", "valueError", operatorCardinality), rangeValidateError);
        }
      }
      var lastValueArr = state.getIn(expandTreePath(path, "properties", "value"));
      if (!lastValueArr) {
        state = state.setIn(expandTreePath(path, "properties", "value"), new Immutable.List(new Array(operatorCardinality))).setIn(expandTreePath(path, "properties", "valueType"), new Immutable.List(new Array(operatorCardinality))).setIn(expandTreePath(path, "properties", "valueError"), new Immutable.List(new Array(operatorCardinality)));
      }
      var lastValue = state.getIn(expandTreePath(path, "properties", "value", delta + ""));
      var lastError = state.getIn(expandTreePath(path, "properties", "valueError", delta));
      var isLastEmpty = lastValue == void 0;
      var isLastError = !!lastError;
      if (isValid2 || showErrorMessage) {
        state = state.deleteIn(expandTreePath(path, "properties", "asyncListValues"));
        if (typeof value2 === "undefined") {
          state = state.setIn(expandTreePath(path, "properties", "value", delta + ""), void 0);
          state = state.setIn(expandTreePath(path, "properties", "valueType", delta + ""), null);
        } else {
          if (asyncListValues) {
            state = state.setIn(expandTreePath(path, "properties", "asyncListValues"), asyncListValues);
          }
          state = state.setIn(expandTreePath(path, "properties", "value", delta + ""), value2);
          state = state.setIn(expandTreePath(path, "properties", "valueType", delta + ""), calculatedValueType);
          isInternalValueChange = __isInternal2 && !isLastEmpty && !isLastError;
        }
      }
      if (showErrorMessage) {
        state = state.setIn(expandTreePath(path, "properties", "valueError", delta), validateError);
      }
      if (__isInternal2 && (isValid2 && isLastError || !isValid2 && !isLastError)) {
        state = state.setIn(expandTreePath(path, "properties", "valueError", delta), validateError);
        isInternalValueChange = false;
      }
      return {
        tree: state,
        isInternalValueChange
      };
    };
    var setValueSrc$1 = function setValueSrc2(state, path, delta, srcKey, config2) {
      var showErrorMessage = config2.settings.showErrorMessage;
      var field = state.getIn(expandTreePath(path, "properties", "field")) || null;
      state.getIn(expandTreePath(path, "properties", "fieldSrc")) || null;
      var operator = state.getIn(expandTreePath(path, "properties", "operator")) || null;
      state = state.setIn(expandTreePath(path, "properties", "value", delta + ""), void 0);
      state = state.setIn(expandTreePath(path, "properties", "valueType", delta + ""), null);
      state = state.deleteIn(expandTreePath(path, "properties", "asyncListValues"));
      if (showErrorMessage) {
        state = state.setIn(expandTreePath(path, "properties", "valueError", delta), null);
        var operatorConfig = getOperatorConfig$4(config2, operator, field);
        var operatorCardinality = operator ? defaultValue$1(operatorConfig.cardinality, 1) : null;
        if (operatorConfig.validateValues) {
          state = state.setIn(expandTreePath(path, "properties", "valueError", operatorCardinality), null);
        }
      }
      if (typeof srcKey === "undefined") {
        state = state.setIn(expandTreePath(path, "properties", "valueSrc", delta + ""), null);
      } else {
        state = state.setIn(expandTreePath(path, "properties", "valueSrc", delta + ""), srcKey);
      }
      if (srcKey) {
        var properties2 = state.getIn(expandTreePath(path, "properties"));
        var _getNewValueForFieldO4 = getNewValueForFieldOp(config2, config2, properties2, field, operator, "valueSrc", true), canReuseValue = _getNewValueForFieldO4.canReuseValue, newValue = _getNewValueForFieldO4.newValue, newValueSrc = _getNewValueForFieldO4.newValueSrc, newValueType = _getNewValueForFieldO4.newValueType;
        _getNewValueForFieldO4.newValueError;
        if (!canReuseValue && newValueSrc.get(delta) == srcKey) {
          state = state.setIn(expandTreePath(path, "properties", "value", delta + ""), newValue.get(delta));
          state = state.setIn(expandTreePath(path, "properties", "valueType", delta + ""), newValueType.get(delta));
        }
      }
      return state;
    };
    var setOperatorOption$1 = function setOperatorOption2(state, path, name, value2) {
      return state.setIn(expandTreePath(path, "properties", "operatorOptions", name), value2);
    };
    var checkEmptyGroups = function checkEmptyGroups2(state, config2) {
      var canLeaveEmptyGroup = config2.settings.canLeaveEmptyGroup;
      if (!canLeaveEmptyGroup) {
        state = fixEmptyGroupsInTree(state);
      }
      return state;
    };
    var calculateValueType = function calculateValueType2(value2, valueSrc, config2) {
      var calculatedValueType = null;
      if (value2) {
        if (valueSrc === "field") {
          var fieldConfig = getFieldConfig$8(config2, value2);
          if (fieldConfig) {
            calculatedValueType = fieldConfig.type;
          }
        } else if (valueSrc === "func") {
          var funcKey = value2.get("func");
          if (funcKey) {
            var funcConfig = getFuncConfig$2(config2, funcKey);
            if (funcConfig) {
              calculatedValueType = funcConfig.returnType;
            }
          }
        }
      }
      return calculatedValueType;
    };
    var getField = function getField2(state, path) {
      var field = state.getIn(expandTreePath(path, "properties", "field")) || null;
      return field;
    };
    var emptyDrag = {
      dragging: {
        id: null,
        x: null,
        y: null,
        w: null,
        h: null
      },
      mousePos: {},
      dragStart: {
        id: null
      }
    };
    var getActionMeta = function getActionMeta2(action, state) {
      if (!action || !action.type)
        return null;
      var actionKeysToOmit = ["config", "asyncListValues", "__isInternal"];
      var actionTypesToIgnore = [SET_TREE, SET_DRAG_START$1, SET_DRAG_PROGRESS$1, SET_DRAG_END$1];
      var meta = mapValues$1(omit$1(action, actionKeysToOmit), applyToJS);
      var affectedField = action.path && getField(state.tree, action.path) || action.field;
      if (affectedField) {
        var _affectedField;
        if ((_affectedField = affectedField) !== null && _affectedField !== void 0 && _affectedField.toJS)
          affectedField = affectedField.toJS();
        meta.affectedField = affectedField;
      }
      if (actionTypesToIgnore.includes(action.type) || action.type.indexOf("@@redux") == 0)
        meta = null;
      return meta;
    };
    const TreeStore = function(config2, tree2, getMemoizedTree, setLastTree) {
      var initTree2 = tree2;
      var emptyState = _objectSpread$k({
        tree: initTree2
      }, emptyDrag);
      return function() {
        var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : emptyState;
        var action = arguments.length > 1 ? arguments[1] : void 0;
        var unset = {
          __isInternalValueChange: void 0,
          __lastAction: void 0
        };
        var set2 = {};
        var actionMeta = getActionMeta(action, state);
        switch (action === null || action === void 0 ? void 0 : action.type) {
          case SET_TREE: {
            var validatedTree = getMemoizedTree(action.config, action.tree);
            set2.tree = validatedTree;
            break;
          }
          case ADD_CASE_GROUP: {
            set2.tree = addNewGroup(state.tree, action.path, "case_group", action.id, action.properties, action.config, action.children, action.meta);
            break;
          }
          case ADD_GROUP: {
            set2.tree = addNewGroup(state.tree, action.path, "group", action.id, action.properties, action.config, action.children, action.meta);
            break;
          }
          case REMOVE_GROUP: {
            set2.tree = removeGroup$1(state.tree, action.path, action.config);
            break;
          }
          case ADD_RULE: {
            set2.tree = addItem(state.tree, action.path, action.ruleType, action.id, action.properties, action.config, action.children);
            break;
          }
          case REMOVE_RULE: {
            set2.tree = removeRule$1(state.tree, action.path, action.config);
            break;
          }
          case SET_CONJUNCTION: {
            set2.tree = setConjunction$1(state.tree, action.path, action.conjunction);
            break;
          }
          case SET_NOT: {
            set2.tree = setNot$1(state.tree, action.path, action.not);
            break;
          }
          case SET_FIELD: {
            var _setField = setField$1(state.tree, action.path, action.field, action.config, action.asyncListValues, action.__isInternal), _tree = _setField.tree, isInternalValueChange = _setField.isInternalValueChange;
            set2.__isInternalValueChange = isInternalValueChange;
            set2.tree = _tree;
            break;
          }
          case SET_FIELD_SRC: {
            set2.tree = setFieldSrc$1(state.tree, action.path, action.srcKey, action.config);
            break;
          }
          case SET_LOCK: {
            set2.tree = setLock$1(state.tree, action.path, action.lock);
            break;
          }
          case SET_OPERATOR: {
            set2.tree = setOperator$1(state.tree, action.path, action.operator, action.config);
            break;
          }
          case SET_VALUE: {
            var _setValue = setValue$1(state.tree, action.path, action.delta, action.value, action.valueType, action.config, action.asyncListValues, action.__isInternal), _tree2 = _setValue.tree, _isInternalValueChange = _setValue.isInternalValueChange;
            set2.__isInternalValueChange = _isInternalValueChange;
            set2.tree = _tree2;
            break;
          }
          case SET_VALUE_SRC: {
            set2.tree = setValueSrc$1(state.tree, action.path, action.delta, action.srcKey, action.config);
            break;
          }
          case SET_OPERATOR_OPTION: {
            set2.tree = setOperatorOption$1(state.tree, action.path, action.name, action.value);
            break;
          }
          case MOVE_ITEM: {
            set2.tree = moveItem$1(state.tree, action.fromPath, action.toPath, action.placement, action.config);
            break;
          }
          case SET_DRAG_START$1: {
            set2.dragStart = action.dragStart;
            set2.dragging = action.dragging;
            set2.mousePos = action.mousePos;
            break;
          }
          case SET_DRAG_PROGRESS$1: {
            set2.mousePos = action.mousePos;
            set2.dragging = action.dragging;
            break;
          }
          case SET_DRAG_END$1: {
            set2.tree = checkEmptyGroups(state.tree, config2);
            set2 = _objectSpread$k(_objectSpread$k({}, set2), emptyDrag);
            break;
          }
        }
        if (actionMeta) {
          set2.__lastAction = actionMeta;
        }
        if (setLastTree && set2.tree && state.tree) {
          setLastTree(state.tree);
        }
        return _objectSpread$k(_objectSpread$k(_objectSpread$k({}, state), unset), set2);
      };
    };
    var setTree = function setTree2(config2, tree2) {
      return {
        type: SET_TREE,
        tree: tree2,
        config: config2
      };
    };
    var addRule = function addRule2(config2, path, properties2) {
      var ruleType = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "rule";
      var children = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var parentRuleGroupPath = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      return {
        type: ADD_RULE,
        ruleType,
        children,
        path: toImmutableList(path),
        id: uuid$1(),
        properties: defaultRuleProperties(config2, parentRuleGroupPath).merge(properties2 || {}),
        config: config2
      };
    };
    var removeRule = function removeRule2(config2, path) {
      return {
        type: REMOVE_RULE,
        path: toImmutableList(path),
        config: config2
      };
    };
    var addDefaultCaseGroup = function addDefaultCaseGroup2(config2, path, properties2) {
      var children = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return {
        type: ADD_CASE_GROUP,
        path: toImmutableList(path),
        children,
        id: uuid$1(),
        properties: defaultGroupProperties(config2).merge(properties2 || {}),
        config: config2,
        meta: {
          isDefaultCase: true
        }
      };
    };
    var addCaseGroup = function addCaseGroup2(config2, path, properties2) {
      var children = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return {
        type: ADD_CASE_GROUP,
        path: toImmutableList(path),
        children,
        id: uuid$1(),
        properties: defaultGroupProperties(config2).merge(properties2 || {}),
        config: config2
      };
    };
    var addGroup = function addGroup2(config2, path, properties2) {
      var children = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return {
        type: ADD_GROUP,
        path: toImmutableList(path),
        children,
        id: uuid$1(),
        properties: defaultGroupProperties(config2).merge(properties2 || {}),
        config: config2
      };
    };
    var removeGroup = function removeGroup2(config2, path) {
      return {
        type: REMOVE_GROUP,
        path: toImmutableList(path),
        config: config2
      };
    };
    var moveItem = function moveItem2(config2, fromPath, toPath, placement) {
      return {
        type: MOVE_ITEM,
        fromPath: toImmutableList(fromPath),
        toPath: toImmutableList(toPath),
        placement,
        config: config2
      };
    };
    const tree$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      addCaseGroup,
      addDefaultCaseGroup,
      addGroup,
      addRule,
      moveItem,
      removeGroup,
      removeRule,
      setTree
    }, Symbol.toStringTag, { value: "Module" }));
    var setConjunction = function setConjunction2(config2, path, conjunction) {
      return {
        type: SET_CONJUNCTION,
        path: toImmutableList(path),
        conjunction
      };
    };
    var setNot = function setNot2(config2, path, not) {
      return {
        type: SET_NOT,
        path: toImmutableList(path),
        not
      };
    };
    var setLock = function setLock2(config2, path, lock) {
      return {
        type: SET_LOCK,
        path: toImmutableList(path),
        lock
      };
    };
    const group$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      setConjunction,
      setLock,
      setNot
    }, Symbol.toStringTag, { value: "Module" }));
    var setField = function setField2(config2, path, field, asyncListValues, __isInternal2) {
      return {
        type: SET_FIELD,
        path: toImmutableList(path),
        field,
        config: config2,
        asyncListValues,
        __isInternal: __isInternal2
      };
    };
    var setFieldSrc = function setFieldSrc2(config2, path, srcKey) {
      return {
        type: SET_FIELD_SRC,
        path: toImmutableList(path),
        srcKey,
        config: config2
      };
    };
    var setOperator = function setOperator2(config2, path, operator) {
      return {
        type: SET_OPERATOR,
        path: toImmutableList(path),
        operator,
        config: config2
      };
    };
    var setValue = function setValue2(config2, path, delta, value2, valueType, asyncListValues, __isInternal2) {
      return {
        type: SET_VALUE,
        path: toImmutableList(path),
        delta,
        value: value2,
        valueType,
        asyncListValues,
        config: config2,
        __isInternal: __isInternal2
      };
    };
    var setValueSrc = function setValueSrc2(config2, path, delta, srcKey) {
      return {
        type: SET_VALUE_SRC,
        path: toImmutableList(path),
        delta,
        srcKey,
        config: config2
      };
    };
    var setOperatorOption = function setOperatorOption2(config2, path, name, value2) {
      return {
        type: SET_OPERATOR_OPTION,
        path: toImmutableList(path),
        name,
        value: value2,
        config: config2
      };
    };
    const rule$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      setField,
      setFieldSrc,
      setOperator,
      setOperatorOption,
      setValue,
      setValueSrc
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$j(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$j(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$j(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$j(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var Utils$1 = _objectSpread$j(_objectSpread$j(_objectSpread$j(_objectSpread$j({}, BasicUtils), Export), Import), {}, {
      ConfigMixins
    });
    const context = /* @__PURE__ */ React$4.createContext();
    function formatProdErrorMessage(code) {
      return "Minified Redux error #" + code + "; visit https://redux.js.org/Errors?code=" + code + " for the full message or use the non-minified dev environment for full errors. ";
    }
    var $$observable = function() {
      return typeof Symbol === "function" && Symbol.observable || "@@observable";
    }();
    var randomString = function randomString2() {
      return Math.random().toString(36).substring(7).split("").join(".");
    };
    var ActionTypes = {
      INIT: "@@redux/INIT" + randomString(),
      REPLACE: "@@redux/REPLACE" + randomString(),
      PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
        return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
      }
    };
    function isPlainObject(obj) {
      if (typeof obj !== "object" || obj === null)
        return false;
      var proto2 = obj;
      while (Object.getPrototypeOf(proto2) !== null) {
        proto2 = Object.getPrototypeOf(proto2);
      }
      return Object.getPrototypeOf(obj) === proto2;
    }
    function createStore(reducer, preloadedState, enhancer) {
      var _ref2;
      if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
        throw new Error(formatProdErrorMessage(0));
      }
      if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
        enhancer = preloadedState;
        preloadedState = void 0;
      }
      if (typeof enhancer !== "undefined") {
        if (typeof enhancer !== "function") {
          throw new Error(formatProdErrorMessage(1));
        }
        return enhancer(createStore)(reducer, preloadedState);
      }
      if (typeof reducer !== "function") {
        throw new Error(formatProdErrorMessage(2));
      }
      var currentReducer = reducer;
      var currentState = preloadedState;
      var currentListeners = [];
      var nextListeners = currentListeners;
      var isDispatching = false;
      function ensureCanMutateNextListeners() {
        if (nextListeners === currentListeners) {
          nextListeners = currentListeners.slice();
        }
      }
      function getState() {
        if (isDispatching) {
          throw new Error(formatProdErrorMessage(3));
        }
        return currentState;
      }
      function subscribe(listener) {
        if (typeof listener !== "function") {
          throw new Error(formatProdErrorMessage(4));
        }
        if (isDispatching) {
          throw new Error(formatProdErrorMessage(5));
        }
        var isSubscribed = true;
        ensureCanMutateNextListeners();
        nextListeners.push(listener);
        return function unsubscribe() {
          if (!isSubscribed) {
            return;
          }
          if (isDispatching) {
            throw new Error(formatProdErrorMessage(6));
          }
          isSubscribed = false;
          ensureCanMutateNextListeners();
          var index = nextListeners.indexOf(listener);
          nextListeners.splice(index, 1);
          currentListeners = null;
        };
      }
      function dispatch(action) {
        if (!isPlainObject(action)) {
          throw new Error(formatProdErrorMessage(7));
        }
        if (typeof action.type === "undefined") {
          throw new Error(formatProdErrorMessage(8));
        }
        if (isDispatching) {
          throw new Error(formatProdErrorMessage(9));
        }
        try {
          isDispatching = true;
          currentState = currentReducer(currentState, action);
        } finally {
          isDispatching = false;
        }
        var listeners = currentListeners = nextListeners;
        for (var i = 0; i < listeners.length; i++) {
          var listener = listeners[i];
          listener();
        }
        return action;
      }
      function replaceReducer(nextReducer) {
        if (typeof nextReducer !== "function") {
          throw new Error(formatProdErrorMessage(10));
        }
        currentReducer = nextReducer;
        dispatch({
          type: ActionTypes.REPLACE
        });
      }
      function observable() {
        var _ref;
        var outerSubscribe = subscribe;
        return _ref = {
          /**
           * The minimal observable subscription method.
           * @param {Object} observer Any object that can be used as an observer.
           * The observer object should have a `next` method.
           * @returns {subscription} An object with an `unsubscribe` method that can
           * be used to unsubscribe the observable from the store, and prevent further
           * emission of values from the observable.
           */
          subscribe: function subscribe2(observer) {
            if (typeof observer !== "object" || observer === null) {
              throw new Error(formatProdErrorMessage(11));
            }
            function observeState() {
              if (observer.next) {
                observer.next(getState());
              }
            }
            observeState();
            var unsubscribe = outerSubscribe(observeState);
            return {
              unsubscribe
            };
          }
        }, _ref[$$observable] = function() {
          return this;
        }, _ref;
      }
      dispatch({
        type: ActionTypes.INIT
      });
      return _ref2 = {
        dispatch,
        subscribe,
        getState,
        replaceReducer
      }, _ref2[$$observable] = observable, _ref2;
    }
    var ReactReduxContext = /* @__PURE__ */ React$4.createContext(null);
    function defaultNoopBatch(callback) {
      callback();
    }
    var batch = defaultNoopBatch;
    var setBatch = function setBatch2(newBatch) {
      return batch = newBatch;
    };
    var getBatch = function getBatch2() {
      return batch;
    };
    function createListenerCollection() {
      var batch2 = getBatch();
      var first = null;
      var last2 = null;
      return {
        clear: function clear() {
          first = null;
          last2 = null;
        },
        notify: function notify() {
          batch2(function() {
            var listener = first;
            while (listener) {
              listener.callback();
              listener = listener.next;
            }
          });
        },
        get: function get2() {
          var listeners = [];
          var listener = first;
          while (listener) {
            listeners.push(listener);
            listener = listener.next;
          }
          return listeners;
        },
        subscribe: function subscribe(callback) {
          var isSubscribed = true;
          var listener = last2 = {
            callback,
            next: null,
            prev: last2
          };
          if (listener.prev) {
            listener.prev.next = listener;
          } else {
            first = listener;
          }
          return function unsubscribe() {
            if (!isSubscribed || first === null)
              return;
            isSubscribed = false;
            if (listener.next) {
              listener.next.prev = listener.prev;
            } else {
              last2 = listener.prev;
            }
            if (listener.prev) {
              listener.prev.next = listener.next;
            } else {
              first = listener.next;
            }
          };
        }
      };
    }
    var nullListeners = {
      notify: function notify() {
      },
      get: function get2() {
        return [];
      }
    };
    function createSubscription(store, parentSub) {
      var unsubscribe;
      var listeners = nullListeners;
      function addNestedSub(listener) {
        trySubscribe();
        return listeners.subscribe(listener);
      }
      function notifyNestedSubs() {
        listeners.notify();
      }
      function handleChangeWrapper() {
        if (subscription.onStateChange) {
          subscription.onStateChange();
        }
      }
      function isSubscribed() {
        return Boolean(unsubscribe);
      }
      function trySubscribe() {
        if (!unsubscribe) {
          unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
          listeners = createListenerCollection();
        }
      }
      function tryUnsubscribe() {
        if (unsubscribe) {
          unsubscribe();
          unsubscribe = void 0;
          listeners.clear();
          listeners = nullListeners;
        }
      }
      var subscription = {
        addNestedSub,
        notifyNestedSubs,
        handleChangeWrapper,
        isSubscribed,
        trySubscribe,
        tryUnsubscribe,
        getListeners: function getListeners() {
          return listeners;
        }
      };
      return subscription;
    }
    var useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
    function Provider(_ref) {
      var store = _ref.store, context2 = _ref.context, children = _ref.children;
      var contextValue = reactExports.useMemo(function() {
        var subscription = createSubscription(store);
        return {
          store,
          subscription
        };
      }, [store]);
      var previousState = reactExports.useMemo(function() {
        return store.getState();
      }, [store]);
      useIsomorphicLayoutEffect(function() {
        var subscription = contextValue.subscription;
        subscription.onStateChange = subscription.notifyNestedSubs;
        subscription.trySubscribe();
        if (previousState !== store.getState()) {
          subscription.notifyNestedSubs();
        }
        return function() {
          subscription.tryUnsubscribe();
          subscription.onStateChange = null;
        };
      }, [contextValue, previousState]);
      var Context = context2 || ReactReduxContext;
      return /* @__PURE__ */ React$4.createElement(Context.Provider, {
        value: contextValue
      }, children);
    }
    var reactIs = { exports: {} };
    var reactIs_production_min = {};
    /** @license React v17.0.2
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b = 60103, c = 60106, d = 60107, e = 60108, f = 60114, g = 60109, h = 60110, k = 60112, l = 60113, m = 60120, n = 60115, p = 60116, q = 60121, r = 60122, u = 60117, v = 60129, w = 60131;
    if ("function" === typeof Symbol && Symbol.for) {
      var x = Symbol.for;
      b = x("react.element");
      c = x("react.portal");
      d = x("react.fragment");
      e = x("react.strict_mode");
      f = x("react.profiler");
      g = x("react.provider");
      h = x("react.context");
      k = x("react.forward_ref");
      l = x("react.suspense");
      m = x("react.suspense_list");
      n = x("react.memo");
      p = x("react.lazy");
      q = x("react.block");
      r = x("react.server.block");
      u = x("react.fundamental");
      v = x("react.debug_trace_mode");
      w = x("react.legacy_hidden");
    }
    function y(a) {
      if ("object" === typeof a && null !== a) {
        var t2 = a.$$typeof;
        switch (t2) {
          case b:
            switch (a = a.type, a) {
              case d:
              case f:
              case e:
              case l:
              case m:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case h:
                  case k:
                  case p:
                  case n:
                  case g:
                    return a;
                  default:
                    return t2;
                }
            }
          case c:
            return t2;
        }
      }
    }
    var z = g, A = b, B = k, C = d, D = p, E = n, F = c, G = f, H = e, I = l;
    reactIs_production_min.ContextConsumer = h;
    reactIs_production_min.ContextProvider = z;
    reactIs_production_min.Element = A;
    reactIs_production_min.ForwardRef = B;
    reactIs_production_min.Fragment = C;
    reactIs_production_min.Lazy = D;
    reactIs_production_min.Memo = E;
    reactIs_production_min.Portal = F;
    reactIs_production_min.Profiler = G;
    reactIs_production_min.StrictMode = H;
    reactIs_production_min.Suspense = I;
    reactIs_production_min.isAsyncMode = function() {
      return false;
    };
    reactIs_production_min.isConcurrentMode = function() {
      return false;
    };
    reactIs_production_min.isContextConsumer = function(a) {
      return y(a) === h;
    };
    reactIs_production_min.isContextProvider = function(a) {
      return y(a) === g;
    };
    reactIs_production_min.isElement = function(a) {
      return "object" === typeof a && null !== a && a.$$typeof === b;
    };
    reactIs_production_min.isForwardRef = function(a) {
      return y(a) === k;
    };
    reactIs_production_min.isFragment = function(a) {
      return y(a) === d;
    };
    reactIs_production_min.isLazy = function(a) {
      return y(a) === p;
    };
    reactIs_production_min.isMemo = function(a) {
      return y(a) === n;
    };
    reactIs_production_min.isPortal = function(a) {
      return y(a) === c;
    };
    reactIs_production_min.isProfiler = function(a) {
      return y(a) === f;
    };
    reactIs_production_min.isStrictMode = function(a) {
      return y(a) === e;
    };
    reactIs_production_min.isSuspense = function(a) {
      return y(a) === l;
    };
    reactIs_production_min.isValidElementType = function(a) {
      return "string" === typeof a || "function" === typeof a || a === d || a === f || a === v || a === e || a === l || a === m || a === w || "object" === typeof a && null !== a && (a.$$typeof === p || a.$$typeof === n || a.$$typeof === g || a.$$typeof === h || a.$$typeof === k || a.$$typeof === u || a.$$typeof === q || a[0] === r) ? true : false;
    };
    reactIs_production_min.typeOf = y;
    {
      reactIs.exports = reactIs_production_min;
    }
    var reactIsExports = reactIs.exports;
    var _excluded$G = ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"], _excluded2$2 = ["reactReduxForwardedRef"];
    var EMPTY_ARRAY = [];
    var NO_SUBSCRIPTION_ARRAY = [null, null];
    function storeStateUpdatesReducer(state, action) {
      var updateCount = state[1];
      return [action.payload, updateCount + 1];
    }
    function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
      useIsomorphicLayoutEffect(function() {
        return effectFunc.apply(void 0, effectArgs);
      }, dependencies);
    }
    function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
      lastWrapperProps.current = wrapperProps;
      lastChildProps.current = actualChildProps;
      renderIsScheduled.current = false;
      if (childPropsFromStoreUpdate.current) {
        childPropsFromStoreUpdate.current = null;
        notifyNestedSubs();
      }
    }
    function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
      if (!shouldHandleStateChanges)
        return;
      var didUnsubscribe = false;
      var lastThrownError = null;
      var checkForUpdates = function checkForUpdates2() {
        if (didUnsubscribe) {
          return;
        }
        var latestStoreState = store.getState();
        var newChildProps, error;
        try {
          newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
        } catch (e2) {
          error = e2;
          lastThrownError = e2;
        }
        if (!error) {
          lastThrownError = null;
        }
        if (newChildProps === lastChildProps.current) {
          if (!renderIsScheduled.current) {
            notifyNestedSubs();
          }
        } else {
          lastChildProps.current = newChildProps;
          childPropsFromStoreUpdate.current = newChildProps;
          renderIsScheduled.current = true;
          forceComponentUpdateDispatch({
            type: "STORE_UPDATED",
            payload: {
              error
            }
          });
        }
      };
      subscription.onStateChange = checkForUpdates;
      subscription.trySubscribe();
      checkForUpdates();
      var unsubscribeWrapper = function unsubscribeWrapper2() {
        didUnsubscribe = true;
        subscription.tryUnsubscribe();
        subscription.onStateChange = null;
        if (lastThrownError) {
          throw lastThrownError;
        }
      };
      return unsubscribeWrapper;
    }
    var initStateUpdates = function initStateUpdates2() {
      return [null, 0];
    };
    function connectAdvanced(selectorFactory, _ref) {
      if (_ref === void 0) {
        _ref = {};
      }
      var _ref2 = _ref, _ref2$getDisplayName = _ref2.getDisplayName, getDisplayName = _ref2$getDisplayName === void 0 ? function(name) {
        return "ConnectAdvanced(" + name + ")";
      } : _ref2$getDisplayName, _ref2$methodName = _ref2.methodName, methodName = _ref2$methodName === void 0 ? "connectAdvanced" : _ref2$methodName, _ref2$renderCountProp = _ref2.renderCountProp, renderCountProp = _ref2$renderCountProp === void 0 ? void 0 : _ref2$renderCountProp, _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges, shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta, _ref2$storeKey = _ref2.storeKey, storeKey = _ref2$storeKey === void 0 ? "store" : _ref2$storeKey;
      _ref2.withRef;
      var _ref2$forwardRef = _ref2.forwardRef, forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef, _ref2$context = _ref2.context, context2 = _ref2$context === void 0 ? ReactReduxContext : _ref2$context, connectOptions = _objectWithoutPropertiesLoose(_ref2, _excluded$G);
      var Context = context2;
      return function wrapWithConnect(WrappedComponent) {
        var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
        var displayName = getDisplayName(wrappedComponentName);
        var selectorFactoryOptions = _extends$1({}, connectOptions, {
          getDisplayName,
          methodName,
          renderCountProp,
          shouldHandleStateChanges,
          storeKey,
          displayName,
          wrappedComponentName,
          WrappedComponent
        });
        var pure = connectOptions.pure;
        function createChildSelector(store) {
          return selectorFactory(store.dispatch, selectorFactoryOptions);
        }
        var usePureOnlyMemo = pure ? reactExports.useMemo : function(callback) {
          return callback();
        };
        function ConnectFunction(props) {
          var _useMemo = reactExports.useMemo(function() {
            var reactReduxForwardedRef2 = props.reactReduxForwardedRef, wrapperProps2 = _objectWithoutPropertiesLoose(props, _excluded2$2);
            return [props.context, reactReduxForwardedRef2, wrapperProps2];
          }, [props]), propsContext = _useMemo[0], reactReduxForwardedRef = _useMemo[1], wrapperProps = _useMemo[2];
          var ContextToUse = reactExports.useMemo(function() {
            return propsContext && propsContext.Consumer && reactIsExports.isContextConsumer(/* @__PURE__ */ React$4.createElement(propsContext.Consumer, null)) ? propsContext : Context;
          }, [propsContext, Context]);
          var contextValue = reactExports.useContext(ContextToUse);
          var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
          Boolean(contextValue) && Boolean(contextValue.store);
          var store = didStoreComeFromProps ? props.store : contextValue.store;
          var childPropsSelector = reactExports.useMemo(function() {
            return createChildSelector(store);
          }, [store]);
          var _useMemo2 = reactExports.useMemo(function() {
            if (!shouldHandleStateChanges)
              return NO_SUBSCRIPTION_ARRAY;
            var subscription2 = createSubscription(store, didStoreComeFromProps ? null : contextValue.subscription);
            var notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);
            return [subscription2, notifyNestedSubs2];
          }, [store, didStoreComeFromProps, contextValue]), subscription = _useMemo2[0], notifyNestedSubs = _useMemo2[1];
          var overriddenContextValue = reactExports.useMemo(function() {
            if (didStoreComeFromProps) {
              return contextValue;
            }
            return _extends$1({}, contextValue, {
              subscription
            });
          }, [didStoreComeFromProps, contextValue, subscription]);
          var _useReducer = reactExports.useReducer(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates), _useReducer$ = _useReducer[0], previousStateUpdateResult = _useReducer$[0], forceComponentUpdateDispatch = _useReducer[1];
          if (previousStateUpdateResult && previousStateUpdateResult.error) {
            throw previousStateUpdateResult.error;
          }
          var lastChildProps = reactExports.useRef();
          var lastWrapperProps = reactExports.useRef(wrapperProps);
          var childPropsFromStoreUpdate = reactExports.useRef();
          var renderIsScheduled = reactExports.useRef(false);
          var actualChildProps = usePureOnlyMemo(function() {
            if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
              return childPropsFromStoreUpdate.current;
            }
            return childPropsSelector(store.getState(), wrapperProps);
          }, [store, previousStateUpdateResult, wrapperProps]);
          useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]);
          useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]);
          var renderedWrappedComponent = reactExports.useMemo(function() {
            return /* @__PURE__ */ React$4.createElement(WrappedComponent, _extends$1({}, actualChildProps, {
              ref: reactReduxForwardedRef
            }));
          }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);
          var renderedChild = reactExports.useMemo(function() {
            if (shouldHandleStateChanges) {
              return /* @__PURE__ */ React$4.createElement(ContextToUse.Provider, {
                value: overriddenContextValue
              }, renderedWrappedComponent);
            }
            return renderedWrappedComponent;
          }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
          return renderedChild;
        }
        var Connect = pure ? React$4.memo(ConnectFunction) : ConnectFunction;
        Connect.WrappedComponent = WrappedComponent;
        Connect.displayName = ConnectFunction.displayName = displayName;
        if (forwardRef) {
          var forwarded = React$4.forwardRef(function forwardConnectRef(props, ref) {
            return /* @__PURE__ */ React$4.createElement(Connect, _extends$1({}, props, {
              reactReduxForwardedRef: ref
            }));
          });
          forwarded.displayName = displayName;
          forwarded.WrappedComponent = WrappedComponent;
          return hoistStatics(forwarded, WrappedComponent);
        }
        return hoistStatics(Connect, WrappedComponent);
      };
    }
    function is(x2, y2) {
      if (x2 === y2) {
        return x2 !== 0 || y2 !== 0 || 1 / x2 === 1 / y2;
      } else {
        return x2 !== x2 && y2 !== y2;
      }
    }
    function shallowEqual$1(objA, objB) {
      if (is(objA, objB))
        return true;
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length)
        return false;
      for (var i = 0; i < keysA.length; i++) {
        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }
      return true;
    }
    function bindActionCreators$1(actionCreators, dispatch) {
      var boundActionCreators = {};
      var _loop = function _loop2(key2) {
        var actionCreator = actionCreators[key2];
        if (typeof actionCreator === "function") {
          boundActionCreators[key2] = function() {
            return dispatch(actionCreator.apply(void 0, arguments));
          };
        }
      };
      for (var key in actionCreators) {
        _loop(key);
      }
      return boundActionCreators;
    }
    function wrapMapToPropsConstant(getConstant) {
      return function initConstantSelector(dispatch, options) {
        var constant2 = getConstant(dispatch, options);
        function constantSelector() {
          return constant2;
        }
        constantSelector.dependsOnOwnProps = false;
        return constantSelector;
      };
    }
    function getDependsOnOwnProps(mapToProps) {
      return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== void 0 ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
    }
    function wrapMapToPropsFunc(mapToProps, methodName) {
      return function initProxySelector(dispatch, _ref) {
        _ref.displayName;
        var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
          return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
        };
        proxy.dependsOnOwnProps = true;
        proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
          proxy.mapToProps = mapToProps;
          proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
          var props = proxy(stateOrDispatch, ownProps);
          if (typeof props === "function") {
            proxy.mapToProps = props;
            proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
            props = proxy(stateOrDispatch, ownProps);
          }
          return props;
        };
        return proxy;
      };
    }
    function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
      return typeof mapDispatchToProps === "function" ? wrapMapToPropsFunc(mapDispatchToProps) : void 0;
    }
    function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
      return !mapDispatchToProps ? wrapMapToPropsConstant(function(dispatch) {
        return {
          dispatch
        };
      }) : void 0;
    }
    function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
      return mapDispatchToProps && typeof mapDispatchToProps === "object" ? wrapMapToPropsConstant(function(dispatch) {
        return bindActionCreators$1(mapDispatchToProps, dispatch);
      }) : void 0;
    }
    const defaultMapDispatchToPropsFactories = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
    function whenMapStateToPropsIsFunction(mapStateToProps) {
      return typeof mapStateToProps === "function" ? wrapMapToPropsFunc(mapStateToProps) : void 0;
    }
    function whenMapStateToPropsIsMissing(mapStateToProps) {
      return !mapStateToProps ? wrapMapToPropsConstant(function() {
        return {};
      }) : void 0;
    }
    const defaultMapStateToPropsFactories = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];
    function defaultMergeProps(stateProps, dispatchProps, ownProps) {
      return _extends$1({}, ownProps, stateProps, dispatchProps);
    }
    function wrapMergePropsFunc(mergeProps) {
      return function initMergePropsProxy(dispatch, _ref) {
        _ref.displayName;
        var pure = _ref.pure, areMergedPropsEqual = _ref.areMergedPropsEqual;
        var hasRunOnce = false;
        var mergedProps;
        return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
          var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
          if (hasRunOnce) {
            if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps))
              mergedProps = nextMergedProps;
          } else {
            hasRunOnce = true;
            mergedProps = nextMergedProps;
          }
          return mergedProps;
        };
      };
    }
    function whenMergePropsIsFunction(mergeProps) {
      return typeof mergeProps === "function" ? wrapMergePropsFunc(mergeProps) : void 0;
    }
    function whenMergePropsIsOmitted(mergeProps) {
      return !mergeProps ? function() {
        return defaultMergeProps;
      } : void 0;
    }
    const defaultMergePropsFactories = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
    var _excluded$F = ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"];
    function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
      return function impureFinalPropsSelector(state, ownProps) {
        return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
      };
    }
    function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
      var areStatesEqual = _ref.areStatesEqual, areOwnPropsEqual = _ref.areOwnPropsEqual, areStatePropsEqual = _ref.areStatePropsEqual;
      var hasRunAtLeastOnce = false;
      var state;
      var ownProps;
      var stateProps;
      var dispatchProps;
      var mergedProps;
      function handleFirstCall(firstState, firstOwnProps) {
        state = firstState;
        ownProps = firstOwnProps;
        stateProps = mapStateToProps(state, ownProps);
        dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        hasRunAtLeastOnce = true;
        return mergedProps;
      }
      function handleNewPropsAndNewState() {
        stateProps = mapStateToProps(state, ownProps);
        if (mapDispatchToProps.dependsOnOwnProps)
          dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }
      function handleNewProps() {
        if (mapStateToProps.dependsOnOwnProps)
          stateProps = mapStateToProps(state, ownProps);
        if (mapDispatchToProps.dependsOnOwnProps)
          dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }
      function handleNewState() {
        var nextStateProps = mapStateToProps(state, ownProps);
        var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
        stateProps = nextStateProps;
        if (statePropsChanged)
          mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }
      function handleSubsequentCalls(nextState, nextOwnProps) {
        var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
        var stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);
        state = nextState;
        ownProps = nextOwnProps;
        if (propsChanged && stateChanged)
          return handleNewPropsAndNewState();
        if (propsChanged)
          return handleNewProps();
        if (stateChanged)
          return handleNewState();
        return mergedProps;
      }
      return function pureFinalPropsSelector(nextState, nextOwnProps) {
        return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
      };
    }
    function finalPropsSelectorFactory(dispatch, _ref2) {
      var initMapStateToProps = _ref2.initMapStateToProps, initMapDispatchToProps = _ref2.initMapDispatchToProps, initMergeProps = _ref2.initMergeProps, options = _objectWithoutPropertiesLoose(_ref2, _excluded$F);
      var mapStateToProps = initMapStateToProps(dispatch, options);
      var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
      var mergeProps = initMergeProps(dispatch, options);
      var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
      return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
    }
    var _excluded$E = ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"];
    function match(arg, factories, name) {
      for (var i = factories.length - 1; i >= 0; i--) {
        var result = factories[i](arg);
        if (result)
          return result;
      }
      return function(dispatch, options) {
        throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
      };
    }
    function strictEqual(a, b2) {
      return a === b2;
    }
    function createConnect(_temp) {
      var _ref = _temp === void 0 ? {} : _temp, _ref$connectHOC = _ref.connectHOC, connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC, _ref$mapStateToPropsF = _ref.mapStateToPropsFactories, mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? defaultMapStateToPropsFactories : _ref$mapStateToPropsF, _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories, mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? defaultMapDispatchToPropsFactories : _ref$mapDispatchToPro, _ref$mergePropsFactor = _ref.mergePropsFactories, mergePropsFactories = _ref$mergePropsFactor === void 0 ? defaultMergePropsFactories : _ref$mergePropsFactor, _ref$selectorFactory = _ref.selectorFactory, selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;
      return function connect2(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
        if (_ref2 === void 0) {
          _ref2 = {};
        }
        var _ref3 = _ref2, _ref3$pure = _ref3.pure, pure = _ref3$pure === void 0 ? true : _ref3$pure, _ref3$areStatesEqual = _ref3.areStatesEqual, areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual, _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual, areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual$1 : _ref3$areOwnPropsEqua, _ref3$areStatePropsEq = _ref3.areStatePropsEqual, areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual$1 : _ref3$areStatePropsEq, _ref3$areMergedPropsE = _ref3.areMergedPropsEqual, areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual$1 : _ref3$areMergedPropsE, extraOptions = _objectWithoutPropertiesLoose(_ref3, _excluded$E);
        var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, "mapStateToProps");
        var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, "mapDispatchToProps");
        var initMergeProps = match(mergeProps, mergePropsFactories, "mergeProps");
        return connectHOC(selectorFactory, _extends$1({
          // used in error messages
          methodName: "connect",
          // used to compute Connect's displayName from the wrapped component's displayName.
          getDisplayName: function getDisplayName(name) {
            return "Connect(" + name + ")";
          },
          // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
          shouldHandleStateChanges: Boolean(mapStateToProps),
          // passed through to selectorFactory
          initMapStateToProps,
          initMapDispatchToProps,
          initMergeProps,
          pure,
          areStatesEqual,
          areOwnPropsEqual,
          areStatePropsEqual,
          areMergedPropsEqual
        }, extraOptions));
      };
    }
    const connect = /* @__PURE__ */ createConnect();
    setBatch(reactDomExports.unstable_batchedUpdates);
    var PLACEMENT_AFTER = "after";
    var PLACEMENT_BEFORE = "before";
    var PLACEMENT_APPEND = "append";
    var PLACEMENT_PREPEND = "prepend";
    var SET_DRAG_PROGRESS = "SET_DRAG_PROGRESS";
    var SET_DRAG_START = "SET_DRAG_START";
    var SET_DRAG_END = "SET_DRAG_END";
    var setDragProgress = function setDragProgress2(mousePos, dragging) {
      return {
        type: SET_DRAG_PROGRESS,
        mousePos,
        dragging
      };
    };
    var setDragStart = function setDragStart2(dragStart, dragging, mousePos) {
      return {
        type: SET_DRAG_START,
        dragStart,
        dragging,
        mousePos
      };
    };
    var setDragEnd = function setDragEnd2() {
      return {
        type: SET_DRAG_END
      };
    };
    var tree = tree$1, group = group$1, rule = rule$1;
    function _createForOfIteratorHelper$1(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$1(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$1(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$1(o, minLen);
    }
    function _arrayLikeToArray$1(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    var _Utils$ConfigUtils$7 = Utils$1.ConfigUtils, extendConfig = _Utils$ConfigUtils$7.extendConfig, configKeys = _Utils$ConfigUtils$7.configKeys;
    var pickConfig = function pickConfig2(props) {
      return pick$1(props, configKeys);
    };
    var createConfigMemo = function createConfigMemo2() {
      var configStore = /* @__PURE__ */ new Map();
      var maxSize = 2;
      var configId = 0;
      var extendAndStore = function extendAndStore2(config2) {
        var extendedConfig = extendConfig(config2, ++configId);
        if (configStore.size + 1 > maxSize) {
          configStore["delete"](configStore.keys()[0]);
        }
        configStore.set(config2, extendedConfig);
        return extendedConfig;
      };
      var findBasic = function findBasic2(findConfig) {
        var _iterator = _createForOfIteratorHelper$1(configStore.keys()), _step;
        try {
          var _loop = function _loop2() {
            var basicConfig = _step.value;
            var extConfig = configStore.get(basicConfig);
            var found = configKeys.map(function(k2) {
              return extConfig[k2] === findConfig[k2];
            }).filter(function(v2) {
              return !v2;
            }).length === 0;
            if (found) {
              return {
                v: basicConfig
              };
            }
          };
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _ret = _loop();
            if (_typeof$1(_ret) === "object")
              return _ret.v;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return findConfig;
      };
      var findExtended = function findExtended2(findConfig) {
        var _iterator2 = _createForOfIteratorHelper$1(configStore.keys()), _step2;
        try {
          var _loop2 = function _loop22() {
            var savedConfig = _step2.value;
            var found = configKeys.map(function(k2) {
              return savedConfig[k2] === findConfig[k2];
            }).filter(function(v2) {
              return !v2;
            }).length === 0;
            if (found) {
              return {
                v: configStore.get(savedConfig)
              };
            }
          };
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _ret2 = _loop2();
            if (_typeof$1(_ret2) === "object")
              return _ret2.v;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        var _iterator3 = _createForOfIteratorHelper$1(configStore.values()), _step3;
        try {
          var _loop3 = function _loop32() {
            var extendedConfig = _step3.value;
            var found = configKeys.map(function(k2) {
              return extendedConfig[k2] === findConfig[k2];
            }).filter(function(v2) {
              return !v2;
            }).length === 0;
            if (found) {
              return {
                v: extendedConfig
              };
            }
          };
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
            var _ret3 = _loop3();
            if (_typeof$1(_ret3) === "object")
              return _ret3.v;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        return null;
      };
      var findOrExtend = function findOrExtend2(config2) {
        return findExtended(config2) || extendAndStore(config2);
      };
      return {
        getExtended: function getExtended(props) {
          return findOrExtend(pickConfig(props));
        },
        getBasic: findBasic
      };
    };
    var defaultValue = function defaultValue2(value2, _default2) {
      return typeof value2 === "undefined" ? _default2 : value2;
    };
    var truncateString = function truncateString2(str, n2, useWordBoundary) {
      if (!n2 || str.length <= n2) {
        return str;
      }
      var subString = str.substr(0, n2 - 1);
      return (useWordBoundary ? subString.substr(0, subString.lastIndexOf(" ")) : subString) + "...";
    };
    var immutableEqual = function immutableEqual2(v1, v2) {
      if (v1 === v2) {
        return true;
      } else {
        return v1.equals(v2);
      }
    };
    var shallowEqual = function shallowEqual2(a, b2) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (a === b2) {
        return true;
      } else if (Array.isArray(a))
        return shallowEqualArrays(a, b2, deep);
      else if (a && typeof a.equals === "function")
        return a.equals(b2);
      else if (_typeof$1(a) === "object")
        return shallowEqualObjects(a, b2, deep);
      else
        return a === b2;
    };
    function shallowEqualArrays(arrA, arrB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (arrA === arrB) {
        return true;
      }
      if (!arrA || !arrB) {
        return false;
      }
      var len = arrA.length;
      if (arrB.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var isEqual = deep ? shallowEqual(arrA[i], arrB[i], deep) : arrA[i] === arrB[i];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    function shallowEqualObjects(objA, objB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (objA === objB) {
        return true;
      }
      if (!objA || !objB) {
        return false;
      }
      var aKeys = Object.keys(objA);
      var bKeys = Object.keys(objB);
      var len = aKeys.length;
      if (bKeys.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var key = aKeys[i];
        var isEqual = deep ? shallowEqual(objA[key], objB[key], deep) : objA[key] === objB[key];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    var isDev = function isDev2() {
      return typeof process !== "undefined" && process.env && false;
    };
    var getLogger = function getLogger2() {
      var devMode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var verbose = devMode != void 0 ? devMode : isDev();
      return verbose ? console : {
        error: function error() {
        },
        log: function log() {
        },
        warn: function warn2() {
        },
        debug: function debug() {
        },
        info: function info() {
        }
      };
    };
    var logger = getLogger();
    var validateAndFixTree = Utils$1.validateAndFixTree;
    var createValidationMemo = function createValidationMemo2() {
      var originalTree;
      var validatedTree;
      var configId;
      return function(config2, tree2) {
        var oldConfig = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
        var sanitizeTree = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
        if (!tree2) {
          return null;
        }
        if (config2.__configId === configId && (immutableEqual(tree2, originalTree) || immutableEqual(tree2, validatedTree))) {
          return validatedTree;
        } else {
          configId = config2.__configId;
          originalTree = tree2;
          if (sanitizeTree === false) {
            validatedTree = validateAndFixTree(tree2, null, config2, oldConfig || config2, false, false);
          } else {
            validatedTree = validateAndFixTree(tree2, null, config2, oldConfig || config2);
          }
          return validatedTree;
        }
      };
    };
    var getReactContainerType = function getReactContainerType2(el) {
      if (el._reactRootContainer) {
        return "root";
      }
      if (Object.getOwnPropertyNames(el).filter(function(k2) {
        return k2.startsWith("__reactContainer");
      }).length > 0) {
        return "container";
      }
      return void 0;
    };
    var getReactRootNodeType = function getReactRootNodeType2(node2) {
      if (!node2) {
        return void 0;
      }
      var type = getReactContainerType(node2);
      if (type !== void 0) {
        return type;
      } else {
        return getReactRootNodeType2(node2.parentNode);
      }
    };
    var isUsingLegacyReactDomRender = function isUsingLegacyReactDomRender2(node2) {
      return getReactRootNodeType(node2) === "root";
    };
    var liteShouldComponentUpdate = function liteShouldComponentUpdate2(self2, config2) {
      return function(nextProps, nextState) {
        var prevProps = self2.props;
        var prevState = self2.state;
        var should = nextProps != prevProps || nextState != prevState;
        if (should) {
          if (prevState == nextState && prevProps != nextProps) {
            var chs = [];
            for (var k2 in nextProps) {
              var changed = nextProps[k2] != prevProps[k2];
              if (changed) {
                if (config2[k2] == "ignore")
                  changed = false;
                else if (config2[k2] == "shallow_deep")
                  changed = !shallowEqual(nextProps[k2], prevProps[k2], true);
                else if (config2[k2] == "shallow")
                  changed = !shallowEqual(nextProps[k2], prevProps[k2]);
                else if (typeof config2[k2] == "function")
                  changed = config2[k2](nextProps[k2], prevProps[k2], nextState);
              }
              if (changed)
                chs.push(k2);
            }
            if (!chs.length)
              should = false;
          }
        }
        return should;
      };
    };
    var pureShouldComponentUpdate = function pureShouldComponentUpdate2(self2) {
      return function(nextProps, nextState) {
        return !shallowEqual(self2.props, nextProps) || !shallowEqual(self2.state, nextState);
      };
    };
    var canUseOldComponentWillReceiveProps = function canUseOldComponentWillReceiveProps2() {
      var v2 = React$4.version.split(".").map(parseInt.bind(null, 10));
      return v2[0] == 16 && v2[1] < 3 || v2[0] < 16;
    };
    var useOnPropsChanged = function useOnPropsChanged2(obj) {
      if (!obj.shouldComponentUpdate) {
        obj.shouldComponentUpdate = pureShouldComponentUpdate(obj);
      }
      if (canUseOldComponentWillReceiveProps()) {
        obj.componentWillReceiveProps = function(nextProps) {
          obj.onPropsChanged(nextProps);
        };
      } else {
        var origShouldComponentUpdate = obj.shouldComponentUpdate;
        var newShouldComponentUpdate = function newShouldComponentUpdate2(nextProps, nextState) {
          var shouldNotify = !shallowEqual(obj.props, nextProps);
          if (shouldNotify) {
            obj.onPropsChanged(nextProps);
          }
          var shouldUpdate = origShouldComponentUpdate.call(obj, nextProps, nextState);
          return shouldUpdate;
        };
        obj.shouldComponentUpdate = newShouldComponentUpdate.bind(obj);
      }
    };
    var bindActionCreators = function bindActionCreators2(actionCreators, config2, dispatch) {
      return mapValues$1(actionCreators, function(actionCreator) {
        return function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return dispatch(actionCreator.apply(void 0, [config2].concat(args)));
        };
      });
    };
    const ReactUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      bindActionCreators,
      isUsingLegacyReactDomRender,
      liteShouldComponentUpdate,
      pureShouldComponentUpdate,
      useOnPropsChanged
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$i(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$i(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$i(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$i(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$r(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$r();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$r() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var Query = /* @__PURE__ */ function(_Component) {
      _inherits(Query2, _Component);
      var _super = _createSuper$r(Query2);
      function Query2(props) {
        var _this;
        _classCallCheck(this, Query2);
        _this = _super.call(this, props);
        _this.shouldComponentUpdate = liteShouldComponentUpdate(_assertThisInitialized(_this), {
          tree: function tree2(nextValue) {
            if (nextValue === _this.oldValidatedTree && _this.oldValidatedTree === _this.validatedTree) {
              return false;
            }
            return true;
          }
        });
        useOnPropsChanged(_assertThisInitialized(_this));
        _this._updateActions(props);
        _this.validatedTree = props.getMemoizedTree(props.config, props.tree, void 0, props.sanitizeTree);
        _this.oldValidatedTree = _this.validatedTree;
        return _this;
      }
      _createClass(Query2, [{
        key: "_updateActions",
        value: function _updateActions(props) {
          var config2 = props.config, dispatch = props.dispatch;
          this.actions = bindActionCreators(_objectSpread$i(_objectSpread$i(_objectSpread$i({}, tree), group), rule), config2, dispatch);
        }
      }, {
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var onChange = nextProps.onChange;
          var oldConfig = this.props.config;
          var newTree = nextProps.tree;
          this.props.tree;
          var newConfig = nextProps.config;
          this.oldValidatedTree = this.validatedTree;
          this.validatedTree = newTree;
          if (oldConfig !== newConfig) {
            this._updateActions(nextProps);
            this.validatedTree = nextProps.getMemoizedTree(newConfig, newTree, oldConfig);
          }
          var validatedTreeChanged = !immutableEqual(this.validatedTree, this.oldValidatedTree);
          if (validatedTreeChanged) {
            var newBasicConfig = nextProps.getBasicConfig(newConfig);
            onChange && onChange(this.validatedTree, newBasicConfig, nextProps.__lastAction);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, renderBuilder = _this$props.renderBuilder, dispatch = _this$props.dispatch, __isInternalValueChange = _this$props.__isInternalValueChange;
          var builderProps = {
            tree: this.validatedTree,
            actions: this.actions,
            config: config2,
            dispatch,
            __isInternalValueChange
          };
          return renderBuilder(builderProps);
        }
      }]);
      return Query2;
    }(reactExports.Component);
    Query.propTypes = {
      config: PropTypes.object.isRequired,
      onChange: PropTypes.func,
      renderBuilder: PropTypes.func,
      tree: PropTypes.any
      //instanceOf(Immutable.Map)
      //dispatch: PropTypes.func.isRequired,
      //__isInternalValueChange
      //__lastAction
      //getMemoizedTree: PropTypes.func.isRequired,
      //getBasicConfig: PropTypes.func.isRequired,
      //sanitizeTree
    };
    var ConnectedQuery = connect(function(state) {
      return {
        tree: state.tree,
        __isInternalValueChange: state.__isInternalValueChange,
        __lastAction: state.__lastAction
      };
    }, null, null, {
      context
    })(Query);
    ConnectedQuery.displayName = "ConnectedQuery";
    function _createSuper$q(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$q();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$q() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var defaultRoot = Utils$1.DefaultUtils.defaultRoot;
    var QueryContainer = /* @__PURE__ */ function(_Component) {
      _inherits(QueryContainer2, _Component);
      var _super = _createSuper$q(QueryContainer2);
      function QueryContainer2(props, context2) {
        var _this;
        _classCallCheck(this, QueryContainer2);
        _this = _super.call(this, props, context2);
        _this.setLastTree = function(lastTree) {
          if (_this.prevTree) {
            _this.prevprevTree = _this.prevTree;
          }
          _this.prevTree = lastTree;
        };
        _this.shouldComponentUpdate = liteShouldComponentUpdate(_assertThisInitialized(_this), {
          value: function value2(nextValue, prevValue, state) {
            return false;
          }
        });
        useOnPropsChanged(_assertThisInitialized(_this));
        var _createConfigMemo = createConfigMemo(), getExtended = _createConfigMemo.getExtended, getBasic = _createConfigMemo.getBasic;
        _this.getMemoizedConfig = getExtended;
        _this.getBasicConfig = getBasic;
        _this.getMemoizedTree = createValidationMemo();
        var config2 = _this.getMemoizedConfig(props);
        var shouldCreateEmptyGroup = config2.settings.shouldCreateEmptyGroup;
        var canAddDefaultRule = !shouldCreateEmptyGroup;
        var emptyTree = defaultRoot(config2, canAddDefaultRule);
        var sanitizeTree = !!props.value;
        var tree2 = props.value || emptyTree;
        var validatedTree = _this.getMemoizedTree(config2, tree2, void 0, sanitizeTree);
        var reducer = TreeStore(config2, validatedTree, _this.getMemoizedTree, _this.setLastTree);
        var store = createStore(reducer);
        _this.config = config2;
        _this.state = {
          store
        };
        _this.QueryWrapper = function(pr) {
          return config2.settings.renderProvider(pr, config2.ctx);
        };
        return _this;
      }
      _createClass(QueryContainer2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var oldConfig = this.config;
          var nextConfig = this.getMemoizedConfig(nextProps);
          var isConfigChanged = oldConfig !== nextConfig;
          var storeValue = this.state.store.getState().tree;
          var isTreeChanged = !immutableEqual(nextProps.value, this.props.value) && !immutableEqual(nextProps.value, storeValue);
          var currentTree = isTreeChanged ? nextProps.value || defaultRoot(nextProps) : storeValue;
          var isTreeTrulyChanged = isTreeChanged && !immutableEqual(nextProps.value, this.prevTree) && !immutableEqual(nextProps.value, this.prevprevTree);
          this.sanitizeTree = isTreeTrulyChanged || isConfigChanged;
          if (isConfigChanged) {
            if (prevProps.settings.renderProvider !== nextProps.settings.renderProvider) {
              this.QueryWrapper = function(props) {
                return nextConfig.settings.renderProvider(props, nextConfig.ctx);
              };
            }
            this.config = nextConfig;
          }
          if (isTreeChanged || isConfigChanged) {
            var validatedTree = this.getMemoizedTree(nextConfig, currentTree, oldConfig, this.sanitizeTree);
            this.state.store.dispatch(tree.setTree(nextConfig, validatedTree));
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, renderBuilder = _this$props.renderBuilder, get_children = _this$props.get_children, onChange = _this$props.onChange;
          var store = this.state.store;
          var config2 = this.config;
          var QueryWrapper = this.QueryWrapper;
          return /* @__PURE__ */ React$4.createElement(QueryWrapper, {
            config: config2
          }, /* @__PURE__ */ React$4.createElement(Provider, {
            store,
            context
          }, /* @__PURE__ */ React$4.createElement(ConnectedQuery, {
            config: config2,
            getMemoizedTree: this.getMemoizedTree,
            getBasicConfig: this.getBasicConfig,
            sanitizeTree: this.sanitizeTree,
            onChange,
            renderBuilder: renderBuilder || get_children
          })));
        }
      }]);
      return QueryContainer2;
    }(reactExports.Component);
    QueryContainer.propTypes = {
      //config
      conjunctions: PropTypes.object.isRequired,
      fields: PropTypes.object.isRequired,
      types: PropTypes.object.isRequired,
      operators: PropTypes.object.isRequired,
      widgets: PropTypes.object.isRequired,
      settings: PropTypes.object.isRequired,
      ctx: PropTypes.object.isRequired,
      onChange: PropTypes.func,
      renderBuilder: PropTypes.func,
      value: PropTypes.any
      //instanceOf(Immutable.Map)
    };
    var classnames = { exports: {} };
    /*!
    	Copyright (c) 2018 Jed Watson.
    	Licensed under the MIT License (MIT), see
    	http://jedwatson.github.io/classnames
    */
    (function(module2) {
      (function() {
        var hasOwn = {}.hasOwnProperty;
        function classNames2() {
          var classes = [];
          for (var i = 0; i < arguments.length; i++) {
            var arg = arguments[i];
            if (!arg)
              continue;
            var argType = typeof arg;
            if (argType === "string" || argType === "number") {
              classes.push(arg);
            } else if (Array.isArray(arg)) {
              if (arg.length) {
                var inner = classNames2.apply(null, arg);
                if (inner) {
                  classes.push(inner);
                }
              }
            } else if (argType === "object") {
              if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
                classes.push(arg.toString());
                continue;
              }
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            }
          }
          return classes.join(" ");
        }
        if (module2.exports) {
          classNames2.default = classNames2;
          module2.exports = classNames2;
        } else {
          window.classNames = classNames2;
        }
      })();
    })(classnames);
    var classnamesExports = classnames.exports;
    const classNames = /* @__PURE__ */ getDefaultExportFromCjs(classnamesExports);
    function _createSuper$p(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$p();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$p() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var getFieldConfig$7 = Utils$1.ConfigUtils.getFieldConfig;
    var createRuleContainer = function createRuleContainer2(Rule2) {
      var _class;
      return _class = /* @__PURE__ */ function(_Component) {
        _inherits(RuleContainer2, _Component);
        var _super = _createSuper$p(RuleContainer2);
        function RuleContainer2(props) {
          var _this;
          _classCallCheck(this, RuleContainer2);
          _this = _super.call(this, props);
          _this.dummyFn = function() {
          };
          _this.removeSelf = function() {
            _this.props.actions.removeRule(_this.props.path);
          };
          _this.setLock = function() {
            var lock = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setLock(_this.props.path, lock);
          };
          _this.setField = function(field, asyncListValues, __isInternal2) {
            _this.props.actions.setField(_this.props.path, field, asyncListValues, __isInternal2);
          };
          _this.setFieldSrc = function(srcKey) {
            _this.props.actions.setFieldSrc(_this.props.path, srcKey);
          };
          _this.setOperator = function(operator) {
            _this.props.actions.setOperator(_this.props.path, operator);
          };
          _this.setOperatorOption = function(name, value2) {
            _this.props.actions.setOperatorOption(_this.props.path, name, value2);
          };
          _this.setValue = function(delta, value2, type, asyncListValues, __isInternal2) {
            _this.props.actions.setValue(_this.props.path, delta, value2, type, asyncListValues, __isInternal2);
          };
          _this.setValueSrc = function(delta, srcKey) {
            _this.props.actions.setValueSrc(_this.props.path, delta, srcKey);
          };
          _this.pureShouldComponentUpdate = pureShouldComponentUpdate(_assertThisInitialized(_this));
          _this.dummyFn.isDummyFn = true;
          return _this;
        }
        _createClass(RuleContainer2, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            var prevProps = this.props;
            var prevState = this.state;
            var should = this.pureShouldComponentUpdate(nextProps, nextState);
            if (should) {
              if (prevState == nextState && prevProps != nextProps) {
                var draggingId = nextProps.dragging.id || prevProps.dragging.id;
                var isDraggingMe = draggingId == nextProps.id;
                var chs = [];
                for (var k2 in nextProps) {
                  var changed = nextProps[k2] != prevProps[k2];
                  if (k2 == "dragging" && !isDraggingMe) {
                    changed = false;
                  }
                  if (changed) {
                    chs.push(k2);
                  }
                }
                if (!chs.length)
                  should = false;
              }
            }
            return should;
          }
        }, {
          key: "render",
          value: function render() {
            var isDraggingMe = this.props.dragging.id == this.props.id;
            var fieldConfig = getFieldConfig$7(this.props.config, this.props.field);
            var fieldType = this.props.fieldType || (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type) || null;
            var showErrorMessage = this.props.config.settings.showErrorMessage;
            fieldConfig && fieldConfig.type == "!struct";
            var isInDraggingTempo = !isDraggingMe && this.props.isDraggingTempo;
            var valueError = this.props.valueError;
            var oneValueError = valueError && valueError.toArray().filter(function(e2) {
              return !!e2;
            }).shift() || null;
            var hasError = oneValueError != null && showErrorMessage;
            return /* @__PURE__ */ React$4.createElement("div", {
              className: classNames("group-or-rule-container", "rule-container", hasError ? "rule-with-error" : null),
              "data-id": this.props.id
            }, [isDraggingMe ? /* @__PURE__ */ React$4.createElement(Rule2, {
              key: "dragging",
              id: this.props.id,
              groupId: this.props.groupId,
              isDraggingMe: true,
              isDraggingTempo: true,
              dragging: this.props.dragging,
              setField: this.dummyFn,
              setFieldSrc: this.dummyFn,
              setOperator: this.dummyFn,
              setOperatorOption: this.dummyFn,
              setLock: this.dummyFn,
              removeSelf: this.dummyFn,
              setValue: this.dummyFn,
              setValueSrc: this.dummyFn,
              selectedField: this.props.field || null,
              selectedFieldSrc: this.props.fieldSrc || "field",
              selectedFieldType: fieldType,
              parentField: this.props.parentField || null,
              selectedOperator: this.props.operator || null,
              value: this.props.value || null,
              valueSrc: this.props.valueSrc || null,
              valueType: this.props.valueType || null,
              valueError: this.props.valueError || null,
              operatorOptions: this.props.operatorOptions,
              config: this.props.config,
              reordableNodesCnt: this.props.reordableNodesCnt,
              totalRulesCnt: this.props.totalRulesCnt,
              asyncListValues: this.props.asyncListValues,
              isLocked: this.props.isLocked,
              isTrueLocked: this.props.isTrueLocked,
              parentReordableNodesCnt: this.props.parentReordableNodesCnt
            }) : null, /* @__PURE__ */ React$4.createElement(Rule2, {
              key: this.props.id,
              id: this.props.id,
              groupId: this.props.groupId,
              isDraggingMe,
              isDraggingTempo: isInDraggingTempo,
              onDragStart: this.props.onDragStart,
              setLock: isInDraggingTempo ? this.dummyFn : this.setLock,
              removeSelf: isInDraggingTempo ? this.dummyFn : this.removeSelf,
              setField: isInDraggingTempo ? this.dummyFn : this.setField,
              setFieldSrc: isInDraggingTempo ? this.dummyFn : this.setFieldSrc,
              setOperator: isInDraggingTempo ? this.dummyFn : this.setOperator,
              setOperatorOption: isInDraggingTempo ? this.dummyFn : this.setOperatorOption,
              setValue: isInDraggingTempo ? this.dummyFn : this.setValue,
              setValueSrc: isInDraggingTempo ? this.dummyFn : this.setValueSrc,
              selectedField: this.props.field || null,
              selectedFieldSrc: this.props.fieldSrc || "field",
              selectedFieldType: fieldType,
              parentField: this.props.parentField || null,
              selectedOperator: this.props.operator || null,
              value: this.props.value || null,
              valueSrc: this.props.valueSrc || null,
              valueType: this.props.valueType || null,
              valueError: this.props.valueError || null,
              operatorOptions: this.props.operatorOptions,
              config: this.props.config,
              reordableNodesCnt: this.props.reordableNodesCnt,
              totalRulesCnt: this.props.totalRulesCnt,
              asyncListValues: this.props.asyncListValues,
              isLocked: this.props.isLocked,
              isTrueLocked: this.props.isTrueLocked,
              parentReordableNodesCnt: this.props.parentReordableNodesCnt
            })]);
          }
        }]);
        return RuleContainer2;
      }(reactExports.Component), _class.propTypes = {
        id: PropTypes.string.isRequired,
        groupId: PropTypes.string,
        config: PropTypes.object.isRequired,
        path: PropTypes.any.isRequired,
        //instanceOf(Immutable.List)
        operator: PropTypes.string,
        field: PropTypes.any,
        fieldSrc: PropTypes.string,
        fieldType: PropTypes.string,
        actions: PropTypes.object.isRequired,
        //{removeRule: Function, setField, setFieldSrc, setOperator, setOperatorOption, setValue, setValueSrc, ...}
        onDragStart: PropTypes.func,
        value: PropTypes.any,
        //depends on widget
        valueSrc: PropTypes.any,
        asyncListValues: PropTypes.array,
        valueError: PropTypes.any,
        operatorOptions: PropTypes.object,
        reordableNodesCnt: PropTypes.number,
        parentField: PropTypes.string,
        //from RuleGroup
        isLocked: PropTypes.bool,
        isTrueLocked: PropTypes.bool,
        //connected:
        dragging: PropTypes.object,
        //{id, x, y, w, h}
        isDraggingTempo: PropTypes.bool
      }, _class;
    };
    const RuleContainer = function(Rule2) {
      var ConnectedRuleContainer = connect(function(state) {
        return {
          dragging: state.dragging
        };
      }, null, null, {
        context
      })(createRuleContainer(Rule2));
      ConnectedRuleContainer.displayName = "ConnectedRuleContainer";
      return ConnectedRuleContainer;
    };
    function _createSuper$o(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$o();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$o() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var clone$2 = Utils$1.clone;
    var getFlatTree = Utils$1.TreeUtils.getFlatTree;
    var _isReorderingTree = false;
    var createSortableContainer = function createSortableContainer2(Builder2) {
      var _class;
      var CanMoveFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      return _class = /* @__PURE__ */ function(_Component) {
        _inherits(SortableContainer2, _Component);
        var _super = _createSuper$o(SortableContainer2);
        function SortableContainer2(props) {
          var _this;
          _classCallCheck(this, SortableContainer2);
          _this = _super.call(this, props);
          _this._getEventTarget = function(e2, dragStart) {
            return e2 && e2.__mocked_window || document.body || window;
          };
          _this.onDragStart = function(id2, dom, e2) {
            var treeEl = dom.closest(".query-builder");
            if (_this._isUsingLegacyReactDomRender === void 0) {
              _this._isUsingLegacyReactDomRender = isUsingLegacyReactDomRender(treeEl);
            }
            document.body.classList.add("qb-dragging");
            treeEl.classList.add("qb-dragging");
            var treeElContainer = treeEl.closest(".query-builder-container") || treeEl;
            treeElContainer = _this._getScrollParent(treeElContainer) || document.body;
            var scrollTop = treeElContainer.scrollTop;
            _this._getDraggableNodeEl(treeEl);
            _this._getPlaceholderNodeEl(treeEl);
            var tmpAllGroups = treeEl.querySelectorAll(".group--children");
            var anyGroup = tmpAllGroups.length ? tmpAllGroups[0] : null;
            var groupPadding;
            if (anyGroup) {
              groupPadding = window.getComputedStyle(anyGroup, null).getPropertyValue("padding-left");
              groupPadding = parseInt(groupPadding);
            }
            var dragging = {
              id: id2,
              x: dom.offsetLeft,
              y: dom.offsetTop,
              w: dom.offsetWidth,
              h: dom.offsetHeight,
              itemInfo: _this.tree.items[id2],
              paddingLeft: groupPadding
            };
            var dragStart = {
              id: id2,
              x: dom.offsetLeft,
              y: dom.offsetTop,
              scrollTop,
              clientX: e2.clientX,
              clientY: e2.clientY,
              itemInfo: clone$2(_this.tree.items[id2]),
              treeEl,
              treeElContainer
            };
            var mousePos = {
              clientX: e2.clientX,
              clientY: e2.clientY
            };
            var target = _this._getEventTarget(e2, dragStart);
            _this.eventTarget = target;
            target.addEventListener("mousemove", _this.onDrag);
            target.addEventListener("mouseup", _this.onDragEnd);
            _this.props.setDragStart(dragStart, dragging, mousePos);
          };
          _this.onDrag = function(e2) {
            var doHandleDrag = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            var dragging = Object.assign({}, _this.props.dragging);
            var startDragging = _this.props.dragStart;
            var paddingLeft = dragging.paddingLeft;
            var treeElContainer = startDragging.treeElContainer;
            var scrollTop = treeElContainer.scrollTop;
            dragging.itemInfo = _this.tree.items[dragging.id];
            if (!dragging.itemInfo) {
              return;
            }
            var mousePos = {
              clientX: e2.clientX,
              clientY: e2.clientY
            };
            var startMousePos = {
              clientX: startDragging.clientX,
              clientY: startDragging.clientY
            };
            if (e2.__mock_dom) {
              var treeEl = startDragging.treeEl;
              var dragEl = _this._getDraggableNodeEl(treeEl);
              var plhEl = _this._getPlaceholderNodeEl(treeEl);
              e2.__mock_dom({
                treeEl,
                dragEl,
                plhEl
              });
            }
            if (!startDragging.plX) {
              var _treeEl = startDragging.treeEl;
              var _plhEl2 = _this._getPlaceholderNodeEl(_treeEl);
              if (_plhEl2) {
                startDragging.plX = _plhEl2.getBoundingClientRect().left + window.scrollX;
                startDragging.plY = _plhEl2.getBoundingClientRect().top + window.scrollY;
              }
            }
            var startX = startDragging.x;
            var startY = startDragging.y;
            var startClientX = startDragging.clientX;
            var startClientY = startDragging.clientY;
            var startScrollTop = startDragging.scrollTop;
            var pos = {
              x: startX + (e2.clientX - startClientX),
              y: startY + (e2.clientY - startClientY) + (scrollTop - startScrollTop)
            };
            dragging.x = pos.x;
            dragging.y = pos.y;
            dragging.paddingLeft = paddingLeft;
            dragging.mousePos = mousePos;
            dragging.startMousePos = startMousePos;
            _this.props.setDragProgress(mousePos, dragging);
            var moved = doHandleDrag ? _this.handleDrag(dragging, e2, CanMoveFn) : false;
            if (!moved) {
              if (e2.preventDefault)
                e2.preventDefault();
            }
          };
          _this.onDragEnd = function() {
            var treeEl = _this.props.dragStart.treeEl;
            _this.props.setDragEnd();
            treeEl.classList.remove("qb-dragging");
            document.body.classList.remove("qb-dragging");
            _this._cacheEls = {};
            var target = _this.eventTarget || _this._getEventTarget();
            target.removeEventListener("mousemove", _this.onDrag);
            target.removeEventListener("mouseup", _this.onDragEnd);
          };
          _this.pureShouldComponentUpdate = pureShouldComponentUpdate(_assertThisInitialized(_this));
          useOnPropsChanged(_assertThisInitialized(_this));
          _this.onPropsChanged(props);
          return _this;
        }
        _createClass(SortableContainer2, [{
          key: "onPropsChanged",
          value: function onPropsChanged(nextProps) {
            this.tree = getFlatTree(nextProps.tree);
          }
        }, {
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            var prevProps = this.props;
            var prevState = this.state;
            var should = this.pureShouldComponentUpdate(nextProps, nextState);
            if (should) {
              if (prevState == nextState && prevProps != nextProps) {
                var chs = [];
                for (var k2 in nextProps) {
                  var changed = nextProps[k2] != prevProps[k2];
                  if (changed) {
                    if (k2 != "dragging" && k2 != "mousePos")
                      chs.push(k2);
                  }
                }
                if (!chs.length)
                  should = false;
              }
            }
            return should;
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(_prevProps, _prevState) {
            var dragging = this.props.dragging;
            var startDragging = this.props.dragStart;
            _isReorderingTree = false;
            if (startDragging && startDragging.id) {
              dragging.itemInfo = this.tree.items[dragging.id];
              if (dragging.itemInfo) {
                if (dragging.itemInfo.index != startDragging.itemInfo.index || dragging.itemInfo.parent != startDragging.itemInfo.parent) {
                  var treeEl = startDragging.treeEl;
                  var treeElContainer = startDragging.treeElContainer;
                  var plhEl = this._getPlaceholderNodeEl(treeEl, true);
                  if (plhEl) {
                    var plX = plhEl.getBoundingClientRect().left + window.scrollX;
                    var plY = plhEl.getBoundingClientRect().top + window.scrollY;
                    var oldPlX = startDragging.plX;
                    var oldPlY = startDragging.plY;
                    var scrollTop = treeElContainer.scrollTop;
                    startDragging.plX = plX;
                    startDragging.plY = plY;
                    startDragging.itemInfo = clone$2(dragging.itemInfo);
                    startDragging.y = plhEl.offsetTop;
                    startDragging.x = plhEl.offsetLeft;
                    startDragging.clientY += plY - oldPlY;
                    startDragging.clientX += plX - oldPlX;
                    if (treeElContainer != document.body)
                      startDragging.scrollTop = scrollTop;
                    this.onDrag(this.props.mousePos, false);
                  }
                }
              }
            }
          }
        }, {
          key: "_getNodeElById",
          value: function _getNodeElById(treeEl, indexId) {
            var ignoreCache = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
            if (indexId == null)
              return null;
            if (!this._cacheEls)
              this._cacheEls = {};
            var el = this._cacheEls[indexId];
            if (el && document.contains(el) && !ignoreCache)
              return el;
            el = treeEl.querySelector('.group-or-rule-container[data-id="' + indexId + '"]');
            this._cacheEls[indexId] = el;
            return el;
          }
        }, {
          key: "_getDraggableNodeEl",
          value: function _getDraggableNodeEl(treeEl) {
            var ignoreCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            if (!this._cacheEls)
              this._cacheEls = {};
            var el = this._cacheEls["draggable"];
            if (el && document.contains(el) && !ignoreCache)
              return el;
            var els = treeEl.getElementsByClassName("qb-draggable");
            el = els.length ? els[0] : null;
            this._cacheEls["draggable"] = el;
            return el;
          }
        }, {
          key: "_getPlaceholderNodeEl",
          value: function _getPlaceholderNodeEl(treeEl) {
            var ignoreCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            if (!this._cacheEls)
              this._cacheEls = {};
            var el = this._cacheEls["placeholder"];
            if (el && document.contains(el) && !ignoreCache)
              return el;
            var els = treeEl.getElementsByClassName("qb-placeholder");
            el = els.length ? els[0] : null;
            this._cacheEls["placeholder"] = el;
            return el;
          }
        }, {
          key: "_isScrollable",
          value: function _isScrollable(node2) {
            var overflowY = window.getComputedStyle(node2)["overflow-y"];
            return (overflowY === "scroll" || overflowY === "auto") && node2.scrollHeight > node2.offsetHeight;
          }
        }, {
          key: "_getScrollParent",
          value: function _getScrollParent(node2) {
            if (node2 == null)
              return null;
            if (node2 === document.body || this._isScrollable(node2)) {
              return node2;
            } else {
              return this._getScrollParent(node2.parentNode);
            }
          }
        }, {
          key: "handleDrag",
          value: function handleDrag(dragInfo, e2, canMoveFn) {
            var _this2 = this;
            var canMoveBeforeAfterGroup = true;
            var itemInfo = dragInfo.itemInfo;
            var paddingLeft = dragInfo.paddingLeft;
            var moveInfo = null;
            var treeEl = this.props.dragStart.treeEl;
            var dragId = dragInfo.id;
            var dragEl = this._getDraggableNodeEl(treeEl);
            var plhEl = this._getPlaceholderNodeEl(treeEl);
            var dragRect, plhRect, hovRect, treeRect;
            if (dragEl && plhEl) {
              dragRect = dragEl.getBoundingClientRect();
              plhRect = plhEl.getBoundingClientRect();
              if (!plhRect.width) {
                return;
              }
              var dragDirs = {
                hrz: 0,
                vrt: 0
              };
              if (dragRect.top < plhRect.top)
                dragDirs.vrt = -1;
              else if (dragRect.bottom > plhRect.bottom)
                dragDirs.vrt = 1;
              if (dragRect.left > plhRect.left)
                dragDirs.hrz = 1;
              else if (dragRect.left < plhRect.left)
                dragDirs.hrz = -1;
              treeRect = treeEl.getBoundingClientRect();
              var trgCoord = {
                x: treeRect.left + (treeRect.right - treeRect.left) / 2,
                y: dragDirs.vrt >= 0 ? dragRect.bottom : dragRect.top
              };
              var hovCNodeEl;
              if (e2.__mocked_hov_container) {
                hovCNodeEl = e2.__mocked_hov_container;
              } else {
                var hovNodeEl = document.elementFromPoint(trgCoord.x, trgCoord.y - 1);
                hovCNodeEl = hovNodeEl ? hovNodeEl.closest(".group-or-rule-container") : null;
                if (!hovCNodeEl && hovNodeEl && hovNodeEl.classList.contains("query-builder-container")) {
                  var _hovNodeEl$firstChild;
                  var rootGroupContainer = hovNodeEl === null || hovNodeEl === void 0 || (_hovNodeEl$firstChild = hovNodeEl.firstChild) === null || _hovNodeEl$firstChild === void 0 ? void 0 : _hovNodeEl$firstChild.firstChild;
                  if (rootGroupContainer && rootGroupContainer.classList.contains("group-or-rule-container")) {
                    hovCNodeEl = rootGroupContainer;
                  }
                }
              }
              if (!hovCNodeEl) {
                logger.log("out of tree bounds!");
              } else {
                var isGroup = hovCNodeEl.classList.contains("group-container");
                var hovNodeId = hovCNodeEl.getAttribute("data-id");
                var hovEl = hovCNodeEl;
                var doAppend = false;
                var doPrepend = false;
                if (hovEl) {
                  hovRect = hovEl.getBoundingClientRect();
                  var hovHeight = hovRect.bottom - hovRect.top;
                  var hovII = this.tree.items[hovNodeId];
                  if (!hovII) {
                    throw new Error("There is an issue with rendering. If you use Next.js, please check getServerSideProps() method.");
                  }
                  var trgRect = null, trgEl = null, trgII = null, altII = null;
                  if (dragDirs.vrt == 0) {
                    trgII = itemInfo;
                    trgEl = plhEl;
                    if (trgEl)
                      trgRect = trgEl.getBoundingClientRect();
                  } else {
                    if (isGroup) {
                      if (dragDirs.vrt > 0) {
                        var hovInnerEl = hovCNodeEl.getElementsByClassName("group--header");
                        var hovEl2 = hovInnerEl.length ? hovInnerEl[0] : null;
                        if (hovEl2) {
                          var hovRect2 = hovEl2.getBoundingClientRect();
                          var hovHeight2 = hovRect2.bottom - hovRect2.top;
                          var isOverHover = dragRect.bottom - hovRect2.top > hovHeight2 * 3 / 4;
                          if (isOverHover && hovII.top > dragInfo.itemInfo.top) {
                            trgII = hovII;
                            trgRect = hovRect2;
                            trgEl = hovEl2;
                            doPrepend = true;
                          }
                        }
                      } else if (dragDirs.vrt < 0) {
                        if (hovII.lev >= itemInfo.lev) {
                          var isClimbToHover = hovRect.bottom - dragRect.top >= 2;
                          if (isClimbToHover && hovII.top < dragInfo.itemInfo.top) {
                            trgII = hovII;
                            trgRect = hovRect;
                            trgEl = hovEl;
                            doAppend = true;
                          }
                        }
                      }
                      if (!doPrepend && !doAppend || canMoveBeforeAfterGroup) {
                        var _isOverHover = dragDirs.vrt < 0 ? hovRect.bottom - dragRect.top > hovHeight - 5 : dragRect.bottom - hovRect.top > hovHeight - 5;
                        if (_isOverHover) {
                          if (!doPrepend && !doAppend) {
                            trgII = hovII;
                            trgRect = hovRect;
                            trgEl = hovEl;
                          }
                          {
                            altII = hovII;
                          }
                        }
                      }
                    } else {
                      var _isOverHover2 = dragDirs.vrt < 0 ? hovRect.bottom - dragRect.top > hovHeight / 2 : dragRect.bottom - hovRect.top > hovHeight / 2;
                      if (_isOverHover2) {
                        trgII = hovII;
                        trgRect = hovRect;
                        trgEl = hovEl;
                      }
                    }
                  }
                  var isSamePos = trgII && trgII.id == dragId;
                  if (trgRect) {
                    var dragLeftOffset = dragRect.left - treeRect.left;
                    trgRect.left - treeRect.left;
                    var dragLev = Math.max(0, Math.round(dragLeftOffset / paddingLeft));
                    var availMoves = [];
                    var altMoves = [];
                    if (isSamePos)
                      ;
                    else {
                      if (isGroup) {
                        if (doAppend) {
                          availMoves.push([PLACEMENT_APPEND, trgII, trgII.lev + 1]);
                        } else if (doPrepend) {
                          availMoves.push([PLACEMENT_PREPEND, trgII, trgII.lev + 1]);
                        }
                        if (altII) {
                          var isToRoot = altII.lev == 0;
                          var isToCase = altII.type == "case_group" && itemInfo.type != "case_group";
                          var prevCaseId = altII.prev && this.tree.items[altII.prev].caseId;
                          var nextCaseId = altII.next && this.tree.items[altII.next].caseId;
                          if (itemInfo.caseId == prevCaseId)
                            prevCaseId = null;
                          if (itemInfo.caseId == nextCaseId)
                            nextCaseId = null;
                          var prevCase = prevCaseId && this.tree.items[prevCaseId];
                          var nextCase = nextCaseId && this.tree.items[nextCaseId];
                          if (dragDirs.vrt > 0) {
                            if (isToRoot) {
                              altMoves.push([PLACEMENT_APPEND, altII, altII.lev + 1]);
                            } else if (isToCase && nextCase) {
                              altMoves.push([PLACEMENT_PREPEND, nextCase, nextCase.lev + 1]);
                            } else {
                              altMoves.push([PLACEMENT_AFTER, altII, altII.lev]);
                            }
                          } else if (dragDirs.vrt < 0) {
                            if (isToRoot) {
                              altMoves.push([PLACEMENT_PREPEND, altII, altII.lev + 1]);
                            } else if (isToCase && prevCase) {
                              altMoves.push([PLACEMENT_APPEND, prevCase, prevCase.lev + 1]);
                            } else {
                              altMoves.push([PLACEMENT_BEFORE, altII, altII.lev]);
                            }
                          }
                        }
                      }
                      if (!doAppend && !doPrepend) {
                        if (dragDirs.vrt < 0) {
                          availMoves.push([PLACEMENT_BEFORE, trgII, trgII.lev]);
                        } else if (dragDirs.vrt > 0) {
                          availMoves.push([PLACEMENT_AFTER, trgII, trgII.lev]);
                        }
                      }
                    }
                    var addCaseII = function addCaseII2(am) {
                      var toII = am[1];
                      var fromCaseII = itemInfo.caseId ? _this2.tree.items[itemInfo.caseId] : null;
                      var toCaseII = toII.caseId ? _this2.tree.items[toII.caseId] : null;
                      return [].concat(_toConsumableArray(am), [fromCaseII, toCaseII]);
                    };
                    availMoves = availMoves.map(addCaseII);
                    altMoves = altMoves.map(addCaseII);
                    availMoves = availMoves.filter(function(am) {
                      var placement = am[0];
                      var trg = am[1];
                      if ((placement == PLACEMENT_BEFORE || placement == PLACEMENT_AFTER) && trg.parent == null)
                        return false;
                      if (trg.collapsed && (placement == PLACEMENT_APPEND || placement == PLACEMENT_PREPEND))
                        return false;
                      var isInside = trg.id == itemInfo.id;
                      if (!isInside) {
                        var tmp = trg;
                        while (tmp.parent) {
                          tmp = _this2.tree.items[tmp.parent];
                          if (tmp.id == itemInfo.id) {
                            isInside = true;
                            break;
                          }
                        }
                      }
                      return !isInside;
                    }).map(function(am) {
                      var placement = am[0], toII = am[1];
                      am[2];
                      am[3];
                      am[4];
                      var toParentII = null;
                      if (placement == PLACEMENT_APPEND || placement == PLACEMENT_PREPEND)
                        toParentII = toII;
                      else
                        toParentII = _this2.tree.items[toII.parent];
                      if (toParentII && toParentII.parent == null)
                        toParentII = null;
                      am[5] = toParentII;
                      return am;
                    });
                    var bestMode = null;
                    var filteredMoves = availMoves.filter(function(am) {
                      return _this2.canMove(itemInfo, am[1], am[0], am[3], am[4], am[5], canMoveFn);
                    });
                    if (filteredMoves.length == 0 && altMoves.length > 0) {
                      filteredMoves = altMoves.filter(function(am) {
                        return _this2.canMove(itemInfo, am[1], am[0], am[3], am[4], am[5], canMoveFn);
                      });
                    }
                    var levs = filteredMoves.map(function(am) {
                      return am[2];
                    });
                    var curLev = itemInfo.lev;
                    var allLevs = levs.concat(curLev);
                    var closestDragLev = null;
                    if (allLevs.indexOf(dragLev) != -1)
                      closestDragLev = dragLev;
                    else if (dragLev > Math.max.apply(Math, _toConsumableArray(allLevs)))
                      closestDragLev = Math.max.apply(Math, _toConsumableArray(allLevs));
                    else if (dragLev < Math.min.apply(Math, _toConsumableArray(allLevs)))
                      closestDragLev = Math.min.apply(Math, _toConsumableArray(allLevs));
                    bestMode = filteredMoves.find(function(am) {
                      return am[2] == closestDragLev;
                    });
                    if (!isSamePos && !bestMode && filteredMoves.length)
                      bestMode = filteredMoves[0];
                    moveInfo = bestMode;
                  }
                }
              }
            }
            if (moveInfo) {
              this.move(itemInfo, moveInfo[1], moveInfo[0], moveInfo[3]);
              return true;
            }
            return false;
          }
        }, {
          key: "canMove",
          value: function canMove(fromII, toII, placement, fromCaseII, toCaseII, toParentII, canMoveFn) {
            if (!fromII || !toII)
              return false;
            if (fromII.id === toII.id)
              return false;
            var _this$props$config$se = this.props.config.settings, canRegroup = _this$props$config$se.canRegroup, canRegroupCases = _this$props$config$se.canRegroupCases, maxNesting = _this$props$config$se.maxNesting, maxNumberOfRules = _this$props$config$se.maxNumberOfRules, canLeaveEmptyCase = _this$props$config$se.canLeaveEmptyCase;
            var newLev = toParentII ? toParentII.lev + 1 : toII.lev;
            var newDepthLev = newLev + (fromII.depth || 0);
            var isBeforeAfter = placement == PLACEMENT_BEFORE || placement == PLACEMENT_AFTER;
            var isPend = placement == PLACEMENT_PREPEND || placement == PLACEMENT_APPEND;
            var isLev1 = isBeforeAfter && toII.lev == 1 || isPend && toII.lev == 0;
            var isParentChange = fromII.parent != toII.parent;
            var isStructChange = isPend || isParentChange;
            var isForbiddenStructChange = fromII.type == "case_group" && !isLev1 || fromII.parentType == "rule_group" || toII.type == "rule_group" || toII.parentType == "rule_group" || fromII.type != "case_group" && toII.type == "case_group" && isBeforeAfter || fromII.type != "case_group" && toII.type == "switch_group" || !canRegroupCases && fromII.caseId != toII.caseId;
            var isLockedChange = toII.isLocked || fromII.isLocked || toParentII && toParentII.isLocked;
            if (maxNesting && newDepthLev > maxNesting)
              return false;
            if (isStructChange && (!canRegroup || isForbiddenStructChange || isLockedChange))
              return false;
            if (fromII.type != "case_group" && fromII.caseId != toII.caseId) {
              var isLastFromCase = fromCaseII ? fromCaseII._height == 2 : false;
              var newRulesInTargetCase = toCaseII ? toCaseII.leafsCount + 1 : 0;
              if (maxNumberOfRules && newRulesInTargetCase > maxNumberOfRules)
                return false;
              if (isLastFromCase && !canLeaveEmptyCase)
                return false;
            }
            if (fromII.type == "case_group" && (fromII.isDefaultCase || toII.isDefaultCase || toII.type == "switch_group" && placement == PLACEMENT_APPEND)) {
              return false;
            }
            var res = true;
            if (canMoveFn) {
              res = canMoveFn(fromII.node.toJS(), toII.node.toJS(), placement, toParentII ? toParentII.node.toJS() : null);
            }
            return res;
          }
        }, {
          key: "move",
          value: function move(fromII, toII, placement, toParentII) {
            if (!this._isUsingLegacyReactDomRender) {
              _isReorderingTree = true;
            }
            this.props.actions.moveItem(fromII.path, toII.path, placement);
          }
        }, {
          key: "render",
          value: function render() {
            return /* @__PURE__ */ React$4.createElement(Builder2, _extends$1({}, this.props, {
              onDragStart: this.onDragStart
            }));
          }
        }]);
        return SortableContainer2;
      }(reactExports.Component), _class.propTypes = {
        tree: PropTypes.any.isRequired,
        //instanceOf(Immutable.Map)
        actions: PropTypes.object.isRequired
        // {moveItem: Function, ..}
        //... see Builder
      }, _class;
    };
    const SortableContainer = function(Builder2) {
      var CanMoveFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var ConnectedSortableContainer = connect(function(state) {
        return {
          dragging: state.dragging,
          dragStart: state.dragStart,
          mousePos: state.mousePos
        };
      }, {
        setDragStart,
        setDragProgress,
        setDragEnd
      }, null, {
        context
      })(createSortableContainer(Builder2, CanMoveFn));
      ConnectedSortableContainer.displayName = "ConnectedSortableContainer";
      return ConnectedSortableContainer;
    };
    var _excluded$D = ["isDraggingTempo", "isDraggingMe", "dragging"];
    function _createSuper$n(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$n();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$n() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    const Draggable = function(className) {
      return function(GroupOrRule) {
        var _class;
        return _class = /* @__PURE__ */ function(_PureComponent) {
          _inherits(Draggable2, _PureComponent);
          var _super = _createSuper$n(Draggable2);
          function Draggable2(props) {
            var _this;
            _classCallCheck(this, Draggable2);
            _this = _super.call(this, props);
            _this.handleDraggerMouseDown = function(e2) {
              var nodeId = _this.props.id;
              var dom = _this.wrapper.current;
              if (_this.props.onDragStart) {
                _this.props.onDragStart(nodeId, dom, e2);
              }
            };
            _this.wrapper = /* @__PURE__ */ React$4.createRef();
            return _this;
          }
          _createClass(Draggable2, [{
            key: "render",
            value: function render() {
              var _this$props = this.props, isDraggingTempo = _this$props.isDraggingTempo, isDraggingMe = _this$props.isDraggingMe, dragging = _this$props.dragging, otherProps = _objectWithoutProperties(_this$props, _excluded$D);
              var isTrueLocked = otherProps.isTrueLocked;
              var styles2 = {};
              if (isDraggingMe && isDraggingTempo) {
                if (_isReorderingTree)
                  ;
                else {
                  styles2 = {
                    top: dragging.y,
                    left: dragging.x,
                    width: dragging.w
                  };
                }
              }
              var cn = classNames(className, "group-or-rule", isDraggingMe && isDraggingTempo ? "qb-draggable" : null, isDraggingMe && !isDraggingTempo ? "qb-placeholder" : null, isTrueLocked ? "locked" : null);
              return /* @__PURE__ */ React$4.createElement("div", {
                className: cn,
                style: styles2,
                ref: this.wrapper,
                "data-id": this.props.id
              }, /* @__PURE__ */ React$4.createElement(GroupOrRule, _extends$1({
                handleDraggerMouseDown: this.handleDraggerMouseDown,
                isDraggingMe,
                isDraggingTempo
              }, otherProps)));
            }
          }]);
          return Draggable2;
        }(reactExports.PureComponent), _class.propTypes = {
          isDraggingTempo: PropTypes.bool,
          isDraggingMe: PropTypes.bool,
          onDragStart: PropTypes.func,
          dragging: PropTypes.object,
          //{id, x, y, w, h}
          isLocked: PropTypes.bool,
          isTrueLocked: PropTypes.bool
        }, _class;
      };
    };
    var arrayMap = _arrayMap, baseIteratee = _baseIteratee, basePickBy = _basePickBy, getAllKeysIn = _getAllKeysIn;
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = baseIteratee(predicate);
      return basePickBy(object, props, function(value2, path) {
        return predicate(value2, path[0]);
      });
    }
    var pickBy_1 = pickBy;
    const pickBy$1 = /* @__PURE__ */ getDefaultExportFromCjs(pickBy_1);
    function ownKeys$h(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$h(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$h(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$h(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$m(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$m();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$m() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var _Utils$ConfigUtils$6 = Utils$1.ConfigUtils, getFieldConfig$6 = _Utils$ConfigUtils$6.getFieldConfig, getOperatorConfig$3 = _Utils$ConfigUtils$6.getOperatorConfig;
    var Operator = /* @__PURE__ */ function(_Component) {
      _inherits(Operator2, _Component);
      var _super = _createSuper$m(Operator2);
      function Operator2(props) {
        var _this;
        _classCallCheck(this, Operator2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(Operator2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["config", "selectedField", "selectedFieldSrc", "selectedFieldType", "selectedOperator"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var _config$types$selecte;
          var config2 = _ref.config, selectedField = _ref.selectedField, selectedFieldType = _ref.selectedFieldType, selectedOperator = _ref.selectedOperator;
          var fieldConfig = getFieldConfig$6(config2, selectedField);
          var operators2 = _toConsumableArray((fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.operators) || ((_config$types$selecte = config2.types[selectedFieldType]) === null || _config$types$selecte === void 0 ? void 0 : _config$types$selecte.operators) || []);
          if (!selectedField && !operators2.includes(selectedOperator)) {
            operators2.push(selectedOperator);
          }
          var operatorsOptions = mapValues$1(pickBy$1(config2.operators, function(item, key) {
            return (operators2 === null || operators2 === void 0 ? void 0 : operators2.indexOf(key)) !== -1;
          }), function(_opts, op) {
            return getOperatorConfig$3(config2, op, selectedField);
          });
          var items = this.buildOptions(config2, operatorsOptions, operators2);
          var selectedOpts = operatorsOptions[selectedOperator] || {};
          var placeholder = this.props.config.settings.operatorPlaceholder;
          var selectedKey = selectedOperator;
          var selectedKeys = selectedKey ? [selectedKey] : null;
          var selectedPath = selectedKeys;
          var selectedLabel = selectedOpts.label;
          return {
            placeholder,
            items,
            selectedKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            fieldConfig
          };
        }
      }, {
        key: "buildOptions",
        value: function buildOptions2(config2, fields, ops) {
          if (!fields || !ops)
            return null;
          return keys$6(fields).sort(function(a, b2) {
            return ops.indexOf(a) - ops.indexOf(b2);
          }).map(function(fieldKey) {
            var field = fields[fieldKey];
            var label = field.label;
            return {
              key: fieldKey,
              path: fieldKey,
              label
            };
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setOperator2 = _this$props.setOperator, readonly = _this$props.readonly, id2 = _this$props.id, groupId = _this$props.groupId;
          var renderOperator = config2.settings.renderOperator;
          var renderProps = _objectSpread$h({
            id: id2,
            groupId,
            config: config2,
            customProps,
            readonly,
            setField: setOperator2
          }, this.meta);
          if (!renderProps.items)
            return null;
          return renderOperator(renderProps, config2.ctx);
        }
      }]);
      return Operator2;
    }(reactExports.Component);
    Operator.propTypes = {
      id: PropTypes.string,
      groupId: PropTypes.string,
      config: PropTypes.object.isRequired,
      selectedField: PropTypes.any,
      selectedFieldType: PropTypes.string,
      selectedFieldSrc: PropTypes.string,
      selectedOperator: PropTypes.string,
      readonly: PropTypes.bool,
      //actions
      setOperator: PropTypes.func.isRequired
    };
    var _excluded$C = ["children"];
    var Col = function Col2(_ref) {
      var children = _ref.children, props = _objectWithoutProperties(_ref, _excluded$C);
      return /* @__PURE__ */ React$4.createElement("div", props, children);
    };
    var dummyFn = function dummyFn2() {
    };
    var DragIcon$1 = function DragIcon2() {
      return /* @__PURE__ */ React$4.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "gray",
        width: "18px",
        height: "18px"
      }, /* @__PURE__ */ React$4.createElement("path", {
        d: "M0 0h24v24H0V0z",
        fill: "none"
      }), /* @__PURE__ */ React$4.createElement("path", {
        d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
      }));
    };
    var WithConfirmFn = function WithConfirmFn2(Cmp) {
      return function(props) {
        var useConfirm2 = props.config.settings.useConfirm;
        var confirmFn = useConfirm2 ? useConfirm2.call(props.config.ctx, props.config.ctx) : null;
        return /* @__PURE__ */ React$4.createElement(Cmp, _extends$1({}, props, {
          confirmFn
        }));
      };
    };
    function _createSuper$l(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$l();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$l() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var OperatorWrapper = /* @__PURE__ */ function(_PureComponent) {
      _inherits(OperatorWrapper2, _PureComponent);
      var _super = _createSuper$l(OperatorWrapper2);
      function OperatorWrapper2() {
        _classCallCheck(this, OperatorWrapper2);
        return _super.apply(this, arguments);
      }
      _createClass(OperatorWrapper2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, selectedField = _this$props.selectedField, selectedFieldSrc = _this$props.selectedFieldSrc, selectedFieldType = _this$props.selectedFieldType, selectedOperator = _this$props.selectedOperator, setOperator2 = _this$props.setOperator, selectedFieldParts = _this$props.selectedFieldParts, showOperator = _this$props.showOperator, showOperatorLabel = _this$props.showOperatorLabel, selectedFieldWidgetConfig = _this$props.selectedFieldWidgetConfig, readonly = _this$props.readonly, id2 = _this$props.id, groupId = _this$props.groupId;
          var operator = showOperator && /* @__PURE__ */ React$4.createElement(Col, {
            key: "operators-for-" + (selectedFieldParts || []).join("_"),
            className: "rule--operator"
          }, config2.settings.showLabels && /* @__PURE__ */ React$4.createElement("label", {
            className: "rule--label"
          }, config2.settings.operatorLabel), /* @__PURE__ */ React$4.createElement(Operator, {
            key: "operator",
            config: config2,
            selectedField,
            selectedFieldSrc,
            selectedFieldType,
            selectedOperator,
            setOperator: setOperator2,
            readonly,
            id: id2,
            groupId
          }));
          var hiddenOperator = showOperatorLabel && /* @__PURE__ */ React$4.createElement(Col, {
            key: "operators-for-" + (selectedFieldParts || []).join("_"),
            className: "rule--operator"
          }, /* @__PURE__ */ React$4.createElement("div", {
            className: "rule--operator-wrapper"
          }, config2.settings.showLabels ? /* @__PURE__ */ React$4.createElement("label", {
            className: "rule--label"
          }, " ") : null, /* @__PURE__ */ React$4.createElement("div", {
            className: "rule--operator-text-wrapper"
          }, /* @__PURE__ */ React$4.createElement("span", {
            className: "rule--operator-text"
          }, selectedFieldWidgetConfig.operatorInlineLabel))));
          return [operator, hiddenOperator];
        }
      }]);
      return OperatorWrapper2;
    }(reactExports.PureComponent);
    function ownKeys$g(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$g(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$g(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$g(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$k(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$k();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$k() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var getFieldPathLabels$1 = Utils$1.RuleUtils.getFieldPathLabels;
    var _Utils$ConfigUtils$5 = Utils$1.ConfigUtils, getFieldConfig$5 = _Utils$ConfigUtils$5.getFieldConfig, getFieldParts$3 = _Utils$ConfigUtils$5.getFieldParts, getFieldPathParts$2 = _Utils$ConfigUtils$5.getFieldPathParts;
    var Field = /* @__PURE__ */ function(_Component) {
      _inherits(Field2, _Component);
      var _super = _createSuper$k(Field2);
      function Field2(props) {
        var _this;
        _classCallCheck(this, Field2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(Field2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["selectedField", "selectedFieldSrc", "selectedFieldType", "config", "parentField"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var selectedField = _ref.selectedField, selectedFieldType = _ref.selectedFieldType, config2 = _ref.config, parentField = _ref.parentField;
          var selectedKey = selectedField;
          var _config$settings = config2.settings, maxLabelsLength = _config$settings.maxLabelsLength, fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay, fieldPlaceholder = _config$settings.fieldPlaceholder;
          _config$settings.fieldSeparator;
          var isFieldSelected = !!selectedField;
          var placeholder = !isFieldSelected ? truncateString(fieldPlaceholder, maxLabelsLength) : null;
          var currField = isFieldSelected ? getFieldConfig$5(config2, selectedKey) : null;
          var selectedOpts = currField || {};
          var selectedKeys = getFieldPathParts$2(selectedKey, config2);
          var selectedPath = getFieldPathParts$2(selectedKey, config2, true);
          var selectedLabel = this.getFieldLabel(currField, selectedKey, config2);
          var partsLabels = getFieldPathLabels$1(selectedKey, config2);
          var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;
          if (selectedFullLabel == selectedLabel || parentField)
            selectedFullLabel = null;
          var selectedAltLabel = selectedOpts.label2;
          var parentFieldPath = getFieldParts$3(parentField, config2);
          var parentFieldConfig = parentField ? getFieldConfig$5(config2, parentField) : null;
          var sourceFields = parentField ? parentFieldConfig && parentFieldConfig.subfields : config2.fields;
          var lookingForFieldType = !isFieldSelected && selectedFieldType;
          var items = this.buildOptions(parentFieldPath, config2, sourceFields, lookingForFieldType, parentFieldPath);
          var errorText = lookingForFieldType ? "Please select field" : null;
          return {
            placeholder,
            items,
            parentField,
            selectedKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            selectedAltLabel,
            selectedFullLabel,
            errorText
          };
        }
      }, {
        key: "getFieldLabel",
        value: function getFieldLabel(fieldOpts, fieldKey, config2) {
          if (!fieldKey)
            return null;
          var maxLabelsLength = config2.settings.maxLabelsLength;
          var fieldParts = getFieldParts$3(fieldKey, config2);
          var label = (fieldOpts === null || fieldOpts === void 0 ? void 0 : fieldOpts.label) || last$2(fieldParts);
          label = truncateString(label, maxLabelsLength);
          return label;
        }
      }, {
        key: "buildOptions",
        value: function buildOptions2(parentFieldPath, config2, fields) {
          var _this2 = this;
          var fieldType = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : void 0;
          var path = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
          var optGroupLabel = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
          if (!fields)
            return null;
          var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
          var prefix2 = path !== null && path !== void 0 && path.length ? path.join(fieldSeparator) + fieldSeparator : "";
          var countFieldsMatchesType = function countFieldsMatchesType2(fields2) {
            return Object.keys(fields2).reduce(function(acc, fieldKey) {
              var field = fields2[fieldKey];
              if (field.type === "!struct") {
                return acc + countFieldsMatchesType2(field.subfields);
              } else {
                return acc + (field.type === fieldType ? 1 : 0);
              }
            }, 0);
          };
          return keys$6(fields).map(function(fieldKey) {
            var fullFieldPath = [].concat(_toConsumableArray(path !== null && path !== void 0 ? path : []), [fieldKey]);
            var field = fields[fieldKey];
            var label = _this2.getFieldLabel(field, fullFieldPath, config2);
            var partsLabels = getFieldPathLabels$1(fullFieldPath, config2);
            var fullLabel = partsLabels.join(fieldSeparatorDisplay);
            if (fullLabel == label || parentFieldPath !== null && parentFieldPath !== void 0 && parentFieldPath.length)
              fullLabel = null;
            var altLabel = field.label2;
            var tooltip = field.tooltip;
            var disabled = field.disabled;
            if (field.hideForSelect)
              return void 0;
            if (field.type == "!struct") {
              var items = _this2.buildOptions(parentFieldPath, config2, field.subfields, fieldType, fullFieldPath, label);
              var hasItemsMatchesType = countFieldsMatchesType(field.subfields) > 0;
              return {
                disabled,
                key: fieldKey,
                path: prefix2 + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                items,
                matchesType: hasItemsMatchesType
              };
            } else {
              var matchesType = fieldType !== void 0 ? field.type === fieldType : void 0;
              return {
                disabled,
                key: fieldKey,
                path: prefix2 + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                grouplabel: optGroupLabel,
                matchesType
              };
            }
          }).filter(function(o) {
            return !!o;
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setField2 = _this$props.setField, setFieldSrc2 = _this$props.setFieldSrc, readonly = _this$props.readonly, id2 = _this$props.id, groupId = _this$props.groupId;
          var renderField = config2.settings.renderField;
          var renderProps = _objectSpread$g({
            id: id2,
            groupId,
            config: config2,
            customProps,
            readonly,
            setField: setField2,
            setFieldSrc: setFieldSrc2
          }, this.meta);
          return renderField(renderProps, config2.ctx);
        }
      }]);
      return Field2;
    }(reactExports.Component);
    Field.propTypes = {
      id: PropTypes.string,
      groupId: PropTypes.string,
      config: PropTypes.object.isRequired,
      selectedField: PropTypes.any,
      selectedFieldSrc: PropTypes.string,
      selectedFieldType: PropTypes.string,
      parentField: PropTypes.string,
      customProps: PropTypes.object,
      readonly: PropTypes.bool,
      //actions
      setField: PropTypes.func.isRequired,
      setFieldSrc: PropTypes.func
    };
    function ownKeys$f(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$f(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$f(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$f(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$j(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$j();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$j() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var clone$1 = Utils$1.clone;
    var _Utils$ConfigUtils$4 = Utils$1.ConfigUtils, getFieldConfig$4 = _Utils$ConfigUtils$4.getFieldConfig, getFuncConfig$1 = _Utils$ConfigUtils$4.getFuncConfig, getFieldParts$2 = _Utils$ConfigUtils$4.getFieldParts, getFieldPathParts$1 = _Utils$ConfigUtils$4.getFieldPathParts;
    var _Utils$RuleUtils$2 = Utils$1.RuleUtils, getFuncPathLabels = _Utils$RuleUtils$2.getFuncPathLabels, getWidgetForFieldOp$2 = _Utils$RuleUtils$2.getWidgetForFieldOp;
    var FuncSelect = /* @__PURE__ */ function(_Component) {
      _inherits(FuncSelect2, _Component);
      var _super = _createSuper$j(FuncSelect2);
      function FuncSelect2(props) {
        var _this;
        _classCallCheck(this, FuncSelect2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(FuncSelect2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForItems = ["config", "field", "fieldType", "fieldSrc", "operator", "isFuncArg", "isLHS"];
          var keysForMeta = ["config", "field", "fieldType", "fieldSrc", "value", "isLHS"];
          var needUpdateItems = !this.items || keysForItems.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
          if (needUpdateItems) {
            this.items = this.getItems(nextProps, this.meta);
          }
        }
      }, {
        key: "getItems",
        value: function getItems(_ref, _ref2) {
          var config2 = _ref.config, field = _ref.field, fieldType = _ref.fieldType, isLHS = _ref.isLHS, operator = _ref.operator, parentFuncs = _ref.parentFuncs, fieldDefinition = _ref.fieldDefinition, isFuncArg = _ref.isFuncArg;
          var lookingForFieldType = _ref2.lookingForFieldType;
          var canUseFuncForField = config2.settings.canUseFuncForField;
          var filteredFuncs = this.filterFuncs(config2, config2.funcs, field, fieldType, isLHS, operator, canUseFuncForField, parentFuncs, isFuncArg, fieldDefinition);
          var items = this.buildOptions(config2, filteredFuncs, lookingForFieldType);
          return items;
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref3) {
          var _leftFieldConfig$widg;
          var config2 = _ref3.config, field = _ref3.field, fieldType = _ref3.fieldType, value2 = _ref3.value, isLHS = _ref3.isLHS, isFuncArg = _ref3.isFuncArg;
          var _config$settings = config2.settings, funcPlaceholder = _config$settings.funcPlaceholder, fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay;
          var selectedFuncKey = value2;
          var isFuncSelected = !!value2;
          var leftFieldConfig = getFieldConfig$4(config2, field);
          var leftFieldWidgetField = leftFieldConfig === null || leftFieldConfig === void 0 || (_leftFieldConfig$widg = leftFieldConfig.widgets) === null || _leftFieldConfig$widg === void 0 ? void 0 : _leftFieldConfig$widg.field;
          leftFieldWidgetField && leftFieldWidgetField.widgetProps || {};
          var placeholder = !isFuncSelected ? funcPlaceholder : null;
          var currFunc = isFuncSelected ? getFuncConfig$1(config2, selectedFuncKey) : null;
          var selectedOpts = currFunc || {};
          var selectedKeys = getFieldPathParts$1(selectedFuncKey, config2);
          var selectedPath = getFieldPathParts$1(selectedFuncKey, config2, true);
          var selectedLabel = this.getFuncLabel(currFunc, selectedFuncKey, config2);
          var partsLabels = getFuncPathLabels(selectedFuncKey, config2);
          var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;
          if (selectedFullLabel == selectedLabel)
            selectedFullLabel = null;
          var isRootFuncAtLHS = isLHS && !isFuncArg;
          var lookingForFieldType = isRootFuncAtLHS && !isFuncSelected && fieldType;
          var errorText = lookingForFieldType ? "Please select function" : null;
          return {
            placeholder,
            selectedKey: selectedFuncKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            selectedFullLabel,
            errorText,
            lookingForFieldType
          };
        }
      }, {
        key: "filterFuncs",
        value: function filterFuncs(config2, funcs, leftFieldFullkey, fieldType, isLHS, operator, canUseFuncForField, parentFuncs, isFuncArg, fieldDefinition) {
          funcs = clone$1(funcs);
          var fieldSeparator = config2.settings.fieldSeparator;
          var leftFieldConfig = getFieldConfig$4(config2, leftFieldFullkey);
          var expectedType;
          var targetDefinition = leftFieldConfig;
          var widget = getWidgetForFieldOp$2(config2, leftFieldFullkey, operator, "value");
          widget && config2.widgets[widget];
          if (isFuncArg) {
            targetDefinition = fieldDefinition;
            expectedType = fieldDefinition === null || fieldDefinition === void 0 ? void 0 : fieldDefinition.type;
          } else if (leftFieldConfig) {
            expectedType = leftFieldConfig.type;
          } else if (!isLHS) {
            expectedType = fieldType;
          }
          function _filter(list, path) {
            for (var funcKey in list) {
              var subfields = list[funcKey].subfields;
              var subpath = (path ? path : []).concat(funcKey);
              var funcFullkey = subpath.join(fieldSeparator);
              var funcConfig = getFuncConfig$1(config2, funcFullkey);
              if (funcConfig.type == "!struct") {
                if (_filter(subfields, subpath) == 0)
                  delete list[funcKey];
              } else {
                var _targetDefinition;
                var canUse = !expectedType || funcConfig.returnType == expectedType;
                if ((_targetDefinition = targetDefinition) !== null && _targetDefinition !== void 0 && _targetDefinition.funcs)
                  canUse = canUse && targetDefinition.funcs.includes(funcFullkey);
                if (canUseFuncForField)
                  canUse = canUse && canUseFuncForField(leftFieldFullkey, leftFieldConfig, funcFullkey, funcConfig, operator);
                if (!funcConfig.allowSelfNesting && parentFuncs && parentFuncs.map(function(_ref4) {
                  var _ref5 = _slicedToArray(_ref4, 2), func = _ref5[0];
                  _ref5[1];
                  return func;
                }).includes(funcFullkey))
                  canUse = false;
                if (!canUse)
                  delete list[funcKey];
              }
            }
            return keys$6(list).length;
          }
          _filter(funcs, []);
          return funcs;
        }
      }, {
        key: "buildOptions",
        value: function buildOptions2(config2, funcs) {
          var _this2 = this;
          var fieldType = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
          var path = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          var optGroupLabel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
          if (!funcs)
            return null;
          var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
          var prefix2 = path !== null && path !== void 0 && path.length ? path.join(fieldSeparator) + fieldSeparator : "";
          var countFieldsMatchesType = function countFieldsMatchesType2(fields) {
            return Object.keys(fields).reduce(function(acc, fieldKey) {
              var field = fields[fieldKey];
              if (field.type === "!struct") {
                return acc + countFieldsMatchesType2(field.subfields);
              } else {
                return acc + (field.type === fieldType ? 1 : 0);
              }
            }, 0);
          };
          return keys$6(funcs).map(function(funcKey) {
            var fullFuncPath = [].concat(_toConsumableArray(path !== null && path !== void 0 ? path : []), [funcKey]);
            var func = funcs[funcKey];
            var label = _this2.getFuncLabel(func, fullFuncPath, config2);
            var partsLabels = getFuncPathLabels(fullFuncPath, config2);
            var fullLabel = partsLabels.join(fieldSeparatorDisplay);
            if (fullLabel == label)
              fullLabel = null;
            var tooltip = func.tooltip;
            if (func.type == "!struct") {
              var items = _this2.buildOptions(config2, func.subfields, fieldType, fullFuncPath, label);
              var hasItemsMatchesType = countFieldsMatchesType(func.subfields) > 0;
              return {
                key: funcKey,
                path: prefix2 + funcKey,
                label,
                fullLabel,
                tooltip,
                items,
                matchesType: hasItemsMatchesType
              };
            } else {
              var matchesType = fieldType !== void 0 ? func.returnType === fieldType : void 0;
              return {
                key: funcKey,
                path: prefix2 + funcKey,
                label,
                fullLabel,
                tooltip,
                grouplabel: optGroupLabel,
                matchesType
              };
            }
          });
        }
      }, {
        key: "getFuncLabel",
        value: function getFuncLabel(funcOpts, funcKey, config2) {
          if (!funcKey)
            return null;
          config2.settings.fieldSeparator;
          var maxLabelsLength = config2.settings.maxLabelsLength;
          var funcParts = getFieldParts$2(funcKey, config2);
          var label = (funcOpts === null || funcOpts === void 0 ? void 0 : funcOpts.label) || last$2(funcParts);
          label = truncateString(label, maxLabelsLength);
          return label;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setValue2 = _this$props.setValue, readonly = _this$props.readonly, id2 = _this$props.id, groupId = _this$props.groupId;
          var renderFunc = config2.settings.renderFunc;
          var renderProps = _objectSpread$f({
            config: config2,
            customProps,
            readonly,
            setField: setValue2,
            items: this.items,
            id: id2,
            groupId
          }, this.meta);
          return renderFunc(renderProps, config2.ctx);
        }
      }]);
      return FuncSelect2;
    }(reactExports.Component);
    FuncSelect.propTypes = {
      id: PropTypes.string,
      groupId: PropTypes.string,
      config: PropTypes.object.isRequired,
      field: PropTypes.any,
      fieldType: PropTypes.string,
      fieldSrc: PropTypes.string,
      operator: PropTypes.string,
      customProps: PropTypes.object,
      value: PropTypes.string,
      setValue: PropTypes.func.isRequired,
      readonly: PropTypes.bool,
      parentFuncs: PropTypes.array,
      fieldDefinition: PropTypes.object,
      isFuncArg: PropTypes.bool,
      isLHS: PropTypes.bool
    };
    var nativeCeil = Math.ceil, nativeMax$1 = Math.max;
    function baseRange$1(start2, end2, step, fromRight) {
      var index = -1, length2 = nativeMax$1(nativeCeil((end2 - start2) / (step || 1)), 0), result = Array(length2);
      while (length2--) {
        result[fromRight ? length2 : ++index] = start2;
        start2 += step;
      }
      return result;
    }
    var _baseRange = baseRange$1;
    var reWhitespace = /\s/;
    function trimmedEndIndex$1(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    var _trimmedEndIndex = trimmedEndIndex$1;
    var trimmedEndIndex = _trimmedEndIndex;
    var reTrimStart = /^\s+/;
    function baseTrim$1(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    var _baseTrim = baseTrim$1;
    var baseTrim = _baseTrim, isObject$2 = isObject_1, isSymbol = isSymbol_1;
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber$2(value2) {
      if (typeof value2 == "number") {
        return value2;
      }
      if (isSymbol(value2)) {
        return NAN;
      }
      if (isObject$2(value2)) {
        var other = typeof value2.valueOf == "function" ? value2.valueOf() : value2;
        value2 = isObject$2(other) ? other + "" : other;
      }
      if (typeof value2 != "string") {
        return value2 === 0 ? value2 : +value2;
      }
      value2 = baseTrim(value2);
      var isBinary = reIsBinary.test(value2);
      return isBinary || reIsOctal.test(value2) ? freeParseInt(value2.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value2) ? NAN : +value2;
    }
    var toNumber_1 = toNumber$2;
    var toNumber$1 = toNumber_1;
    var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
    function toFinite$2(value2) {
      if (!value2) {
        return value2 === 0 ? value2 : 0;
      }
      value2 = toNumber$1(value2);
      if (value2 === INFINITY || value2 === -INFINITY) {
        var sign2 = value2 < 0 ? -1 : 1;
        return sign2 * MAX_INTEGER;
      }
      return value2 === value2 ? value2 : 0;
    }
    var toFinite_1 = toFinite$2;
    var baseRange = _baseRange, isIterateeCall = _isIterateeCall, toFinite$1 = toFinite_1;
    function createRange$1(fromRight) {
      return function(start2, end2, step) {
        if (step && typeof step != "number" && isIterateeCall(start2, end2, step)) {
          end2 = step = void 0;
        }
        start2 = toFinite$1(start2);
        if (end2 === void 0) {
          end2 = start2;
          start2 = 0;
        } else {
          end2 = toFinite$1(end2);
        }
        step = step === void 0 ? start2 < end2 ? 1 : -1 : toFinite$1(step);
        return baseRange(start2, end2, step, fromRight);
      };
    }
    var _createRange = createRange$1;
    var createRange = _createRange;
    var range = createRange();
    var range_1 = range;
    const range$1 = /* @__PURE__ */ getDefaultExportFromCjs(range_1);
    var _excluded$B = ["factory"];
    function ownKeys$e(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$e(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$e(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$e(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var getTitleInListValues = Utils$1.ListUtils.getTitleInListValues;
    var _widgetDefKeysToOmit = Utils$1.ConfigUtils._widgetDefKeysToOmit;
    const WidgetFactory = function(_ref) {
      var delta = _ref.delta, isFuncArg = _ref.isFuncArg;
      _ref.valueSrc;
      var immValue = _ref.value, immValueError = _ref.valueError, asyncListValues = _ref.asyncListValues, isSpecialRange = _ref.isSpecialRange, fieldDefinition = _ref.fieldDefinition;
      _ref.widget;
      var widgetDefinition = _ref.widgetDefinition, widgetValueLabel = _ref.widgetValueLabel, valueLabels = _ref.valueLabels, textSeparators = _ref.textSeparators, setValueHandler = _ref.setValueHandler, config2 = _ref.config, field = _ref.field, fieldSrc = _ref.fieldSrc, fieldType = _ref.fieldType, isLHS = _ref.isLHS, operator = _ref.operator, readonly = _ref.readonly, parentField = _ref.parentField, parentFuncs = _ref.parentFuncs, id2 = _ref.id, groupId = _ref.groupId;
      var widgetFactory = widgetDefinition.factory, fieldWidgetProps = _objectWithoutProperties(widgetDefinition, _excluded$B);
      var isConst = isFuncArg && fieldDefinition.valueSources && fieldDefinition.valueSources.length == 1 && fieldDefinition.valueSources[0] == "const";
      var defaultValue2 = fieldDefinition.defaultValue;
      if (!widgetFactory) {
        return "?";
      }
      var value2 = isSpecialRange ? [immValue.get(0), immValue.get(1)] : immValue ? immValue.get(delta) : void 0;
      var valueError = immValueError && (isSpecialRange ? [immValueError.get(0), immValueError.get(1)] : immValueError.get(delta)) || null;
      if (isSpecialRange && value2[0] === void 0 && value2[1] === void 0)
        value2 = void 0;
      var _ref2 = fieldDefinition || {}, fieldSettings = _ref2.fieldSettings;
      var widgetProps = omit$1(_objectSpread$e(_objectSpread$e(_objectSpread$e({}, fieldWidgetProps), fieldSettings), {}, {
        config: config2,
        field,
        fieldSrc,
        fieldType,
        isLHS,
        parentField,
        parentFuncs,
        fieldDefinition,
        operator,
        delta,
        isSpecialRange,
        isFuncArg,
        value: value2,
        valueError,
        label: widgetValueLabel.label,
        placeholder: widgetValueLabel.placeholder,
        placeholders: valueLabels ? valueLabels.placeholder : null,
        textSeparators,
        setValue: setValueHandler,
        readonly,
        asyncListValues,
        id: id2,
        groupId
      }), [].concat(_toConsumableArray(_widgetDefKeysToOmit), ["toJS"]));
      if (isConst && defaultValue2) {
        var listValues2 = (fieldSettings === null || fieldSettings === void 0 ? void 0 : fieldSettings.treeValues) || (fieldSettings === null || fieldSettings === void 0 ? void 0 : fieldSettings.listValues);
        if (typeof defaultValue2 == "boolean") {
          return defaultValue2 ? widgetProps.labelYes || "YES" : widgetProps.labelNo || "NO";
        } else if (listValues2) {
          if (Array.isArray(defaultValue2))
            return defaultValue2.map(function(v2) {
              return getTitleInListValues(listValues2, v2) || v2;
            }).join(", ");
          else
            return getTitleInListValues(listValues2, defaultValue2) || defaultValue2;
        }
        return "" + defaultValue2;
      }
      return widgetFactory(widgetProps, config2.ctx);
    };
    function _createSuper$i(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$i();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$i() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var _Utils$ConfigUtils$3 = Utils$1.ConfigUtils, getFieldConfig$3 = _Utils$ConfigUtils$3.getFieldConfig, getOperatorConfig$2 = _Utils$ConfigUtils$3.getOperatorConfig, getFieldWidgetConfig$2 = _Utils$ConfigUtils$3.getFieldWidgetConfig;
    var _Utils$RuleUtils$1 = Utils$1.RuleUtils, getValueSourcesForFieldOp = _Utils$RuleUtils$1.getValueSourcesForFieldOp, getWidgetForFieldOp$1 = _Utils$RuleUtils$1.getWidgetForFieldOp, getValueLabel = _Utils$RuleUtils$1.getValueLabel;
    var createListFromArray$1 = Utils$1.DefaultUtils.createListFromArray;
    var funcArgDummyOpDef = {
      cardinality: 1
    };
    var Widget = /* @__PURE__ */ function(_Component) {
      _inherits(Widget2, _Component);
      var _super = _createSuper$i(Widget2);
      function Widget2(_props) {
        var _this;
        _classCallCheck(this, Widget2);
        _this = _super.call(this, _props);
        _this._setValue = function(isSpecialRange, delta, widgetType, value2, asyncListValues, __isInternal2) {
          if (isSpecialRange && Array.isArray(value2)) {
            var oldRange = [_this.props.value.get(0), _this.props.value.get(1)];
            if (oldRange[0] != value2[0])
              _this.props.setValue(0, value2[0], widgetType, asyncListValues, __isInternal2);
            if (oldRange[1] != value2[1])
              _this.props.setValue(1, value2[1], widgetType, asyncListValues, __isInternal2);
          } else {
            _this.props.setValue(delta, value2, widgetType, asyncListValues, __isInternal2);
          }
        };
        _this._onChangeValueSrc = function(delta, srcKey) {
          _this.props.setValueSrc(delta, srcKey);
        };
        _this.renderWidget = function(delta, meta, props) {
          var config2 = props.config, isFuncArg = props.isFuncArg, leftField = props.leftField, operator = props.operator, values2 = props.value, valueError = props.valueError, readonly = props.readonly, parentField = props.parentField, parentFuncs = props.parentFuncs, id2 = props.id, groupId = props.groupId, fieldSrc = props.fieldSrc, fieldType = props.fieldType, isLHS = props.isLHS;
          var settings2 = config2.settings;
          var widgets2 = meta.widgets, iValues = meta.iValues, aField = meta.aField, valueSources = meta.valueSources;
          var value2 = isFuncArg ? iValues : values2;
          var field = isFuncArg ? leftField : aField;
          var _widgets$delta = widgets2[delta], valueSrc = _widgets$delta.valueSrc, valueLabel = _widgets$delta.valueLabel;
          var hasValueSources = valueSources.length > 1 && !readonly;
          var widgetLabel = settings2.showLabels ? /* @__PURE__ */ React$4.createElement("label", {
            className: "rule--label"
          }, valueLabel.label) : null;
          return /* @__PURE__ */ React$4.createElement("div", {
            key: "widget-" + field + "-" + delta,
            className: classNames(valueSrc == "func" ? "widget--func" : "widget--widget", hasValueSources ? "widget--has-valuerscs" : "widget--has-no-valuerscs")
          }, valueSrc == "func" ? null : widgetLabel, /* @__PURE__ */ React$4.createElement(WidgetFactory, _extends$1({
            id: id2,
            groupId,
            valueSrc,
            delta,
            value: value2,
            valueError,
            isFuncArg,
            isLHS
          }, pick$1(meta, ["isSpecialRange", "fieldDefinition", "asyncListValues"]), pick$1(widgets2[delta], ["widget", "widgetDefinition", "widgetValueLabel", "valueLabels", "textSeparators", "setValueHandler"]), {
            config: config2,
            field,
            fieldSrc,
            fieldType,
            parentField,
            parentFuncs,
            operator,
            readonly
          })));
        };
        _this.renderValueSources = function(delta, meta, props) {
          var config2 = props.config, isFuncArg = props.isFuncArg, leftField = props.leftField, operator = props.operator, readonly = props.readonly;
          var settings2 = config2.settings;
          var valueSources = meta.valueSources, widgets2 = meta.widgets, aField = meta.aField;
          var field = isFuncArg ? leftField : aField;
          var _widgets$delta2 = widgets2[delta], valueSrc = _widgets$delta2.valueSrc, setValueSrcHandler = _widgets$delta2.setValueSrcHandler;
          var valueSourcesInfo = settings2.valueSourcesInfo, renderValueSources = settings2.renderValueSources;
          var valueSourcesOptions = valueSources.map(function(srcKey) {
            return [srcKey, {
              label: valueSourcesInfo[srcKey].label
            }];
          });
          var ValueSources = function ValueSources2(pr) {
            return renderValueSources(pr, config2.ctx);
          };
          var sourceLabel = settings2.showLabels ? /* @__PURE__ */ React$4.createElement("label", {
            className: "rule--label"
          }, " ") : null;
          return valueSources.length > 1 && !readonly && /* @__PURE__ */ React$4.createElement("div", {
            key: "valuesrc-" + field + "-" + delta,
            className: "widget--valuesrc"
          }, sourceLabel, /* @__PURE__ */ React$4.createElement(ValueSources, {
            key: "valuesrc-" + delta,
            delta,
            valueSources: valueSourcesOptions,
            valueSrc,
            config: config2,
            field,
            operator,
            setValueSrc: setValueSrcHandler,
            readonly,
            title: settings2.valueSourcesPopupTitle
          }));
        };
        _this.renderSep = function(delta, meta, props) {
          var config2 = props.config;
          var widgets2 = meta.widgets;
          var settings2 = config2.settings;
          var sepText = widgets2[delta].sepText;
          var sepLabel = settings2.showLabels ? /* @__PURE__ */ React$4.createElement("label", {
            className: "rule--label"
          }, " ") : null;
          return sepText && /* @__PURE__ */ React$4.createElement("div", {
            key: "widget-separators-" + delta,
            className: classNames("widget--sep", delta == 0 && "widget--sep-first")
          }, sepLabel, /* @__PURE__ */ React$4.createElement("span", null, sepText));
        };
        _this.renderWidgetDelta = function(delta) {
          var sep = _this.renderSep(delta, _this.meta, _this.props);
          var sources = _this.renderValueSources(delta, _this.meta, _this.props);
          var widgetCmp = _this.renderWidget(delta, _this.meta, _this.props);
          return [sep, sources, widgetCmp];
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(_props);
        return _this;
      }
      _createClass(Widget2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["config", "field", "fieldSrc", "fieldType", "fieldFunc", "fieldArg", "leftField", "operator", "valueSrc", "isFuncArg", "asyncListValues", "isLHS"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return nextProps[k2] !== prevProps[k2] || k2 == "isFuncArg" && nextProps["isFuncArg"] && nextProps["value"] !== prevProps["value"];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var _this2 = this;
          var config2 = _ref.config, simpleField = _ref.field;
          _ref.fieldSrc;
          var fieldType = _ref.fieldType, fieldFunc = _ref.fieldFunc, fieldArg = _ref.fieldArg, operator = _ref.operator, valueSrcs = _ref.valueSrc, values2 = _ref.value, isForRuleGroup = _ref.isForRuleGroup, isCaseValue = _ref.isCaseValue, isFuncArg = _ref.isFuncArg;
          _ref.leftField;
          var asyncListValues = _ref.asyncListValues;
          var field = isFuncArg ? {
            func: fieldFunc,
            arg: fieldArg
          } : simpleField;
          var isOkWithoutField = !simpleField && fieldType;
          var iValueSrcs = valueSrcs;
          var iValues = values2;
          if (isFuncArg || isForRuleGroup || isCaseValue) {
            iValueSrcs = createListFromArray$1([valueSrcs]);
            iValues = createListFromArray$1([values2]);
          }
          var fieldDefinition = getFieldConfig$3(config2, field);
          if (!fieldDefinition && isOkWithoutField) {
            fieldDefinition = config2.types[fieldType];
          }
          var defaultWidget = getWidgetForFieldOp$1(config2, field, operator);
          if (!defaultWidget && isOkWithoutField) {
            var _config$types$fieldTy;
            defaultWidget = (_config$types$fieldTy = config2.types[fieldType]) === null || _config$types$fieldTy === void 0 ? void 0 : _config$types$fieldTy.mainWidget;
          }
          var operatorDefinition = isFuncArg ? funcArgDummyOpDef : getOperatorConfig$2(config2, operator, field);
          if ((fieldDefinition == null || operatorDefinition == null) && !isCaseValue) {
            return null;
          }
          var isSpecialRange = operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.isSpecialRange;
          var isSpecialRangeForSrcField = isSpecialRange && (iValueSrcs.get(0) == "field" || iValueSrcs.get(1) == "field");
          var isTrueSpecialRange = isSpecialRange && !isSpecialRangeForSrcField;
          var cardinality = isTrueSpecialRange ? 1 : defaultValue(operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.cardinality, 1);
          if (cardinality === 0) {
            return null;
          }
          var valueSources = getValueSourcesForFieldOp(config2, field, operator, fieldDefinition);
          if (!field) {
            valueSources = Object.keys(config2.settings.valueSourcesInfo);
          }
          var widgets2 = range$1(0, cardinality).map(function(delta) {
            var _widgetDefinition;
            var valueSrc = iValueSrcs.get(delta) || null;
            var widget = getWidgetForFieldOp$1(config2, field, operator, valueSrc);
            var widgetDefinition = getFieldWidgetConfig$2(config2, field, operator, widget, valueSrc);
            if (isSpecialRangeForSrcField) {
              widget = widgetDefinition.singleWidget;
              widgetDefinition = getFieldWidgetConfig$2(config2, field, operator, widget, valueSrc);
            }
            if (!widgetDefinition && isOkWithoutField) {
              widget = ["func", "field"].includes(valueSrc) ? valueSrc : defaultWidget;
              widgetDefinition = config2.widgets[widget];
            }
            var widgetType = (_widgetDefinition = widgetDefinition) === null || _widgetDefinition === void 0 ? void 0 : _widgetDefinition.type;
            var valueLabel = getValueLabel(config2, field, operator, delta, valueSrc, isTrueSpecialRange);
            var widgetValueLabel = getValueLabel(config2, field, operator, delta, null, isTrueSpecialRange);
            var sepText = operatorDefinition !== null && operatorDefinition !== void 0 && operatorDefinition.textSeparators ? operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.textSeparators[delta] : null;
            var setValueSrcHandler = _this2._onChangeValueSrc.bind(_this2, delta);
            var valueLabels = null;
            var textSeparators = null;
            if (isSpecialRange) {
              valueLabels = [getValueLabel(config2, field, operator, 0), getValueLabel(config2, field, operator, 1)];
              valueLabels = {
                placeholder: [valueLabels[0].placeholder, valueLabels[1].placeholder],
                label: [valueLabels[0].label, valueLabels[1].label]
              };
              textSeparators = operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.textSeparators;
            }
            var setValueHandler = _this2._setValue.bind(_this2, isSpecialRange, delta, widgetType);
            return {
              valueSrc,
              valueLabel,
              widget,
              sepText,
              setValueSrcHandler,
              widgetDefinition,
              widgetValueLabel,
              valueLabels,
              textSeparators,
              setValueHandler
            };
          });
          return {
            defaultWidget,
            fieldDefinition,
            operatorDefinition,
            isSpecialRange: isTrueSpecialRange,
            cardinality,
            valueSources,
            widgets: widgets2,
            iValues,
            //correct for isFuncArg
            aField: field,
            //correct for isFuncArg
            asyncListValues
          };
        }
      }, {
        key: "render",
        value: function render() {
          if (!this.meta)
            return null;
          var _this$meta = this.meta, defaultWidget = _this$meta.defaultWidget, cardinality = _this$meta.cardinality;
          if (!defaultWidget)
            return null;
          var name = defaultWidget;
          return /* @__PURE__ */ React$4.createElement(Col, {
            className: "rule--widget rule--widget--".concat(name.toUpperCase()),
            key: "widget-col-" + name
          }, range$1(0, cardinality).map(this.renderWidgetDelta));
        }
      }]);
      return Widget2;
    }(reactExports.Component);
    Widget.propTypes = {
      config: PropTypes.object.isRequired,
      value: PropTypes.any,
      //instanceOf(Immutable.List)
      valueSrc: PropTypes.any,
      //instanceOf(Immutable.List)
      valueError: PropTypes.any,
      field: PropTypes.any,
      fieldSrc: PropTypes.string,
      fieldType: PropTypes.string,
      operator: PropTypes.string,
      readonly: PropTypes.bool,
      asyncListValues: PropTypes.array,
      id: PropTypes.string,
      groupId: PropTypes.string,
      //actions
      setValue: PropTypes.func,
      setValueSrc: PropTypes.func,
      // for isFuncArg
      isFuncArg: PropTypes.bool,
      fieldFunc: PropTypes.string,
      fieldArg: PropTypes.string,
      leftField: PropTypes.any,
      // for RuleGroupExt
      isForRuleGroup: PropTypes.bool,
      parentField: PropTypes.string,
      // for func in func
      parentFuncs: PropTypes.array,
      isLHS: PropTypes.bool,
      // for case_value
      isCaseValue: PropTypes.bool
    };
    function _createSuper$h(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$h();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$h() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var getFuncConfig = Utils$1.ConfigUtils.getFuncConfig;
    var _Utils$FuncUtils = Utils$1.FuncUtils, setFunc = _Utils$FuncUtils.setFunc, setArgValue = _Utils$FuncUtils.setArgValue, setArgValueSrc = _Utils$FuncUtils.setArgValueSrc;
    var FuncWidget = /* @__PURE__ */ function(_Component) {
      _inherits(FuncWidget2, _Component);
      var _super = _createSuper$h(FuncWidget2);
      function FuncWidget2(props) {
        var _this;
        _classCallCheck(this, FuncWidget2);
        _this = _super.call(this, props);
        _this.setFunc = function(funcKey) {
          _this.props.setValue(setFunc(_this.props.value, funcKey, _this.props.config));
        };
        _this.setArgValue = function(argKey, argVal, asyncListValues, __isInternal2) {
          var config2 = _this.props.config;
          var funcDefinition = _this.meta.funcDefinition;
          var args = funcDefinition.args;
          var argDefinition = args[argKey];
          _this.props.setValue(setArgValue(_this.props.value, argKey, argVal, argDefinition, config2), asyncListValues, __isInternal2);
        };
        _this.setArgValueSrc = function(argKey, argValSrc) {
          var config2 = _this.props.config;
          var funcDefinition = _this.meta.funcDefinition;
          var args = funcDefinition.args;
          var argDefinition = args[argKey];
          _this.props.setValue(setArgValueSrc(_this.props.value, argKey, argValSrc, argDefinition, config2));
        };
        _this.renderFuncSelect = function() {
          var _this$props = _this.props, config2 = _this$props.config, field = _this$props.field, fieldType = _this$props.fieldType, fieldSrc = _this$props.fieldSrc, isLHS = _this$props.isLHS, operator = _this$props.operator, customProps = _this$props.customProps, value2 = _this$props.value, readonly = _this$props.readonly, parentFuncs = _this$props.parentFuncs, id2 = _this$props.id, groupId = _this$props.groupId, isFuncArg = _this$props.isFuncArg, fieldDefinition = _this$props.fieldDefinition;
          var funcKey = value2 ? value2.get("func") : null;
          var selectProps = {
            value: funcKey,
            setValue: _this.setFunc,
            config: config2,
            field,
            fieldType,
            fieldSrc,
            isLHS,
            operator,
            customProps,
            readonly,
            parentFuncs,
            isFuncArg,
            fieldDefinition,
            id: id2,
            groupId
          };
          var _config$settings = config2.settings, showLabels = _config$settings.showLabels, funcLabel = _config$settings.funcLabel;
          var widgetLabel = showLabels ? /* @__PURE__ */ React$4.createElement("label", {
            className: "rule--label"
          }, funcLabel) : null;
          return /* @__PURE__ */ React$4.createElement(Col, {
            key: "func",
            className: "rule--func"
          }, widgetLabel, /* @__PURE__ */ React$4.createElement(FuncSelect, selectProps));
        };
        _this.renderArgLabel = function(argKey, argDefinition) {
          var valueSources = argDefinition.valueSources, type = argDefinition.type, showPrefix = argDefinition.showPrefix, label = argDefinition.label;
          var config2 = _this.props.config;
          var isConst = valueSources && valueSources.length == 1 && valueSources[0] == "const";
          var forceShow = !config2.settings.showLabels && (type == "boolean" || isConst) && showPrefix;
          if (!forceShow)
            return null;
          return /* @__PURE__ */ React$4.createElement(Col, {
            className: "rule--func--arg-label"
          }, label || argKey);
        };
        _this.renderArgLabelSep = function(argKey, argDefinition) {
          var valueSources = argDefinition.valueSources, type = argDefinition.type, showPrefix = argDefinition.showPrefix;
          var config2 = _this.props.config;
          var isConst = valueSources && valueSources.length == 1 && valueSources[0] == "const";
          var forceShow = !config2.settings.showLabels && (type == "boolean" || isConst) && showPrefix;
          if (!forceShow)
            return null;
          return /* @__PURE__ */ React$4.createElement(Col, {
            className: "rule--func--arg-label-sep"
          }, ":");
        };
        _this.renderArgVal = function(funcKey, argKey, argDefinition) {
          var _this$props2 = _this.props, config2 = _this$props2.config, field = _this$props2.field, fieldType = _this$props2.fieldType, fieldSrc = _this$props2.fieldSrc, isLHS = _this$props2.isLHS;
          _this$props2.operator;
          var value2 = _this$props2.value, readonly = _this$props2.readonly, parentFuncs = _this$props2.parentFuncs, id2 = _this$props2.id, groupId = _this$props2.groupId;
          var arg = value2 ? value2.getIn(["args", argKey]) : null;
          var argVal = arg ? arg.get("value") : void 0;
          var defaultValueSource = argDefinition.valueSources.length == 1 ? argDefinition.valueSources[0] : void 0;
          var argValSrc = arg ? arg.get("valueSrc") || defaultValueSource || "value" : defaultValueSource;
          var widgetProps = {
            config: config2,
            fieldFunc: funcKey,
            fieldArg: argKey,
            leftField: field,
            fieldType,
            // type of leftField
            fieldSrc,
            // src of leftField
            isLHS,
            operator: null,
            value: argVal,
            valueSrc: argValSrc,
            setValue: _this.setArgValue,
            setValueSrc: _this.setArgValueSrc,
            funcKey,
            argKey,
            argDefinition,
            readonly,
            parentFuncs,
            id: id2,
            groupId
          };
          return /* @__PURE__ */ React$4.createElement(Col, {
            className: "rule--func--arg-value"
          }, /* @__PURE__ */ React$4.createElement(ArgWidget, widgetProps));
        };
        _this.renderArgSep = function(argKey, argDefinition, argIndex, _ref) {
          var renderSeps = _ref.renderSeps;
          if (!argIndex)
            return null;
          return /* @__PURE__ */ React$4.createElement(Col, {
            className: "rule--func--arg-sep"
          }, renderSeps ? renderSeps[argIndex - 1] : ", ");
        };
        _this.renderBracketBefore = function(_ref2) {
          var renderBrackets = _ref2.renderBrackets;
          return /* @__PURE__ */ React$4.createElement(Col, {
            key: "before_args",
            className: "rule--func--bracket-before"
          }, renderBrackets ? renderBrackets[0] : "(");
        };
        _this.renderBracketAfter = function(_ref3) {
          var renderBrackets = _ref3.renderBrackets;
          return /* @__PURE__ */ React$4.createElement(Col, {
            key: "after_args",
            className: "rule--func--bracket-after"
          }, renderBrackets ? renderBrackets[1] : ")");
        };
        _this.renderFuncArgs = function() {
          var _this$meta = _this.meta, funcDefinition = _this$meta.funcDefinition, funcKey = _this$meta.funcKey;
          if (!funcKey)
            return null;
          var _ref4 = funcDefinition || {}, args = _ref4.args;
          if (!args)
            return null;
          return /* @__PURE__ */ React$4.createElement(React$4.Fragment, null, _this.renderBracketBefore(funcDefinition), /* @__PURE__ */ React$4.createElement(Col, {
            key: "args",
            className: "rule--func--args"
          }, Object.keys(args).map(function(argKey, argIndex) {
            return /* @__PURE__ */ React$4.createElement(Col, {
              key: "arg-".concat(argKey, "-").concat(argIndex),
              className: "rule--func--arg"
            }, _this.renderArgSep(argKey, args[argKey], argIndex, funcDefinition), _this.renderArgLabel(argKey, args[argKey]), _this.renderArgLabelSep(argKey, args[argKey]), _this.renderArgVal(funcKey, argKey, args[argKey]));
          })), _this.renderBracketAfter(funcDefinition));
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(FuncWidget2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["config", "field", "operator", "value", "fieldSrc", "fieldType", "isLHS"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref5) {
          var config2 = _ref5.config;
          _ref5.field;
          _ref5.operator;
          var value2 = _ref5.value;
          var funcKey = value2 ? value2.get("func") : null;
          var funcDefinition = funcKey ? getFuncConfig(config2, funcKey) : null;
          return {
            funcDefinition,
            funcKey
          };
        }
      }, {
        key: "render",
        value: function render() {
          return /* @__PURE__ */ React$4.createElement(Col, {
            className: "rule--func--wrapper"
          }, this.renderFuncSelect(), this.renderFuncArgs());
        }
      }]);
      return FuncWidget2;
    }(reactExports.Component);
    FuncWidget.propTypes = {
      id: PropTypes.string,
      groupId: PropTypes.string,
      config: PropTypes.object.isRequired,
      field: PropTypes.any,
      fieldSrc: PropTypes.string,
      fieldType: PropTypes.string,
      operator: PropTypes.string,
      customProps: PropTypes.object,
      value: PropTypes.object,
      //instanceOf(Immutable.Map) //with keys 'func' and `args`
      setValue: PropTypes.func.isRequired,
      readonly: PropTypes.bool,
      parentFuncs: PropTypes.array,
      fieldDefinition: PropTypes.object,
      isFuncArg: PropTypes.bool,
      isLHS: PropTypes.bool
    };
    var ArgWidget = /* @__PURE__ */ function(_Component2) {
      _inherits(ArgWidget2, _Component2);
      var _super2 = _createSuper$h(ArgWidget2);
      function ArgWidget2(props) {
        var _this2;
        _classCallCheck(this, ArgWidget2);
        _this2 = _super2.call(this, props);
        _this2.setValue = function(_delta, value2, _widgetType, asyncListValues, __isInternal2) {
          var _this2$props = _this2.props, setValue2 = _this2$props.setValue, argKey = _this2$props.argKey;
          setValue2(argKey, value2, asyncListValues, __isInternal2);
        };
        _this2.setValueSrc = function(_delta, valueSrc, _widgetType) {
          var _this2$props2 = _this2.props, setValueSrc2 = _this2$props2.setValueSrc, argKey = _this2$props2.argKey;
          setValueSrc2(argKey, valueSrc);
        };
        useOnPropsChanged(_assertThisInitialized(_this2));
        _this2.onPropsChanged(props);
        return _this2;
      }
      _createClass(ArgWidget2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["parentFuncs", "funcKey", "argKey"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref6) {
          var parentFuncs = _ref6.parentFuncs, funcKey = _ref6.funcKey, argKey = _ref6.argKey;
          var newParentFuncs = [].concat(_toConsumableArray(parentFuncs || []), [[funcKey, argKey]]);
          return {
            parentFuncs: newParentFuncs
          };
        }
      }, {
        key: "render",
        value: function render() {
          var parentFuncs = this.meta.parentFuncs;
          return /* @__PURE__ */ React$4.createElement(Widget, _extends$1({}, this.props, {
            setValue: this.setValue,
            setValueSrc: this.setValueSrc,
            isFuncArg: true,
            parentFuncs
          }));
        }
      }]);
      return ArgWidget2;
    }(reactExports.Component);
    ArgWidget.propTypes = {
      funcKey: PropTypes.string.isRequired,
      argKey: PropTypes.string.isRequired,
      setValue: PropTypes.func.isRequired,
      setValueSrc: PropTypes.func.isRequired,
      readonly: PropTypes.bool,
      isLHS: PropTypes.bool,
      parentFuncs: PropTypes.array,
      id: PropTypes.string,
      groupId: PropTypes.string
    };
    function _createSuper$g(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$g();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$g() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var FieldWrapper = /* @__PURE__ */ function(_PureComponent) {
      _inherits(FieldWrapper2, _PureComponent);
      var _super = _createSuper$g(FieldWrapper2);
      function FieldWrapper2() {
        var _this;
        _classCallCheck(this, FieldWrapper2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _this.renderField = function() {
          var _this$props = _this.props, config2 = _this$props.config, classname = _this$props.classname, selectedField = _this$props.selectedField, selectedFieldSrc = _this$props.selectedFieldSrc, selectedFieldType = _this$props.selectedFieldType, setField2 = _this$props.setField, parentField = _this$props.parentField, readonly = _this$props.readonly, id2 = _this$props.id, groupId = _this$props.groupId;
          var supportedFieldSrcs = ["func", "field"];
          if (!supportedFieldSrcs.includes(selectedFieldSrc)) {
            return "?";
          }
          var field = selectedFieldSrc === "func" ? /* @__PURE__ */ React$4.createElement(FuncWidget, {
            isLHS: true,
            config: config2,
            value: selectedField,
            fieldSrc: selectedFieldSrc,
            fieldType: selectedFieldType,
            parentField,
            setValue: setField2,
            readonly,
            id: id2,
            groupId,
            key: "field-func-" + id2
          }) : /* @__PURE__ */ React$4.createElement(Field, {
            config: config2,
            selectedField,
            selectedFieldSrc,
            selectedFieldType,
            parentField,
            setField: setField2,
            customProps: config2.settings.customFieldSelectProps,
            readonly,
            id: id2,
            groupId,
            key: "field-" + id2
          });
          var fieldLabel = selectedFieldSrc === "func" ? config2.settings.funcLabel : config2.settings.fieldLabel;
          var label = config2.settings.showLabels && selectedFieldSrc !== "func" && /* @__PURE__ */ React$4.createElement("label", {
            className: "rule--label"
          }, fieldLabel);
          return /* @__PURE__ */ React$4.createElement("div", {
            key: selectedFieldSrc,
            className: classname
          }, label, field);
        };
        _this.renderFieldSources = function() {
          var _this$props2 = _this.props, config2 = _this$props2.config, readonly = _this$props2.readonly, selectedFieldSrc = _this$props2.selectedFieldSrc, setFieldSrc2 = _this$props2.setFieldSrc, id2 = _this$props2.id;
          var settings2 = config2.settings;
          var fieldSources = settings2.fieldSources, valueSourcesInfo = settings2.valueSourcesInfo, renderValueSources = settings2.renderValueSources;
          var fieldSourcesOptions = fieldSources.map(function(srcKey) {
            return [srcKey, {
              label: valueSourcesInfo[srcKey].label
            }];
          });
          var ValueSources = function ValueSources2(pr) {
            return renderValueSources(pr, config2.ctx);
          };
          var sourceLabel = settings2.showLabels ? /* @__PURE__ */ React$4.createElement("label", {
            className: "rule--label"
          }, " ") : null;
          return fieldSources.length > 1 && !readonly && /* @__PURE__ */ React$4.createElement("div", {
            key: "fieldsrc",
            className: "rule--fieldsrc"
          }, sourceLabel, /* @__PURE__ */ React$4.createElement(ValueSources, {
            key: "fieldsrc-" + id2,
            valueSources: fieldSourcesOptions,
            valueSrc: selectedFieldSrc,
            config: config2,
            setValueSrc: setFieldSrc2,
            readonly,
            title: settings2.fieldSourcesPopupTitle
          }));
        };
        return _this;
      }
      _createClass(FieldWrapper2, [{
        key: "render",
        value: function render() {
          var _this$props3 = this.props;
          _this$props3.classname;
          var canSelectFieldSource = _this$props3.canSelectFieldSource;
          var fieldSources = canSelectFieldSource && this.renderFieldSources();
          var field = this.renderField();
          if (!canSelectFieldSource) {
            return field;
          } else {
            return /* @__PURE__ */ React$4.createElement(Col, {
              className: "rule--field-wrapper"
            }, fieldSources, field);
          }
        }
      }]);
      return FieldWrapper2;
    }(reactExports.PureComponent);
    var _excluded$A = ["factory"];
    function _createSuper$f(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$f();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$f() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var getOperatorConfig$1 = Utils$1.ConfigUtils.getOperatorConfig;
    var OperatorOptions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(OperatorOptions2, _PureComponent);
      var _super = _createSuper$f(OperatorOptions2);
      function OperatorOptions2() {
        _classCallCheck(this, OperatorOptions2);
        return _super.apply(this, arguments);
      }
      _createClass(OperatorOptions2, [{
        key: "render",
        value: function render() {
          if (!this.props.selectedOperator)
            return null;
          var operatorDefinitions = getOperatorConfig$1(this.props.config, this.props.selectedOperator, this.props.selectedField);
          if (typeof operatorDefinitions.options === "undefined") {
            return null;
          }
          var _operatorDefinitions$ = operatorDefinitions.options, optionsFactory = _operatorDefinitions$.factory, basicOptionsProps = _objectWithoutProperties(_operatorDefinitions$, _excluded$A);
          var optionsProps = Object.assign({}, basicOptionsProps, {
            config: this.props.config,
            field: this.props.selectedField,
            fieldSrc: this.props.selectedFieldSrc,
            operator: this.props.selectedOperator,
            options: this.props.operatorOptions,
            setOption: this.props.setOperatorOption,
            readonly: this.props.readonly
          });
          var optionsCmp = optionsFactory(optionsProps, this.props.config.ctx);
          var name = this.props.selectedOperator;
          return /* @__PURE__ */ React$4.createElement("div", {
            className: "rule--operator rule--operator--".concat(name.toUpperCase())
          }, optionsCmp);
        }
      }]);
      return OperatorOptions2;
    }(reactExports.PureComponent);
    OperatorOptions.propTypes = {
      config: PropTypes.object.isRequired,
      operatorOptions: PropTypes.any.isRequired,
      //instanceOf(Immutable.Map)
      selectedField: PropTypes.any,
      selectedFieldSrc: PropTypes.string,
      selectedOperator: PropTypes.string.isRequired,
      readonly: PropTypes.bool,
      //actions
      setOperatorOption: PropTypes.func.isRequired
    };
    function ownKeys$d(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$d(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$d(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$e(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$e();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$e() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var _Utils$ConfigUtils$2 = Utils$1.ConfigUtils, getFieldConfig$2 = _Utils$ConfigUtils$2.getFieldConfig, getOperatorConfig = _Utils$ConfigUtils$2.getOperatorConfig, getFieldWidgetConfig$1 = _Utils$ConfigUtils$2.getFieldWidgetConfig, getFieldParts$1 = _Utils$ConfigUtils$2.getFieldParts;
    var isEmptyRuleProperties = Utils$1.RuleUtils.isEmptyRuleProperties;
    var Rule = /* @__PURE__ */ function(_Component) {
      _inherits(Rule2, _Component);
      var _super = _createSuper$e(Rule2);
      function Rule2(props) {
        var _this;
        _classCallCheck(this, Rule2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.removeSelf = _this.removeSelf.bind(_assertThisInitialized(_this));
        _this.setLock = _this.setLock.bind(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(Rule2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["selectedField", "selectedFieldSrc", "selectedFieldType", "selectedOperator", "config", "reordableNodesCnt", "isLocked"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var selectedField = _ref.selectedField, selectedFieldType = _ref.selectedFieldType, selectedOperator = _ref.selectedOperator, config2 = _ref.config, reordableNodesCnt = _ref.reordableNodesCnt, isLocked = _ref.isLocked;
          var keepInputOnChangeFieldSrc = config2.settings.keepInputOnChangeFieldSrc;
          var selectedFieldParts = getFieldParts$1(selectedField, config2);
          var selectedFieldConfig = getFieldConfig$2(config2, selectedField);
          var isSelectedGroup = selectedFieldConfig && selectedFieldConfig.type == "!struct";
          var isOkWithoutField = keepInputOnChangeFieldSrc && selectedFieldType;
          var isFieldSelected = !!selectedField || isOkWithoutField;
          var isFieldAndOpSelected = isFieldSelected && selectedOperator;
          var selectedOperatorConfig = getOperatorConfig(config2, selectedOperator, selectedField);
          var selectedOperatorHasOptions = selectedOperatorConfig && selectedOperatorConfig.options != null;
          var selectedFieldWidgetConfig = getFieldWidgetConfig$1(config2, selectedField, selectedOperator, null, null) || {};
          var hideOperator = selectedFieldWidgetConfig.hideOperator;
          var showDragIcon = config2.settings.canReorder && reordableNodesCnt > 1 && !isLocked;
          var showOperator = isFieldSelected && !hideOperator;
          var showOperatorLabel = isFieldSelected && hideOperator && selectedFieldWidgetConfig.operatorInlineLabel;
          var showWidget = isFieldAndOpSelected && !isSelectedGroup;
          var showOperatorOptions = isFieldAndOpSelected && selectedOperatorHasOptions;
          return {
            selectedFieldParts,
            selectedFieldWidgetConfig,
            showDragIcon,
            showOperator,
            showOperatorLabel,
            showWidget,
            showOperatorOptions
          };
        }
      }, {
        key: "setLock",
        value: function setLock2(lock) {
          this.props.setLock(lock);
        }
      }, {
        key: "removeSelf",
        value: function removeSelf() {
          var _this2 = this;
          var _this$props = this.props, confirmFn = _this$props.confirmFn, config2 = _this$props.config;
          var _config$settings = config2.settings, renderConfirm = _config$settings.renderConfirm, confirmOptions = _config$settings.removeRuleConfirmOptions;
          var doRemove = function doRemove2() {
            _this2.props.removeSelf();
          };
          if (confirmOptions && !this.isEmptyCurrentRule()) {
            renderConfirm.call(config2.ctx, _objectSpread$d(_objectSpread$d({}, confirmOptions), {}, {
              onOk: doRemove,
              onCancel: null,
              confirmFn
            }), config2.ctx);
          } else {
            doRemove();
          }
        }
      }, {
        key: "_buildWidgetProps",
        value: function _buildWidgetProps(_ref2) {
          var selectedField = _ref2.selectedField, selectedFieldSrc = _ref2.selectedFieldSrc, selectedFieldType = _ref2.selectedFieldType, selectedOperator = _ref2.selectedOperator, operatorOptions = _ref2.operatorOptions, value2 = _ref2.value, valueType = _ref2.valueType, valueSrc = _ref2.valueSrc, asyncListValues = _ref2.asyncListValues, valueError = _ref2.valueError, parentField = _ref2.parentField;
          return {
            field: selectedField,
            fieldSrc: selectedFieldSrc,
            fieldType: selectedFieldType,
            operator: selectedOperator,
            operatorOptions,
            value: value2,
            valueType,
            valueSrc,
            asyncListValues,
            valueError,
            parentField
          };
        }
      }, {
        key: "isEmptyCurrentRule",
        value: function isEmptyCurrentRule() {
          var config2 = this.props.config;
          var ruleData = this._buildWidgetProps(this.props);
          return isEmptyRuleProperties(ruleData, config2);
        }
      }, {
        key: "renderField",
        value: function renderField() {
          var _this$props2 = this.props, config2 = _this$props2.config, isLocked = _this$props2.isLocked, parentField = _this$props2.parentField, groupId = _this$props2.groupId, id2 = _this$props2.id, selectedFieldSrc = _this$props2.selectedFieldSrc, selectedField = _this$props2.selectedField, selectedFieldType = _this$props2.selectedFieldType, setField2 = _this$props2.setField, setFieldSrc2 = _this$props2.setFieldSrc;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          return /* @__PURE__ */ React$4.createElement(FieldWrapper, {
            key: "field",
            classname: classNames(selectedFieldSrc == "func" ? "rule--field--func" : "rule--field"),
            config: config2,
            canSelectFieldSource: !parentField,
            selectedField,
            selectedFieldSrc,
            selectedFieldType,
            setField: !immutableFieldsMode ? setField2 : dummyFn,
            setFieldSrc: !immutableFieldsMode ? setFieldSrc2 : dummyFn,
            parentField,
            readonly: immutableFieldsMode || isLocked,
            id: id2,
            groupId
          });
        }
      }, {
        key: "renderOperator",
        value: function renderOperator() {
          var _this$props3 = this.props, config2 = _this$props3.config, isLocked = _this$props3.isLocked;
          var _this$meta = this.meta, selectedFieldParts = _this$meta.selectedFieldParts, selectedFieldWidgetConfig = _this$meta.selectedFieldWidgetConfig, showOperator = _this$meta.showOperator, showOperatorLabel = _this$meta.showOperatorLabel;
          var immutableOpsMode = config2.settings.immutableOpsMode;
          return /* @__PURE__ */ React$4.createElement(OperatorWrapper, {
            key: "operator",
            config: config2,
            selectedField: this.props.selectedField,
            selectedFieldSrc: this.props.selectedFieldSrc,
            selectedFieldType: this.props.selectedFieldType,
            selectedOperator: this.props.selectedOperator,
            setOperator: !immutableOpsMode ? this.props.setOperator : dummyFn,
            selectedFieldParts,
            showOperator,
            showOperatorLabel,
            selectedFieldWidgetConfig,
            readonly: immutableOpsMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          });
        }
      }, {
        key: "renderWidget",
        value: function renderWidget() {
          var _this$props4 = this.props, config2 = _this$props4.config, isLocked = _this$props4.isLocked;
          var showWidget = this.meta.showWidget;
          var immutableValuesMode = config2.settings.immutableValuesMode;
          if (!showWidget)
            return null;
          var widget = /* @__PURE__ */ React$4.createElement(Widget, _extends$1({
            key: "values"
          }, this._buildWidgetProps(this.props), {
            config: config2,
            setValue: !immutableValuesMode ? this.props.setValue : dummyFn,
            setValueSrc: !immutableValuesMode ? this.props.setValueSrc : dummyFn,
            readonly: immutableValuesMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          }));
          return /* @__PURE__ */ React$4.createElement(Col, {
            key: "widget-for-" + this.props.selectedOperator,
            className: "rule--value"
          }, widget);
        }
      }, {
        key: "renderOperatorOptions",
        value: function renderOperatorOptions() {
          var config2 = this.props.config;
          var showOperatorOptions = this.meta.showOperatorOptions;
          var _config$settings2 = config2.settings, immutableOpsMode = _config$settings2.immutableOpsMode, immutableValuesMode = _config$settings2.immutableValuesMode;
          if (!showOperatorOptions)
            return null;
          var opOpts = /* @__PURE__ */ React$4.createElement(OperatorOptions, {
            key: "operatorOptions",
            selectedField: this.props.selectedField,
            selectedOperator: this.props.selectedOperator,
            operatorOptions: this.props.operatorOptions,
            setOperatorOption: !immutableOpsMode ? this.props.setOperatorOption : dummyFn,
            config: config2,
            readonly: immutableValuesMode
          });
          return /* @__PURE__ */ React$4.createElement(Col, {
            key: "op-options-for-" + this.props.selectedOperator,
            className: "rule--operator-options"
          }, opOpts);
        }
      }, {
        key: "renderBeforeWidget",
        value: function renderBeforeWidget() {
          var config2 = this.props.config;
          var renderBeforeWidget2 = config2.settings.renderBeforeWidget;
          return renderBeforeWidget2 && /* @__PURE__ */ React$4.createElement(Col, {
            key: "before-widget-for-" + this.props.selectedOperator,
            className: "rule--before-widget"
          }, typeof renderBeforeWidget2 === "function" ? renderBeforeWidget2(this.props, config2.ctx) : renderBeforeWidget2);
        }
      }, {
        key: "renderAfterWidget",
        value: function renderAfterWidget() {
          var config2 = this.props.config;
          var renderAfterWidget2 = config2.settings.renderAfterWidget;
          return renderAfterWidget2 && /* @__PURE__ */ React$4.createElement(Col, {
            key: "after-widget-for-" + this.props.selectedOperator,
            className: "rule--after-widget"
          }, typeof renderAfterWidget2 === "function" ? renderAfterWidget2(this.props, config2.ctx) : renderAfterWidget2);
        }
      }, {
        key: "renderError",
        value: function renderError() {
          var _this$props5 = this.props, config2 = _this$props5.config, valueError = _this$props5.valueError;
          var _config$settings3 = config2.settings, renderRuleError = _config$settings3.renderRuleError, showErrorMessage = _config$settings3.showErrorMessage;
          var oneValueError = valueError && valueError.toArray().filter(function(e2) {
            return !!e2;
          }).shift() || null;
          return showErrorMessage && oneValueError && /* @__PURE__ */ React$4.createElement("div", {
            className: "rule--error"
          }, renderRuleError ? renderRuleError({
            error: oneValueError
          }, config2.ctx) : oneValueError);
        }
      }, {
        key: "renderDrag",
        value: function renderDrag() {
          var handleDraggerMouseDown = this.props.handleDraggerMouseDown;
          var config2 = this.props.config;
          var showDragIcon = this.meta.showDragIcon;
          var renderIcon = config2.settings.renderIcon;
          var Icon2 = function Icon3(pr) {
            return renderIcon === null || renderIcon === void 0 ? void 0 : renderIcon(pr, config2.ctx);
          };
          var icon = /* @__PURE__ */ React$4.createElement(Icon2, {
            type: "drag"
          });
          return showDragIcon && /* @__PURE__ */ React$4.createElement("div", {
            key: "rule-drag-icon",
            onMouseDown: handleDraggerMouseDown,
            className: "qb-drag-handler rule--drag-handler"
          }, icon);
        }
      }, {
        key: "renderDel",
        value: function renderDel() {
          var _this$props6 = this.props, config2 = _this$props6.config, isLocked = _this$props6.isLocked;
          var _config$settings4 = config2.settings, deleteLabel = _config$settings4.deleteLabel, immutableGroupsMode = _config$settings4.immutableGroupsMode, renderButton = _config$settings4.renderButton, renderIcon = _config$settings4.renderIcon, canDeleteLocked = _config$settings4.canDeleteLocked;
          var Icon2 = function Icon3(pr) {
            return renderIcon(pr, config2.ctx);
          };
          var Btn = function Btn2(pr) {
            return renderButton(pr, config2.ctx);
          };
          return !immutableGroupsMode && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ React$4.createElement(Btn, {
            type: "delRule",
            onClick: this.removeSelf,
            label: deleteLabel,
            config: config2,
            renderIcon: Icon2
          });
        }
      }, {
        key: "renderLock",
        value: function renderLock() {
          var _this$props7 = this.props, config2 = _this$props7.config, isLocked = _this$props7.isLocked, isTrueLocked = _this$props7.isTrueLocked, id2 = _this$props7.id;
          var _config$settings5 = config2.settings, lockLabel = _config$settings5.lockLabel, lockedLabel = _config$settings5.lockedLabel, showLock = _config$settings5.showLock, renderSwitch = _config$settings5.renderSwitch;
          var Switch2 = function Switch3(pr) {
            return renderSwitch(pr, config2.ctx);
          };
          return showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ React$4.createElement(Switch2, {
            type: "lock",
            id: id2,
            value: isLocked,
            setValue: this.setLock,
            label: lockLabel,
            checkedLabel: lockedLabel,
            hideLabel: true,
            config: config2
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$meta2 = this.meta, showOperatorOptions = _this$meta2.showOperatorOptions, selectedFieldWidgetConfig = _this$meta2.selectedFieldWidgetConfig;
          var _this$props8 = this.props, valueSrc = _this$props8.valueSrc, value2 = _this$props8.value, config2 = _this$props8.config;
          var canShrinkValue = valueSrc.first() == "value" && !showOperatorOptions && value2.size == 1 && selectedFieldWidgetConfig.fullWidth;
          var renderButtonGroup = config2.settings.renderButtonGroup;
          var BtnGrp = function BtnGrp2(pr) {
            return renderButtonGroup(pr, config2.ctx);
          };
          var parts = [this.renderField(), this.renderOperator(), this.renderBeforeWidget(), this.renderWidget(), this.renderAfterWidget(), this.renderOperatorOptions()];
          var body = /* @__PURE__ */ React$4.createElement("div", {
            key: "rule-body",
            className: classNames("rule--body", canShrinkValue && "can--shrink--value")
          }, parts);
          var error = this.renderError();
          var drag = this.renderDrag();
          var lock = this.renderLock();
          var del = this.renderDel();
          return /* @__PURE__ */ React$4.createElement(React$4.Fragment, null, drag, /* @__PURE__ */ React$4.createElement("div", {
            className: "rule--body--wrapper"
          }, body, error), /* @__PURE__ */ React$4.createElement("div", {
            className: "rule--header"
          }, /* @__PURE__ */ React$4.createElement(BtnGrp, {
            config: config2
          }, lock, del)));
        }
      }]);
      return Rule2;
    }(reactExports.Component);
    Rule.propTypes = {
      id: PropTypes.string.isRequired,
      groupId: PropTypes.string,
      selectedField: PropTypes.any,
      selectedFieldSrc: PropTypes.string,
      selectedFieldType: PropTypes.string,
      selectedOperator: PropTypes.string,
      operatorOptions: PropTypes.object,
      config: PropTypes.object.isRequired,
      value: PropTypes.any,
      //depends on widget
      valueSrc: PropTypes.any,
      valueType: PropTypes.any,
      asyncListValues: PropTypes.array,
      isDraggingMe: PropTypes.bool,
      isDraggingTempo: PropTypes.bool,
      parentField: PropTypes.string,
      //from RuleGroup
      valueError: PropTypes.any,
      isLocked: PropTypes.bool,
      isTrueLocked: PropTypes.bool,
      //path: PropTypes.instanceOf(Immutable.List),
      //actions
      handleDraggerMouseDown: PropTypes.func,
      setField: PropTypes.func,
      setFieldSrc: PropTypes.func,
      setOperator: PropTypes.func,
      setOperatorOption: PropTypes.func,
      setLock: PropTypes.func,
      removeSelf: PropTypes.func,
      setValue: PropTypes.func,
      setValueSrc: PropTypes.func,
      reordableNodesCnt: PropTypes.number,
      totalRulesCnt: PropTypes.number,
      parentReordableNodesCnt: PropTypes.number
    };
    const Rule$1 = RuleContainer(Draggable("rule")(WithConfirmFn(Rule)));
    function baseClamp$1(number, lower, upper) {
      if (number === number) {
        if (upper !== void 0) {
          number = number <= upper ? number : upper;
        }
        if (lower !== void 0) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }
    var _baseClamp = baseClamp$1;
    var toFinite = toFinite_1;
    function toInteger$1(value2) {
      var result = toFinite(value2), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    var toInteger_1 = toInteger$1;
    var baseClamp = _baseClamp, baseToString = _baseToString, toInteger = toInteger_1, toString = toString_1;
    function startsWith(string, target, position2) {
      string = toString(string);
      position2 = position2 == null ? 0 : baseClamp(toInteger(position2), 0, string.length);
      target = baseToString(target);
      return string.slice(position2, position2 + target.length) == target;
    }
    var startsWith_1 = startsWith;
    const startsWith$1 = /* @__PURE__ */ getDefaultExportFromCjs(startsWith_1);
    function _createSuper$d(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$d();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$d() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var defaultGroupConjunction = Utils$1.DefaultUtils.defaultGroupConjunction;
    var createGroupContainer = function createGroupContainer2(Group2, itemType) {
      var _class;
      return _class = /* @__PURE__ */ function(_Component) {
        _inherits(GroupContainer2, _Component);
        var _super = _createSuper$d(GroupContainer2);
        function GroupContainer2(_props) {
          var _this;
          _classCallCheck(this, GroupContainer2);
          _this = _super.call(this, _props);
          _this._selectedConjunction = function(props) {
            props = props || _this.props;
            return props.conjunction || defaultGroupConjunction(props.config, props.field);
          };
          _this.setConjunction = function() {
            var conj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setConjunction(_this.props.path, conj);
          };
          _this.setNot = function() {
            var not = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setNot(_this.props.path, not);
          };
          _this.setLock = function() {
            var lock = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setLock(_this.props.path, lock);
          };
          _this.dummyFn = function() {
          };
          _this.removeSelf = function() {
            _this.props.actions.removeGroup(_this.props.path);
          };
          _this.addGroup = function() {
            _this.props.actions.addGroup(_this.props.path);
          };
          _this.addCaseGroup = function() {
            _this.props.actions.addCaseGroup(_this.props.path);
          };
          _this.addDefaultCaseGroup = function() {
            _this.props.actions.addDefaultCaseGroup(_this.props.path);
          };
          _this.addRule = function() {
            var parentRuleGroupPath = itemType == "rule_group" ? _this.props.field : null;
            _this.props.actions.addRule(_this.props.path, void 0, void 0, void 0, parentRuleGroupPath);
          };
          _this.setField = function(field, asyncListValues, __isInternal2) {
            _this.props.actions.setField(_this.props.path, field, asyncListValues, __isInternal2);
          };
          _this.setOperator = function(operator) {
            _this.props.actions.setOperator(_this.props.path, operator);
          };
          _this.setValue = function(delta, value2, type) {
            _this.props.actions.setValue(_this.props.path, delta, value2, type);
          };
          _this.pureShouldComponentUpdate = pureShouldComponentUpdate(_assertThisInitialized(_this));
          useOnPropsChanged(_assertThisInitialized(_this));
          _this.selectedConjunction = _this._selectedConjunction(_props);
          _this.conjunctionOptions = _this._getConjunctionOptions(_props);
          _this.dummyFn.isDummyFn = true;
          return _this;
        }
        _createClass(GroupContainer2, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            var prevProps = this.props;
            var prevState = this.state;
            var should = this.pureShouldComponentUpdate(nextProps, nextState);
            if (should) {
              if (prevState == nextState && prevProps != nextProps) {
                var draggingId = nextProps.dragging.id || prevProps.dragging.id;
                var isDraggingMe = draggingId == nextProps.id;
                var chs = [];
                for (var k2 in nextProps) {
                  var changed = nextProps[k2] != prevProps[k2];
                  if (k2 == "dragging" && !isDraggingMe) {
                    changed = false;
                  }
                  if (changed) {
                    chs.push(k2);
                  }
                }
                if (!chs.length)
                  should = false;
              }
            }
            return should;
          }
        }, {
          key: "onPropsChanged",
          value: function onPropsChanged(nextProps) {
            var config2 = nextProps.config;
            nextProps.id;
            var conjunction = nextProps.conjunction;
            var oldConfig = this.props.config;
            var oldConjunction = this.props.conjunction;
            if (oldConfig != config2 || oldConjunction != conjunction) {
              this.selectedConjunction = this._selectedConjunction(nextProps);
              this.conjunctionOptions = this._getConjunctionOptions(nextProps);
            }
          }
        }, {
          key: "_getConjunctionOptions",
          value: function _getConjunctionOptions(props) {
            var _this2 = this;
            return mapValues$1(props.config.conjunctions, function(item, index) {
              return {
                id: "conjunction-".concat(props.id, "-").concat(index),
                name: "conjunction[".concat(props.id, "]"),
                key: index,
                label: item.label,
                checked: index === _this2._selectedConjunction(props)
              };
            });
          }
        }, {
          key: "render",
          value: function render() {
            var isDraggingMe = this.props.dragging.id == this.props.id;
            var currentNesting = this.props.path.size;
            var maxNesting = this.props.config.settings.maxNesting;
            var isInDraggingTempo = !isDraggingMe && this.props.isDraggingTempo;
            var fieldType = this.props.fieldType || null;
            var allowFurtherNesting = typeof maxNesting === "undefined" || currentNesting < maxNesting;
            var isRoot = currentNesting == 1;
            return /* @__PURE__ */ React$4.createElement("div", {
              className: "group-or-rule-container group-container",
              "data-id": this.props.id
            }, [isDraggingMe ? /* @__PURE__ */ React$4.createElement(Group2, {
              key: "dragging",
              id: this.props.id,
              groupId: this.props.groupId,
              isDraggingMe: true,
              isDraggingTempo: true,
              dragging: this.props.dragging,
              isRoot,
              allowFurtherNesting,
              conjunctionOptions: this.conjunctionOptions,
              not: this.props.not,
              selectedConjunction: this.selectedConjunction,
              setConjunction: this.dummyFn,
              setNot: this.dummyFn,
              setLock: this.dummyFn,
              removeSelf: this.dummyFn,
              addGroup: this.dummyFn,
              addCaseGroup: this.dummyFn,
              addDefaultCaseGroup: this.dummyFn,
              addRule: this.dummyFn,
              setField: this.dummyFn,
              setOperator: this.dummyFn,
              setValue: this.dummyFn,
              value: this.props.value || null,
              config: this.props.config,
              children1: this.props.children1,
              actions: this.props.actions,
              reordableNodesCnt: this.props.reordableNodesCnt,
              totalRulesCnt: this.props.totalRulesCnt,
              selectedField: this.props.field || null,
              selectedFieldSrc: this.props.fieldSrc || "field",
              selectedFieldType: fieldType,
              parentField: this.props.parentField || null,
              selectedOperator: this.props.operator || null,
              isLocked: this.props.isLocked,
              isTrueLocked: this.props.isTrueLocked,
              parentReordableNodesCnt: this.props.parentReordableNodesCnt
            }) : null, /* @__PURE__ */ React$4.createElement(Group2, {
              key: this.props.id,
              id: this.props.id,
              groupId: this.props.groupId,
              isDraggingMe,
              isDraggingTempo: isInDraggingTempo,
              onDragStart: this.props.onDragStart,
              isRoot,
              allowFurtherNesting,
              conjunctionOptions: this.conjunctionOptions,
              not: this.props.not,
              selectedConjunction: this.selectedConjunction,
              setConjunction: isInDraggingTempo ? this.dummyFn : this.setConjunction,
              setNot: isInDraggingTempo ? this.dummyFn : this.setNot,
              setLock: isInDraggingTempo ? this.dummyFn : this.setLock,
              removeSelf: isInDraggingTempo ? this.dummyFn : this.removeSelf,
              addGroup: isInDraggingTempo ? this.dummyFn : this.addGroup,
              addCaseGroup: isInDraggingTempo ? this.dummyFn : this.addCaseGroup,
              addDefaultCaseGroup: isInDraggingTempo ? this.dummyFn : this.addDefaultCaseGroup,
              addRule: isInDraggingTempo ? this.dummyFn : this.addRule,
              setField: isInDraggingTempo ? this.dummyFn : this.setField,
              setOperator: isInDraggingTempo ? this.dummyFn : this.setOperator,
              setValue: isInDraggingTempo ? this.dummyFn : this.setValue,
              value: this.props.value || null,
              config: this.props.config,
              children1: this.props.children1,
              actions: this.props.actions,
              reordableNodesCnt: this.props.reordableNodesCnt,
              totalRulesCnt: this.props.totalRulesCnt,
              selectedField: this.props.field || null,
              selectedFieldSrc: this.props.fieldSrc || "field",
              selectedFieldType: fieldType,
              parentField: this.props.parentField || null,
              selectedOperator: this.props.operator || null,
              isLocked: this.props.isLocked,
              isTrueLocked: this.props.isTrueLocked,
              parentReordableNodesCnt: this.props.parentReordableNodesCnt
            })]);
          }
        }]);
        return GroupContainer2;
      }(reactExports.Component), _class.propTypes = {
        config: PropTypes.object.isRequired,
        actions: PropTypes.object.isRequired,
        //{setConjunction: Function, removeGroup, addGroup, addRule, ...}
        path: PropTypes.any.isRequired,
        //instanceOf(Immutable.List)
        id: PropTypes.string.isRequired,
        groupId: PropTypes.string,
        not: PropTypes.bool,
        conjunction: PropTypes.string,
        children1: PropTypes.any,
        //instanceOf(Immutable.OrderedMap)
        onDragStart: PropTypes.func,
        reordableNodesCnt: PropTypes.number,
        field: PropTypes.any,
        // for RuleGroup
        fieldSrc: PropTypes.string,
        // for RuleGroup
        fieldType: PropTypes.string,
        // for RuleGroup
        parentField: PropTypes.string,
        //from RuleGroup
        isLocked: PropTypes.bool,
        isTrueLocked: PropTypes.bool,
        //connected:
        dragging: PropTypes.object,
        //{id, x, y, w, h}
        isDraggingTempo: PropTypes.bool
      }, _class;
    };
    const GroupContainer = function(Group2, itemType) {
      var ConnectedGroupContainer = connect(function(state) {
        return {
          dragging: state.dragging
        };
      }, null, null, {
        context
      })(createGroupContainer(Group2, itemType));
      ConnectedGroupContainer.displayName = "ConnectedGroupContainer";
      return ConnectedGroupContainer;
    };
    function _createSuper$c(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$c();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$c() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var groupActionsPositionList$1 = {
      topLeft: "group--actions--tl",
      topCenter: "group--actions--tc",
      topRight: "group--actions--tr",
      bottomLeft: "group--actions--bl",
      bottomCenter: "group--actions--bc",
      bottomRight: "group--actions--br"
    };
    var defaultPosition$2 = "topRight";
    var GroupActions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(GroupActions2, _PureComponent);
      var _super = _createSuper$c(GroupActions2);
      function GroupActions2() {
        _classCallCheck(this, GroupActions2);
        return _super.apply(this, arguments);
      }
      _createClass(GroupActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addRule2 = _this$props.addRule, addGroup2 = _this$props.addGroup, removeSelf = _this$props.removeSelf, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id2 = _this$props.id, canAddGroup = _this$props.canAddGroup, canAddRule = _this$props.canAddRule, canDeleteGroup = _this$props.canDeleteGroup;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addRuleLabel = _config$settings.addRuleLabel, addGroupLabel = _config$settings.addGroupLabel, delGroupLabel = _config$settings.delGroupLabel, groupActionsPosition = _config$settings.groupActionsPosition, renderButton = _config$settings.renderButton, renderIcon = _config$settings.renderIcon, renderSwitch = _config$settings.renderSwitch, renderButtonGroup = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock, canDeleteLocked = _config$settings.canDeleteLocked;
          var Icon2 = function Icon3(pr) {
            return renderIcon(pr, config2.ctx);
          };
          var Btn = function Btn2(pr) {
            return renderButton(pr, config2.ctx);
          };
          var Switch2 = function Switch3(pr) {
            return renderSwitch(pr, config2.ctx);
          };
          var BtnGrp = function BtnGrp2(pr) {
            return renderButtonGroup(pr, config2.ctx);
          };
          var position2 = groupActionsPositionList$1[groupActionsPosition || defaultPosition$2];
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ React$4.createElement(Switch2, {
            type: "lock",
            id: id2,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            config: config2
          });
          var addRuleBtn = !immutableGroupsMode && canAddRule && !isLocked && /* @__PURE__ */ React$4.createElement(Btn, {
            type: "addRule",
            onClick: addRule2,
            label: addRuleLabel,
            readonly: isLocked,
            config: config2,
            renderIcon: Icon2
          });
          var addGroupBtn = !immutableGroupsMode && canAddGroup && !isLocked && /* @__PURE__ */ React$4.createElement(Btn, {
            type: "addGroup",
            onClick: addGroup2,
            label: addGroupLabel,
            readonly: isLocked,
            config: config2,
            renderIcon: Icon2
          });
          var delGroupBtn = !immutableGroupsMode && canDeleteGroup && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ React$4.createElement(Btn, {
            type: "delGroup",
            onClick: removeSelf,
            label: delGroupLabel,
            config: config2,
            renderIcon: Icon2
          });
          return /* @__PURE__ */ React$4.createElement("div", {
            className: "group--actions ".concat(position2)
          }, /* @__PURE__ */ React$4.createElement(BtnGrp, {
            config: config2
          }, setLockSwitch, addRuleBtn, addGroupBtn, delGroupBtn));
        }
      }]);
      return GroupActions2;
    }(reactExports.PureComponent);
    function ownKeys$c(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$c(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$c(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$b(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$b();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$b() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var isEmptyGroupChildren = Utils$1.RuleUtils.isEmptyGroupChildren;
    var defaultPosition$1 = "topRight";
    var BasicGroup = /* @__PURE__ */ function(_Component) {
      _inherits(BasicGroup2, _Component);
      var _super = _createSuper$b(BasicGroup2);
      function BasicGroup2(props) {
        var _this;
        _classCallCheck(this, BasicGroup2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "";
        };
        _this.renderBeforeActions = function() {
          var BeforeActions = _this.props.config.settings.renderBeforeActions;
          if (BeforeActions == void 0)
            return null;
          return typeof BeforeActions === "function" ? BeforeActions(_this.props, _this.props.config.ctx) : BeforeActions;
        };
        _this.renderAfterActions = function() {
          var AfterActions = _this.props.config.settings.renderAfterActions;
          if (AfterActions == void 0)
            return null;
          return typeof AfterActions === "function" ? AfterActions(_this.props, _this.props.config.ctx) : AfterActions;
        };
        _this.removeSelf = _this.removeSelf.bind(_assertThisInitialized(_this));
        _this.setLock = _this.setLock.bind(_assertThisInitialized(_this));
        _this.renderItem = _this.renderItem.bind(_assertThisInitialized(_this));
        return _this;
      }
      _createClass(BasicGroup2, [{
        key: "isGroupTopPosition",
        value: function isGroupTopPosition() {
          return startsWith$1(this.props.config.settings.groupActionsPosition || defaultPosition$1, "top");
        }
      }, {
        key: "setLock",
        value: function setLock2(lock) {
          this.props.setLock(lock);
        }
      }, {
        key: "removeSelf",
        value: function removeSelf() {
          var _this2 = this;
          var _this$props = this.props, confirmFn = _this$props.confirmFn, config2 = _this$props.config;
          var _config$settings = config2.settings, renderConfirm = _config$settings.renderConfirm, confirmOptions = _config$settings.removeGroupConfirmOptions;
          var doRemove = function doRemove2() {
            _this2.props.removeSelf();
          };
          if (confirmOptions && !this.isEmptyCurrentGroup()) {
            renderConfirm.call(config2.ctx, _objectSpread$c(_objectSpread$c({}, confirmOptions), {}, {
              onOk: doRemove,
              onCancel: null,
              confirmFn
            }), config2.ctx);
          } else {
            doRemove();
          }
        }
      }, {
        key: "isEmptyCurrentGroup",
        value: function isEmptyCurrentGroup() {
          var _this$props2 = this.props, children1 = _this$props2.children1, config2 = _this$props2.config;
          return isEmptyGroupChildren(children1, config2);
        }
      }, {
        key: "render",
        value: function render() {
          return /* @__PURE__ */ React$4.createElement(React$4.Fragment, null, this.renderHeaderWrapper(), this.renderChildrenWrapper(), this.renderFooterWrapper());
        }
      }, {
        key: "showNot",
        value: function showNot() {
          var config2 = this.props.config;
          return config2.settings.showNot;
        }
        // show conjs for 2+ children?
      }, {
        key: "showConjs",
        value: function showConjs() {
          var _this$props3 = this.props, conjunctionOptions = _this$props3.conjunctionOptions;
          _this$props3.children1;
          _this$props3.config;
          var conjunctionCount = Object.keys(conjunctionOptions).length;
          return conjunctionCount > 1 || this.showNot();
        }
      }, {
        key: "isNoChildren",
        value: function isNoChildren() {
          var children1 = this.props.children1;
          return children1 ? children1.size == 0 : true;
        }
      }, {
        key: "isOneChild",
        value: function isOneChild() {
          var children1 = this.props.children1;
          return children1 ? children1.size < 2 : true;
        }
      }, {
        key: "renderChildrenWrapper",
        value: function renderChildrenWrapper() {
          var children1 = this.props.children1;
          return children1 && /* @__PURE__ */ React$4.createElement("div", {
            key: "group-children",
            className: classNames("group--children", !this.showConjs() ? "hide--conjs" : "", this.isOneChild() ? "hide--line" : "", this.isOneChild() ? "one--child" : "", this.childrenClassName())
          }, this.renderChildren());
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          var isGroupTopPosition = this.isGroupTopPosition();
          return /* @__PURE__ */ React$4.createElement("div", {
            key: "group-header",
            className: classNames("group--header", this.isOneChild() ? "one--child" : "", !this.showConjs() ? "hide--conjs" : "", this.isOneChild() ? "hide--line" : "", this.isNoChildren() ? "no--children" : "")
          }, this.renderHeader(), isGroupTopPosition && this.renderBeforeActions(), isGroupTopPosition && this.renderActions(), isGroupTopPosition && this.renderAfterActions());
        }
      }, {
        key: "renderFooterWrapper",
        value: function renderFooterWrapper() {
          var isGroupTopPosition = this.isGroupTopPosition();
          return !isGroupTopPosition && /* @__PURE__ */ React$4.createElement("div", {
            key: "group-footer",
            className: "group--footer"
          }, this.renderBeforeActions(), this.renderActions(), this.renderAfterActions());
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props4 = this.props, config2 = _this$props4.config, addRule2 = _this$props4.addRule, addGroup2 = _this$props4.addGroup, isLocked = _this$props4.isLocked, isTrueLocked = _this$props4.isTrueLocked, id2 = _this$props4.id;
          return /* @__PURE__ */ React$4.createElement(GroupActions, {
            config: config2,
            addRule: addRule2,
            addGroup: addGroup2,
            canAddGroup: this.canAddGroup(),
            canAddRule: this.canAddRule(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id: id2
          });
        }
      }, {
        key: "canAddGroup",
        value: function canAddGroup() {
          return this.props.allowFurtherNesting;
        }
      }, {
        key: "canAddRule",
        value: function canAddRule() {
          var maxNumberOfRules = this.props.config.settings.maxNumberOfRules;
          var totalRulesCnt = this.props.totalRulesCnt;
          if (maxNumberOfRules) {
            return totalRulesCnt < maxNumberOfRules;
          }
          return true;
        }
      }, {
        key: "canDeleteGroup",
        value: function canDeleteGroup() {
          return !this.props.isRoot;
        }
      }, {
        key: "renderChildren",
        value: function renderChildren() {
          var children1 = this.props.children1;
          return children1 ? children1.map(this.renderItem).toList() : null;
        }
      }, {
        key: "renderItem",
        value: function renderItem(item) {
          var props = this.props;
          var config2 = props.config, actions = props.actions, onDragStart = props.onDragStart, isLocked = props.isLocked;
          var isRuleGroup = item.get("type") == "group" && item.getIn(["properties", "field"]) != null;
          var type = isRuleGroup ? "rule_group" : item.get("type");
          return /* @__PURE__ */ React$4.createElement(Item, _extends$1({}, this.extraPropsForItem(item), {
            key: item.get("id"),
            id: item.get("id"),
            groupId: props.id,
            path: item.get("path"),
            type,
            properties: item.get("properties"),
            config: config2,
            actions,
            children1: item.get("children1"),
            reordableNodesCnt: this.reordableNodesCntForItem(item),
            totalRulesCnt: this.totalRulesCntForItem(item),
            parentReordableNodesCnt: this.reordableNodesCnt(),
            onDragStart,
            isDraggingTempo: this.props.isDraggingTempo,
            isParentLocked: isLocked
          }));
        }
      }, {
        key: "extraPropsForItem",
        value: function extraPropsForItem(_item) {
          return {};
        }
      }, {
        key: "reordableNodesCnt",
        value: function reordableNodesCnt() {
          if (this.props.isLocked)
            return 0;
          return this.props.reordableNodesCnt;
        }
      }, {
        key: "totalRulesCntForItem",
        value: function totalRulesCntForItem(_item) {
          return this.props.totalRulesCnt;
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked)
            return 0;
          return this.reordableNodesCnt();
        }
      }, {
        key: "showDragIcon",
        value: function showDragIcon() {
          var _this$props5 = this.props, config2 = _this$props5.config, isRoot = _this$props5.isRoot, isLocked = _this$props5.isLocked;
          var reordableNodesCnt = this.reordableNodesCnt();
          return config2.settings.canReorder && !isRoot && reordableNodesCnt > 1 && !isLocked;
        }
      }, {
        key: "renderDrag",
        value: function renderDrag() {
          var handleDraggerMouseDown = this.props.handleDraggerMouseDown;
          var config2 = this.props.config;
          var renderIcon = config2.settings.renderIcon;
          var Icon2 = function Icon3(pr) {
            return renderIcon === null || renderIcon === void 0 ? void 0 : renderIcon(pr, config2.ctx);
          };
          var icon = /* @__PURE__ */ React$4.createElement(Icon2, {
            type: "drag"
          });
          return this.showDragIcon() && /* @__PURE__ */ React$4.createElement("div", {
            key: "group-drag-icon",
            onMouseDown: handleDraggerMouseDown,
            className: "qb-drag-handler group--drag-handler"
          }, icon);
        }
      }, {
        key: "conjunctionOptions",
        value: function conjunctionOptions() {
          var conjunctionOptions2 = this.props.conjunctionOptions;
          return conjunctionOptions2;
        }
      }, {
        key: "renderConjs",
        value: function renderConjs() {
          var _this$props6 = this.props, config2 = _this$props6.config, children1 = _this$props6.children1, id2 = _this$props6.id, selectedConjunction = _this$props6.selectedConjunction, setConjunction2 = _this$props6.setConjunction, not = _this$props6.not, setNot2 = _this$props6.setNot, isLocked = _this$props6.isLocked;
          var _config$settings2 = config2.settings, immutableGroupsMode = _config$settings2.immutableGroupsMode, renderConjs2 = _config$settings2.renderConjs;
          _config$settings2.showNot;
          var notLabel = _config$settings2.notLabel;
          var conjunctionOptions = this.conjunctionOptions();
          if (!this.showConjs())
            return null;
          if (!children1 || !children1.size)
            return null;
          var renderProps = {
            disabled: this.isOneChild(),
            readonly: immutableGroupsMode || isLocked,
            selectedConjunction,
            setConjunction: immutableGroupsMode ? dummyFn : setConjunction2,
            conjunctionOptions,
            config: config2,
            not: not || false,
            id: id2,
            setNot: immutableGroupsMode ? dummyFn : setNot2,
            notLabel,
            showNot: this.showNot(),
            isLocked
          };
          return renderConjs2(renderProps, config2.ctx);
        }
      }, {
        key: "renderHeader",
        value: function renderHeader() {
          return /* @__PURE__ */ React$4.createElement("div", {
            className: "group--conjunctions"
          }, this.renderConjs(), this.renderDrag());
        }
      }]);
      return BasicGroup2;
    }(reactExports.Component);
    BasicGroup.propTypes = {
      reordableNodesCnt: PropTypes.number,
      conjunctionOptions: PropTypes.object.isRequired,
      allowFurtherNesting: PropTypes.bool.isRequired,
      isRoot: PropTypes.bool.isRequired,
      not: PropTypes.bool,
      selectedConjunction: PropTypes.string,
      config: PropTypes.object.isRequired,
      id: PropTypes.string.isRequired,
      groupId: PropTypes.string,
      path: PropTypes.any,
      //instanceOf(Immutable.List)
      children1: PropTypes.any,
      //instanceOf(Immutable.OrderedMap)
      isDraggingMe: PropTypes.bool,
      isDraggingTempo: PropTypes.bool,
      isLocked: PropTypes.bool,
      isTrueLocked: PropTypes.bool,
      //actions
      handleDraggerMouseDown: PropTypes.func,
      onDragStart: PropTypes.func,
      addRule: PropTypes.func.isRequired,
      addGroup: PropTypes.func.isRequired,
      removeSelf: PropTypes.func.isRequired,
      setConjunction: PropTypes.func.isRequired,
      setNot: PropTypes.func.isRequired,
      setLock: PropTypes.func.isRequired,
      actions: PropTypes.object.isRequired
    };
    const Group = GroupContainer(Draggable("group")(WithConfirmFn(BasicGroup)), "group");
    function _superPropBase(object, property2) {
      while (!Object.prototype.hasOwnProperty.call(object, property2)) {
        object = _getPrototypeOf(object);
        if (object === null)
          break;
      }
      return object;
    }
    function _get() {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get.bind();
      } else {
        _get = function _get2(target, property2, receiver) {
          var base = _superPropBase(target, property2);
          if (!base)
            return;
          var desc = Object.getOwnPropertyDescriptor(base, property2);
          if (desc.get) {
            return desc.get.call(arguments.length < 3 ? target : receiver);
          }
          return desc.value;
        };
      }
      return _get.apply(this, arguments);
    }
    function _createSuper$a(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$a();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$a() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var RuleGroupActions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(RuleGroupActions2, _PureComponent);
      var _super = _createSuper$a(RuleGroupActions2);
      function RuleGroupActions2() {
        _classCallCheck(this, RuleGroupActions2);
        return _super.apply(this, arguments);
      }
      _createClass(RuleGroupActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addRule2 = _this$props.addRule, canAddRule = _this$props.canAddRule, canDeleteGroup = _this$props.canDeleteGroup, removeSelf = _this$props.removeSelf, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id2 = _this$props.id;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addRuleLabel = _config$settings.addRuleLabel, delGroupLabel = _config$settings.delGroupLabel, renderButton = _config$settings.renderButton, renderIcon = _config$settings.renderIcon, renderSwitch = _config$settings.renderSwitch, renderButtonGroup = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock, canDeleteLocked = _config$settings.canDeleteLocked;
          var Icon2 = function Icon3(pr) {
            return renderIcon(pr, config2.ctx);
          };
          var Btn = function Btn2(pr) {
            return renderButton(pr, config2.ctx);
          };
          var Switch2 = function Switch3(pr) {
            return renderSwitch(pr, config2.ctx);
          };
          var BtnGrp = function BtnGrp2(pr) {
            return renderButtonGroup(pr, config2.ctx);
          };
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ React$4.createElement(Switch2, {
            type: "lock",
            id: id2,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            hideLabel: true,
            config: config2
          });
          var addRuleBtn = !immutableGroupsMode && canAddRule && !isLocked && /* @__PURE__ */ React$4.createElement(Btn, {
            type: "addRuleGroup",
            onClick: addRule2,
            label: addRuleLabel,
            readonly: isLocked,
            config: config2,
            renderIcon: Icon2
          });
          var delGroupBtn = !immutableGroupsMode && canDeleteGroup && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ React$4.createElement(Btn, {
            type: "delRuleGroup",
            onClick: removeSelf,
            label: delGroupLabel,
            config: config2,
            renderIcon: Icon2
          });
          return /* @__PURE__ */ React$4.createElement("div", {
            className: "group--actions"
          }, /* @__PURE__ */ React$4.createElement(BtnGrp, {
            config: config2
          }, setLockSwitch, addRuleBtn, delGroupBtn));
        }
      }]);
      return RuleGroupActions2;
    }(reactExports.PureComponent);
    function ownKeys$b(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$b(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$b(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$9(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$9();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$9() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var RuleGroup = /* @__PURE__ */ function(_BasicGroup) {
      _inherits(RuleGroup2, _BasicGroup);
      var _super = _createSuper$9(RuleGroup2);
      function RuleGroup2(props) {
        var _this;
        _classCallCheck(this, RuleGroup2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "rule_group--children";
        };
        _this.renderHeaderWrapper = function() {
          return null;
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        _this.renderConjs = function() {
          return null;
        };
        _this.canAddGroup = function() {
          return false;
        };
        _this.canAddRule = function() {
          return true;
        };
        _this.canDeleteGroup = function() {
          return false;
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(RuleGroup2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked)
            return 0;
          var children1 = this.props.children1;
          return (children1 === null || children1 === void 0 ? void 0 : children1.size) || 0;
        }
      }, {
        key: "renderChildrenWrapper",
        value: function renderChildrenWrapper() {
          return /* @__PURE__ */ React$4.createElement(React$4.Fragment, null, this.renderDrag(), this.renderField(), this.renderActions(), _get(_getPrototypeOf(RuleGroup2.prototype), "renderChildrenWrapper", this).call(this));
        }
      }, {
        key: "renderField",
        value: function renderField() {
          var _this$props = this.props, config2 = _this$props.config, selectedField = _this$props.selectedField, selectedFieldSrc = _this$props.selectedFieldSrc, selectedFieldType = _this$props.selectedFieldType, setField2 = _this$props.setField, setFieldSrc2 = _this$props.setFieldSrc, parentField = _this$props.parentField, id2 = _this$props.id, groupId = _this$props.groupId, isLocked = _this$props.isLocked;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          return /* @__PURE__ */ React$4.createElement(FieldWrapper, {
            key: "field",
            classname: "group--field",
            config: config2,
            canSelectFieldSource: false,
            selectedField,
            selectedFieldSrc,
            selectedFieldType,
            setField: setField2,
            setFieldSrc: setFieldSrc2,
            parentField,
            readonly: immutableFieldsMode || isLocked,
            id: id2,
            groupId
          });
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props2 = this.props, config2 = _this$props2.config, addRule2 = _this$props2.addRule, isLocked = _this$props2.isLocked, isTrueLocked = _this$props2.isTrueLocked, id2 = _this$props2.id;
          return /* @__PURE__ */ React$4.createElement(RuleGroupActions, {
            config: config2,
            addRule: addRule2,
            canAddRule: this.canAddRule(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id: id2
          });
        }
      }, {
        key: "extraPropsForItem",
        value: function extraPropsForItem(_item) {
          return {
            parentField: this.props.selectedField
          };
        }
      }]);
      return RuleGroup2;
    }(BasicGroup);
    RuleGroup.propTypes = _objectSpread$b(_objectSpread$b({}, BasicGroup.propTypes), {}, {
      selectedField: PropTypes.any,
      selectedFieldSrc: PropTypes.string,
      parentField: PropTypes.string,
      setField: PropTypes.func,
      setFieldSrc: PropTypes.func
    });
    const RuleGroup$1 = GroupContainer(Draggable("group rule_group")(WithConfirmFn(RuleGroup)), "rule_group");
    function _createSuper$8(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$8();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$8() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var RuleGroupExtActions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(RuleGroupExtActions2, _PureComponent);
      var _super = _createSuper$8(RuleGroupExtActions2);
      function RuleGroupExtActions2() {
        _classCallCheck(this, RuleGroupExtActions2);
        return _super.apply(this, arguments);
      }
      _createClass(RuleGroupExtActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addRule2 = _this$props.addRule, canAddRule = _this$props.canAddRule, canDeleteGroup = _this$props.canDeleteGroup, removeSelf = _this$props.removeSelf, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id2 = _this$props.id;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addSubRuleLabel = _config$settings.addSubRuleLabel, delGroupLabel = _config$settings.delGroupLabel, renderButton = _config$settings.renderButton, renderIcon = _config$settings.renderIcon, renderSwitch = _config$settings.renderSwitch, renderButtonGroup = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock, canDeleteLocked = _config$settings.canDeleteLocked;
          var Icon2 = function Icon3(pr) {
            return renderIcon(pr, config2.ctx);
          };
          var Btn = function Btn2(pr) {
            return renderButton(pr, config2.ctx);
          };
          var Switch2 = function Switch3(pr) {
            return renderSwitch(pr, config2.ctx);
          };
          var BtnGrp = function BtnGrp2(pr) {
            return renderButtonGroup(pr, config2.ctx);
          };
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ React$4.createElement(Switch2, {
            type: "lock",
            id: id2,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            config: config2
          });
          var addRuleBtn = !immutableGroupsMode && canAddRule && !isLocked && /* @__PURE__ */ React$4.createElement(Btn, {
            type: "addRuleGroupExt",
            onClick: addRule2,
            label: addSubRuleLabel,
            readonly: isLocked,
            config: config2,
            renderIcon: Icon2
          });
          var delGroupBtn = !immutableGroupsMode && canDeleteGroup && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ React$4.createElement(Btn, {
            type: "delRuleGroup",
            onClick: removeSelf,
            label: delGroupLabel,
            config: config2,
            renderIcon: Icon2
          });
          return /* @__PURE__ */ React$4.createElement("div", {
            className: "group--actions group--actions--tr"
          }, /* @__PURE__ */ React$4.createElement(BtnGrp, {
            config: config2
          }, setLockSwitch, addRuleBtn, delGroupBtn));
        }
      }]);
      return RuleGroupExtActions2;
    }(reactExports.PureComponent);
    function ownKeys$a(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$a(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$a(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function _createSuper$7(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$7();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$7() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var _Utils$ConfigUtils$1 = Utils$1.ConfigUtils, getFieldConfig$1 = _Utils$ConfigUtils$1.getFieldConfig, getFieldWidgetConfig = _Utils$ConfigUtils$1.getFieldWidgetConfig;
    var isEmptyRuleGroupExtPropertiesAndChildren = Utils$1.RuleUtils.isEmptyRuleGroupExtPropertiesAndChildren;
    var RuleGroupExt = /* @__PURE__ */ function(_BasicGroup) {
      _inherits(RuleGroupExt2, _BasicGroup);
      var _super = _createSuper$7(RuleGroupExt2);
      function RuleGroupExt2(props) {
        var _this;
        _classCallCheck(this, RuleGroupExt2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "rule_group_ext--children";
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        _this.canAddGroup = function() {
          return false;
        };
        _this.canAddRule = function() {
          return true;
        };
        _this.canDeleteGroup = function() {
          return true;
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(RuleGroupExt2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          return /* @__PURE__ */ React$4.createElement("div", {
            key: "group-header",
            className: classNames("group--header", this.isOneChild() ? "one--child" : "", this.isOneChild() ? "hide--line" : "", this.isNoChildren() ? "no--children" : "", this.showDragIcon() ? "with--drag" : "hide--drag", this.showConjs() && (!this.isOneChild() || this.showNot()) ? "with--conjs" : "hide--conjs")
          }, this.renderHeader(), this.renderGroupField(), this.renderActions());
        }
      }, {
        key: "renderHeader",
        value: function renderHeader() {
          return /* @__PURE__ */ React$4.createElement("div", {
            className: "group--conjunctions"
          }, this.renderConjs(), this.renderDrag());
        }
      }, {
        key: "renderGroupField",
        value: function renderGroupField() {
          return /* @__PURE__ */ React$4.createElement("div", {
            className: "group--field--count--rule"
          }, this.renderField(), this.renderOperator(), this.renderWidget());
        }
      }, {
        key: "showNot",
        value: function showNot() {
          var _this$props = this.props, config2 = _this$props.config, selectedField = _this$props.selectedField;
          _this$props.selectedOperator;
          var selectedFieldConfig = getFieldConfig$1(config2, selectedField) || {};
          return selectedFieldConfig.showNot != void 0 ? selectedFieldConfig.showNot : config2.settings.showNot;
        }
      }, {
        key: "conjunctionOptions",
        value: function conjunctionOptions() {
          var _this$props2 = this.props, config2 = _this$props2.config, selectedField = _this$props2.selectedField;
          _this$props2.selectedOperator;
          var selectedFieldConfig = getFieldConfig$1(config2, selectedField) || {};
          var conjunctionOptions2 = _get(_getPrototypeOf(RuleGroupExt2.prototype), "conjunctionOptions", this).call(this);
          if (selectedFieldConfig.conjunctions) {
            var filtered = {};
            var _iterator = _createForOfIteratorHelper(selectedFieldConfig.conjunctions), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var k2 = _step.value;
                filtered[k2] = conjunctionOptions2[k2];
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            conjunctionOptions2 = filtered;
          }
          return conjunctionOptions2;
        }
      }, {
        key: "renderField",
        value: function renderField() {
          var _this$props3 = this.props, config2 = _this$props3.config, selectedField = _this$props3.selectedField, selectedFieldSrc = _this$props3.selectedFieldSrc, selectedFieldType = _this$props3.selectedFieldType, setField2 = _this$props3.setField, setFieldSrc2 = _this$props3.setFieldSrc, parentField = _this$props3.parentField, id2 = _this$props3.id, groupId = _this$props3.groupId, isLocked = _this$props3.isLocked;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          return /* @__PURE__ */ React$4.createElement(FieldWrapper, {
            key: "field",
            classname: "rule--field",
            config: config2,
            canSelectFieldSource: false,
            selectedField,
            selectedFieldSrc,
            selectedFieldType,
            setField: setField2,
            setFieldSrc: setFieldSrc2,
            parentField,
            readonly: immutableFieldsMode || isLocked,
            id: id2,
            groupId
          });
        }
      }, {
        key: "renderOperator",
        value: function renderOperator() {
          var _this$props4 = this.props, config2 = _this$props4.config, selectedField = _this$props4.selectedField, selectedFieldSrc = _this$props4.selectedFieldSrc, selectedOperator = _this$props4.selectedOperator;
          _this$props4.setField;
          var setOperator2 = _this$props4.setOperator, isLocked = _this$props4.isLocked;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          var selectedFieldWidgetConfig = getFieldWidgetConfig(config2, selectedField, selectedOperator) || {};
          var hideOperator = selectedFieldWidgetConfig.hideOperator;
          var showOperatorLabel = selectedField && hideOperator && selectedFieldWidgetConfig.operatorInlineLabel;
          var showOperator = selectedField && !hideOperator;
          return /* @__PURE__ */ React$4.createElement(OperatorWrapper, {
            key: "operator",
            classname: "group--operator",
            config: config2,
            selectedField,
            selectedFieldSrc,
            selectedOperator,
            setOperator: setOperator2,
            selectedFieldPartsLabels: ["group"],
            showOperator,
            showOperatorLabel,
            selectedFieldWidgetConfig,
            readonly: immutableFieldsMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          });
        }
      }, {
        key: "isEmptyCurrentGroup",
        value: function isEmptyCurrentGroup() {
          var _this$props5 = this.props, children1 = _this$props5.children1, config2 = _this$props5.config;
          var ruleData = this._buildWidgetProps(this.props);
          return isEmptyRuleGroupExtPropertiesAndChildren(ruleData, children1, config2);
        }
      }, {
        key: "_buildWidgetProps",
        value: function _buildWidgetProps(_ref) {
          var selectedField = _ref.selectedField, selectedFieldSrc = _ref.selectedFieldSrc, selectedFieldType = _ref.selectedFieldType, selectedOperator = _ref.selectedOperator, operatorOptions = _ref.operatorOptions, value2 = _ref.value, valueType = _ref.valueType;
          _ref.valueSrc;
          _ref.asyncListValues;
          _ref.valueError;
          var parentField = _ref.parentField;
          return {
            field: selectedField,
            fieldSrc: selectedFieldSrc,
            fieldType: selectedFieldType,
            operator: selectedOperator,
            operatorOptions,
            value: value2,
            valueType,
            // new Immutable.List(["number"])
            valueSrc: ["value"],
            //new Immutable.List(["value"]), // should be fixed in isEmptyRuleGroupExtPropertiesAndChildren
            //asyncListValues,
            valueError: null,
            parentField
          };
        }
      }, {
        key: "renderWidget",
        value: function renderWidget() {
          var _this$props6 = this.props, config2 = _this$props6.config, selectedField = _this$props6.selectedField, selectedOperator = _this$props6.selectedOperator, isLocked = _this$props6.isLocked;
          var immutableValuesMode = config2.settings.immutableValuesMode;
          var isFieldAndOpSelected = selectedField && selectedOperator;
          var showWidget = isFieldAndOpSelected;
          if (!showWidget)
            return null;
          var widget = /* @__PURE__ */ React$4.createElement(Widget, _extends$1({
            key: "values",
            isForRuleGroup: true
          }, this._buildWidgetProps(this.props), {
            config: config2,
            setValue: !immutableValuesMode ? this.props.setValue : dummyFn,
            setValueSrc: dummyFn,
            readonly: immutableValuesMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          }));
          return /* @__PURE__ */ React$4.createElement(Col, {
            key: "widget-for-" + this.props.selectedOperator,
            className: "rule--value"
          }, widget);
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props7 = this.props, config2 = _this$props7.config, addRule2 = _this$props7.addRule, isLocked = _this$props7.isLocked, isTrueLocked = _this$props7.isTrueLocked, id2 = _this$props7.id;
          return /* @__PURE__ */ React$4.createElement(RuleGroupExtActions, {
            config: config2,
            addRule: addRule2,
            canAddRule: this.canAddRule(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id: id2
          });
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked)
            return 0;
          var children1 = this.props.children1;
          return (children1 === null || children1 === void 0 ? void 0 : children1.size) || 0;
        }
      }, {
        key: "extraPropsForItem",
        value: function extraPropsForItem(_item) {
          return {
            parentField: this.props.selectedField
          };
        }
      }]);
      return RuleGroupExt2;
    }(BasicGroup);
    RuleGroupExt.propTypes = _objectSpread$a(_objectSpread$a({}, BasicGroup.propTypes), {}, {
      selectedField: PropTypes.any,
      selectedFieldSrc: PropTypes.string,
      selectedOperator: PropTypes.string,
      value: PropTypes.any,
      parentField: PropTypes.string,
      setField: PropTypes.func,
      setFieldSrc: PropTypes.func,
      setOperator: PropTypes.func,
      setValue: PropTypes.func
    });
    const RuleGroupExt$1 = GroupContainer(Draggable("group rule_group_ext")(WithConfirmFn(RuleGroupExt)), "rule_group");
    function _createSuper$6(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$6();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$6() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var groupActionsPositionList = {
      topLeft: "group--actions--tl",
      topCenter: "group--actions--tc",
      topRight: "group--actions--tr",
      bottomLeft: "group--actions--bl",
      bottomCenter: "group--actions--bc",
      bottomRight: "group--actions--br"
    };
    var defaultPosition = "topRight";
    var SwitchGroupActions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(SwitchGroupActions2, _PureComponent);
      var _super = _createSuper$6(SwitchGroupActions2);
      function SwitchGroupActions2() {
        _classCallCheck(this, SwitchGroupActions2);
        return _super.apply(this, arguments);
      }
      _createClass(SwitchGroupActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addCaseGroup2 = _this$props.addCaseGroup, addDefaultCaseGroup2 = _this$props.addDefaultCaseGroup, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id2 = _this$props.id, canAddGroup = _this$props.canAddGroup, canAddDefault = _this$props.canAddDefault;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addCaseLabel = _config$settings.addCaseLabel, addDefaultCaseLabel = _config$settings.addDefaultCaseLabel, groupActionsPosition = _config$settings.groupActionsPosition, renderButton = _config$settings.renderButton, renderIcon = _config$settings.renderIcon, renderSwitch = _config$settings.renderSwitch, renderButtonGroup = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock;
          var Icon2 = function Icon3(pr) {
            return renderIcon(pr, config2.ctx);
          };
          var Btn = function Btn2(pr) {
            return renderButton(pr, config2.ctx);
          };
          var Switch2 = function Switch3(pr) {
            return renderSwitch(pr, config2.ctx);
          };
          var BtnGrp = function BtnGrp2(pr) {
            return renderButtonGroup(pr, config2.ctx);
          };
          var position2 = groupActionsPositionList[groupActionsPosition || defaultPosition];
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ React$4.createElement(Switch2, {
            type: "lock",
            id: id2,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            config: config2
          });
          var addCaseGroupBtn = !immutableGroupsMode && canAddGroup && !isLocked && /* @__PURE__ */ React$4.createElement(Btn, {
            type: "addCaseGroup",
            onClick: addCaseGroup2,
            label: addCaseLabel,
            readonly: isLocked,
            config: config2,
            renderIcon: Icon2
          });
          var addDefaultCaseGroupBtn = !immutableGroupsMode && canAddDefault && !isLocked && /* @__PURE__ */ React$4.createElement(Btn, {
            type: "addDefaultCaseGroup",
            onClick: addDefaultCaseGroup2,
            label: addDefaultCaseLabel,
            readonly: isLocked,
            config: config2,
            renderIcon: Icon2
          });
          return /* @__PURE__ */ React$4.createElement("div", {
            className: "group--actions ".concat(position2)
          }, /* @__PURE__ */ React$4.createElement(BtnGrp, {
            config: config2
          }, setLockSwitch, addCaseGroupBtn, addDefaultCaseGroupBtn));
        }
      }]);
      return SwitchGroupActions2;
    }(reactExports.PureComponent);
    function ownKeys$9(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$9(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$9(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$5(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$5();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$5() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var _Utils$TreeUtils$1 = Utils$1.TreeUtils, getTotalReordableNodesCountInTree$1 = _Utils$TreeUtils$1.getTotalReordableNodesCountInTree, getTotalRulesCountInTree$1 = _Utils$TreeUtils$1.getTotalRulesCountInTree;
    var SwitchGroup = /* @__PURE__ */ function(_BasicGroup) {
      _inherits(SwitchGroup2, _BasicGroup);
      var _super = _createSuper$5(SwitchGroup2);
      function SwitchGroup2(props) {
        var _this;
        _classCallCheck(this, SwitchGroup2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "switch_group--children";
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        _this.hasDefaultCase = function() {
          var _this$props$children;
          return ((_this$props$children = _this.props.children1) === null || _this$props$children === void 0 ? void 0 : _this$props$children.size) && _this.props.children1.filter(function(c2) {
            return c2.get("children1") == null;
          }).size > 0;
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(SwitchGroup2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
        }
      }, {
        key: "canAddGroup",
        value: function canAddGroup() {
          var _this$props$children2;
          var maxNumberOfCases = this.props.config.settings.maxNumberOfCases;
          var totalCasesCnt = ((_this$props$children2 = this.props.children1) === null || _this$props$children2 === void 0 ? void 0 : _this$props$children2.size) || 0;
          if (maxNumberOfCases) {
            return totalCasesCnt < maxNumberOfCases;
          }
          return true;
        }
      }, {
        key: "canAddRule",
        value: function canAddRule() {
          return false;
        }
      }, {
        key: "reordableNodesCnt",
        value: function reordableNodesCnt() {
          var _this$props$children3;
          var totalCasesCnt = ((_this$props$children3 = this.props.children1) === null || _this$props$children3 === void 0 ? void 0 : _this$props$children3.size) || 0;
          var casesToReorder = totalCasesCnt;
          if (this.hasDefaultCase()) {
            casesToReorder--;
          }
          return casesToReorder;
        }
      }, {
        key: "totalRulesCntForItem",
        value: function totalRulesCntForItem(item) {
          return getTotalRulesCountInTree$1(item);
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(item) {
          var _this$props$children4;
          if (this.props.isLocked)
            return 0;
          var _this$props$config$se = this.props.config.settings, canLeaveEmptyCase = _this$props$config$se.canLeaveEmptyCase, canRegroupCases = _this$props$config$se.canRegroupCases;
          var totalCasesCnt = ((_this$props$children4 = this.props.children1) === null || _this$props$children4 === void 0 ? void 0 : _this$props$children4.size) || 0;
          var casesToReorder = totalCasesCnt;
          if (this.hasDefaultCase()) {
            casesToReorder--;
          }
          var nodesInCase = getTotalReordableNodesCountInTree$1(item);
          var cnt = nodesInCase;
          if (cnt == 1 && canRegroupCases && canLeaveEmptyCase && casesToReorder > 1)
            cnt = 111;
          return cnt;
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          return /* @__PURE__ */ React$4.createElement("div", {
            key: "group-header",
            className: classNames(
              "group--header",
              this.isOneChild() ? "one--child" : "",
              this.isOneChild() ? "hide--line" : "",
              this.isNoChildren() ? "no--children" : "",
              this.showDragIcon() ? "with--drag" : "hide--drag"
              //this.showConjs() && (!this.isOneChild() || this.showNot()) ? "with--conjs" : "hide--conjs"
            )
          }, this.renderHeader(), this.renderActions());
        }
      }, {
        key: "renderHeader",
        value: function renderHeader() {
          return /* @__PURE__ */ React$4.createElement("div", {
            className: "group--conjunctions"
          }, this.renderConjs(), this.renderDrag());
        }
      }, {
        key: "renderConjs",
        value: function renderConjs() {
          var config2 = this.props.config;
          var renderSwitchPrefix = config2.settings.renderSwitchPrefix;
          return renderSwitchPrefix || null;
        }
      }, {
        key: "showNot",
        value: function showNot() {
          return false;
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props = this.props, config2 = _this$props.config, addCaseGroup2 = _this$props.addCaseGroup, addDefaultCaseGroup2 = _this$props.addDefaultCaseGroup, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id2 = _this$props.id;
          return /* @__PURE__ */ React$4.createElement(SwitchGroupActions, {
            config: config2,
            addCaseGroup: addCaseGroup2,
            addDefaultCaseGroup: addDefaultCaseGroup2,
            canAddDefault: !this.hasDefaultCase(),
            canAddGroup: this.canAddGroup(),
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id: id2
          });
        }
      }]);
      return SwitchGroup2;
    }(BasicGroup);
    SwitchGroup.propTypes = _objectSpread$9({}, BasicGroup.propTypes);
    const SwitchGroup$1 = GroupContainer(Draggable("group switch_group")(WithConfirmFn(SwitchGroup)), "switch_group");
    function ownKeys$8(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$8(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$8(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$4(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$4();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$4() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var CaseGroup = /* @__PURE__ */ function(_BasicGroup) {
      _inherits(CaseGroup2, _BasicGroup);
      var _super = _createSuper$4(CaseGroup2);
      function CaseGroup2(props) {
        var _this;
        _classCallCheck(this, CaseGroup2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "case_group--children";
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(CaseGroup2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
        }
      }, {
        key: "isDefaultCase",
        value: function isDefaultCase() {
          return this.props.children1 == void 0;
        }
      }, {
        key: "reordableNodesCnt",
        value: function reordableNodesCnt() {
          return this.props.parentReordableNodesCnt;
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked)
            return 0;
          return this.props.reordableNodesCnt;
        }
      }, {
        key: "totalRulesCntForItem",
        value: function totalRulesCntForItem(_item) {
          return this.props.totalRulesCnt;
        }
      }, {
        key: "showDragIcon",
        value: function showDragIcon() {
          if (this.isDefaultCase())
            return false;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "showDragIcon", this).call(this);
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          return /* @__PURE__ */ React$4.createElement("div", {
            key: "group-header",
            className: classNames("group--header", this.isOneChild() ? "one--child" : "", this.isOneChild() ? "hide--line" : "", this.isNoChildren() ? "no--children" : "", this.showDragIcon() ? "with--drag" : "hide--drag", this.showConjs() && (!this.isOneChild() || this.showNot()) ? "with--conjs" : "hide--conjs")
          }, this.renderHeaderLeft(), this.renderHeaderCenter(), this.renderActions());
        }
      }, {
        key: "renderChildrenWrapper",
        value: function renderChildrenWrapper() {
          if (this.isDefaultCase())
            return null;
          return /* @__PURE__ */ React$4.createElement("div", {
            className: "case_group--body"
          }, this.renderCondition(), this.renderValue());
        }
      }, {
        key: "renderHeaderLeft",
        value: function renderHeaderLeft() {
          if (this.isDefaultCase()) {
            var defaultCaseLabel = this.props.config.settings.defaultCaseLabel;
            return defaultCaseLabel || "";
          }
          return /* @__PURE__ */ React$4.createElement("div", {
            className: "group--conjunctions"
          }, this.renderConjs(), this.renderDrag());
        }
      }, {
        key: "renderCondition",
        value: function renderCondition() {
          if (this.isDefaultCase())
            return null;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "renderChildrenWrapper", this).call(this);
        }
      }, {
        key: "renderHeaderCenter",
        value: function renderHeaderCenter() {
          if (this.isDefaultCase())
            return this.renderValue();
          else
            return null;
        }
      }, {
        key: "canAddGroup",
        value: function canAddGroup() {
          if (this.isDefaultCase())
            return false;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "canAddGroup", this).call(this);
        }
      }, {
        key: "canAddRule",
        value: function canAddRule() {
          if (this.isDefaultCase())
            return false;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "canAddRule", this).call(this);
        }
      }, {
        key: "renderValue",
        value: function renderValue() {
          var _this$props = this.props, config2 = _this$props.config, isLocked = _this$props.isLocked, value2 = _this$props.value, setValue2 = _this$props.setValue, id2 = _this$props.id;
          var immutableValuesMode = config2.settings.immutableValuesMode;
          var widget = /* @__PURE__ */ React$4.createElement(Widget, {
            key: "values",
            isCaseValue: true,
            field: "!case_value",
            operator: null,
            value: value2,
            valueSrc: "value",
            valueError: null,
            config: config2,
            setValue: !immutableValuesMode ? setValue2 : dummyFn,
            setValueSrc: dummyFn,
            readonly: immutableValuesMode || isLocked,
            id: id2,
            groupId: null
          });
          return /* @__PURE__ */ React$4.createElement(Col, {
            className: "case_group--value"
          }, widget);
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props2 = this.props, config2 = _this$props2.config, addGroup2 = _this$props2.addGroup, addRule2 = _this$props2.addRule, isLocked = _this$props2.isLocked, isTrueLocked = _this$props2.isTrueLocked, id2 = _this$props2.id;
          return /* @__PURE__ */ React$4.createElement(GroupActions, {
            config: config2,
            addGroup: addGroup2,
            addRule: addRule2,
            canAddRule: this.canAddRule(),
            canAddGroup: this.canAddGroup(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id: id2
          });
        }
      }, {
        key: "isEmptyCurrentGroup",
        value: function isEmptyCurrentGroup() {
          var value2 = this.props.value;
          var oneValue = value2 && value2.size ? value2.get(0) : null;
          var hasValue2 = oneValue != null && (Array.isArray(oneValue) ? oneValue.length > 0 : true);
          return _get(_getPrototypeOf(CaseGroup2.prototype), "isEmptyCurrentGroup", this).call(this) && !hasValue2;
        }
      }]);
      return CaseGroup2;
    }(BasicGroup);
    CaseGroup.propTypes = _objectSpread$8(_objectSpread$8({}, BasicGroup.propTypes), {}, {
      parentReordableNodesCnt: PropTypes.number,
      value: PropTypes.any,
      setValue: PropTypes.func
    });
    const CaseGroup$1 = GroupContainer(Draggable("group case_group")(WithConfirmFn(CaseGroup)), "case_group");
    var _excluded$z = ["type"];
    function _createSuper$3(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$3() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    function ownKeys$7(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$7(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$7(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var types$2 = ["rule", "group", "rule_group", "switch_group", "case_group"];
    var getProperties = function getProperties2(props) {
      var _props$properties;
      var properties2 = ((_props$properties = props.properties) === null || _props$properties === void 0 ? void 0 : _props$properties.toObject()) || {};
      var result = _objectSpread$7({}, properties2);
      if (props.isParentLocked) {
        result.isLocked = true;
      }
      if (properties2.isLocked) {
        result.isTrueLocked = true;
      }
      return result;
    };
    var typeMap = {
      rule: function rule2(props) {
        return /* @__PURE__ */ React$4.createElement(Rule$1, _extends$1({}, getProperties(props), {
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          config: props.config,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          parentField: props.parentField,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }));
      },
      group: function group2(props) {
        return /* @__PURE__ */ React$4.createElement(Group, _extends$1({}, getProperties(props), {
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: null,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }));
      },
      rule_group: function rule_group(props) {
        return /* @__PURE__ */ React$4.createElement(RuleGroup$1, _extends$1({}, getProperties(props), {
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: props.parentField,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }));
      },
      rule_group_ext: function rule_group_ext(props) {
        return /* @__PURE__ */ React$4.createElement(RuleGroupExt$1, _extends$1({}, getProperties(props), {
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: props.parentField,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }));
      },
      switch_group: function switch_group(props) {
        return /* @__PURE__ */ React$4.createElement(SwitchGroup$1, _extends$1({}, getProperties(props), {
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: null,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }));
      },
      case_group: function case_group(props) {
        return /* @__PURE__ */ React$4.createElement(CaseGroup$1, _extends$1({}, getProperties(props), {
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: null,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }));
      }
    };
    var Item = /* @__PURE__ */ function(_PureComponent) {
      _inherits(Item2, _PureComponent);
      var _super = _createSuper$3(Item2);
      function Item2() {
        _classCallCheck(this, Item2);
        return _super.apply(this, arguments);
      }
      _createClass(Item2, [{
        key: "render",
        value: function render() {
          var _props$properties2;
          var _this$props = this.props, type = _this$props.type, props = _objectWithoutProperties(_this$props, _excluded$z);
          var mode = (_props$properties2 = props.properties) === null || _props$properties2 === void 0 ? void 0 : _props$properties2.get("mode");
          var postfix = mode == "array" ? "_ext" : "";
          var renderItem = props.config.settings.renderItem;
          var Cmp = typeMap[type + postfix];
          if (renderItem) {
            return renderItem(_objectSpread$7(_objectSpread$7({}, props), {}, {
              type,
              itemComponent: Cmp
            }), props.config.ctx);
          }
          if (!Cmp)
            return null;
          return Cmp(props);
        }
      }]);
      return Item2;
    }(reactExports.PureComponent);
    Item.propTypes = {
      config: PropTypes.object.isRequired,
      id: PropTypes.string.isRequired,
      groupId: PropTypes.string,
      type: PropTypes.oneOf(types$2).isRequired,
      path: PropTypes.any.isRequired,
      //instanceOf(Immutable.List)
      properties: PropTypes.any.isRequired,
      //instanceOf(Immutable.Map)
      children1: PropTypes.any,
      //instanceOf(Immutable.OrderedMap)
      actions: PropTypes.object.isRequired,
      reordableNodesCnt: PropTypes.number,
      onDragStart: PropTypes.func,
      parentField: PropTypes.string,
      //from RuleGroup
      isDraggingTempo: PropTypes.bool,
      isParentLocked: PropTypes.bool
    };
    function _createSuper$2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$2() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var _Utils$TreeUtils = Utils$1.TreeUtils, getTotalReordableNodesCountInTree = _Utils$TreeUtils.getTotalReordableNodesCountInTree, getTotalRulesCountInTree = _Utils$TreeUtils.getTotalRulesCountInTree;
    var _Utils$DefaultUtils = Utils$1.DefaultUtils, createListFromArray = _Utils$DefaultUtils.createListFromArray, emptyProperies = _Utils$DefaultUtils.emptyProperies;
    var Builder = /* @__PURE__ */ function(_Component) {
      _inherits(Builder2, _Component);
      var _super = _createSuper$2(Builder2);
      function Builder2(props) {
        var _this;
        _classCallCheck(this, Builder2);
        _this = _super.call(this, props);
        _this.pureShouldComponentUpdate = pureShouldComponentUpdate(_assertThisInitialized(_this));
        _this._updPath(props);
        return _this;
      }
      _createClass(Builder2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          var prevProps = this.props;
          var should = this.pureShouldComponentUpdate(nextProps, nextState);
          if (should) {
            var chs = [];
            for (var k2 in nextProps) {
              var changed = nextProps[k2] !== prevProps[k2];
              if (changed && k2 != "__isInternalValueChange") {
                chs.push(k2);
              }
            }
            if (!chs.length)
              should = false;
            if (chs.length == 1 && chs[0] == "tree" && nextProps.__isInternalValueChange)
              should = false;
          }
          return should;
        }
      }, {
        key: "_updPath",
        value: function _updPath(props) {
          var id2 = props.tree.get("id");
          this.path = createListFromArray([id2]);
        }
      }, {
        key: "render",
        value: function render() {
          var tree2 = this.props.tree;
          var rootType = tree2.get("type");
          var isTernary = rootType == "switch_group";
          var reordableNodesCnt = isTernary ? null : getTotalReordableNodesCountInTree(tree2);
          var totalRulesCnt = isTernary ? null : getTotalRulesCountInTree(tree2);
          var id2 = tree2.get("id");
          return /* @__PURE__ */ React$4.createElement(Item, {
            key: id2,
            id: id2,
            path: this.path,
            type: rootType,
            properties: tree2.get("properties") || emptyProperies(),
            config: this.props.config,
            actions: this.props.actions,
            children1: tree2.get("children1") || emptyProperies(),
            reordableNodesCnt,
            totalRulesCnt,
            parentReordableNodesCnt: 0,
            onDragStart: this.props.onDragStart
          });
        }
      }]);
      return Builder2;
    }(reactExports.Component);
    Builder.propTypes = {
      tree: PropTypes.any.isRequired,
      //instanceOf(Immutable.Map)
      config: PropTypes.object.isRequired,
      actions: PropTypes.object.isRequired,
      onDragStart: PropTypes.func
    };
    const Builder$1 = SortableContainer(Builder);
    function ownKeys$6(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$6(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$6(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$1(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$1() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var clone = Utils$1.clone;
    var _Utils$ConfigUtils = Utils$1.ConfigUtils, getFieldConfig = _Utils$ConfigUtils.getFieldConfig, getFieldParts = _Utils$ConfigUtils.getFieldParts, getFieldPathParts = _Utils$ConfigUtils.getFieldPathParts;
    var _Utils$RuleUtils = Utils$1.RuleUtils, getFieldPathLabels = _Utils$RuleUtils.getFieldPathLabels, getWidgetForFieldOp = _Utils$RuleUtils.getWidgetForFieldOp;
    var ValueField = /* @__PURE__ */ function(_Component) {
      _inherits(ValueField2, _Component);
      var _super = _createSuper$1(ValueField2);
      function ValueField2(props) {
        var _this;
        _classCallCheck(this, ValueField2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(ValueField2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForItems = ["config", "field", "fieldSrc", "fieldType", "operator", "isFuncArg", "parentField"];
          var keysForMeta = ["config", "field", "fieldSrc", "fieldType", "operator", "value", "placeholder", "isFuncArg", "parentField"];
          var needUpdateItems = !this.items || keysForItems.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateItems) {
            this.items = this.getItems(nextProps);
          }
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getItems",
        value: function getItems(_ref) {
          var config2 = _ref.config, field = _ref.field, fieldType = _ref.fieldType, operator = _ref.operator, parentField = _ref.parentField, isFuncArg = _ref.isFuncArg, fieldDefinition = _ref.fieldDefinition;
          var canCompareFieldWithField = config2.settings.canCompareFieldWithField;
          config2.settings.fieldSeparator;
          var parentFieldPath = getFieldParts(parentField, config2);
          var parentFieldConfig = parentField ? getFieldConfig(config2, parentField) : null;
          var sourceFields = parentField ? parentFieldConfig === null || parentFieldConfig === void 0 ? void 0 : parentFieldConfig.subfields : config2.fields;
          var filteredFields = this.filterFields(config2, sourceFields, field, parentField, parentFieldPath, operator, canCompareFieldWithField, isFuncArg, fieldDefinition, fieldType);
          var items = this.buildOptions(parentFieldPath, config2, filteredFields, parentFieldPath);
          return items;
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref2) {
          var _leftFieldConfig$widg;
          var config2 = _ref2.config, field = _ref2.field;
          _ref2.fieldType;
          _ref2.operator;
          var value2 = _ref2.value, customPlaceholder = _ref2.placeholder, isFuncArg = _ref2.isFuncArg, parentField = _ref2.parentField;
          var _config$settings = config2.settings, fieldPlaceholder = _config$settings.fieldPlaceholder, fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay;
          var selectedKey = value2;
          var isFieldSelected = !!value2;
          var leftFieldConfig = field ? getFieldConfig(config2, field) : {};
          var leftFieldWidgetField = leftFieldConfig === null || leftFieldConfig === void 0 || (_leftFieldConfig$widg = leftFieldConfig.widgets) === null || _leftFieldConfig$widg === void 0 ? void 0 : _leftFieldConfig$widg.field;
          var leftFieldWidgetFieldProps = (leftFieldWidgetField === null || leftFieldWidgetField === void 0 ? void 0 : leftFieldWidgetField.widgetProps) || {};
          var placeholder = isFieldSelected ? null : isFuncArg && customPlaceholder || leftFieldWidgetFieldProps.valuePlaceholder || fieldPlaceholder;
          var currField = isFieldSelected ? getFieldConfig(config2, selectedKey) : null;
          var selectedOpts = currField || {};
          var selectedKeys = getFieldPathParts(selectedKey, config2);
          var selectedPath = getFieldPathParts(selectedKey, config2, true);
          var selectedLabel = this.getFieldLabel(currField, selectedKey, config2);
          var partsLabels = getFieldPathLabels(selectedKey, config2);
          var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;
          if (selectedFullLabel == selectedLabel || parentField)
            selectedFullLabel = null;
          var selectedAltLabel = selectedOpts.label2;
          return {
            placeholder,
            selectedKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            selectedAltLabel,
            selectedFullLabel
          };
        }
      }, {
        key: "filterFields",
        value: function filterFields(config2, fields, leftFieldFullkey, parentField, parentFieldPath, operator, canCompareFieldWithField, isFuncArg, fieldDefinition, fieldType) {
          fields = clone(fields);
          var fieldSeparator = config2.settings.fieldSeparator;
          var leftFieldConfig = getFieldConfig(config2, leftFieldFullkey);
          var widget = getWidgetForFieldOp(config2, leftFieldFullkey, operator, "value");
          config2.widgets[widget];
          var expectedType;
          if (isFuncArg) {
            expectedType = fieldDefinition === null || fieldDefinition === void 0 ? void 0 : fieldDefinition.type;
          } else if (leftFieldConfig) {
            expectedType = leftFieldConfig.type;
          } else {
            expectedType = fieldType;
          }
          function _filter(list, path) {
            for (var rightFieldKey in list) {
              var subfields = list[rightFieldKey].subfields;
              var subpath = (path ? path : []).concat(rightFieldKey);
              var rightFieldFullkey = subpath.join(fieldSeparator);
              var rightFieldConfig = getFieldConfig(config2, rightFieldFullkey);
              if (!rightFieldConfig) {
                delete list[rightFieldKey];
              } else if (rightFieldConfig.type == "!struct" || rightFieldConfig.type == "!group") {
                if (_filter(subfields, subpath) == 0)
                  delete list[rightFieldKey];
              } else {
                var canUse = (!expectedType || rightFieldConfig.type == expectedType) && (isFuncArg ? true : rightFieldFullkey != leftFieldFullkey);
                var fn = canCompareFieldWithField || config2.settings.canCompareFieldWithField;
                if (fn)
                  canUse = canUse && fn(leftFieldFullkey, leftFieldConfig, rightFieldFullkey, rightFieldConfig, operator);
                if (!canUse)
                  delete list[rightFieldKey];
              }
            }
            return keys$6(list).length;
          }
          _filter(fields, parentFieldPath || []);
          return fields;
        }
      }, {
        key: "buildOptions",
        value: function buildOptions2(parentFieldPath, config2, fields) {
          var _this2 = this;
          var path = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          var optGroupLabel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
          if (!fields)
            return null;
          var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
          var prefix2 = path !== null && path !== void 0 && path.length ? path.join(fieldSeparator) + fieldSeparator : "";
          return keys$6(fields).map(function(fieldKey) {
            var fullFieldPath = [].concat(_toConsumableArray(path !== null && path !== void 0 ? path : []), [fieldKey]);
            var field = fields[fieldKey];
            var label = _this2.getFieldLabel(field, fullFieldPath, config2);
            var partsLabels = getFieldPathLabels(fullFieldPath, config2);
            var fullLabel = partsLabels.join(fieldSeparatorDisplay);
            if (fullLabel == label || parentFieldPath)
              fullLabel = null;
            var altLabel = field.label2;
            var tooltip = field.tooltip;
            if (field.hideForCompare)
              return void 0;
            if (field.type == "!struct" || field.type == "!group") {
              return {
                key: fieldKey,
                path: prefix2 + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                items: _this2.buildOptions(parentFieldPath, config2, field.subfields, fullFieldPath, label)
              };
            } else {
              return {
                key: fieldKey,
                path: prefix2 + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                grouplabel: optGroupLabel
              };
            }
          }).filter(function(o) {
            return !!o;
          });
        }
      }, {
        key: "getFieldLabel",
        value: function getFieldLabel(fieldOpts, fieldKey, config2) {
          if (!fieldKey)
            return null;
          var maxLabelsLength = config2.settings.maxLabelsLength;
          var fieldParts = getFieldParts(fieldKey, config2);
          var label = (fieldOpts === null || fieldOpts === void 0 ? void 0 : fieldOpts.label) || last$2(fieldParts);
          label = truncateString(label, maxLabelsLength);
          return label;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setValue2 = _this$props.setValue, readonly = _this$props.readonly, id2 = _this$props.id, groupId = _this$props.groupId;
          var renderField = config2.settings.renderField;
          var renderProps = _objectSpread$6({
            isValueField: true,
            config: config2,
            customProps,
            setField: setValue2,
            readonly,
            items: this.items,
            id: id2,
            groupId
          }, this.meta);
          return renderField(renderProps, config2.ctx);
        }
      }]);
      return ValueField2;
    }(reactExports.Component);
    ValueField.propTypes = {
      id: PropTypes.string,
      groupId: PropTypes.string,
      setValue: PropTypes.func.isRequired,
      config: PropTypes.object.isRequired,
      field: PropTypes.any,
      fieldSrc: PropTypes.string,
      fieldType: PropTypes.string,
      value: PropTypes.string,
      operator: PropTypes.string,
      customProps: PropTypes.object,
      readonly: PropTypes.bool,
      parentField: PropTypes.string,
      fieldDefinition: PropTypes.object,
      isFuncArg: PropTypes.bool
    };
    const VanillaBoolean = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var labelYes = props.labelYes, labelNo = props.labelNo, readonly = props.readonly, _props$customProps = props.customProps, customProps = _props$customProps === void 0 ? {} : _props$customProps;
      var customRadioYesProps = customProps.radioYes || {};
      var customRadioNoProps = customProps.radioNo || {};
      var onRadioChange = function onRadioChange2(e2) {
        return setValue2(e2.target.value == "true");
      };
      return /* @__PURE__ */ React$4.createElement(React$4.Fragment, null, /* @__PURE__ */ React$4.createElement("input", _extends$1({
        type: "radio",
        value: true,
        checked: !!value2,
        disabled: readonly,
        onChange: onRadioChange
      }, customRadioYesProps)), " ", labelYes, /* @__PURE__ */ React$4.createElement("input", _extends$1({
        type: "radio",
        value: false,
        checked: !value2,
        disabled: readonly,
        onChange: onRadioChange
      }, customRadioNoProps)), " ", labelNo);
    };
    const VanillaText = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, placeholder = props.placeholder, maxLength = props.maxLength, customProps = props.customProps;
      var onChange = function onChange2(e2) {
        var val = e2.target.value;
        if (val === "")
          val = void 0;
        setValue2(val);
      };
      var textValue = value2 || "";
      return /* @__PURE__ */ React$4.createElement("input", _extends$1({
        type: "text",
        value: textValue,
        placeholder,
        disabled: readonly,
        onChange,
        maxLength
      }, customProps));
    };
    const VanillaTextArea = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, placeholder = props.placeholder, maxLength = props.maxLength;
      props.maxRows;
      var fullWidth = props.fullWidth, customProps = props.customProps;
      var onChange = function onChange2(e2) {
        var val = e2.target.value;
        if (val === "")
          val = void 0;
        setValue2(val);
      };
      var textValue = value2 || "";
      return /* @__PURE__ */ React$4.createElement("textarea", _extends$1({
        value: textValue,
        placeholder,
        disabled: readonly,
        onChange,
        maxLength,
        style: {
          width: fullWidth ? "100%" : void 0
        }
      }, customProps));
    };
    Utils$1.moment;
    const VanillaDate = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      props.valueFormat;
      var readonly = props.readonly, customProps = props.customProps;
      var onChange = function onChange2(e2) {
        var value3 = e2.target.value;
        if (value3 == "")
          value3 = void 0;
        setValue2(value3);
      };
      return /* @__PURE__ */ React$4.createElement("input", _extends$1({
        type: "date",
        value: value2 || "",
        disabled: readonly,
        onChange
      }, customProps));
    };
    const VanillaTime = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      props.valueFormat;
      props.use12Hours;
      var readonly = props.readonly, customProps = props.customProps;
      var onChange = function onChange2(e2) {
        var value3 = e2.target.value;
        if (value3 == "")
          value3 = void 0;
        setValue2(value3);
      };
      return /* @__PURE__ */ React$4.createElement("input", _extends$1({
        type: "time",
        value: value2 || "",
        disabled: readonly,
        onChange
      }, customProps));
    };
    var moment$3 = Utils$1.moment;
    const VanillaDateTime = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var valueFormat = props.valueFormat;
      props.use12Hours;
      var readonly = props.readonly, customProps = props.customProps;
      var onChange = function onChange2(e2) {
        var value3 = e2.target.value;
        if (value3 == "")
          value3 = void 0;
        else
          value3 = moment$3(new Date(value3)).format(valueFormat);
        setValue2(value3);
      };
      var dtValue = value2;
      if (!value2)
        dtValue = "";
      else
        dtValue = moment$3(value2).format("YYYY-MM-DDTHH:mm");
      return /* @__PURE__ */ React$4.createElement("input", _extends$1({
        type: "datetime-local",
        value: dtValue,
        disabled: readonly,
        onChange
      }, customProps));
    };
    var mapListValues$4 = Utils$1.ListUtils.mapListValues;
    const VanillaMultiSelect = function(_ref) {
      var listValues2 = _ref.listValues, value2 = _ref.value, setValue2 = _ref.setValue;
      _ref.allowCustomValues;
      var readonly = _ref.readonly, customProps = _ref.customProps;
      var renderOptions = function renderOptions2() {
        return mapListValues$4(listValues2, function(_ref2) {
          var title = _ref2.title, value3 = _ref2.value;
          return /* @__PURE__ */ React$4.createElement("option", {
            key: value3,
            value: value3
          }, title);
        });
      };
      var getMultiSelectValues = function getMultiSelectValues2(multiselect) {
        var values2 = [];
        var options = multiselect.options;
        for (var i = 0; i < options.length; i++) {
          var opt = options[i];
          if (opt.selected) {
            values2.push(opt.value);
          }
        }
        if (!values2.length)
          values2 = void 0;
        return values2;
      };
      var onChange = function onChange2(e2) {
        return setValue2(getMultiSelectValues(e2.target));
      };
      return /* @__PURE__ */ React$4.createElement("select", _extends$1({
        multiple: true,
        onChange,
        value: value2,
        disabled: readonly
      }, omit$1(customProps, ["showSearch", "input", "showCheckboxes"])), renderOptions());
    };
    var mapListValues$3 = Utils$1.ListUtils.mapListValues;
    const VanillaSelect = function(_ref) {
      var listValues2 = _ref.listValues, value2 = _ref.value, setValue2 = _ref.setValue;
      _ref.allowCustomValues;
      var readonly = _ref.readonly, customProps = _ref.customProps;
      var renderOptions = function renderOptions2() {
        return mapListValues$3(listValues2, function(_ref2) {
          var title = _ref2.title, value3 = _ref2.value;
          return /* @__PURE__ */ React$4.createElement("option", {
            key: value3,
            value: value3
          }, title);
        });
      };
      var onChange = function onChange2(e2) {
        return setValue2(e2.target.value);
      };
      var hasValue2 = value2 != null;
      return /* @__PURE__ */ React$4.createElement("select", _extends$1({
        onChange,
        value: hasValue2 ? value2 : "",
        disabled: readonly
      }, omit$1(customProps, ["showSearch", "input"])), !hasValue2 && /* @__PURE__ */ React$4.createElement("option", {
        disabled: true,
        value: ""
      }), renderOptions());
    };
    const VanillaNumber = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, min2 = props.min, max2 = props.max, step = props.step, placeholder = props.placeholder, customProps = props.customProps;
      var onChange = function onChange2(e2) {
        var val = e2.target.value;
        if (val === "" || val === null)
          val = void 0;
        else
          val = Number(val);
        setValue2(val);
      };
      var numberValue = value2 == void 0 ? "" : value2;
      return /* @__PURE__ */ React$4.createElement("input", _extends$1({
        type: "number",
        value: numberValue,
        placeholder,
        disabled: readonly,
        min: min2,
        max: max2,
        step,
        onChange
      }, customProps));
    };
    const VanillaSlider = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, min2 = props.min, max2 = props.max, step = props.step, placeholder = props.placeholder, _props$customProps = props.customProps, customProps = _props$customProps === void 0 ? {} : _props$customProps;
      var customInputProps = customProps.input || {};
      var customSliderProps = customProps.slider || customProps;
      var onChange = function onChange2(e2) {
        var val = e2.target.value;
        if (val === "" || val === null)
          val = void 0;
        else
          val = Number(val);
        setValue2(val);
      };
      var numberValue = value2 == void 0 ? "" : value2;
      return /* @__PURE__ */ React$4.createElement("div", {
        style: {
          display: "inline-flex"
        }
      }, /* @__PURE__ */ React$4.createElement("input", _extends$1({
        key: "number",
        type: "number",
        value: numberValue,
        placeholder,
        disabled: readonly,
        min: min2,
        max: max2,
        step,
        onChange
      }, customInputProps)), /* @__PURE__ */ React$4.createElement("input", _extends$1({
        key: "range",
        type: "range",
        value: numberValue,
        disabled: readonly,
        min: min2,
        max: max2,
        step,
        onChange
      }, customSliderProps)));
    };
    const VanillaFieldSelect = function(_ref) {
      var items = _ref.items, setField2 = _ref.setField, selectedKey = _ref.selectedKey, readonly = _ref.readonly, errorText = _ref.errorText;
      var renderOptions = function renderOptions2(fields) {
        return fields.map(function(field) {
          var items2 = field.items, path = field.path, label = field.label, disabled = field.disabled, matchesType = field.matchesType;
          if (items2) {
            return /* @__PURE__ */ React$4.createElement("optgroup", {
              disabled,
              key: path,
              label
            }, renderOptions2(items2));
          } else {
            var style2 = matchesType ? {
              fontWeight: "bold"
            } : {};
            return /* @__PURE__ */ React$4.createElement("option", {
              disabled,
              key: path,
              value: path,
              style: style2
            }, label);
          }
        });
      };
      var onChange = function onChange2(e2) {
        return setField2(e2.target.value);
      };
      var hasValue2 = selectedKey != null;
      return /* @__PURE__ */ React$4.createElement("select", {
        onChange,
        value: hasValue2 ? selectedKey : "",
        disabled: readonly,
        style: {
          color: errorText ? "red" : null
        }
      }, !hasValue2 && /* @__PURE__ */ React$4.createElement("option", {
        disabled: true,
        value: ""
      }), renderOptions(items));
    };
    const VanillaConjs = function(_ref) {
      var id2 = _ref.id, not = _ref.not, setNot2 = _ref.setNot, conjunctionOptions = _ref.conjunctionOptions, setConjunction2 = _ref.setConjunction, disabled = _ref.disabled, readonly = _ref.readonly, config2 = _ref.config, showNot = _ref.showNot, notLabel = _ref.notLabel;
      var conjsCount = Object.keys(conjunctionOptions).length;
      var lessThenTwo = disabled;
      var forceShowConj = config2.settings.forceShowConj;
      var showConj = forceShowConj || conjsCount > 1 && !lessThenTwo;
      var renderOptions = function renderOptions2() {
        return Object.keys(conjunctionOptions).map(function(key) {
          var _conjunctionOptions$k = conjunctionOptions[key], id3 = _conjunctionOptions$k.id, name = _conjunctionOptions$k.name, label = _conjunctionOptions$k.label, checked = _conjunctionOptions$k.checked;
          var postfix = setConjunction2.isDummyFn ? "__dummy" : "";
          if ((readonly || disabled) && !checked)
            return null;
          return [/* @__PURE__ */ React$4.createElement("input", {
            key: id3 + postfix,
            type: "radio",
            id: id3 + postfix,
            name: name + postfix,
            checked,
            disabled: readonly || disabled,
            value: key,
            onChange
          }), /* @__PURE__ */ React$4.createElement("label", {
            key: id3 + postfix + "label",
            htmlFor: id3 + postfix
          }, label)];
        });
      };
      var renderNot = function renderNot2() {
        var postfix = "not";
        return [/* @__PURE__ */ React$4.createElement("input", {
          key: id2 + postfix,
          type: "checkbox",
          id: id2 + postfix,
          checked: not,
          disabled: readonly,
          onChange: onNotChange
        }), /* @__PURE__ */ React$4.createElement("label", {
          key: id2 + postfix + "label",
          htmlFor: id2 + postfix
        }, notLabel || "NOT")];
      };
      var onChange = function onChange2(e2) {
        return setConjunction2(e2.target.value);
      };
      var onNotChange = function onNotChange2(e2) {
        return setNot2(e2.target.checked);
      };
      return [showNot && renderNot(), showConj && renderOptions()];
    };
    var typeToLabel = {
      "addRuleGroup": "+",
      "addRuleGroupExt": "+",
      "delGroup": "x",
      "delRuleGroup": "x",
      "delRule": "x"
    };
    const VanillaButton = function(_ref) {
      var type = _ref.type, label = _ref.label, onClick = _ref.onClick, readonly = _ref.readonly;
      var btnLabel = label || typeToLabel[type];
      return /* @__PURE__ */ React$4.createElement("button", {
        onClick,
        type: "button",
        disabled: readonly
      }, btnLabel);
    };
    const VanillaIcon = function(_ref) {
      var type = _ref.type;
      var typeToIcon2 = {};
      var icon = typeToIcon2[type];
      if (!icon && type === "drag") {
        icon = /* @__PURE__ */ React$4.createElement(DragIcon$1, null);
      }
      return icon || null;
    };
    const VanillaButtonGroup = function(_ref) {
      var children = _ref.children;
      _ref.config;
      return /* @__PURE__ */ React$4.createElement(React$4.Fragment, null, children);
    };
    const VanillaValueSources = function(_ref) {
      _ref.config;
      var valueSources = _ref.valueSources, valueSrc = _ref.valueSrc;
      _ref.title;
      var setValueSrc2 = _ref.setValueSrc, readonly = _ref.readonly;
      var renderOptions = function renderOptions2(valueSources2) {
        return valueSources2.map(function(_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2), srcKey = _ref3[0], info = _ref3[1];
          return /* @__PURE__ */ React$4.createElement("option", {
            key: srcKey,
            value: srcKey
          }, info.label);
        });
      };
      var onChange = function onChange2(e2) {
        return setValueSrc2(e2.target.value);
      };
      return /* @__PURE__ */ React$4.createElement("select", {
        onChange,
        value: valueSrc || "",
        disabled: readonly
      }, renderOptions(valueSources));
    };
    const VanillaSwitch = function(_ref) {
      var value2 = _ref.value, setValue2 = _ref.setValue, label = _ref.label, id2 = _ref.id;
      _ref.config;
      var type = _ref.type;
      var onChange = function onChange2(e2) {
        return setValue2(e2.target.checked);
      };
      var postfix = type;
      return [/* @__PURE__ */ React$4.createElement("input", {
        key: id2 + postfix,
        type: "checkbox",
        id: id2 + postfix,
        checked: !!value2,
        onChange
      }), /* @__PURE__ */ React$4.createElement("label", {
        key: id2 + postfix + "label",
        htmlFor: id2 + postfix
      }, label)];
    };
    const vanillaConfirm = function(_ref) {
      var onOk = _ref.onOk;
      _ref.okText;
      _ref.cancelText;
      var title = _ref.title;
      if (confirm(title)) {
        onOk();
      }
    };
    var VanillaProvider = function VanillaProvider2(_ref) {
      _ref.config;
      var children = _ref.children;
      return children;
    };
    const Widgets = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      FuncWidget,
      ValueFieldWidget: ValueField,
      VanillaBooleanWidget: VanillaBoolean,
      VanillaButton,
      VanillaButtonGroup,
      VanillaConjs,
      VanillaDateTimeWidget: VanillaDateTime,
      VanillaDateWidget: VanillaDate,
      VanillaFieldSelect,
      VanillaIcon,
      VanillaMultiSelectWidget: VanillaMultiSelect,
      VanillaNumberWidget: VanillaNumber,
      VanillaProvider,
      VanillaSelectWidget: VanillaSelect,
      VanillaSliderWidget: VanillaSlider,
      VanillaSwitch,
      VanillaTextAreaWidget: VanillaTextArea,
      VanillaTextWidget: VanillaText,
      VanillaTimeWidget: VanillaTime,
      VanillaValueSources,
      vanillaConfirm
    }, Symbol.toStringTag, { value: "Module" }));
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var Proximity = /* @__PURE__ */ function(_PureComponent) {
      _inherits(Proximity2, _PureComponent);
      var _super = _createSuper(Proximity2);
      function Proximity2() {
        var _this;
        _classCallCheck(this, Proximity2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _this.handleChange = function(value2) {
          _this.props.setOption("proximity", parseInt(value2));
        };
        return _this;
      }
      _createClass(Proximity2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, defaults2 = _this$props.defaults, options = _this$props.options, config2 = _this$props.config, optionLabel = _this$props.optionLabel, optionPlaceholder = _this$props.optionPlaceholder, customProps = _this$props.customProps, minProximity = _this$props.minProximity, maxProximity = _this$props.maxProximity, optionTextBefore = _this$props.optionTextBefore, readonly = _this$props.readonly;
          var settings2 = config2.settings, widgets2 = config2.widgets, ctx2 = config2.ctx;
          var defaultProximity = defaults2 ? defaults2.proximity : void 0;
          var showLabels = settings2.showLabels;
          var selectedProximity = options.get("proximity", defaultProximity);
          var proxValues = range$1(minProximity, maxProximity + 1).map(function(item) {
            return {
              title: item,
              value: item
            };
          });
          var factory = widgets2.select.factory;
          var Select2 = function Select3(props) {
            return factory(props, ctx2);
          };
          return /* @__PURE__ */ React$4.createElement("div", {
            className: "operator--PROXIMITY"
          }, /* @__PURE__ */ React$4.createElement("div", {
            className: "operator--options"
          }, showLabels && /* @__PURE__ */ React$4.createElement("label", {
            className: "rule--label"
          }, optionLabel), !showLabels && optionTextBefore && /* @__PURE__ */ React$4.createElement("div", {
            className: "operator--options--sep"
          }, /* @__PURE__ */ React$4.createElement("span", null, optionTextBefore)), /* @__PURE__ */ React$4.createElement(Select2, _extends$1({
            config: config2,
            value: selectedProximity,
            listValues: proxValues,
            setValue: this.handleChange,
            readonly,
            placeholder: optionPlaceholder
          }, customProps))), /* @__PURE__ */ React$4.createElement("div", {
            className: "operator--widgets"
          }, this.props.children));
        }
      }]);
      return Proximity2;
    }(reactExports.PureComponent);
    Proximity.propTypes = {
      config: PropTypes.object.isRequired,
      setOption: PropTypes.func.isRequired,
      options: PropTypes.any.isRequired,
      //instanceOf(Immutable.Map)
      minProximity: PropTypes.number,
      maxProximity: PropTypes.number,
      optionPlaceholder: PropTypes.string,
      optionTextBefore: PropTypes.string,
      optionLabel: PropTypes.string,
      customProps: PropTypes.object,
      readonly: PropTypes.bool
      //children
    };
    Proximity.defaultProps = {
      customProps: {},
      minProximity: 2,
      maxProximity: 10,
      optionPlaceholder: "Select words between",
      optionLabel: "Words between",
      optionTextBefore: null
    };
    const CustomOperators = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      ProximityOperator: Proximity
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$5(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$5(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$5(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var conjunctions = _objectSpread$5({}, CoreConfig.conjunctions);
    var operators = _objectSpread$5(_objectSpread$5({}, CoreConfig.operators), {}, {
      proximity: _objectSpread$5(_objectSpread$5({}, CoreConfig.operators.proximity), {}, {
        options: _objectSpread$5(_objectSpread$5({}, CoreConfig.operators.proximity.options), {}, {
          factory: function factory(props, _ref) {
            var RCE = _ref.RCE, ProximityOperator = _ref.O.ProximityOperator;
            return RCE(ProximityOperator, props);
          }
        })
      })
    });
    var widgets$1 = {
      text: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.text), {}, {
        factory: function factory(props, _ref2) {
          var RCE = _ref2.RCE, VanillaTextWidget = _ref2.W.VanillaTextWidget;
          return RCE(VanillaTextWidget, props);
        }
      }),
      textarea: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.textarea), {}, {
        factory: function factory(props, _ref3) {
          var RCE = _ref3.RCE, VanillaTextAreaWidget = _ref3.W.VanillaTextAreaWidget;
          return RCE(VanillaTextAreaWidget, props);
        }
      }),
      number: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.number), {}, {
        factory: function factory(props, _ref4) {
          var RCE = _ref4.RCE, VanillaNumberWidget = _ref4.W.VanillaNumberWidget;
          return RCE(VanillaNumberWidget, props);
        }
      }),
      slider: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.slider), {}, {
        factory: function factory(props, _ref5) {
          var RCE = _ref5.RCE, VanillaSliderWidget = _ref5.W.VanillaSliderWidget;
          return RCE(VanillaSliderWidget, props);
        }
      }),
      select: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.select), {}, {
        factory: function factory(props, _ref6) {
          var RCE = _ref6.RCE, VanillaSelectWidget = _ref6.W.VanillaSelectWidget;
          return RCE(VanillaSelectWidget, props);
        }
      }),
      multiselect: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.multiselect), {}, {
        factory: function factory(props, _ref7) {
          var RCE = _ref7.RCE, VanillaMultiSelectWidget = _ref7.W.VanillaMultiSelectWidget;
          return RCE(VanillaMultiSelectWidget, props);
        }
      }),
      date: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.date), {}, {
        factory: function factory(props, _ref8) {
          var RCE = _ref8.RCE, VanillaDateWidget = _ref8.W.VanillaDateWidget;
          return RCE(VanillaDateWidget, props);
        }
      }),
      time: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.time), {}, {
        factory: function factory(props, _ref9) {
          var RCE = _ref9.RCE, VanillaTimeWidget = _ref9.W.VanillaTimeWidget;
          return RCE(VanillaTimeWidget, props);
        }
      }),
      datetime: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.datetime), {}, {
        factory: function factory(props, _ref10) {
          var RCE = _ref10.RCE, VanillaDateTimeWidget = _ref10.W.VanillaDateTimeWidget;
          return RCE(VanillaDateTimeWidget, props);
        }
      }),
      "boolean": _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets["boolean"]), {}, {
        factory: function factory(props, _ref11) {
          var RCE = _ref11.RCE, VanillaBooleanWidget = _ref11.W.VanillaBooleanWidget;
          return RCE(VanillaBooleanWidget, props);
        }
      }),
      field: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.field), {}, {
        factory: function factory(props, _ref12) {
          var RCE = _ref12.RCE, ValueFieldWidget = _ref12.W.ValueFieldWidget;
          return RCE(ValueFieldWidget, props);
        },
        customProps: {
          showSearch: true
        }
      }),
      func: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.func), {}, {
        factory: function factory(props, _ref13) {
          var RCE = _ref13.RCE, FuncWidget2 = _ref13.W.FuncWidget;
          return RCE(FuncWidget2, props);
        },
        customProps: {
          //showSearch: true
        }
      }),
      case_value: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.case_value), {}, {
        // simple text value
        factory: function factory(props, _ref14) {
          var RCE = _ref14.RCE, VanillaTextWidget = _ref14.W.VanillaTextWidget;
          return RCE(VanillaTextWidget, props);
        }
      })
    };
    var types$1 = _objectSpread$5(_objectSpread$5({}, CoreConfig.types), {}, {
      select: _objectSpread$5(_objectSpread$5({}, CoreConfig.types.select), {}, {
        widgets: _objectSpread$5(_objectSpread$5({}, CoreConfig.types.select.widgets), {}, {
          select: _objectSpread$5(_objectSpread$5({}, CoreConfig.types.select.widgets.select), {}, {
            widgetProps: {
              customProps: {
                showSearch: true
              }
            }
          })
        })
      })
    });
    var settings$1 = _objectSpread$5(_objectSpread$5({}, CoreConfig.settings), {}, {
      renderField: function renderField(props, _ref15) {
        var RCE = _ref15.RCE, VanillaFieldSelect2 = _ref15.W.VanillaFieldSelect;
        return RCE(VanillaFieldSelect2, props);
      },
      renderOperator: function renderOperator(props, _ref16) {
        var RCE = _ref16.RCE, VanillaFieldSelect2 = _ref16.W.VanillaFieldSelect;
        return RCE(VanillaFieldSelect2, props);
      },
      renderFunc: function renderFunc(props, _ref17) {
        var RCE = _ref17.RCE, VanillaFieldSelect2 = _ref17.W.VanillaFieldSelect;
        return RCE(VanillaFieldSelect2, props);
      },
      renderConjs: function renderConjs(props, _ref18) {
        var RCE = _ref18.RCE, VanillaConjs2 = _ref18.W.VanillaConjs;
        return RCE(VanillaConjs2, props);
      },
      renderSwitch: function renderSwitch(props, _ref19) {
        var RCE = _ref19.RCE, VanillaSwitch2 = _ref19.W.VanillaSwitch;
        return RCE(VanillaSwitch2, props);
      },
      renderButton: function renderButton(props, _ref20) {
        var RCE = _ref20.RCE, VanillaButton2 = _ref20.W.VanillaButton;
        return RCE(VanillaButton2, props);
      },
      renderIcon: function renderIcon(props, _ref21) {
        var RCE = _ref21.RCE, VanillaIcon2 = _ref21.W.VanillaIcon;
        return RCE(VanillaIcon2, props);
      },
      renderButtonGroup: function renderButtonGroup(props, _ref22) {
        var RCE = _ref22.RCE, VanillaButtonGroup2 = _ref22.W.VanillaButtonGroup;
        return RCE(VanillaButtonGroup2, props);
      },
      renderProvider: function renderProvider(props, _ref23) {
        var RCE = _ref23.RCE, VanillaProvider2 = _ref23.W.VanillaProvider;
        return RCE(VanillaProvider2, props);
      },
      renderValueSources: function renderValueSources(props, _ref24) {
        var RCE = _ref24.RCE, VanillaValueSources2 = _ref24.W.VanillaValueSources;
        return RCE(VanillaValueSources2, props);
      },
      renderFieldSources: function renderFieldSources(props, _ref25) {
        var RCE = _ref25.RCE, VanillaValueSources2 = _ref25.W.VanillaValueSources;
        return RCE(VanillaValueSources2, props);
      },
      renderConfirm: function renderConfirm(props, _ref26) {
        var vanillaConfirm2 = _ref26.W.vanillaConfirm;
        return vanillaConfirm2(props);
      },
      renderSwitchPrefix: "Conditions",
      customFieldSelectProps: {
        showSearch: true
      },
      defaultSliderWidth: "200px",
      defaultSelectWidth: "200px",
      defaultSearchWidth: "100px",
      defaultMaxRows: 5,
      renderSize: "small",
      maxLabelsLength: 100,
      showLock: false,
      showNot: true,
      forceShowConj: false,
      groupActionsPosition: "topRight"
      // oneOf [topLeft, topCenter, topRight, bottomLeft, bottomCenter, bottomRight]
    });
    var ctx$1 = _objectSpread$5(_objectSpread$5({}, CoreConfig.ctx), {}, {
      W: _objectSpread$5({}, Widgets),
      O: _objectSpread$5({}, CustomOperators),
      RCE: function RCE(C2, P2) {
        return /* @__PURE__ */ React$4.createElement(C2, P2);
      }
    });
    var config$2 = {
      conjunctions,
      operators,
      widgets: widgets$1,
      types: types$1,
      settings: settings$1,
      ctx: ctx$1
    };
    config$2 = Utils$1.ConfigMixins.removeMixins(config$2, ["rangeslider", "treeselect", "treemultiselect"]);
    const BasicConfig = config$2;
    var root = _root;
    var now$1 = function() {
      return root.Date.now();
    };
    var now_1 = now$1;
    var isObject$1 = isObject_1, now = now_1, toNumber = toNumber_1;
    var FUNC_ERROR_TEXT$1 = "Expected a function";
    var nativeMax = Math.max, nativeMin = Math.min;
    function debounce$1(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT$1);
      }
      wait = toNumber(wait) || 0;
      if (isObject$1(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    var debounce_1 = debounce$1;
    const debounce$2 = /* @__PURE__ */ getDefaultExportFromCjs(debounce_1);
    function ownKeys$4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$4(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var _Utils$Autocomplete = Utils$1.Autocomplete, mergeListValues = _Utils$Autocomplete.mergeListValues, listValueToOption = _Utils$Autocomplete.listValueToOption, optionToListValue = _Utils$Autocomplete.optionToListValue, optionsToListValues = _Utils$Autocomplete.optionsToListValues, fixListValuesGroupOrder = _Utils$Autocomplete.fixListValuesGroupOrder;
    var _Utils$ListUtils = Utils$1.ListUtils, mapListValues$2 = _Utils$ListUtils.mapListValues, listValuesToArray = _Utils$ListUtils.listValuesToArray, getListValue = _Utils$ListUtils.getListValue, makeCustomListValue = _Utils$ListUtils.makeCustomListValue, searchListValue = _Utils$ListUtils.searchListValue;
    _Utils$ListUtils.getItemInListValues;
    function sleep(delay) {
      return new Promise(function(resolve) {
        setTimeout(resolve, delay);
      });
    }
    var useListValuesAutocomplete$1 = function useListValuesAutocomplete2(_ref, _ref2) {
      var asyncFetch = _ref.asyncFetch, useLoadMore = _ref.useLoadMore, useAsyncSearch = _ref.useAsyncSearch, forceAsyncSearch = _ref.forceAsyncSearch, selectedAsyncListValues = _ref.asyncListValues, staticListValues = _ref.listValues, allowCustomValues = _ref.allowCustomValues, selectedValue = _ref.value, setValue2 = _ref.setValue, placeholder = _ref.placeholder, config2 = _ref.config;
      var debounceTimeout = _ref2.debounceTimeout, multiple = _ref2.multiple, uif = _ref2.uif;
      var knownSpecialValues = ["LOAD_MORE", "LOADING_MORE"];
      var loadMoreTitle = "Load more...";
      var loadingMoreTitle = "Loading more...";
      var aPlaceholder = forceAsyncSearch ? "Type to search" : placeholder;
      var _React$useState = React$4.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), open = _React$useState2[0], setOpen = _React$useState2[1];
      var _React$useState3 = React$4.useState(void 0), _React$useState4 = _slicedToArray(_React$useState3, 2), asyncFetchMeta = _React$useState4[0], setAsyncFetchMeta = _React$useState4[1];
      var _React$useState5 = React$4.useState(0), _React$useState6 = _slicedToArray(_React$useState5, 2), loadingCnt = _React$useState6[0], setLoadingCnt = _React$useState6[1];
      var _React$useState7 = React$4.useState(false), _React$useState8 = _slicedToArray(_React$useState7, 2), isLoadingMore = _React$useState8[0], setIsLoadingMore = _React$useState8[1];
      var _React$useState9 = React$4.useState(""), _React$useState10 = _slicedToArray(_React$useState9, 2), inputValue = _React$useState10[0], setInputValue = _React$useState10[1];
      var _React$useState11 = React$4.useState(void 0), _React$useState12 = _slicedToArray(_React$useState11, 2), asyncListValues = _React$useState12[0], setAsyncListValues = _React$useState12[1];
      var asyncFectchCnt = React$4.useRef(0);
      var componentIsMounted = React$4.useRef(0);
      var isSelectedLoadMore = React$4.useRef(false);
      var nSelectedAsyncListValues = listValuesToArray(selectedAsyncListValues);
      var listValues2 = asyncFetch ? selectedAsyncListValues ? mergeListValues(asyncListValues, nSelectedAsyncListValues, true) : asyncListValues : staticListValues;
      var listValuesToDisplay = asyncFetch ? asyncListValues : staticListValues;
      if (allowCustomValues && inputValue && !searchListValue(inputValue, asyncListValues)) {
        listValuesToDisplay = mergeListValues(listValuesToDisplay, [makeCustomListValue(inputValue)], true);
      }
      if (asyncFetch && !asyncListValues && selectedAsyncListValues && !inputValue && !open && uif === "antd") {
        listValuesToDisplay = listValues2;
      }
      if (asyncFetch && !allowCustomValues && selectedAsyncListValues && uif === "mui") {
        listValuesToDisplay = mergeListValues(listValuesToDisplay, nSelectedAsyncListValues, true, true);
      }
      var isLoading = loadingCnt > 0;
      var canInitialLoad = open && asyncFetch && asyncListValues === void 0 && (forceAsyncSearch ? inputValue : true);
      var isInitialLoading = canInitialLoad && isLoading;
      var canLoadMore = !isInitialLoading && listValues2 && listValues2.length > 0 && asyncFetchMeta && asyncFetchMeta.hasMore && (asyncFetchMeta.filter || "") === inputValue;
      var canShowLoadMore = !isLoading && canLoadMore;
      var options = mapListValues$2(listValuesToDisplay, listValueToOption);
      var hasValue2 = selectedValue != null;
      var selectedListValue = !multiple && hasValue2 ? getListValue(selectedValue, listValues2) : null;
      var fetchListValues = /* @__PURE__ */ function() {
        var _ref3 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime.mark(function _callee() {
          var filter, isLoadMore, offset2, meta, newAsyncFetchCnt, res, isFetchCancelled, _ref4, values2, hasMore, newMeta, nValues, assumeHasMore, newValues, realNewMeta, _args = arguments;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1)
              switch (_context.prev = _context.next) {
                case 0:
                  filter = _args.length > 0 && _args[0] !== void 0 ? _args[0] : null;
                  isLoadMore = _args.length > 1 && _args[1] !== void 0 ? _args[1] : false;
                  if (!isLoadMore && asyncFetchMeta) {
                    setAsyncFetchMeta(void 0);
                  }
                  offset2 = isLoadMore && asyncListValues ? asyncListValues.length : 0;
                  meta = isLoadMore && asyncFetchMeta || !useLoadMore && {
                    pageSize: 0
                  };
                  newAsyncFetchCnt = ++asyncFectchCnt.current;
                  _context.next = 8;
                  return asyncFetch.call(config2 === null || config2 === void 0 ? void 0 : config2.ctx, filter, offset2, meta);
                case 8:
                  res = _context.sent;
                  isFetchCancelled = asyncFectchCnt.current != newAsyncFetchCnt;
                  if (!(isFetchCancelled || !componentIsMounted.current)) {
                    _context.next = 12;
                    break;
                  }
                  return _context.abrupt("return", null);
                case 12:
                  _ref4 = res !== null && res !== void 0 && res.values ? res : {
                    values: res
                  }, values2 = _ref4.values, hasMore = _ref4.hasMore, newMeta = _ref4.meta;
                  nValues = listValuesToArray(values2);
                  if (isLoadMore) {
                    newValues = mergeListValues(asyncListValues, nValues, false);
                    assumeHasMore = newValues.length > asyncListValues.length;
                  } else {
                    newValues = nValues;
                    if (useLoadMore) {
                      assumeHasMore = newValues.length > 0;
                    }
                  }
                  realNewMeta = hasMore != null || newMeta != null || assumeHasMore != null ? _objectSpread$4(_objectSpread$4(_objectSpread$4(_objectSpread$4({}, assumeHasMore != null ? {
                    hasMore: assumeHasMore
                  } : {}), hasMore != null ? {
                    hasMore
                  } : {}), newMeta != null ? newMeta : {}), {}, {
                    filter
                  }) : void 0;
                  if (realNewMeta) {
                    setAsyncFetchMeta(realNewMeta);
                  }
                  return _context.abrupt("return", newValues);
                case 18:
                case "end":
                  return _context.stop();
              }
          }, _callee);
        }));
        return function fetchListValues2() {
          return _ref3.apply(this, arguments);
        };
      }();
      var loadListValues = /* @__PURE__ */ function() {
        var _ref5 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime.mark(function _callee2() {
          var filter, isLoadMore, list, _args2 = arguments;
          return _regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1)
              switch (_context2.prev = _context2.next) {
                case 0:
                  filter = _args2.length > 0 && _args2[0] !== void 0 ? _args2[0] : null;
                  isLoadMore = _args2.length > 1 && _args2[1] !== void 0 ? _args2[1] : false;
                  setLoadingCnt(function(x2) {
                    return x2 + 1;
                  });
                  setIsLoadingMore(isLoadMore);
                  _context2.next = 6;
                  return fetchListValues(filter, isLoadMore);
                case 6:
                  list = _context2.sent;
                  if (componentIsMounted.current) {
                    _context2.next = 9;
                    break;
                  }
                  return _context2.abrupt("return");
                case 9:
                  if (list != null) {
                    setAsyncListValues(list);
                  }
                  setLoadingCnt(function(x2) {
                    return x2 - 1;
                  });
                  setIsLoadingMore(false);
                case 12:
                case "end":
                  return _context2.stop();
              }
          }, _callee2);
        }));
        return function loadListValues2() {
          return _ref5.apply(this, arguments);
        };
      }();
      var loadListValuesDebounced = React$4.useCallback(debounce$2(loadListValues, debounceTimeout), []);
      React$4.useEffect(function() {
        componentIsMounted.current++;
        if (canInitialLoad && loadingCnt == 0 && asyncFectchCnt.current == 0) {
          _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime.mark(function _callee3() {
            return _regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1)
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.next = 2;
                    return loadListValues();
                  case 2:
                  case "end":
                    return _context3.stop();
                }
            }, _callee3);
          }))();
        }
        return function() {
          componentIsMounted.current--;
        };
      }, [canInitialLoad]);
      var onOpen = function onOpen2() {
        setOpen(true);
      };
      var onClose = /* @__PURE__ */ function() {
        var _ref7 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime.mark(function _callee4(_e) {
          var isLoadMoreClick, resetValue;
          return _regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1)
              switch (_context4.prev = _context4.next) {
                case 0:
                  isLoadMoreClick = isSelectedLoadMore.current;
                  if (isLoadMoreClick) {
                    isSelectedLoadMore.current = false;
                    if (multiple) {
                      setOpen(false);
                    }
                  } else {
                    setOpen(false);
                  }
                  if (!(uif === "mui" && !isLoadMoreClick)) {
                    _context4.next = 6;
                    break;
                  }
                  resetValue = "";
                  _context4.next = 6;
                  return onInputChange(null, resetValue, "my-reset");
                case 6:
                case "end":
                  return _context4.stop();
              }
          }, _callee4);
        }));
        return function onClose2(_x) {
          return _ref7.apply(this, arguments);
        };
      }();
      var onDropdownVisibleChange = function onDropdownVisibleChange2(open2) {
        if (open2) {
          onOpen();
        } else {
          onClose();
        }
      };
      var isSpecialValue = function isSpecialValue2(option) {
        var specialValue = (option === null || option === void 0 ? void 0 : option.specialValue) || (option === null || option === void 0 ? void 0 : option.value);
        return knownSpecialValues.includes(specialValue);
      };
      var onChange = /* @__PURE__ */ function() {
        var _ref8 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime.mark(function _callee5(e2, val, option) {
          var _option2;
          var isClearingAll, isClearingInput, _option$value, _option, specialValue, shouldIgnore, isAddingCustomOptionFromSearch, _optionsToListValues, _optionsToListValues2, newSelectedValues, newSelectedListValues, _optionToListValue, _optionToListValue2, v2, lvs;
          return _regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1)
              switch (_context5.prev = _context5.next) {
                case 0:
                  isClearingAll = multiple && uif === "mui" && option === "clear";
                  isClearingInput = !multiple && uif === "mui" && option === "clear" && (e2 === null || e2 === void 0 ? void 0 : e2.type) === "change";
                  if (uif === "mui") {
                    option = val;
                    if (multiple) {
                      val = option.map(function(o) {
                        var _o$value;
                        return (_o$value = o === null || o === void 0 ? void 0 : o.value) !== null && _o$value !== void 0 ? _o$value : o;
                      });
                    } else {
                      val = (_option$value = (_option = option) === null || _option === void 0 ? void 0 : _option.value) !== null && _option$value !== void 0 ? _option$value : option;
                    }
                  }
                  specialValue = multiple && Array.isArray(option) && option.map(function(opt) {
                    return opt === null || opt === void 0 ? void 0 : opt.specialValue;
                  }).find(function(v3) {
                    return !!v3;
                  }) || ((_option2 = option) === null || _option2 === void 0 ? void 0 : _option2.specialValue);
                  if (multiple && val && !Array.isArray(val)) {
                    val = [].concat(_toConsumableArray(selectedValue || []), [val]);
                    option = null;
                  }
                  shouldIgnore = isClearingAll && val.length === 0 && inputValue && open || isClearingInput;
                  if (!shouldIgnore) {
                    _context5.next = 8;
                    break;
                  }
                  return _context5.abrupt("return");
                case 8:
                  isAddingCustomOptionFromSearch = multiple && val.length && val.length > (selectedValue || []).length && val[val.length - 1] == inputValue && !getListValue(inputValue, asyncListValues);
                  if (!(specialValue == "LOAD_MORE")) {
                    _context5.next = 16;
                    break;
                  }
                  setInputValue(inputValue);
                  isSelectedLoadMore.current = true;
                  _context5.next = 14;
                  return loadListValues(inputValue, true);
                case 14:
                  _context5.next = 32;
                  break;
                case 16:
                  if (!(specialValue == "LOADING_MORE")) {
                    _context5.next = 20;
                    break;
                  }
                  isSelectedLoadMore.current = true;
                  _context5.next = 32;
                  break;
                case 20:
                  if (!multiple) {
                    _context5.next = 30;
                    break;
                  }
                  _optionsToListValues = optionsToListValues(val, listValues2, allowCustomValues), _optionsToListValues2 = _slicedToArray(_optionsToListValues, 2), newSelectedValues = _optionsToListValues2[0], newSelectedListValues = _optionsToListValues2[1];
                  setValue2(newSelectedValues, asyncFetch ? newSelectedListValues : void 0);
                  if (!isAddingCustomOptionFromSearch) {
                    _context5.next = 28;
                    break;
                  }
                  _context5.next = 26;
                  return sleep(0);
                case 26:
                  _context5.next = 28;
                  return onInputChange(null, "", "my-reset");
                case 28:
                  _context5.next = 32;
                  break;
                case 30:
                  _optionToListValue = optionToListValue(val, listValues2, allowCustomValues), _optionToListValue2 = _slicedToArray(_optionToListValue, 2), v2 = _optionToListValue2[0], lvs = _optionToListValue2[1];
                  setValue2(v2, asyncFetch ? lvs : void 0);
                case 32:
                case "end":
                  return _context5.stop();
              }
          }, _callee5);
        }));
        return function onChange2(_x2, _x3, _x4) {
          return _ref8.apply(this, arguments);
        };
      }();
      var onInputChange = /* @__PURE__ */ function() {
        var _ref9 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime.mark(function _callee6(e2, newInputValue, eventType) {
          var shouldIgnore, val, canSearchAsync;
          return _regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1)
              switch (_context6.prev = _context6.next) {
                case 0:
                  shouldIgnore = uif === "mui" && eventType === "reset";
                  val = newInputValue;
                  if (!(val === loadMoreTitle || val === loadingMoreTitle || shouldIgnore)) {
                    _context6.next = 4;
                    break;
                  }
                  return _context6.abrupt("return");
                case 4:
                  if (!(newInputValue != inputValue)) {
                    _context6.next = 13;
                    break;
                  }
                  setInputValue(val);
                  canSearchAsync = useAsyncSearch && (forceAsyncSearch ? !!val : true);
                  if (!canSearchAsync) {
                    _context6.next = 12;
                    break;
                  }
                  _context6.next = 10;
                  return loadListValuesDebounced(val);
                case 10:
                  _context6.next = 13;
                  break;
                case 12:
                  if (useAsyncSearch && forceAsyncSearch) {
                    setAsyncListValues([]);
                  }
                case 13:
                case "end":
                  return _context6.stop();
              }
          }, _callee6);
        }));
        return function onInputChange2(_x5, _x6, _x7) {
          return _ref9.apply(this, arguments);
        };
      }();
      var extendOptions = function extendOptions2(options2) {
        var filtered = _toConsumableArray(options2);
        if (useLoadMore) {
          if (canShowLoadMore) {
            filtered.push({
              specialValue: "LOAD_MORE",
              title: loadMoreTitle
            });
          } else if (isLoadingMore) {
            filtered.push({
              specialValue: "LOADING_MORE",
              title: loadingMoreTitle,
              disabled: true
            });
          }
        }
        return filtered;
      };
      var getOptionSelected = function getOptionSelected2(option, valueOrOption) {
        if (valueOrOption == null)
          return null;
        var selectedValue2 = valueOrOption.value != void 0 ? valueOrOption.value : valueOrOption;
        return option.value === selectedValue2;
      };
      var getOptionDisabled = function getOptionDisabled2(valueOrOption) {
        return valueOrOption && valueOrOption.disabled;
      };
      var getOptionIsCustom = function getOptionIsCustom2(valueOrOption) {
        var _valueOrOption$value;
        if (valueOrOption !== null && valueOrOption !== void 0 && valueOrOption.isCustom)
          return true;
        var val = (_valueOrOption$value = valueOrOption === null || valueOrOption === void 0 ? void 0 : valueOrOption.value) !== null && _valueOrOption$value !== void 0 ? _valueOrOption$value : valueOrOption;
        var lv = getListValue(val, listValues2);
        return (lv === null || lv === void 0 ? void 0 : lv.isCustom) || false;
      };
      var getOptionLabel = function getOptionLabel2(valueOrOption) {
        if (valueOrOption == null)
          return null;
        var option = valueOrOption.value != void 0 ? valueOrOption : listValueToOption(getListValue(valueOrOption, listValues2));
        if (!option && valueOrOption.specialValue) {
          return valueOrOption.title;
        }
        if (!option && allowCustomValues) {
          return valueOrOption;
        }
        if (!option) {
          return valueOrOption;
        }
        return option.title || option.label;
      };
      var fixedOptions = uif === "mui" ? fixListValuesGroupOrder(options) : options;
      return {
        options: fixedOptions,
        listValues: listValues2,
        hasValue: hasValue2,
        selectedListValue,
        open,
        onOpen,
        onClose,
        onDropdownVisibleChange,
        onChange,
        inputValue,
        onInputChange,
        canShowLoadMore,
        isInitialLoading,
        isLoading,
        isLoadingMore,
        isSpecialValue,
        extendOptions,
        getOptionSelected,
        getOptionDisabled,
        getOptionIsCustom,
        getOptionLabel,
        aPlaceholder
      };
    };
    function ownKeys$3(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$3(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$3(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    const Utils = _objectSpread$3(_objectSpread$3({}, Utils$1), {}, {
      ReactUtils,
      DragIcon: DragIcon$1
    });
    var moment$2 = Utils.moment;
    const MuiDateWidget = function(props) {
      var _DatePicker$propTypes2;
      var value2 = props.value, setValue2 = props.setValue, readonly = props.readonly, customProps = props.customProps, dateFormat = props.dateFormat, valueFormat = props.valueFormat, placeholder = props.placeholder;
      var isV62 = !!(DatePicker !== null && DatePicker !== void 0 && (_DatePicker$propTypes2 = DatePicker.propTypes) !== null && _DatePicker$propTypes2 !== void 0 && _DatePicker$propTypes2.format);
      var formatSingleValue = function formatSingleValue2(value3) {
        return value3 && value3.isValid() ? value3.format(valueFormat) : void 0;
      };
      var handleChange = function handleChange2(value3) {
        setValue2(formatSingleValue(value3));
      };
      var renderInput = function renderInput2(params) {
        return /* @__PURE__ */ React$4.createElement(TextField$1, _extends$1({
          size: "small",
          variant: "standard"
        }, params));
      };
      var desktopModeMediaQuery = "@media (pointer: fine), (pointer: none)";
      var pickerProps = isV62 ? {
        format: dateFormat,
        slotProps: {
          textField: {
            size: "small",
            variant: "standard"
          },
          toolbar: {
            toolbarPlaceholder: !readonly ? placeholder : ""
          }
        }
      } : {
        inputFormat: dateFormat,
        renderInput,
        toolbarPlaceholder: !readonly ? placeholder : ""
      };
      var aValue = value2 ? isV62 && typeof value2 === "string" ? moment$2(value2, valueFormat) : value2 : null;
      return /* @__PURE__ */ React$4.createElement(FormControl$1, null, /* @__PURE__ */ React$4.createElement(DatePicker, _extends$1({
        desktopModeMediaQuery,
        readOnly: readonly,
        disabled: readonly,
        value: aValue,
        onChange: handleChange
      }, pickerProps, customProps)));
    };
    const _excluded$y = ["value", "defaultValue", "format", "formatDensity", "shouldRespectLeadingZeros", "onChange", "readOnly", "onError", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear", "minDate", "maxDate", "disableFuture", "disablePast", "minTime", "maxTime", "minDateTime", "maxDateTime", "minutesStep", "disableIgnoringDatePartForTimeValidation", "shouldDisableClock", "shouldDisableTime", "selectedSections", "onSelectedSectionsChange", "ampm", "unstableFieldRef"];
    const useDefaultizedDateTimeField = (props) => {
      var _props$ampm, _props$disablePast, _props$disableFuture, _props$format, _props$minDateTime, _props$maxDateTime, _props$minDateTime2, _props$maxDateTime2;
      const utils2 = useUtils();
      const defaultDates = useDefaultDates();
      const ampm = (_props$ampm = props.ampm) != null ? _props$ampm : utils2.is12HourCycleInCurrentLocale();
      const defaultFormat = ampm ? utils2.formats.keyboardDateTime12h : utils2.formats.keyboardDateTime24h;
      return _extends$1({}, props, {
        disablePast: (_props$disablePast = props.disablePast) != null ? _props$disablePast : false,
        disableFuture: (_props$disableFuture = props.disableFuture) != null ? _props$disableFuture : false,
        format: (_props$format = props.format) != null ? _props$format : defaultFormat,
        disableIgnoringDatePartForTimeValidation: Boolean(props.minDateTime || props.maxDateTime),
        minDate: applyDefaultDate(utils2, (_props$minDateTime = props.minDateTime) != null ? _props$minDateTime : props.minDate, defaultDates.minDate),
        maxDate: applyDefaultDate(utils2, (_props$maxDateTime = props.maxDateTime) != null ? _props$maxDateTime : props.maxDate, defaultDates.maxDate),
        minTime: (_props$minDateTime2 = props.minDateTime) != null ? _props$minDateTime2 : props.minTime,
        maxTime: (_props$maxDateTime2 = props.maxDateTime) != null ? _props$maxDateTime2 : props.maxTime
      });
    };
    const useDateTimeField = ({
      props,
      inputRef
    }) => {
      const _useDefaultizedDateTi = useDefaultizedDateTimeField(props), {
        value: value2,
        defaultValue: defaultValue2,
        format: format2,
        formatDensity,
        shouldRespectLeadingZeros,
        onChange,
        readOnly,
        onError,
        shouldDisableDate,
        shouldDisableMonth,
        shouldDisableYear,
        minDate,
        maxDate,
        disableFuture,
        disablePast,
        minTime,
        maxTime,
        minutesStep,
        disableIgnoringDatePartForTimeValidation,
        shouldDisableClock,
        shouldDisableTime,
        selectedSections,
        onSelectedSectionsChange,
        ampm,
        unstableFieldRef
      } = _useDefaultizedDateTi, other = _objectWithoutPropertiesLoose(_useDefaultizedDateTi, _excluded$y);
      return useField({
        inputRef,
        forwardedProps: other,
        internalProps: {
          value: value2,
          defaultValue: defaultValue2,
          format: format2,
          formatDensity,
          shouldRespectLeadingZeros,
          onChange,
          readOnly,
          onError,
          shouldDisableDate,
          shouldDisableMonth,
          shouldDisableYear,
          minDate,
          maxDate,
          disableFuture,
          disablePast,
          minTime,
          maxTime,
          minutesStep,
          shouldDisableClock,
          shouldDisableTime,
          disableIgnoringDatePartForTimeValidation,
          selectedSections,
          onSelectedSectionsChange,
          ampm,
          unstableFieldRef
        },
        valueManager: singleItemValueManager,
        fieldValueManager: singleItemFieldValueManager,
        validator: validateDateTime,
        valueType: "date-time"
      });
    };
    const _excluded$x = ["components", "componentsProps", "slots", "slotProps", "InputProps", "inputProps"], _excluded2$1 = ["inputRef"], _excluded3$1 = ["ref", "onPaste", "inputMode", "readOnly"];
    const DateTimeField = /* @__PURE__ */ reactExports.forwardRef(function DateTimeField2(inProps, ref) {
      var _ref, _slots$textField, _slotProps$textField;
      const themeProps = useThemeProps({
        props: inProps,
        name: "MuiDateTimeField"
      });
      const {
        components,
        componentsProps,
        slots,
        slotProps,
        InputProps,
        inputProps
      } = themeProps, other = _objectWithoutPropertiesLoose(themeProps, _excluded$x);
      const ownerState = themeProps;
      const TextField2 = (_ref = (_slots$textField = slots == null ? void 0 : slots.textField) != null ? _slots$textField : components == null ? void 0 : components.TextField) != null ? _ref : TextField$1;
      const _useSlotProps = useSlotProps({
        elementType: TextField2,
        externalSlotProps: (_slotProps$textField = slotProps == null ? void 0 : slotProps.textField) != null ? _slotProps$textField : componentsProps == null ? void 0 : componentsProps.textField,
        externalForwardedProps: other,
        ownerState
      }), {
        inputRef: externalInputRef
      } = _useSlotProps, textFieldProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2$1);
      textFieldProps.inputProps = _extends$1({}, textFieldProps.inputProps, inputProps);
      textFieldProps.InputProps = _extends$1({}, textFieldProps.InputProps, InputProps);
      const _useDateTimeField = useDateTimeField({
        props: textFieldProps,
        inputRef: externalInputRef
      }), {
        ref: inputRef,
        onPaste,
        inputMode,
        readOnly
      } = _useDateTimeField, fieldProps = _objectWithoutPropertiesLoose(_useDateTimeField, _excluded3$1);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(TextField2, _extends$1({
        ref
      }, fieldProps, {
        InputProps: _extends$1({}, fieldProps.InputProps, {
          readOnly
        }),
        inputProps: _extends$1({}, fieldProps.inputProps, {
          inputMode,
          onPaste,
          ref: inputRef
        })
      }));
    });
    function getTabUtilityClass(slot) {
      return generateUtilityClass("MuiTab", slot);
    }
    const tabClasses = generateUtilityClasses("MuiTab", ["root", "labelIcon", "textColorInherit", "textColorPrimary", "textColorSecondary", "selected", "disabled", "fullWidth", "wrapped", "iconWrapper"]);
    const tabClasses$1 = tabClasses;
    const _excluded$w = ["className", "disabled", "disableFocusRipple", "fullWidth", "icon", "iconPosition", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"];
    const useUtilityClasses$p = (ownerState) => {
      const {
        classes,
        textColor,
        fullWidth,
        wrapped,
        icon,
        label,
        selected,
        disabled
      } = ownerState;
      const slots = {
        root: ["root", icon && label && "labelIcon", `textColor${capitalize(textColor)}`, fullWidth && "fullWidth", wrapped && "wrapped", selected && "selected", disabled && "disabled"],
        iconWrapper: ["iconWrapper"]
      };
      return composeClasses(slots, getTabUtilityClass, classes);
    };
    const TabRoot = styled$1(ButtonBase$1, {
      name: "MuiTab",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.label && ownerState.icon && styles2.labelIcon, styles2[`textColor${capitalize(ownerState.textColor)}`], ownerState.fullWidth && styles2.fullWidth, ownerState.wrapped && styles2.wrapped];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({}, theme.typography.button, {
      maxWidth: 360,
      minWidth: 90,
      position: "relative",
      minHeight: 48,
      flexShrink: 0,
      padding: "12px 16px",
      overflow: "hidden",
      whiteSpace: "normal",
      textAlign: "center"
    }, ownerState.label && {
      flexDirection: ownerState.iconPosition === "top" || ownerState.iconPosition === "bottom" ? "column" : "row"
    }, {
      lineHeight: 1.25
    }, ownerState.icon && ownerState.label && {
      minHeight: 72,
      paddingTop: 9,
      paddingBottom: 9,
      [`& > .${tabClasses$1.iconWrapper}`]: _extends$1({}, ownerState.iconPosition === "top" && {
        marginBottom: 6
      }, ownerState.iconPosition === "bottom" && {
        marginTop: 6
      }, ownerState.iconPosition === "start" && {
        marginRight: theme.spacing(1)
      }, ownerState.iconPosition === "end" && {
        marginLeft: theme.spacing(1)
      })
    }, ownerState.textColor === "inherit" && {
      color: "inherit",
      opacity: 0.6,
      // same opacity as theme.palette.text.secondary
      [`&.${tabClasses$1.selected}`]: {
        opacity: 1
      },
      [`&.${tabClasses$1.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      }
    }, ownerState.textColor === "primary" && {
      color: (theme.vars || theme).palette.text.secondary,
      [`&.${tabClasses$1.selected}`]: {
        color: (theme.vars || theme).palette.primary.main
      },
      [`&.${tabClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      }
    }, ownerState.textColor === "secondary" && {
      color: (theme.vars || theme).palette.text.secondary,
      [`&.${tabClasses$1.selected}`]: {
        color: (theme.vars || theme).palette.secondary.main
      },
      [`&.${tabClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      }
    }, ownerState.fullWidth && {
      flexShrink: 1,
      flexGrow: 1,
      flexBasis: 0,
      maxWidth: "none"
    }, ownerState.wrapped && {
      fontSize: theme.typography.pxToRem(12)
    }));
    const Tab = /* @__PURE__ */ reactExports.forwardRef(function Tab2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiTab"
      });
      const {
        className,
        disabled = false,
        disableFocusRipple = false,
        // eslint-disable-next-line react/prop-types
        fullWidth,
        icon: iconProp,
        iconPosition = "top",
        // eslint-disable-next-line react/prop-types
        indicator,
        label,
        onChange,
        onClick,
        onFocus,
        // eslint-disable-next-line react/prop-types
        selected,
        // eslint-disable-next-line react/prop-types
        selectionFollowsFocus,
        // eslint-disable-next-line react/prop-types
        textColor = "inherit",
        value: value2,
        wrapped = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$w);
      const ownerState = _extends$1({}, props, {
        disabled,
        disableFocusRipple,
        selected,
        icon: !!iconProp,
        iconPosition,
        label: !!label,
        fullWidth,
        textColor,
        wrapped
      });
      const classes = useUtilityClasses$p(ownerState);
      const icon = iconProp && label && /* @__PURE__ */ reactExports.isValidElement(iconProp) ? /* @__PURE__ */ reactExports.cloneElement(iconProp, {
        className: clsx(classes.iconWrapper, iconProp.props.className)
      }) : iconProp;
      const handleClick = (event) => {
        if (!selected && onChange) {
          onChange(event, value2);
        }
        if (onClick) {
          onClick(event);
        }
      };
      const handleFocus = (event) => {
        if (selectionFollowsFocus && !selected && onChange) {
          onChange(event, value2);
        }
        if (onFocus) {
          onFocus(event);
        }
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(TabRoot, _extends$1({
        focusRipple: !disableFocusRipple,
        className: clsx(classes.root, className),
        ref,
        role: "tab",
        "aria-selected": selected,
        disabled,
        onClick: handleClick,
        onFocus: handleFocus,
        ownerState,
        tabIndex: selected ? 0 : -1
      }, other, {
        children: [iconPosition === "top" || iconPosition === "start" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
          children: [icon, label]
        }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
          children: [label, icon]
        }), indicator]
      }));
    });
    const Tab$1 = Tab;
    function easeInOutSin(time) {
      return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
    }
    function animate(property2, element, to2, options = {}, cb2 = () => {
    }) {
      const {
        ease = easeInOutSin,
        duration: duration2 = 300
        // standard
      } = options;
      let start2 = null;
      const from2 = element[property2];
      let cancelled = false;
      const cancel = () => {
        cancelled = true;
      };
      const step = (timestamp) => {
        if (cancelled) {
          cb2(new Error("Animation cancelled"));
          return;
        }
        if (start2 === null) {
          start2 = timestamp;
        }
        const time = Math.min(1, (timestamp - start2) / duration2);
        element[property2] = ease(time) * (to2 - from2) + from2;
        if (time >= 1) {
          requestAnimationFrame(() => {
            cb2(null);
          });
          return;
        }
        requestAnimationFrame(step);
      };
      if (from2 === to2) {
        cb2(new Error("Element already at target position"));
        return cancel;
      }
      requestAnimationFrame(step);
      return cancel;
    }
    const _excluded$v = ["onChange"];
    const styles$1 = {
      width: 99,
      height: 99,
      position: "absolute",
      top: -9999,
      overflow: "scroll"
    };
    function ScrollbarSize(props) {
      const {
        onChange
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$v);
      const scrollbarHeight = reactExports.useRef();
      const nodeRef = reactExports.useRef(null);
      const setMeasurements = () => {
        scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
      };
      useEnhancedEffect$3(() => {
        const handleResize = debounce$4(() => {
          const prevHeight = scrollbarHeight.current;
          setMeasurements();
          if (prevHeight !== scrollbarHeight.current) {
            onChange(scrollbarHeight.current);
          }
        });
        const containerWindow = ownerWindow(nodeRef.current);
        containerWindow.addEventListener("resize", handleResize);
        return () => {
          handleResize.clear();
          containerWindow.removeEventListener("resize", handleResize);
        };
      }, [onChange]);
      reactExports.useEffect(() => {
        setMeasurements();
        onChange(scrollbarHeight.current);
      }, [onChange]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", _extends$1({
        style: styles$1,
        ref: nodeRef
      }, other));
    }
    const KeyboardArrowLeft = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
      d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
    }), "KeyboardArrowLeft");
    const KeyboardArrowRight = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
      d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
    }), "KeyboardArrowRight");
    function getTabScrollButtonUtilityClass(slot) {
      return generateUtilityClass("MuiTabScrollButton", slot);
    }
    const tabScrollButtonClasses = generateUtilityClasses("MuiTabScrollButton", ["root", "vertical", "horizontal", "disabled"]);
    const tabScrollButtonClasses$1 = tabScrollButtonClasses;
    const _excluded$u = ["className", "slots", "slotProps", "direction", "orientation", "disabled"];
    const useUtilityClasses$o = (ownerState) => {
      const {
        classes,
        orientation,
        disabled
      } = ownerState;
      const slots = {
        root: ["root", orientation, disabled && "disabled"]
      };
      return composeClasses(slots, getTabScrollButtonUtilityClass, classes);
    };
    const TabScrollButtonRoot = styled$1(ButtonBase$1, {
      name: "MuiTabScrollButton",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.orientation && styles2[ownerState.orientation]];
      }
    })(({
      ownerState
    }) => _extends$1({
      width: 40,
      flexShrink: 0,
      opacity: 0.8,
      [`&.${tabScrollButtonClasses$1.disabled}`]: {
        opacity: 0
      }
    }, ownerState.orientation === "vertical" && {
      width: "100%",
      height: 40,
      "& svg": {
        transform: `rotate(${ownerState.isRtl ? -90 : 90}deg)`
      }
    }));
    const TabScrollButton = /* @__PURE__ */ reactExports.forwardRef(function TabScrollButton2(inProps, ref) {
      var _slots$StartScrollBut, _slots$EndScrollButto;
      const props = useThemeProps({
        props: inProps,
        name: "MuiTabScrollButton"
      });
      const {
        className,
        slots = {},
        slotProps = {},
        direction
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$u);
      const theme = useTheme();
      const isRtl = theme.direction === "rtl";
      const ownerState = _extends$1({
        isRtl
      }, props);
      const classes = useUtilityClasses$o(ownerState);
      const StartButtonIcon = (_slots$StartScrollBut = slots.StartScrollButtonIcon) != null ? _slots$StartScrollBut : KeyboardArrowLeft;
      const EndButtonIcon = (_slots$EndScrollButto = slots.EndScrollButtonIcon) != null ? _slots$EndScrollButto : KeyboardArrowRight;
      const startButtonIconProps = useSlotProps$1({
        elementType: StartButtonIcon,
        externalSlotProps: slotProps.startScrollButtonIcon,
        additionalProps: {
          fontSize: "small"
        },
        ownerState
      });
      const endButtonIconProps = useSlotProps$1({
        elementType: EndButtonIcon,
        externalSlotProps: slotProps.endScrollButtonIcon,
        additionalProps: {
          fontSize: "small"
        },
        ownerState
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(TabScrollButtonRoot, _extends$1({
        component: "div",
        className: clsx(classes.root, className),
        ref,
        role: null,
        ownerState,
        tabIndex: null
      }, other, {
        children: direction === "left" ? /* @__PURE__ */ jsxRuntimeExports.jsx(StartButtonIcon, _extends$1({}, startButtonIconProps)) : /* @__PURE__ */ jsxRuntimeExports.jsx(EndButtonIcon, _extends$1({}, endButtonIconProps))
      }));
    });
    const TabScrollButton$1 = TabScrollButton;
    function getTabsUtilityClass(slot) {
      return generateUtilityClass("MuiTabs", slot);
    }
    const tabsClasses = generateUtilityClasses("MuiTabs", ["root", "vertical", "flexContainer", "flexContainerVertical", "centered", "scroller", "fixed", "scrollableX", "scrollableY", "hideScrollbar", "scrollButtons", "scrollButtonsHideMobile", "indicator"]);
    const tabsClasses$1 = tabsClasses;
    const _excluded$t = ["aria-label", "aria-labelledby", "action", "centered", "children", "className", "component", "allowScrollButtonsMobile", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "slots", "slotProps", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant", "visibleScrollbar"];
    const nextItem = (list, item) => {
      if (list === item) {
        return list.firstChild;
      }
      if (item && item.nextElementSibling) {
        return item.nextElementSibling;
      }
      return list.firstChild;
    };
    const previousItem = (list, item) => {
      if (list === item) {
        return list.lastChild;
      }
      if (item && item.previousElementSibling) {
        return item.previousElementSibling;
      }
      return list.lastChild;
    };
    const moveFocus = (list, currentFocus, traversalFunction) => {
      let wrappedOnce = false;
      let nextFocus = traversalFunction(list, currentFocus);
      while (nextFocus) {
        if (nextFocus === list.firstChild) {
          if (wrappedOnce) {
            return;
          }
          wrappedOnce = true;
        }
        const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
        if (!nextFocus.hasAttribute("tabindex") || nextFocusDisabled) {
          nextFocus = traversalFunction(list, nextFocus);
        } else {
          nextFocus.focus();
          return;
        }
      }
    };
    const useUtilityClasses$n = (ownerState) => {
      const {
        vertical,
        fixed,
        hideScrollbar,
        scrollableX,
        scrollableY,
        centered,
        scrollButtonsHideMobile,
        classes
      } = ownerState;
      const slots = {
        root: ["root", vertical && "vertical"],
        scroller: ["scroller", fixed && "fixed", hideScrollbar && "hideScrollbar", scrollableX && "scrollableX", scrollableY && "scrollableY"],
        flexContainer: ["flexContainer", vertical && "flexContainerVertical", centered && "centered"],
        indicator: ["indicator"],
        scrollButtons: ["scrollButtons", scrollButtonsHideMobile && "scrollButtonsHideMobile"],
        scrollableX: [scrollableX && "scrollableX"],
        hideScrollbar: [hideScrollbar && "hideScrollbar"]
      };
      return composeClasses(slots, getTabsUtilityClass, classes);
    };
    const TabsRoot = styled$1("div", {
      name: "MuiTabs",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${tabsClasses$1.scrollButtons}`]: styles2.scrollButtons
        }, {
          [`& .${tabsClasses$1.scrollButtons}`]: ownerState.scrollButtonsHideMobile && styles2.scrollButtonsHideMobile
        }, styles2.root, ownerState.vertical && styles2.vertical];
      }
    })(({
      ownerState,
      theme
    }) => _extends$1({
      overflow: "hidden",
      minHeight: 48,
      // Add iOS momentum scrolling for iOS < 13.0
      WebkitOverflowScrolling: "touch",
      display: "flex"
    }, ownerState.vertical && {
      flexDirection: "column"
    }, ownerState.scrollButtonsHideMobile && {
      [`& .${tabsClasses$1.scrollButtons}`]: {
        [theme.breakpoints.down("sm")]: {
          display: "none"
        }
      }
    }));
    const TabsScroller = styled$1("div", {
      name: "MuiTabs",
      slot: "Scroller",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.scroller, ownerState.fixed && styles2.fixed, ownerState.hideScrollbar && styles2.hideScrollbar, ownerState.scrollableX && styles2.scrollableX, ownerState.scrollableY && styles2.scrollableY];
      }
    })(({
      ownerState
    }) => _extends$1({
      position: "relative",
      display: "inline-block",
      flex: "1 1 auto",
      whiteSpace: "nowrap"
    }, ownerState.fixed && {
      overflowX: "hidden",
      width: "100%"
    }, ownerState.hideScrollbar && {
      // Hide dimensionless scrollbar on macOS
      scrollbarWidth: "none",
      // Firefox
      "&::-webkit-scrollbar": {
        display: "none"
        // Safari + Chrome
      }
    }, ownerState.scrollableX && {
      overflowX: "auto",
      overflowY: "hidden"
    }, ownerState.scrollableY && {
      overflowY: "auto",
      overflowX: "hidden"
    }));
    const FlexContainer = styled$1("div", {
      name: "MuiTabs",
      slot: "FlexContainer",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.flexContainer, ownerState.vertical && styles2.flexContainerVertical, ownerState.centered && styles2.centered];
      }
    })(({
      ownerState
    }) => _extends$1({
      display: "flex"
    }, ownerState.vertical && {
      flexDirection: "column"
    }, ownerState.centered && {
      justifyContent: "center"
    }));
    const TabsIndicator = styled$1("span", {
      name: "MuiTabs",
      slot: "Indicator",
      overridesResolver: (props, styles2) => styles2.indicator
    })(({
      ownerState,
      theme
    }) => _extends$1({
      position: "absolute",
      height: 2,
      bottom: 0,
      width: "100%",
      transition: theme.transitions.create()
    }, ownerState.indicatorColor === "primary" && {
      backgroundColor: (theme.vars || theme).palette.primary.main
    }, ownerState.indicatorColor === "secondary" && {
      backgroundColor: (theme.vars || theme).palette.secondary.main
    }, ownerState.vertical && {
      height: "100%",
      width: 2,
      right: 0
    }));
    const TabsScrollbarSize = styled$1(ScrollbarSize, {
      name: "MuiTabs",
      slot: "ScrollbarSize"
    })({
      overflowX: "auto",
      overflowY: "hidden",
      // Hide dimensionless scrollbar on macOS
      scrollbarWidth: "none",
      // Firefox
      "&::-webkit-scrollbar": {
        display: "none"
        // Safari + Chrome
      }
    });
    const defaultIndicatorStyle = {};
    const Tabs = /* @__PURE__ */ reactExports.forwardRef(function Tabs2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiTabs"
      });
      const theme = useTheme();
      const isRtl = theme.direction === "rtl";
      const {
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledBy,
        action,
        centered = false,
        children: childrenProp,
        className,
        component = "div",
        allowScrollButtonsMobile = false,
        indicatorColor = "primary",
        onChange,
        orientation = "horizontal",
        ScrollButtonComponent = TabScrollButton$1,
        scrollButtons = "auto",
        selectionFollowsFocus,
        slots = {},
        slotProps = {},
        TabIndicatorProps = {},
        TabScrollButtonProps = {},
        textColor = "primary",
        value: value2,
        variant = "standard",
        visibleScrollbar = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$t);
      const scrollable = variant === "scrollable";
      const vertical = orientation === "vertical";
      const scrollStart = vertical ? "scrollTop" : "scrollLeft";
      const start2 = vertical ? "top" : "left";
      const end2 = vertical ? "bottom" : "right";
      const clientSize = vertical ? "clientHeight" : "clientWidth";
      const size = vertical ? "height" : "width";
      const ownerState = _extends$1({}, props, {
        component,
        allowScrollButtonsMobile,
        indicatorColor,
        orientation,
        vertical,
        scrollButtons,
        textColor,
        variant,
        visibleScrollbar,
        fixed: !scrollable,
        hideScrollbar: scrollable && !visibleScrollbar,
        scrollableX: scrollable && !vertical,
        scrollableY: scrollable && vertical,
        centered: centered && !scrollable,
        scrollButtonsHideMobile: !allowScrollButtonsMobile
      });
      const classes = useUtilityClasses$n(ownerState);
      const startScrollButtonIconProps = useSlotProps$1({
        elementType: slots.StartScrollButtonIcon,
        externalSlotProps: slotProps.startScrollButtonIcon,
        ownerState
      });
      const endScrollButtonIconProps = useSlotProps$1({
        elementType: slots.EndScrollButtonIcon,
        externalSlotProps: slotProps.endScrollButtonIcon,
        ownerState
      });
      const [mounted, setMounted] = reactExports.useState(false);
      const [indicatorStyle, setIndicatorStyle] = reactExports.useState(defaultIndicatorStyle);
      const [displayScroll, setDisplayScroll] = reactExports.useState({
        start: false,
        end: false
      });
      const [scrollerStyle, setScrollerStyle] = reactExports.useState({
        overflow: "hidden",
        scrollbarWidth: 0
      });
      const valueToIndex = /* @__PURE__ */ new Map();
      const tabsRef = reactExports.useRef(null);
      const tabListRef = reactExports.useRef(null);
      const getTabsMeta = () => {
        const tabsNode = tabsRef.current;
        let tabsMeta;
        if (tabsNode) {
          const rect = tabsNode.getBoundingClientRect();
          tabsMeta = {
            clientWidth: tabsNode.clientWidth,
            scrollLeft: tabsNode.scrollLeft,
            scrollTop: tabsNode.scrollTop,
            scrollLeftNormalized: getNormalizedScrollLeft(tabsNode, theme.direction),
            scrollWidth: tabsNode.scrollWidth,
            top: rect.top,
            bottom: rect.bottom,
            left: rect.left,
            right: rect.right
          };
        }
        let tabMeta;
        if (tabsNode && value2 !== false) {
          const children2 = tabListRef.current.children;
          if (children2.length > 0) {
            const tab = children2[valueToIndex.get(value2)];
            tabMeta = tab ? tab.getBoundingClientRect() : null;
          }
        }
        return {
          tabsMeta,
          tabMeta
        };
      };
      const updateIndicatorState = useEventCallback$2(() => {
        const {
          tabsMeta,
          tabMeta
        } = getTabsMeta();
        let startValue = 0;
        let startIndicator;
        if (vertical) {
          startIndicator = "top";
          if (tabMeta && tabsMeta) {
            startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
          }
        } else {
          startIndicator = isRtl ? "right" : "left";
          if (tabMeta && tabsMeta) {
            const correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
            startValue = (isRtl ? -1 : 1) * (tabMeta[startIndicator] - tabsMeta[startIndicator] + correction);
          }
        }
        const newIndicatorStyle = {
          [startIndicator]: startValue,
          // May be wrong until the font is loaded.
          [size]: tabMeta ? tabMeta[size] : 0
        };
        if (isNaN(indicatorStyle[startIndicator]) || isNaN(indicatorStyle[size])) {
          setIndicatorStyle(newIndicatorStyle);
        } else {
          const dStart = Math.abs(indicatorStyle[startIndicator] - newIndicatorStyle[startIndicator]);
          const dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);
          if (dStart >= 1 || dSize >= 1) {
            setIndicatorStyle(newIndicatorStyle);
          }
        }
      });
      const scroll = (scrollValue, {
        animation = true
      } = {}) => {
        if (animation) {
          animate(scrollStart, tabsRef.current, scrollValue, {
            duration: theme.transitions.duration.standard
          });
        } else {
          tabsRef.current[scrollStart] = scrollValue;
        }
      };
      const moveTabsScroll = (delta) => {
        let scrollValue = tabsRef.current[scrollStart];
        if (vertical) {
          scrollValue += delta;
        } else {
          scrollValue += delta * (isRtl ? -1 : 1);
          scrollValue *= isRtl && detectScrollType() === "reverse" ? -1 : 1;
        }
        scroll(scrollValue);
      };
      const getScrollSize = () => {
        const containerSize = tabsRef.current[clientSize];
        let totalSize = 0;
        const children2 = Array.from(tabListRef.current.children);
        for (let i = 0; i < children2.length; i += 1) {
          const tab = children2[i];
          if (totalSize + tab[clientSize] > containerSize) {
            if (i === 0) {
              totalSize = containerSize;
            }
            break;
          }
          totalSize += tab[clientSize];
        }
        return totalSize;
      };
      const handleStartScrollClick = () => {
        moveTabsScroll(-1 * getScrollSize());
      };
      const handleEndScrollClick = () => {
        moveTabsScroll(getScrollSize());
      };
      const handleScrollbarSizeChange = reactExports.useCallback((scrollbarWidth) => {
        setScrollerStyle({
          overflow: null,
          scrollbarWidth
        });
      }, []);
      const getConditionalElements = () => {
        const conditionalElements2 = {};
        conditionalElements2.scrollbarSizeListener = scrollable ? /* @__PURE__ */ jsxRuntimeExports.jsx(TabsScrollbarSize, {
          onChange: handleScrollbarSizeChange,
          className: clsx(classes.scrollableX, classes.hideScrollbar)
        }) : null;
        const scrollButtonsActive = displayScroll.start || displayScroll.end;
        const showScrollButtons = scrollable && (scrollButtons === "auto" && scrollButtonsActive || scrollButtons === true);
        conditionalElements2.scrollButtonStart = showScrollButtons ? /* @__PURE__ */ jsxRuntimeExports.jsx(ScrollButtonComponent, _extends$1({
          slots: {
            StartScrollButtonIcon: slots.StartScrollButtonIcon
          },
          slotProps: {
            startScrollButtonIcon: startScrollButtonIconProps
          },
          orientation,
          direction: isRtl ? "right" : "left",
          onClick: handleStartScrollClick,
          disabled: !displayScroll.start
        }, TabScrollButtonProps, {
          className: clsx(classes.scrollButtons, TabScrollButtonProps.className)
        })) : null;
        conditionalElements2.scrollButtonEnd = showScrollButtons ? /* @__PURE__ */ jsxRuntimeExports.jsx(ScrollButtonComponent, _extends$1({
          slots: {
            EndScrollButtonIcon: slots.EndScrollButtonIcon
          },
          slotProps: {
            endScrollButtonIcon: endScrollButtonIconProps
          },
          orientation,
          direction: isRtl ? "left" : "right",
          onClick: handleEndScrollClick,
          disabled: !displayScroll.end
        }, TabScrollButtonProps, {
          className: clsx(classes.scrollButtons, TabScrollButtonProps.className)
        })) : null;
        return conditionalElements2;
      };
      const scrollSelectedIntoView = useEventCallback$2((animation) => {
        const {
          tabsMeta,
          tabMeta
        } = getTabsMeta();
        if (!tabMeta || !tabsMeta) {
          return;
        }
        if (tabMeta[start2] < tabsMeta[start2]) {
          const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start2] - tabsMeta[start2]);
          scroll(nextScrollStart, {
            animation
          });
        } else if (tabMeta[end2] > tabsMeta[end2]) {
          const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end2] - tabsMeta[end2]);
          scroll(nextScrollStart, {
            animation
          });
        }
      });
      const updateScrollButtonState = useEventCallback$2(() => {
        if (scrollable && scrollButtons !== false) {
          const {
            scrollTop,
            scrollHeight,
            clientHeight,
            scrollWidth,
            clientWidth
          } = tabsRef.current;
          let showStartScroll;
          let showEndScroll;
          if (vertical) {
            showStartScroll = scrollTop > 1;
            showEndScroll = scrollTop < scrollHeight - clientHeight - 1;
          } else {
            const scrollLeft = getNormalizedScrollLeft(tabsRef.current, theme.direction);
            showStartScroll = isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
            showEndScroll = !isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
          }
          if (showStartScroll !== displayScroll.start || showEndScroll !== displayScroll.end) {
            setDisplayScroll({
              start: showStartScroll,
              end: showEndScroll
            });
          }
        }
      });
      reactExports.useEffect(() => {
        const handleResize = debounce$4(() => {
          if (tabsRef.current) {
            updateIndicatorState();
            updateScrollButtonState();
          }
        });
        const win = ownerWindow(tabsRef.current);
        win.addEventListener("resize", handleResize);
        let resizeObserver;
        if (typeof ResizeObserver !== "undefined") {
          resizeObserver = new ResizeObserver(handleResize);
          Array.from(tabListRef.current.children).forEach((child) => {
            resizeObserver.observe(child);
          });
        }
        return () => {
          handleResize.clear();
          win.removeEventListener("resize", handleResize);
          if (resizeObserver) {
            resizeObserver.disconnect();
          }
        };
      }, [updateIndicatorState, updateScrollButtonState]);
      const handleTabsScroll = reactExports.useMemo(() => debounce$4(() => {
        updateScrollButtonState();
      }), [updateScrollButtonState]);
      reactExports.useEffect(() => {
        return () => {
          handleTabsScroll.clear();
        };
      }, [handleTabsScroll]);
      reactExports.useEffect(() => {
        setMounted(true);
      }, []);
      reactExports.useEffect(() => {
        updateIndicatorState();
        updateScrollButtonState();
      });
      reactExports.useEffect(() => {
        scrollSelectedIntoView(defaultIndicatorStyle !== indicatorStyle);
      }, [scrollSelectedIntoView, indicatorStyle]);
      reactExports.useImperativeHandle(action, () => ({
        updateIndicator: updateIndicatorState,
        updateScrollButtons: updateScrollButtonState
      }), [updateIndicatorState, updateScrollButtonState]);
      const indicator = /* @__PURE__ */ jsxRuntimeExports.jsx(TabsIndicator, _extends$1({}, TabIndicatorProps, {
        className: clsx(classes.indicator, TabIndicatorProps.className),
        ownerState,
        style: _extends$1({}, indicatorStyle, TabIndicatorProps.style)
      }));
      let childIndex = 0;
      const children = reactExports.Children.map(childrenProp, (child) => {
        if (!/* @__PURE__ */ reactExports.isValidElement(child)) {
          return null;
        }
        const childValue = child.props.value === void 0 ? childIndex : child.props.value;
        valueToIndex.set(childValue, childIndex);
        const selected = childValue === value2;
        childIndex += 1;
        return /* @__PURE__ */ reactExports.cloneElement(child, _extends$1({
          fullWidth: variant === "fullWidth",
          indicator: selected && !mounted && indicator,
          selected,
          selectionFollowsFocus,
          onChange,
          textColor,
          value: childValue
        }, childIndex === 1 && value2 === false && !child.props.tabIndex ? {
          tabIndex: 0
        } : {}));
      });
      const handleKeyDown2 = (event) => {
        const list = tabListRef.current;
        const currentFocus = ownerDocument(list).activeElement;
        const role = currentFocus.getAttribute("role");
        if (role !== "tab") {
          return;
        }
        let previousItemKey = orientation === "horizontal" ? "ArrowLeft" : "ArrowUp";
        let nextItemKey = orientation === "horizontal" ? "ArrowRight" : "ArrowDown";
        if (orientation === "horizontal" && isRtl) {
          previousItemKey = "ArrowRight";
          nextItemKey = "ArrowLeft";
        }
        switch (event.key) {
          case previousItemKey:
            event.preventDefault();
            moveFocus(list, currentFocus, previousItem);
            break;
          case nextItemKey:
            event.preventDefault();
            moveFocus(list, currentFocus, nextItem);
            break;
          case "Home":
            event.preventDefault();
            moveFocus(list, null, nextItem);
            break;
          case "End":
            event.preventDefault();
            moveFocus(list, null, previousItem);
            break;
        }
      };
      const conditionalElements = getConditionalElements();
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(TabsRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref,
        as: component
      }, other, {
        children: [conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, /* @__PURE__ */ jsxRuntimeExports.jsxs(TabsScroller, {
          className: classes.scroller,
          ownerState,
          style: {
            overflow: scrollerStyle.overflow,
            [vertical ? `margin${isRtl ? "Left" : "Right"}` : "marginBottom"]: visibleScrollbar ? void 0 : -scrollerStyle.scrollbarWidth
          },
          ref: tabsRef,
          onScroll: handleTabsScroll,
          children: [/* @__PURE__ */ jsxRuntimeExports.jsx(FlexContainer, {
            "aria-label": ariaLabel,
            "aria-labelledby": ariaLabelledBy,
            "aria-orientation": orientation === "vertical" ? "vertical" : null,
            className: classes.flexContainer,
            ownerState,
            onKeyDown: handleKeyDown2,
            ref: tabListRef,
            role: "tablist",
            children
          }), mounted && indicator]
        }), conditionalElements.scrollButtonEnd]
      }));
    });
    const Tabs$1 = Tabs;
    function getDateTimePickerTabsUtilityClass(slot) {
      return generateUtilityClass("MuiDateTimePickerTabs", slot);
    }
    generateUtilityClasses("MuiDateTimePickerTabs", ["root"]);
    const viewToTab = (view) => {
      if (["day", "month", "year"].includes(view)) {
        return "date";
      }
      return "time";
    };
    const tabToView = (tab) => {
      if (tab === "date") {
        return "day";
      }
      return "hours";
    };
    const useUtilityClasses$m = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getDateTimePickerTabsUtilityClass, classes);
    };
    const DateTimePickerTabsRoot = styled$1(Tabs$1, {
      name: "MuiDateTimePickerTabs",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })(({
      theme
    }) => ({
      boxShadow: `0 -1px 0 0 inset ${(theme.vars || theme).palette.divider}`,
      "&:last-child": {
        boxShadow: `0 1px 0 0 inset ${(theme.vars || theme).palette.divider}`,
        [`& .${tabsClasses$1.indicator}`]: {
          bottom: "auto",
          top: 0
        }
      }
    }));
    const DateTimePickerTabs = function DateTimePickerTabs2(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDateTimePickerTabs"
      });
      const {
        dateIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(DateRange, {}),
        onViewChange,
        timeIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(Time, {}),
        view,
        hidden = typeof window === "undefined" || window.innerHeight < 667
      } = props;
      const localeText = useLocaleText();
      const classes = useUtilityClasses$m(props);
      const handleChange = (event, value2) => {
        onViewChange(tabToView(value2));
      };
      if (hidden) {
        return null;
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(DateTimePickerTabsRoot, {
        ownerState: props,
        variant: "fullWidth",
        value: viewToTab(view),
        onChange: handleChange,
        className: classes.root,
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Tab$1, {
          value: "date",
          "aria-label": localeText.dateTableLabel,
          icon: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Fragment, {
            children: dateIcon
          })
        }), /* @__PURE__ */ jsxRuntimeExports.jsx(Tab$1, {
          value: "time",
          "aria-label": localeText.timeTableLabel,
          icon: /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Fragment, {
            children: timeIcon
          })
        })]
      });
    };
    function getDateTimePickerToolbarUtilityClass(slot) {
      return generateUtilityClass("MuiDateTimePickerToolbar", slot);
    }
    const dateTimePickerToolbarClasses = generateUtilityClasses("MuiDateTimePickerToolbar", ["root", "dateContainer", "timeContainer", "timeDigitsContainer", "separator", "timeLabelReverse", "ampmSelection", "ampmLandscape", "ampmLabel"]);
    const _excluded$s = ["ampm", "ampmInClock", "value", "onChange", "view", "isLandscape", "onViewChange", "toolbarFormat", "toolbarPlaceholder", "views", "disabled", "readOnly"];
    const useUtilityClasses$l = (ownerState) => {
      const {
        classes,
        theme,
        isLandscape
      } = ownerState;
      const slots = {
        root: ["root"],
        dateContainer: ["dateContainer"],
        timeContainer: ["timeContainer", theme.direction === "rtl" && "timeLabelReverse"],
        timeDigitsContainer: ["timeDigitsContainer", theme.direction === "rtl" && "timeLabelReverse"],
        separator: ["separator"],
        ampmSelection: ["ampmSelection", isLandscape && "ampmLandscape"],
        ampmLabel: ["ampmLabel"]
      };
      return composeClasses(slots, getDateTimePickerToolbarUtilityClass, classes);
    };
    const DateTimePickerToolbarRoot = styled$1(PickersToolbar, {
      name: "MuiDateTimePickerToolbar",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })(({
      theme
    }) => ({
      paddingLeft: 16,
      paddingRight: 16,
      justifyContent: "space-around",
      position: "relative",
      [`& .${pickersToolbarClasses.penIconButton}`]: _extends$1({
        position: "absolute",
        top: 8
      }, theme.direction === "rtl" ? {
        left: 8
      } : {
        right: 8
      })
    }));
    DateTimePickerToolbarRoot.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      as: PropTypes.elementType,
      classes: PropTypes.object,
      className: PropTypes.string,
      isLandscape: PropTypes.bool.isRequired,
      isMobileKeyboardViewOpen: PropTypes.bool,
      landscapeDirection: PropTypes.oneOf(["column", "row"]),
      ownerState: PropTypes.object.isRequired,
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      toggleMobileKeyboardView: PropTypes.func,
      toolbarTitle: PropTypes.node,
      viewType: PropTypes.oneOf(["date", "time"])
    };
    const DateTimePickerToolbarDateContainer = styled$1("div", {
      name: "MuiDateTimePickerToolbar",
      slot: "DateContainer",
      overridesResolver: (props, styles2) => styles2.dateContainer
    })({
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-start"
    });
    const DateTimePickerToolbarTimeContainer = styled$1("div", {
      name: "MuiDateTimePickerToolbar",
      slot: "TimeContainer",
      overridesResolver: (props, styles2) => styles2.timeContainer
    })(({
      theme,
      ownerState
    }) => {
      const direction = ownerState.isLandscape ? "column" : "row";
      return _extends$1({
        display: "flex",
        flexDirection: direction
      }, theme.direction === "rtl" && {
        flexDirection: `${direction}-reverse`
      });
    });
    const DateTimePickerToolbarTimeDigitsContainer = styled$1("div", {
      name: "MuiDateTimePickerToolbar",
      slot: "TimeDigitsContainer",
      overridesResolver: (props, styles2) => styles2.timeDigitsContainer
    })(({
      theme
    }) => _extends$1({
      display: "flex"
    }, theme.direction === "rtl" && {
      flexDirection: "row-reverse"
    }));
    DateTimePickerToolbarTimeContainer.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      as: PropTypes.elementType,
      ownerState: PropTypes.object.isRequired,
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    };
    const DateTimePickerToolbarSeparator = styled$1(PickersToolbarText, {
      name: "MuiDateTimePickerToolbar",
      slot: "Separator",
      overridesResolver: (props, styles2) => styles2.separator
    })({
      margin: "0 4px 0 2px",
      cursor: "default"
    });
    const DateTimePickerToolbarAmPmSelection = styled$1("div", {
      name: "MuiDateTimePickerToolbar",
      slot: "AmPmSelection",
      overridesResolver: (props, styles2) => [{
        [`.${dateTimePickerToolbarClasses.ampmLabel}`]: styles2.ampmLabel
      }, {
        [`&.${dateTimePickerToolbarClasses.ampmLandscape}`]: styles2.ampmLandscape
      }, styles2.ampmSelection]
    })(({
      ownerState
    }) => _extends$1({
      display: "flex",
      flexDirection: "column",
      marginRight: "auto",
      marginLeft: 12
    }, ownerState.isLandscape && {
      margin: "4px 0 auto",
      flexDirection: "row",
      justifyContent: "space-around",
      width: "100%"
    }, {
      [`& .${dateTimePickerToolbarClasses.ampmLabel}`]: {
        fontSize: 17
      }
    }));
    function DateTimePickerToolbar(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDateTimePickerToolbar"
      });
      const {
        ampm,
        ampmInClock,
        value: value2,
        onChange,
        view,
        isLandscape,
        onViewChange,
        toolbarFormat,
        toolbarPlaceholder = "––",
        views,
        disabled,
        readOnly
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$s);
      const ownerState = props;
      const utils2 = useUtils();
      const {
        meridiemMode,
        handleMeridiemChange
      } = useMeridiemMode(value2, ampm, onChange);
      const showAmPmControl = Boolean(ampm && !ampmInClock);
      const localeText = useLocaleText();
      const theme = useTheme();
      const classes = useUtilityClasses$l(_extends$1({}, ownerState, {
        theme
      }));
      const formatHours = (time) => ampm ? utils2.format(time, "hours12h") : utils2.format(time, "hours24h");
      const dateText = reactExports.useMemo(() => {
        if (!value2) {
          return toolbarPlaceholder;
        }
        if (toolbarFormat) {
          return utils2.formatByString(value2, toolbarFormat);
        }
        return utils2.format(value2, "shortDate");
      }, [value2, toolbarFormat, toolbarPlaceholder, utils2]);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(DateTimePickerToolbarRoot, _extends$1({
        toolbarTitle: localeText.dateTimePickerToolbarTitle,
        isLandscape,
        className: classes.root
      }, other, {
        ownerState,
        children: [/* @__PURE__ */ jsxRuntimeExports.jsxs(DateTimePickerToolbarDateContainer, {
          className: classes.dateContainer,
          ownerState,
          children: [views.includes("year") && /* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarButton, {
            tabIndex: -1,
            variant: "subtitle1",
            onClick: () => onViewChange("year"),
            selected: view === "year",
            value: value2 ? utils2.format(value2, "year") : "–"
          }), views.includes("day") && /* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarButton, {
            tabIndex: -1,
            variant: "h4",
            onClick: () => onViewChange("day"),
            selected: view === "day",
            value: dateText
          })]
        }), /* @__PURE__ */ jsxRuntimeExports.jsxs(DateTimePickerToolbarTimeContainer, {
          className: classes.timeContainer,
          ownerState,
          children: [/* @__PURE__ */ jsxRuntimeExports.jsxs(DateTimePickerToolbarTimeDigitsContainer, {
            className: classes.timeDigitsContainer,
            children: [views.includes("hours") && /* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarButton, {
              variant: "h3",
              onClick: () => onViewChange("hours"),
              selected: view === "hours",
              value: value2 ? formatHours(value2) : "--"
            }), views.includes("minutes") && /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
              children: [/* @__PURE__ */ jsxRuntimeExports.jsx(DateTimePickerToolbarSeparator, {
                variant: "h3",
                value: ":",
                className: classes.separator,
                ownerState
              }), /* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarButton, {
                variant: "h3",
                onClick: () => onViewChange("minutes"),
                selected: view === "minutes",
                value: value2 ? utils2.format(value2, "minutes") : "--"
              })]
            }), views.includes("seconds") && /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
              children: [/* @__PURE__ */ jsxRuntimeExports.jsx(DateTimePickerToolbarSeparator, {
                variant: "h3",
                value: ":",
                className: classes.separator,
                ownerState
              }), /* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarButton, {
                variant: "h3",
                onClick: () => onViewChange("seconds"),
                selected: view === "seconds",
                value: value2 ? utils2.format(value2, "seconds") : "--"
              })]
            })]
          }), showAmPmControl && /* @__PURE__ */ jsxRuntimeExports.jsxs(DateTimePickerToolbarAmPmSelection, {
            className: classes.ampmSelection,
            ownerState,
            children: [/* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarButton, {
              disableRipple: true,
              variant: "subtitle2",
              selected: meridiemMode === "am",
              typographyClassName: classes.ampmLabel,
              value: utils2.getMeridiemText("am"),
              onClick: readOnly ? void 0 : () => handleMeridiemChange("am"),
              disabled
            }), /* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarButton, {
              disableRipple: true,
              variant: "subtitle2",
              selected: meridiemMode === "pm",
              typographyClassName: classes.ampmLabel,
              value: utils2.getMeridiemText("pm"),
              onClick: readOnly ? void 0 : () => handleMeridiemChange("pm"),
              disabled
            })]
          })]
        })]
      }));
    }
    function useDateTimePickerDefaultizedProps(props, name) {
      var _themeProps$ampm, _themeProps$slots, _themeProps$slotProps, _themeProps$orientati, _themeProps$disableIg, _themeProps$disableFu, _themeProps$disablePa, _themeProps$minDateTi, _themeProps$maxDateTi, _themeProps$minDateTi2, _themeProps$maxDateTi2;
      const utils2 = useUtils();
      const defaultDates = useDefaultDates();
      const themeProps = useThemeProps({
        props,
        name
      });
      const ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils2.is12HourCycleInCurrentLocale();
      const localeText = reactExports.useMemo(() => {
        var _themeProps$localeTex;
        if (((_themeProps$localeTex = themeProps.localeText) == null ? void 0 : _themeProps$localeTex.toolbarTitle) == null) {
          return themeProps.localeText;
        }
        return _extends$1({}, themeProps.localeText, {
          dateTimePickerToolbarTitle: themeProps.localeText.toolbarTitle
        });
      }, [themeProps.localeText]);
      const slots = (_themeProps$slots = themeProps.slots) != null ? _themeProps$slots : uncapitalizeObjectKeys(themeProps.components);
      const slotProps = (_themeProps$slotProps = themeProps.slotProps) != null ? _themeProps$slotProps : themeProps.componentsProps;
      return _extends$1({}, themeProps, applyDefaultViewProps({
        views: themeProps.views,
        openTo: themeProps.openTo,
        defaultViews: ["year", "day", "hours", "minutes"],
        defaultOpenTo: "day"
      }), {
        ampm,
        localeText,
        orientation: (_themeProps$orientati = themeProps.orientation) != null ? _themeProps$orientati : "portrait",
        // TODO: Remove from public API
        disableIgnoringDatePartForTimeValidation: (_themeProps$disableIg = themeProps.disableIgnoringDatePartForTimeValidation) != null ? _themeProps$disableIg : Boolean(themeProps.minDateTime || themeProps.maxDateTime || // allow time clock to correctly check time validity: https://github.com/mui/mui-x/issues/8520
        themeProps.disablePast || themeProps.disableFuture),
        disableFuture: (_themeProps$disableFu = themeProps.disableFuture) != null ? _themeProps$disableFu : false,
        disablePast: (_themeProps$disablePa = themeProps.disablePast) != null ? _themeProps$disablePa : false,
        minDate: applyDefaultDate(utils2, (_themeProps$minDateTi = themeProps.minDateTime) != null ? _themeProps$minDateTi : themeProps.minDate, defaultDates.minDate),
        maxDate: applyDefaultDate(utils2, (_themeProps$maxDateTi = themeProps.maxDateTime) != null ? _themeProps$maxDateTi : themeProps.maxDate, defaultDates.maxDate),
        minTime: (_themeProps$minDateTi2 = themeProps.minDateTime) != null ? _themeProps$minDateTi2 : themeProps.minTime,
        maxTime: (_themeProps$maxDateTi2 = themeProps.maxDateTime) != null ? _themeProps$maxDateTi2 : themeProps.maxTime,
        slots: _extends$1({
          toolbar: DateTimePickerToolbar,
          tabs: DateTimePickerTabs
        }, slots),
        slotProps: _extends$1({}, slotProps, {
          toolbar: _extends$1({
            ampm
          }, slotProps == null ? void 0 : slotProps.toolbar)
        })
      });
    }
    const DesktopDateTimePicker = /* @__PURE__ */ reactExports.forwardRef(function DesktopDateTimePicker2(inProps, ref) {
      var _defaultizedProps$amp, _defaultizedProps$yea, _defaultizedProps$slo2, _defaultizedProps$slo3;
      const localeText = useLocaleText();
      const defaultizedProps = useDateTimePickerDefaultizedProps(inProps, "MuiDesktopDateTimePicker");
      const viewRenderers = _extends$1({
        day: renderDateViewCalendar,
        month: renderDateViewCalendar,
        year: renderDateViewCalendar,
        hours: null,
        minutes: null,
        seconds: null
      }, defaultizedProps.viewRenderers);
      const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;
      const props = _extends$1({}, defaultizedProps, {
        viewRenderers,
        yearsPerRow: (_defaultizedProps$yea = defaultizedProps.yearsPerRow) != null ? _defaultizedProps$yea : 4,
        ampmInClock,
        slots: _extends$1({
          field: DateTimeField,
          openPickerIcon: Calendar
        }, defaultizedProps.slots),
        slotProps: _extends$1({}, defaultizedProps.slotProps, {
          field: (ownerState) => {
            var _defaultizedProps$slo;
            return _extends$1({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
              ref,
              ampm: defaultizedProps.ampm
            });
          },
          toolbar: _extends$1({
            hidden: true,
            ampmInClock
          }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),
          tabs: _extends$1({
            hidden: true
          }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.tabs)
        })
      });
      const {
        renderPicker
      } = useDesktopPicker({
        props,
        valueManager: singleItemValueManager,
        valueType: "date-time",
        getOpenDialogAriaText: localeText.openDatePickerDialogue,
        validator: validateDateTime
      });
      return renderPicker();
    });
    DesktopDateTimePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * 12h/24h view for hour selection clock.
       * @default `utils.is12HourCycleInCurrentLocale()`
       */
      ampm: PropTypes.bool,
      /**
       * Display ampm controls under the clock (instead of in the toolbar).
       * @default true on desktop, false on mobile
       */
      ampmInClock: PropTypes.bool,
      /**
       * If `true`, the main element is focused during the first mount.
       * This main element is:
       * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
       * - the `input` element if there is a field rendered.
       */
      autoFocus: PropTypes.bool,
      /**
       * Class name applied to the root element.
       */
      className: PropTypes.string,
      /**
       * If `true`, the popover or modal will close after submitting the full date.
       * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,
      /**
       * Overridable components.
       * @default {}
       * @deprecated Please use `slots`.
       */
      components: PropTypes.object,
      /**
       * The props used for each component slot.
       * @default {}
       * @deprecated Please use `slotProps`.
       */
      componentsProps: PropTypes.object,
      /**
       * Formats the day of week displayed in the calendar header.
       * @param {string} day The day of week provided by the adapter's method `getWeekdays`.
       * @returns {string} The name to display.
       * @default (day) => day.charAt(0).toUpperCase()
       */
      dayOfWeekFormatter: PropTypes.func,
      /**
       * Default calendar month displayed when `value={null}`.
       */
      defaultCalendarMonth: PropTypes.any,
      /**
       * The default value.
       * Used when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, disable values after the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disableFuture: PropTypes.bool,
      /**
       * If `true`, today's date is rendering without highlighting with circle.
       * @default false
       */
      disableHighlightToday: PropTypes.bool,
      /**
       * Do not ignore date part when validating min/max time.
       * @default false
       */
      disableIgnoringDatePartForTimeValidation: PropTypes.bool,
      /**
       * If `true`, the open picker button will not be rendered (renders only the field).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,
      /**
       * If `true`, disable values before the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disablePast: PropTypes.bool,
      /**
       * If `true`, the week number will be display in the calendar.
       */
      displayWeekNumber: PropTypes.bool,
      /**
       * Calendar will show more weeks in order to match this value.
       * Put it to 6 for having fix number of week in Gregorian calendars
       * @default undefined
       */
      fixedWeekNumber: PropTypes.number,
      /**
       * Format of the date when rendered in the input(s).
       * Defaults to localized format based on the used `views`.
       */
      format: PropTypes.string,
      /**
       * Density of the format when rendered in the input.
       * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
       * @default "dense"
       */
      formatDensity: PropTypes.oneOf(["dense", "spacious"]),
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      /**
       * The label content.
       */
      label: PropTypes.node,
      /**
       * If `true`, calls `renderLoading` instead of rendering the day calendar.
       * Can be used to preload information and show it in calendar.
       * @default false
       */
      loading: PropTypes.bool,
      /**
       * Locale for components texts.
       * Allows overriding texts coming from `LocalizationProvider` and `theme`.
       */
      localeText: PropTypes.object,
      /**
       * Maximal selectable date.
       */
      maxDate: PropTypes.any,
      /**
       * Maximal selectable moment of time with binding to date, to set max time in each day use `maxTime`.
       */
      maxDateTime: PropTypes.any,
      /**
       * Maximal selectable time.
       * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
       */
      maxTime: PropTypes.any,
      /**
       * Minimal selectable date.
       */
      minDate: PropTypes.any,
      /**
       * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.
       */
      minDateTime: PropTypes.any,
      /**
       * Minimal selectable time.
       * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
       */
      minTime: PropTypes.any,
      /**
       * Step over minutes.
       * @default 1
       */
      minutesStep: PropTypes.number,
      /**
       * Months rendered per row.
       * @default 3
       */
      monthsPerRow: PropTypes.oneOf([3, 4]),
      /**
       * Callback fired when the value is accepted.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,
      /**
       * Callback fired when the value changes.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The new value.
       * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
       */
      onChange: PropTypes.func,
      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see `open`).
       */
      onClose: PropTypes.func,
      /**
       * Callback fired when the error associated to the current value changes.
       * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
       *
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TError} error The new error describing why the current value is not valid.
       * @param {TValue} value The value associated to the error.
       */
      onError: PropTypes.func,
      /**
       * Callback fired on month change.
       * @template TDate
       * @param {TDate} month The new month.
       */
      onMonthChange: PropTypes.func,
      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see `open`).
       */
      onOpen: PropTypes.func,
      /**
       * Callback fired when the selected sections change.
       * @param {FieldSelectedSections} newValue The new selected sections.
       */
      onSelectedSectionsChange: PropTypes.func,
      /**
       * Callback fired on view change.
       * @template TView
       * @param {TView} view The new view.
       */
      onViewChange: PropTypes.func,
      /**
       * Callback fired on year change.
       * @template TDate
       * @param {TDate} year The new year.
       */
      onYearChange: PropTypes.func,
      /**
       * Control the popup or dialog open state.
       * @default false
       */
      open: PropTypes.bool,
      /**
       * The default visible view.
       * Used when the component view is not controlled.
       * Must be a valid option from `views` list.
       */
      openTo: PropTypes.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(["landscape", "portrait"]),
      readOnly: PropTypes.bool,
      /**
       * Disable heavy animations.
       * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
       */
      reduceAnimations: PropTypes.bool,
      /**
       * Component displaying when passed `loading` true.
       * @returns {React.ReactNode} The node to render when loading.
       * @default () => <span data-mui-test="loading-progress">...</span>
       */
      renderLoading: PropTypes.func,
      /**
       * The currently selected sections.
       * This prop accept four formats:
       * 1. If a number is provided, the section at this index will be selected.
       * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.
       * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
       * 4. If `null` is provided, no section will be selected
       * If not provided, the selected sections will be handled internally.
       */
      selectedSections: PropTypes.oneOfType([PropTypes.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), PropTypes.number, PropTypes.shape({
        endIndex: PropTypes.number.isRequired,
        startIndex: PropTypes.number.isRequired
      })]),
      /**
       * Disable specific clock time.
       * @param {number} clockValue The value to check.
       * @param {TimeView} view The clock type of the timeValue.
       * @returns {boolean} If `true` the time will be disabled.
       * @deprecated Consider using `shouldDisableTime`.
       */
      shouldDisableClock: PropTypes.func,
      /**
       * Disable specific date.
       * @template TDate
       * @param {TDate} day The date to test.
       * @returns {boolean} If `true` the date will be disabled.
       */
      shouldDisableDate: PropTypes.func,
      /**
       * Disable specific month.
       * @template TDate
       * @param {TDate} month The month to test.
       * @returns {boolean} If `true`, the month will be disabled.
       */
      shouldDisableMonth: PropTypes.func,
      /**
       * Disable specific time.
       * @template TDate
       * @param {TDate} value The value to check.
       * @param {TimeView} view The clock type of the timeValue.
       * @returns {boolean} If `true` the time will be disabled.
       */
      shouldDisableTime: PropTypes.func,
      /**
       * Disable specific year.
       * @template TDate
       * @param {TDate} year The year to test.
       * @returns {boolean} If `true`, the year will be disabled.
       */
      shouldDisableYear: PropTypes.func,
      /**
       * If `true`, days outside the current month are rendered:
       *
       * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
       *
       * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
       *
       * - ignored if `calendars` equals more than `1` on range pickers.
       * @default false
       */
      showDaysOutsideCurrentMonth: PropTypes.bool,
      /**
       * The props used for each component slot.
       * @default {}
       */
      slotProps: PropTypes.object,
      /**
       * Overridable component slots.
       * @default {}
       */
      slots: PropTypes.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The selected value.
       * Used when the component is controlled.
       */
      value: PropTypes.any,
      /**
       * The visible view.
       * Used when the component view is controlled.
       * Must be a valid option from `views` list.
       */
      view: PropTypes.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
      /**
       * Define custom view renderers for each section.
       * If `null`, the section will only have field editing.
       * If `undefined`, internally defined view will be the used.
       */
      viewRenderers: PropTypes.shape({
        day: PropTypes.func,
        hours: PropTypes.func,
        minutes: PropTypes.func,
        month: PropTypes.func,
        seconds: PropTypes.func,
        year: PropTypes.func
      }),
      /**
       * Available views.
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired),
      /**
       * Years rendered per row.
       * @default 4
       */
      yearsPerRow: PropTypes.oneOf([3, 4])
    };
    function getTimeClockUtilityClass(slot) {
      return generateUtilityClass("MuiTimeClock", slot);
    }
    generateUtilityClasses("MuiTimeClock", ["root", "arrowSwitcher"]);
    const CLOCK_WIDTH = 220;
    const CLOCK_HOUR_WIDTH = 36;
    const clockCenter = {
      x: CLOCK_WIDTH / 2,
      y: CLOCK_WIDTH / 2
    };
    const baseClockPoint = {
      x: clockCenter.x,
      y: 0
    };
    const cx = baseClockPoint.x - clockCenter.x;
    const cy = baseClockPoint.y - clockCenter.y;
    const rad2deg = (rad) => rad * (180 / Math.PI);
    const getAngleValue = (step, offsetX, offsetY) => {
      const x2 = offsetX - clockCenter.x;
      const y2 = offsetY - clockCenter.y;
      const atan = Math.atan2(cx, cy) - Math.atan2(x2, y2);
      let deg = rad2deg(atan);
      deg = Math.round(deg / step) * step;
      deg %= 360;
      const value2 = Math.floor(deg / step) || 0;
      const delta = x2 ** 2 + y2 ** 2;
      const distance = Math.sqrt(delta);
      return {
        value: value2,
        distance
      };
    };
    const getMinutes = (offsetX, offsetY, step = 1) => {
      const angleStep = step * 6;
      let {
        value: value2
      } = getAngleValue(angleStep, offsetX, offsetY);
      value2 = value2 * step % 60;
      return value2;
    };
    const getHours = (offsetX, offsetY, ampm) => {
      const {
        value: value2,
        distance
      } = getAngleValue(30, offsetX, offsetY);
      let hour = value2 || 12;
      if (!ampm) {
        if (distance < CLOCK_WIDTH / 2 - CLOCK_HOUR_WIDTH) {
          hour += 12;
          hour %= 24;
        }
      } else {
        hour %= 12;
      }
      return hour;
    };
    function getClockPointerUtilityClass(slot) {
      return generateUtilityClass("MuiClockPointer", slot);
    }
    generateUtilityClasses("MuiClockPointer", ["root", "thumb"]);
    const _excluded$r = ["className", "hasSelected", "isInner", "type", "viewValue"];
    const useUtilityClasses$k = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        thumb: ["thumb"]
      };
      return composeClasses(slots, getClockPointerUtilityClass, classes);
    };
    const ClockPointerRoot = styled$1("div", {
      name: "MuiClockPointer",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })(({
      theme,
      ownerState
    }) => _extends$1({
      width: 2,
      backgroundColor: (theme.vars || theme).palette.primary.main,
      position: "absolute",
      left: "calc(50% - 1px)",
      bottom: "50%",
      transformOrigin: "center bottom 0px"
    }, ownerState.shouldAnimate && {
      transition: theme.transitions.create(["transform", "height"])
    }));
    const ClockPointerThumb = styled$1("div", {
      name: "MuiClockPointer",
      slot: "Thumb",
      overridesResolver: (_2, styles2) => styles2.thumb
    })(({
      theme,
      ownerState
    }) => _extends$1({
      width: 4,
      height: 4,
      backgroundColor: (theme.vars || theme).palette.primary.contrastText,
      borderRadius: "50%",
      position: "absolute",
      top: -21,
      left: `calc(50% - ${CLOCK_HOUR_WIDTH / 2}px)`,
      border: `${(CLOCK_HOUR_WIDTH - 4) / 2}px solid ${(theme.vars || theme).palette.primary.main}`,
      boxSizing: "content-box"
    }, ownerState.hasSelected && {
      backgroundColor: (theme.vars || theme).palette.primary.main
    }));
    function ClockPointer(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiClockPointer"
      });
      const {
        className,
        isInner,
        type,
        viewValue
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$r);
      const previousType = reactExports.useRef(type);
      reactExports.useEffect(() => {
        previousType.current = type;
      }, [type]);
      const ownerState = _extends$1({}, props, {
        shouldAnimate: previousType.current !== type
      });
      const classes = useUtilityClasses$k(ownerState);
      const getAngleStyle = () => {
        const max2 = type === "hours" ? 12 : 60;
        let angle = 360 / max2 * viewValue;
        if (type === "hours" && viewValue > 12) {
          angle -= 360;
        }
        return {
          height: Math.round((isInner ? 0.26 : 0.4) * CLOCK_WIDTH),
          transform: `rotateZ(${angle}deg)`
        };
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ClockPointerRoot, _extends$1({
        style: getAngleStyle(),
        className: clsx(className, classes.root),
        ownerState
      }, other, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ClockPointerThumb, {
          ownerState,
          className: classes.thumb
        })
      }));
    }
    function getClockUtilityClass(slot) {
      return generateUtilityClass("MuiClock", slot);
    }
    generateUtilityClasses("MuiClock", ["root", "clock", "wrapper", "squareMask", "pin", "amButton", "pmButton"]);
    const useUtilityClasses$j = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        clock: ["clock"],
        wrapper: ["wrapper"],
        squareMask: ["squareMask"],
        pin: ["pin"],
        amButton: ["amButton"],
        pmButton: ["pmButton"]
      };
      return composeClasses(slots, getClockUtilityClass, classes);
    };
    const ClockRoot = styled$1("div", {
      name: "MuiClock",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })(({
      theme
    }) => ({
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      margin: theme.spacing(2)
    }));
    const ClockClock = styled$1("div", {
      name: "MuiClock",
      slot: "Clock",
      overridesResolver: (_2, styles2) => styles2.clock
    })({
      backgroundColor: "rgba(0,0,0,.07)",
      borderRadius: "50%",
      height: 220,
      width: 220,
      flexShrink: 0,
      position: "relative",
      pointerEvents: "none"
    });
    const ClockWrapper = styled$1("div", {
      name: "MuiClock",
      slot: "Wrapper",
      overridesResolver: (_2, styles2) => styles2.wrapper
    })({
      "&:focus": {
        outline: "none"
      }
    });
    const ClockSquareMask = styled$1("div", {
      name: "MuiClock",
      slot: "SquareMask",
      overridesResolver: (_2, styles2) => styles2.squareMask
    })(({
      ownerState
    }) => _extends$1({
      width: "100%",
      height: "100%",
      position: "absolute",
      pointerEvents: "auto",
      outline: 0,
      // Disable scroll capabilities.
      touchAction: "none",
      userSelect: "none"
    }, ownerState.disabled ? {} : {
      "@media (pointer: fine)": {
        cursor: "pointer",
        borderRadius: "50%"
      },
      "&:active": {
        cursor: "move"
      }
    }));
    const ClockPin = styled$1("div", {
      name: "MuiClock",
      slot: "Pin",
      overridesResolver: (_2, styles2) => styles2.pin
    })(({
      theme
    }) => ({
      width: 6,
      height: 6,
      borderRadius: "50%",
      backgroundColor: (theme.vars || theme).palette.primary.main,
      position: "absolute",
      top: "50%",
      left: "50%",
      transform: "translate(-50%, -50%)"
    }));
    const ClockAmButton = styled$1(IconButton$1, {
      name: "MuiClock",
      slot: "AmButton",
      overridesResolver: (_2, styles2) => styles2.amButton
    })(({
      theme,
      ownerState
    }) => _extends$1({
      zIndex: 1,
      position: "absolute",
      bottom: 8,
      left: 8
    }, ownerState.meridiemMode === "am" && {
      backgroundColor: (theme.vars || theme).palette.primary.main,
      color: (theme.vars || theme).palette.primary.contrastText,
      "&:hover": {
        backgroundColor: (theme.vars || theme).palette.primary.light
      }
    }));
    const ClockPmButton = styled$1(IconButton$1, {
      name: "MuiClock",
      slot: "PmButton",
      overridesResolver: (_2, styles2) => styles2.pmButton
    })(({
      theme,
      ownerState
    }) => _extends$1({
      zIndex: 1,
      position: "absolute",
      bottom: 8,
      right: 8
    }, ownerState.meridiemMode === "pm" && {
      backgroundColor: (theme.vars || theme).palette.primary.main,
      color: (theme.vars || theme).palette.primary.contrastText,
      "&:hover": {
        backgroundColor: (theme.vars || theme).palette.primary.light
      }
    }));
    function Clock(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiClock"
      });
      const {
        ampm,
        ampmInClock,
        autoFocus,
        children,
        value: value2,
        handleMeridiemChange,
        isTimeDisabled,
        meridiemMode,
        minutesStep = 1,
        onChange,
        selectedId,
        type,
        viewValue,
        disabled,
        readOnly,
        className
      } = props;
      const ownerState = props;
      const utils2 = useUtils();
      const localeText = useLocaleText();
      const isMoving = reactExports.useRef(false);
      const classes = useUtilityClasses$j(ownerState);
      const isSelectedTimeDisabled = isTimeDisabled(viewValue, type);
      const isPointerInner = !ampm && type === "hours" && (viewValue < 1 || viewValue > 12);
      const handleValueChange = (newValue, isFinish) => {
        if (disabled || readOnly) {
          return;
        }
        if (isTimeDisabled(newValue, type)) {
          return;
        }
        onChange(newValue, isFinish);
      };
      const setTime = (event, isFinish) => {
        let {
          offsetX,
          offsetY
        } = event;
        if (offsetX === void 0) {
          const rect = event.target.getBoundingClientRect();
          offsetX = event.changedTouches[0].clientX - rect.left;
          offsetY = event.changedTouches[0].clientY - rect.top;
        }
        const newSelectedValue = type === "seconds" || type === "minutes" ? getMinutes(offsetX, offsetY, minutesStep) : getHours(offsetX, offsetY, Boolean(ampm));
        handleValueChange(newSelectedValue, isFinish);
      };
      const handleTouchMove = (event) => {
        isMoving.current = true;
        setTime(event, "shallow");
      };
      const handleTouchEnd = (event) => {
        if (isMoving.current) {
          setTime(event, "finish");
          isMoving.current = false;
        }
      };
      const handleMouseMove = (event) => {
        if (event.buttons > 0) {
          setTime(event.nativeEvent, "shallow");
        }
      };
      const handleMouseUp = (event) => {
        if (isMoving.current) {
          isMoving.current = false;
        }
        setTime(event.nativeEvent, "finish");
      };
      const hasSelected = reactExports.useMemo(() => {
        if (type === "hours") {
          return true;
        }
        return viewValue % 5 === 0;
      }, [type, viewValue]);
      const keyboardControlStep = type === "minutes" ? minutesStep : 1;
      const listboxRef = reactExports.useRef(null);
      useEnhancedEffect$3(() => {
        if (autoFocus) {
          listboxRef.current.focus();
        }
      }, [autoFocus]);
      const handleKeyDown2 = (event) => {
        if (isMoving.current) {
          return;
        }
        switch (event.key) {
          case "Home":
            handleValueChange(0, "partial");
            event.preventDefault();
            break;
          case "End":
            handleValueChange(type === "minutes" ? 59 : 23, "partial");
            event.preventDefault();
            break;
          case "ArrowUp":
            handleValueChange(viewValue + keyboardControlStep, "partial");
            event.preventDefault();
            break;
          case "ArrowDown":
            handleValueChange(viewValue - keyboardControlStep, "partial");
            event.preventDefault();
            break;
        }
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(ClockRoot, {
        className: clsx(className, classes.root),
        children: [/* @__PURE__ */ jsxRuntimeExports.jsxs(ClockClock, {
          className: classes.clock,
          children: [/* @__PURE__ */ jsxRuntimeExports.jsx(ClockSquareMask, {
            onTouchMove: handleTouchMove,
            onTouchEnd: handleTouchEnd,
            onMouseUp: handleMouseUp,
            onMouseMove: handleMouseMove,
            ownerState: {
              disabled
            },
            className: classes.squareMask
          }), !isSelectedTimeDisabled && /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
            children: [/* @__PURE__ */ jsxRuntimeExports.jsx(ClockPin, {
              className: classes.pin
            }), value2 != null && /* @__PURE__ */ jsxRuntimeExports.jsx(ClockPointer, {
              type,
              viewValue,
              isInner: isPointerInner,
              hasSelected
            })]
          }), /* @__PURE__ */ jsxRuntimeExports.jsx(ClockWrapper, {
            "aria-activedescendant": selectedId,
            "aria-label": localeText.clockLabelText(type, value2, utils2),
            ref: listboxRef,
            role: "listbox",
            onKeyDown: handleKeyDown2,
            tabIndex: 0,
            className: classes.wrapper,
            children
          })]
        }), ampm && ampmInClock && /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
          children: [/* @__PURE__ */ jsxRuntimeExports.jsx(ClockAmButton, {
            onClick: readOnly ? void 0 : () => handleMeridiemChange("am"),
            disabled: disabled || meridiemMode === null,
            ownerState,
            className: classes.amButton,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography$1, {
              variant: "caption",
              children: "AM"
            })
          }), /* @__PURE__ */ jsxRuntimeExports.jsx(ClockPmButton, {
            disabled: disabled || meridiemMode === null,
            onClick: readOnly ? void 0 : () => handleMeridiemChange("pm"),
            ownerState,
            className: classes.pmButton,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Typography$1, {
              variant: "caption",
              children: "PM"
            })
          })]
        })]
      });
    }
    function getClockNumberUtilityClass(slot) {
      return generateUtilityClass("MuiClockNumber", slot);
    }
    const clockNumberClasses = generateUtilityClasses("MuiClockNumber", ["root", "selected", "disabled"]);
    const _excluded$q = ["className", "disabled", "index", "inner", "label", "selected"];
    const useUtilityClasses$i = (ownerState) => {
      const {
        classes,
        selected,
        disabled
      } = ownerState;
      const slots = {
        root: ["root", selected && "selected", disabled && "disabled"]
      };
      return composeClasses(slots, getClockNumberUtilityClass, classes);
    };
    const ClockNumberRoot = styled$1("span", {
      name: "MuiClockNumber",
      slot: "Root",
      overridesResolver: (_2, styles2) => [styles2.root, {
        [`&.${clockNumberClasses.disabled}`]: styles2.disabled
      }, {
        [`&.${clockNumberClasses.selected}`]: styles2.selected
      }]
    })(({
      theme,
      ownerState
    }) => _extends$1({
      height: CLOCK_HOUR_WIDTH,
      width: CLOCK_HOUR_WIDTH,
      position: "absolute",
      left: `calc((100% - ${CLOCK_HOUR_WIDTH}px) / 2)`,
      display: "inline-flex",
      justifyContent: "center",
      alignItems: "center",
      borderRadius: "50%",
      color: (theme.vars || theme).palette.text.primary,
      fontFamily: theme.typography.fontFamily,
      "&:focused": {
        backgroundColor: (theme.vars || theme).palette.background.paper
      },
      [`&.${clockNumberClasses.selected}`]: {
        color: (theme.vars || theme).palette.primary.contrastText
      },
      [`&.${clockNumberClasses.disabled}`]: {
        pointerEvents: "none",
        color: (theme.vars || theme).palette.text.disabled
      }
    }, ownerState.inner && _extends$1({}, theme.typography.body2, {
      color: (theme.vars || theme).palette.text.secondary
    })));
    function ClockNumber(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiClockNumber"
      });
      const {
        className,
        disabled,
        index,
        inner,
        label,
        selected
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$q);
      const ownerState = props;
      const classes = useUtilityClasses$i(ownerState);
      const angle = index % 12 / 12 * Math.PI * 2 - Math.PI / 2;
      const length2 = (CLOCK_WIDTH - CLOCK_HOUR_WIDTH - 2) / 2 * (inner ? 0.65 : 1);
      const x2 = Math.round(Math.cos(angle) * length2);
      const y2 = Math.round(Math.sin(angle) * length2);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ClockNumberRoot, _extends$1({
        className: clsx(className, classes.root),
        "aria-disabled": disabled ? true : void 0,
        "aria-selected": selected ? true : void 0,
        role: "option",
        style: {
          transform: `translate(${x2}px, ${y2 + (CLOCK_WIDTH - CLOCK_HOUR_WIDTH) / 2}px`
        },
        ownerState
      }, other, {
        children: label
      }));
    }
    const getHourNumbers = ({
      ampm,
      value: value2,
      getClockNumberText,
      isDisabled,
      selectedId,
      utils: utils2
    }) => {
      const currentHours = value2 ? utils2.getHours(value2) : null;
      const hourNumbers = [];
      const startHour = ampm ? 1 : 0;
      const endHour = ampm ? 12 : 23;
      const isSelected = (hour) => {
        if (currentHours === null) {
          return false;
        }
        if (ampm) {
          if (hour === 12) {
            return currentHours === 12 || currentHours === 0;
          }
          return currentHours === hour || currentHours - 12 === hour;
        }
        return currentHours === hour;
      };
      for (let hour = startHour; hour <= endHour; hour += 1) {
        let label = hour.toString();
        if (hour === 0) {
          label = "00";
        }
        const inner = !ampm && (hour === 0 || hour > 12);
        label = utils2.formatNumber(label);
        const selected = isSelected(hour);
        hourNumbers.push(/* @__PURE__ */ jsxRuntimeExports.jsx(ClockNumber, {
          id: selected ? selectedId : void 0,
          index: hour,
          inner,
          selected,
          disabled: isDisabled(hour),
          label,
          "aria-label": getClockNumberText(label)
        }, hour));
      }
      return hourNumbers;
    };
    const getMinutesNumbers = ({
      utils: utils2,
      value: value2,
      isDisabled,
      getClockNumberText,
      selectedId
    }) => {
      const f2 = utils2.formatNumber;
      return [[5, f2("05")], [10, f2("10")], [15, f2("15")], [20, f2("20")], [25, f2("25")], [30, f2("30")], [35, f2("35")], [40, f2("40")], [45, f2("45")], [50, f2("50")], [55, f2("55")], [0, f2("00")]].map(([numberValue, label], index) => {
        const selected = numberValue === value2;
        return /* @__PURE__ */ jsxRuntimeExports.jsx(ClockNumber, {
          label,
          id: selected ? selectedId : void 0,
          index: index + 1,
          inner: false,
          disabled: isDisabled(numberValue),
          selected,
          "aria-label": getClockNumberText(label)
        }, numberValue);
      });
    };
    const _excluded$p = ["ampm", "ampmInClock", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "showViewSwitcher", "onChange", "defaultValue", "view", "views", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly"];
    const useUtilityClasses$h = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        arrowSwitcher: ["arrowSwitcher"]
      };
      return composeClasses(slots, getTimeClockUtilityClass, classes);
    };
    const TimeClockRoot = styled$1(PickerViewRoot, {
      name: "MuiTimeClock",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      display: "flex",
      flexDirection: "column",
      position: "relative"
    });
    const TimeClockArrowSwitcher = styled$1(PickersArrowSwitcher, {
      name: "MuiTimeClock",
      slot: "ArrowSwitcher",
      overridesResolver: (props, styles2) => styles2.arrowSwitcher
    })({
      position: "absolute",
      right: 12,
      top: 15
    });
    const TimeClock = /* @__PURE__ */ reactExports.forwardRef(function TimeClock2(inProps, ref) {
      const localeText = useLocaleText();
      const now2 = useNow();
      const utils2 = useUtils();
      const props = useThemeProps({
        props: inProps,
        name: "MuiTimeClock"
      });
      const {
        ampm = utils2.is12HourCycleInCurrentLocale(),
        ampmInClock = false,
        autoFocus,
        components,
        componentsProps,
        slots: innerSlots,
        slotProps: innerSlotProps,
        value: valueProp,
        disableIgnoringDatePartForTimeValidation = false,
        maxTime,
        minTime,
        disableFuture,
        disablePast,
        minutesStep = 1,
        shouldDisableClock,
        shouldDisableTime,
        showViewSwitcher,
        onChange,
        defaultValue: defaultValue2,
        view: inView,
        views = ["hours", "minutes"],
        openTo,
        onViewChange,
        focusedView,
        onFocusedViewChange,
        className,
        disabled,
        readOnly
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$p);
      const slots = innerSlots != null ? innerSlots : uncapitalizeObjectKeys(components);
      const slotProps = innerSlotProps != null ? innerSlotProps : componentsProps;
      const [value2, setValue2] = useControlled$2({
        name: "DateCalendar",
        state: "value",
        controlled: valueProp,
        default: defaultValue2 != null ? defaultValue2 : null
      });
      const handleValueChange = _default$a((newValue, selectionState) => {
        setValue2(newValue);
        onChange == null ? void 0 : onChange(newValue, selectionState);
      });
      const {
        view,
        setView,
        previousView,
        nextView,
        setValueAndGoToNextView
      } = useViews({
        view: inView,
        views,
        openTo,
        onViewChange,
        onChange: handleValueChange,
        focusedView,
        onFocusedViewChange
      });
      const selectedTimeOrMidnight = reactExports.useMemo(() => value2 || utils2.setSeconds(utils2.setMinutes(utils2.setHours(now2, 0), 0), 0), [value2, now2, utils2]);
      const {
        meridiemMode,
        handleMeridiemChange
      } = useMeridiemMode(selectedTimeOrMidnight, ampm, setValueAndGoToNextView);
      const isTimeDisabled = reactExports.useCallback((rawValue, viewType) => {
        const isAfter2 = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils2);
        const shouldCheckPastEnd = viewType === "hours" || viewType === "minutes" && views.includes("seconds");
        const containsValidTime = ({
          start: start2,
          end: end2
        }) => {
          if (minTime && isAfter2(minTime, end2)) {
            return false;
          }
          if (maxTime && isAfter2(start2, maxTime)) {
            return false;
          }
          if (disableFuture && isAfter2(start2, now2)) {
            return false;
          }
          if (disablePast && isAfter2(now2, shouldCheckPastEnd ? end2 : start2)) {
            return false;
          }
          return true;
        };
        const isValidValue = (timeValue, step = 1) => {
          if (timeValue % step !== 0) {
            return false;
          }
          if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {
            return false;
          }
          if (shouldDisableTime) {
            switch (viewType) {
              case "hours":
                return !shouldDisableTime(utils2.setHours(selectedTimeOrMidnight, timeValue), "hours");
              case "minutes":
                return !shouldDisableTime(utils2.setMinutes(selectedTimeOrMidnight, timeValue), "minutes");
              case "seconds":
                return !shouldDisableTime(utils2.setSeconds(selectedTimeOrMidnight, timeValue), "seconds");
              default:
                return false;
            }
          }
          return true;
        };
        switch (viewType) {
          case "hours": {
            const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);
            const dateWithNewHours = utils2.setHours(selectedTimeOrMidnight, valueWithMeridiem);
            const start2 = utils2.setSeconds(utils2.setMinutes(dateWithNewHours, 0), 0);
            const end2 = utils2.setSeconds(utils2.setMinutes(dateWithNewHours, 59), 59);
            return !containsValidTime({
              start: start2,
              end: end2
            }) || !isValidValue(valueWithMeridiem);
          }
          case "minutes": {
            const dateWithNewMinutes = utils2.setMinutes(selectedTimeOrMidnight, rawValue);
            const start2 = utils2.setSeconds(dateWithNewMinutes, 0);
            const end2 = utils2.setSeconds(dateWithNewMinutes, 59);
            return !containsValidTime({
              start: start2,
              end: end2
            }) || !isValidValue(rawValue, minutesStep);
          }
          case "seconds": {
            const dateWithNewSeconds = utils2.setSeconds(selectedTimeOrMidnight, rawValue);
            const start2 = dateWithNewSeconds;
            const end2 = dateWithNewSeconds;
            return !containsValidTime({
              start: start2,
              end: end2
            }) || !isValidValue(rawValue);
          }
          default:
            throw new Error("not supported");
        }
      }, [ampm, selectedTimeOrMidnight, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils2, disableFuture, disablePast, now2, views]);
      const selectedId = useId$2();
      const viewProps = reactExports.useMemo(() => {
        switch (view) {
          case "hours": {
            const handleHoursChange = (hourValue, isFinish) => {
              const valueWithMeridiem = convertValueToMeridiem(hourValue, meridiemMode, ampm);
              setValueAndGoToNextView(utils2.setHours(selectedTimeOrMidnight, valueWithMeridiem), isFinish);
            };
            return {
              onChange: handleHoursChange,
              viewValue: utils2.getHours(selectedTimeOrMidnight),
              children: getHourNumbers({
                value: value2,
                utils: utils2,
                ampm,
                onChange: handleHoursChange,
                getClockNumberText: localeText.hoursClockNumberText,
                isDisabled: (hourValue) => disabled || isTimeDisabled(hourValue, "hours"),
                selectedId
              })
            };
          }
          case "minutes": {
            const minutesValue = utils2.getMinutes(selectedTimeOrMidnight);
            const handleMinutesChange = (minuteValue, isFinish) => {
              setValueAndGoToNextView(utils2.setMinutes(selectedTimeOrMidnight, minuteValue), isFinish);
            };
            return {
              viewValue: minutesValue,
              onChange: handleMinutesChange,
              children: getMinutesNumbers({
                utils: utils2,
                value: minutesValue,
                onChange: handleMinutesChange,
                getClockNumberText: localeText.minutesClockNumberText,
                isDisabled: (minuteValue) => disabled || isTimeDisabled(minuteValue, "minutes"),
                selectedId
              })
            };
          }
          case "seconds": {
            const secondsValue = utils2.getSeconds(selectedTimeOrMidnight);
            const handleSecondsChange = (secondValue, isFinish) => {
              setValueAndGoToNextView(utils2.setSeconds(selectedTimeOrMidnight, secondValue), isFinish);
            };
            return {
              viewValue: secondsValue,
              onChange: handleSecondsChange,
              children: getMinutesNumbers({
                utils: utils2,
                value: secondsValue,
                onChange: handleSecondsChange,
                getClockNumberText: localeText.secondsClockNumberText,
                isDisabled: (secondValue) => disabled || isTimeDisabled(secondValue, "seconds"),
                selectedId
              })
            };
          }
          default:
            throw new Error("You must provide the type for ClockView");
        }
      }, [view, utils2, value2, ampm, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, selectedTimeOrMidnight, isTimeDisabled, selectedId, disabled]);
      const ownerState = props;
      const classes = useUtilityClasses$h(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(TimeClockRoot, _extends$1({
        ref,
        className: clsx(classes.root, className),
        ownerState
      }, other, {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Clock, _extends$1({
          autoFocus: autoFocus != null ? autoFocus : !!focusedView,
          ampmInClock: ampmInClock && views.includes("hours"),
          value: value2,
          type: view,
          ampm,
          minutesStep,
          isTimeDisabled,
          meridiemMode,
          handleMeridiemChange,
          selectedId,
          disabled,
          readOnly
        }, viewProps)), showViewSwitcher && /* @__PURE__ */ jsxRuntimeExports.jsx(TimeClockArrowSwitcher, {
          className: classes.arrowSwitcher,
          slots,
          slotProps,
          onGoToPrevious: () => setView(previousView),
          isPreviousDisabled: !previousView,
          previousLabel: localeText.openPreviousView,
          onGoToNext: () => setView(nextView),
          isNextDisabled: !nextView,
          nextLabel: localeText.openNextView,
          ownerState
        })]
      }));
    });
    const dividerClasses = generateUtilityClasses("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]);
    const dividerClasses$1 = dividerClasses;
    function getListItemIconUtilityClass(slot) {
      return generateUtilityClass("MuiListItemIcon", slot);
    }
    const listItemIconClasses = generateUtilityClasses("MuiListItemIcon", ["root", "alignItemsFlexStart"]);
    const listItemIconClasses$1 = listItemIconClasses;
    const _excluded$o = ["className"];
    const useUtilityClasses$g = (ownerState) => {
      const {
        alignItems,
        classes
      } = ownerState;
      const slots = {
        root: ["root", alignItems === "flex-start" && "alignItemsFlexStart"]
      };
      return composeClasses(slots, getListItemIconUtilityClass, classes);
    };
    const ListItemIconRoot = styled$1("div", {
      name: "MuiListItemIcon",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.alignItems === "flex-start" && styles2.alignItemsFlexStart];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      minWidth: 56,
      color: (theme.vars || theme).palette.action.active,
      flexShrink: 0,
      display: "inline-flex"
    }, ownerState.alignItems === "flex-start" && {
      marginTop: 8
    }));
    const ListItemIcon = /* @__PURE__ */ reactExports.forwardRef(function ListItemIcon2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiListItemIcon"
      });
      const {
        className
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$o);
      const context2 = reactExports.useContext(ListContext$1);
      const ownerState = _extends$1({}, props, {
        alignItems: context2.alignItems
      });
      const classes = useUtilityClasses$g(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemIconRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref
      }, other));
    });
    const ListItemIcon$1 = ListItemIcon;
    function getListItemTextUtilityClass(slot) {
      return generateUtilityClass("MuiListItemText", slot);
    }
    const listItemTextClasses = generateUtilityClasses("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]);
    const listItemTextClasses$1 = listItemTextClasses;
    const _excluded$n = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];
    const useUtilityClasses$f = (ownerState) => {
      const {
        classes,
        inset,
        primary,
        secondary,
        dense
      } = ownerState;
      const slots = {
        root: ["root", inset && "inset", dense && "dense", primary && secondary && "multiline"],
        primary: ["primary"],
        secondary: ["secondary"]
      };
      return composeClasses(slots, getListItemTextUtilityClass, classes);
    };
    const ListItemTextRoot = styled$1("div", {
      name: "MuiListItemText",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${listItemTextClasses$1.primary}`]: styles2.primary
        }, {
          [`& .${listItemTextClasses$1.secondary}`]: styles2.secondary
        }, styles2.root, ownerState.inset && styles2.inset, ownerState.primary && ownerState.secondary && styles2.multiline, ownerState.dense && styles2.dense];
      }
    })(({
      ownerState
    }) => _extends$1({
      flex: "1 1 auto",
      minWidth: 0,
      marginTop: 4,
      marginBottom: 4
    }, ownerState.primary && ownerState.secondary && {
      marginTop: 6,
      marginBottom: 6
    }, ownerState.inset && {
      paddingLeft: 56
    }));
    const ListItemText = /* @__PURE__ */ reactExports.forwardRef(function ListItemText2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiListItemText"
      });
      const {
        children,
        className,
        disableTypography = false,
        inset = false,
        primary: primaryProp,
        primaryTypographyProps,
        secondary: secondaryProp,
        secondaryTypographyProps
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$n);
      const {
        dense
      } = reactExports.useContext(ListContext$1);
      let primary = primaryProp != null ? primaryProp : children;
      let secondary = secondaryProp;
      const ownerState = _extends$1({}, props, {
        disableTypography,
        inset,
        primary: !!primary,
        secondary: !!secondary,
        dense
      });
      const classes = useUtilityClasses$f(ownerState);
      if (primary != null && primary.type !== Typography$1 && !disableTypography) {
        primary = /* @__PURE__ */ jsxRuntimeExports.jsx(Typography$1, _extends$1({
          variant: dense ? "body2" : "body1",
          className: classes.primary,
          component: primaryTypographyProps != null && primaryTypographyProps.variant ? void 0 : "span",
          display: "block"
        }, primaryTypographyProps, {
          children: primary
        }));
      }
      if (secondary != null && secondary.type !== Typography$1 && !disableTypography) {
        secondary = /* @__PURE__ */ jsxRuntimeExports.jsx(Typography$1, _extends$1({
          variant: "body2",
          className: classes.secondary,
          color: "text.secondary",
          display: "block"
        }, secondaryTypographyProps, {
          children: secondary
        }));
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(ListItemTextRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref
      }, other, {
        children: [primary, secondary]
      }));
    });
    const ListItemText$1 = ListItemText;
    function getMenuItemUtilityClass(slot) {
      return generateUtilityClass("MuiMenuItem", slot);
    }
    const menuItemClasses = generateUtilityClasses("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]);
    const menuItemClasses$1 = menuItemClasses;
    const _excluded$m = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"];
    const overridesResolver$1 = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.dense && styles2.dense, ownerState.divider && styles2.divider, !ownerState.disableGutters && styles2.gutters];
    };
    const useUtilityClasses$e = (ownerState) => {
      const {
        disabled,
        dense,
        divider,
        disableGutters,
        selected,
        classes
      } = ownerState;
      const slots = {
        root: ["root", dense && "dense", disabled && "disabled", !disableGutters && "gutters", divider && "divider", selected && "selected"]
      };
      const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const MenuItemRoot = styled$1(ButtonBase$1, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiMenuItem",
      slot: "Root",
      overridesResolver: overridesResolver$1
    })(({
      theme,
      ownerState
    }) => _extends$1({}, theme.typography.body1, {
      display: "flex",
      justifyContent: "flex-start",
      alignItems: "center",
      position: "relative",
      textDecoration: "none",
      minHeight: 48,
      paddingTop: 6,
      paddingBottom: 6,
      boxSizing: "border-box",
      whiteSpace: "nowrap"
    }, !ownerState.disableGutters && {
      paddingLeft: 16,
      paddingRight: 16
    }, ownerState.divider && {
      borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
      backgroundClip: "padding-box"
    }, {
      "&:hover": {
        textDecoration: "none",
        backgroundColor: (theme.vars || theme).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${menuItemClasses$1.selected}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${menuItemClasses$1.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      },
      [`&.${menuItemClasses$1.selected}:hover`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
        }
      },
      [`&.${menuItemClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`&.${menuItemClasses$1.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      },
      [`& + .${dividerClasses$1.root}`]: {
        marginTop: theme.spacing(1),
        marginBottom: theme.spacing(1)
      },
      [`& + .${dividerClasses$1.inset}`]: {
        marginLeft: 52
      },
      [`& .${listItemTextClasses$1.root}`]: {
        marginTop: 0,
        marginBottom: 0
      },
      [`& .${listItemTextClasses$1.inset}`]: {
        paddingLeft: 36
      },
      [`& .${listItemIconClasses$1.root}`]: {
        minWidth: 36
      }
    }, !ownerState.dense && {
      [theme.breakpoints.up("sm")]: {
        minHeight: "auto"
      }
    }, ownerState.dense && _extends$1({
      minHeight: 32,
      // https://m2.material.io/components/menus#specs > Dense
      paddingTop: 4,
      paddingBottom: 4
    }, theme.typography.body2, {
      [`& .${listItemIconClasses$1.root} svg`]: {
        fontSize: "1.25rem"
      }
    })));
    const MenuItem = /* @__PURE__ */ reactExports.forwardRef(function MenuItem2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiMenuItem"
      });
      const {
        autoFocus = false,
        component = "li",
        dense = false,
        divider = false,
        disableGutters = false,
        focusVisibleClassName,
        role = "menuitem",
        tabIndex: tabIndexProp,
        className
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$m);
      const context2 = reactExports.useContext(ListContext$1);
      const childContext = reactExports.useMemo(() => ({
        dense: dense || context2.dense || false,
        disableGutters
      }), [context2.dense, dense, disableGutters]);
      const menuItemRef = reactExports.useRef(null);
      useEnhancedEffect$3(() => {
        if (autoFocus) {
          if (menuItemRef.current) {
            menuItemRef.current.focus();
          }
        }
      }, [autoFocus]);
      const ownerState = _extends$1({}, props, {
        dense: childContext.dense,
        divider,
        disableGutters
      });
      const classes = useUtilityClasses$e(props);
      const handleRef = useForkRef$2(menuItemRef, ref);
      let tabIndex;
      if (!props.disabled) {
        tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext$1.Provider, {
        value: childContext,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItemRoot, _extends$1({
          ref: handleRef,
          role,
          tabIndex,
          component,
          focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
          className: clsx(classes.root, className)
        }, other, {
          ownerState,
          classes
        }))
      });
    });
    const MenuItem$1 = MenuItem;
    function getDigitalClockUtilityClass(slot) {
      return generateUtilityClass("MuiDigitalClock", slot);
    }
    generateUtilityClasses("MuiDigitalClock", ["root", "list", "item"]);
    const _excluded$l = ["ampm", "timeStep", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "onChange", "defaultValue", "view", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "views", "skipDisabled"];
    const useUtilityClasses$d = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        list: ["list"],
        item: ["item"]
      };
      return composeClasses(slots, getDigitalClockUtilityClass, classes);
    };
    const DigitalClockRoot = styled$1(PickerViewRoot, {
      name: "MuiDigitalClock",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })(({
      ownerState
    }) => ({
      overflowY: "auto",
      width: "100%",
      scrollBehavior: ownerState.alreadyRendered ? "smooth" : "auto",
      maxHeight: DIGITAL_CLOCK_VIEW_HEIGHT
    }));
    const DigitalClockList = styled$1(MenuList$1, {
      name: "MuiDigitalClock",
      slot: "List",
      overridesResolver: (props, styles2) => styles2.list
    })({
      padding: 0
    });
    const DigitalClockItem = styled$1(MenuItem$1, {
      name: "MuiDigitalClock",
      slot: "Item",
      overridesResolver: (props, styles2) => styles2.item
    })(({
      theme
    }) => ({
      padding: "8px 16px",
      margin: "2px 4px",
      "&:first-of-type": {
        marginTop: 4
      },
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
      },
      "&.Mui-selected": {
        backgroundColor: (theme.vars || theme).palette.primary.main,
        color: (theme.vars || theme).palette.primary.contrastText,
        "&:focus-visible, &:hover": {
          backgroundColor: (theme.vars || theme).palette.primary.dark
        }
      },
      "&.Mui-focusVisible": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.focusOpacity)
      }
    }));
    const DigitalClock = /* @__PURE__ */ reactExports.forwardRef(function DigitalClock2(inProps, ref) {
      var _ref, _slots$digitalClockIt, _slotProps$digitalClo;
      const now2 = useNow();
      const utils2 = useUtils();
      const containerRef = reactExports.useRef(null);
      const handleRef = _default$9(ref, containerRef);
      const localeText = useLocaleText();
      const props = useThemeProps({
        props: inProps,
        name: "MuiDigitalClock"
      });
      const {
        ampm = utils2.is12HourCycleInCurrentLocale(),
        timeStep = 30,
        autoFocus,
        components,
        componentsProps,
        slots,
        slotProps,
        value: valueProp,
        disableIgnoringDatePartForTimeValidation = false,
        maxTime,
        minTime,
        disableFuture,
        disablePast,
        minutesStep = 1,
        shouldDisableClock,
        shouldDisableTime,
        onChange,
        defaultValue: defaultValue2,
        view: inView,
        openTo,
        onViewChange,
        focusedView,
        onFocusedViewChange,
        className,
        disabled,
        readOnly,
        views = ["hours"],
        skipDisabled = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$l);
      const ownerState = reactExports.useMemo(() => _extends$1({}, props, {
        alreadyRendered: !!containerRef.current
      }), [props]);
      const classes = useUtilityClasses$d(ownerState);
      const ClockItem = (_ref = (_slots$digitalClockIt = slots == null ? void 0 : slots.digitalClockItem) != null ? _slots$digitalClockIt : components == null ? void 0 : components.DigitalClockItem) != null ? _ref : DigitalClockItem;
      const clockItemProps = (_slotProps$digitalClo = slotProps == null ? void 0 : slotProps.digitalClockItem) != null ? _slotProps$digitalClo : componentsProps == null ? void 0 : componentsProps.digitalClockItem;
      const [value2, setValue2] = _default$8({
        name: "DigitalClock",
        state: "value",
        controlled: valueProp,
        default: defaultValue2 != null ? defaultValue2 : null
      });
      const handleValueChange = _default$a((newValue) => {
        setValue2(newValue);
        onChange == null ? void 0 : onChange(newValue, "finish");
      });
      const {
        setValueAndGoToNextView
      } = useViews({
        view: inView,
        views,
        openTo,
        onViewChange,
        onChange: handleValueChange,
        focusedView,
        onFocusedViewChange
      });
      const handleItemSelect = _default$a((newValue) => {
        setValueAndGoToNextView(newValue, "finish");
      });
      reactExports.useEffect(() => {
        if (containerRef.current === null) {
          return;
        }
        const selectedItem = containerRef.current.querySelector('[role="listbox"] [role="option"][aria-selected="true"]');
        if (!selectedItem) {
          return;
        }
        const offsetTop = selectedItem.offsetTop;
        containerRef.current.scrollTop = offsetTop - 4;
      });
      const selectedTimeOrMidnight = reactExports.useMemo(() => value2 || utils2.setSeconds(utils2.setMinutes(utils2.setHours(now2, 0), 0), 0), [value2, now2, utils2]);
      const isTimeDisabled = reactExports.useCallback((valueToCheck) => {
        const isAfter2 = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils2);
        const containsValidTime = () => {
          if (minTime && isAfter2(minTime, valueToCheck)) {
            return false;
          }
          if (maxTime && isAfter2(valueToCheck, maxTime)) {
            return false;
          }
          if (disableFuture && isAfter2(valueToCheck, now2)) {
            return false;
          }
          if (disablePast && isAfter2(now2, valueToCheck)) {
            return false;
          }
          return true;
        };
        const isValidValue = () => {
          if (utils2.getMinutes(valueToCheck) % minutesStep !== 0) {
            return false;
          }
          if (shouldDisableClock != null && shouldDisableClock(utils2.toJsDate(valueToCheck).getTime(), "hours")) {
            return false;
          }
          if (shouldDisableTime) {
            return !shouldDisableTime(valueToCheck, "hours");
          }
          return true;
        };
        return !containsValidTime() || !isValidValue();
      }, [disableIgnoringDatePartForTimeValidation, utils2, minTime, maxTime, disableFuture, now2, disablePast, minutesStep, shouldDisableClock, shouldDisableTime]);
      const timeOptions = reactExports.useMemo(() => {
        const startOfDay = utils2.startOfDay(selectedTimeOrMidnight);
        return [startOfDay, ...Array.from({
          length: Math.ceil(24 * 60 / timeStep) - 1
        }, (_2, index) => utils2.addMinutes(startOfDay, timeStep * (index + 1))), utils2.endOfDay(selectedTimeOrMidnight)];
      }, [selectedTimeOrMidnight, timeStep, utils2]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(DigitalClockRoot, _extends$1({
        ref: handleRef,
        className: clsx(classes.root, className),
        ownerState
      }, other, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(DigitalClockList, {
          autoFocusItem: autoFocus || !!focusedView,
          role: "listbox",
          "aria-label": localeText.timePickerToolbarTitle,
          children: timeOptions.map((option) => {
            if (skipDisabled && isTimeDisabled(option)) {
              return null;
            }
            const isSelected = utils2.isEqual(option, value2);
            return /* @__PURE__ */ jsxRuntimeExports.jsx(ClockItem, _extends$1({
              onClick: () => !readOnly && handleItemSelect(option),
              selected: isSelected,
              disabled: disabled || isTimeDisabled(option),
              disableRipple: readOnly,
              role: "option",
              "aria-disabled": readOnly,
              "aria-selected": isSelected
            }, clockItemProps, {
              children: utils2.format(option, ampm ? "fullTime12h" : "fullTime24h")
            }), utils2.toISO(option));
          })
        })
      }));
    });
    function getMultiSectionDigitalClockUtilityClass(slot) {
      return generateUtilityClass("MuiMultiSectionDigitalClock", slot);
    }
    generateUtilityClasses("MuiMultiSectionDigitalClock", ["root"]);
    function getMultiSectionDigitalClockSectionUtilityClass(slot) {
      return generateUtilityClass("MuiMultiSectionDigitalClock", slot);
    }
    generateUtilityClasses("MuiMultiSectionDigitalClock", ["root", "item"]);
    const _excluded$k = ["autoFocus", "onChange", "className", "disabled", "readOnly", "items", "active", "slots", "slotProps", "skipDisabled"];
    const useUtilityClasses$c = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        item: ["item"]
      };
      return composeClasses(slots, getMultiSectionDigitalClockSectionUtilityClass, classes);
    };
    const MultiSectionDigitalClockSectionRoot = styled$1(MenuList$1, {
      name: "MuiMultiSectionDigitalClockSection",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })(({
      theme,
      ownerState
    }) => ({
      maxHeight: DIGITAL_CLOCK_VIEW_HEIGHT,
      width: 56,
      padding: 0,
      overflow: "hidden",
      scrollBehavior: ownerState.alreadyRendered ? "smooth" : "auto",
      "&:hover": {
        overflowY: "auto"
      },
      "&:not(:first-of-type)": {
        borderLeft: `1px solid ${(theme.vars || theme).palette.divider}`
      },
      "&:after": {
        display: "block",
        content: '""',
        height: 188
      }
    }));
    const MultiSectionDigitalClockSectionItem = styled$1(MenuItem$1, {
      name: "MuiMultiSectionDigitalClockSection",
      slot: "Item",
      overridesResolver: (_2, styles2) => styles2.item
    })(({
      theme
    }) => ({
      padding: 8,
      margin: "2px 4px",
      width: 48,
      justifyContent: "center",
      "&:first-of-type": {
        marginTop: 4
      },
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
      },
      "&.Mui-selected": {
        backgroundColor: (theme.vars || theme).palette.primary.main,
        color: (theme.vars || theme).palette.primary.contrastText,
        "&:focus-visible, &:hover": {
          backgroundColor: (theme.vars || theme).palette.primary.dark
        }
      },
      "&.Mui-focusVisible": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.focusOpacity)
      }
    }));
    const MultiSectionDigitalClockSection = /* @__PURE__ */ reactExports.forwardRef(function MultiSectionDigitalClockSection2(inProps, ref) {
      var _slots$digitalClockSe;
      const containerRef = reactExports.useRef(null);
      const handleRef = _default$9(ref, containerRef);
      const props = useThemeProps({
        props: inProps,
        name: "MuiMultiSectionDigitalClockSection"
      });
      const {
        autoFocus,
        onChange,
        className,
        disabled,
        readOnly,
        items,
        active,
        slots,
        slotProps,
        skipDisabled
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$k);
      const ownerState = reactExports.useMemo(() => _extends$1({}, props, {
        alreadyRendered: !!containerRef.current
      }), [props]);
      const classes = useUtilityClasses$c(ownerState);
      const DigitalClockSectionItem = (_slots$digitalClockSe = slots == null ? void 0 : slots.digitalClockSectionItem) != null ? _slots$digitalClockSe : MultiSectionDigitalClockSectionItem;
      reactExports.useEffect(() => {
        if (containerRef.current === null) {
          return;
        }
        const selectedItem = containerRef.current.querySelector('[role="option"][aria-selected="true"]');
        if (!selectedItem) {
          return;
        }
        if (active && autoFocus) {
          selectedItem.focus();
        }
        const offsetTop = selectedItem.offsetTop;
        containerRef.current.scrollTop = offsetTop - 4;
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(MultiSectionDigitalClockSectionRoot, _extends$1({
        ref: handleRef,
        className: clsx(classes.root, className),
        ownerState,
        autoFocusItem: autoFocus && active,
        role: "listbox"
      }, other, {
        children: items.map((option) => {
          var _option$isDisabled, _option$isDisabled2;
          if (skipDisabled && (_option$isDisabled = option.isDisabled) != null && _option$isDisabled.call(option, option.value)) {
            return null;
          }
          const isSelected = option.isSelected(option.value);
          return /* @__PURE__ */ jsxRuntimeExports.jsx(DigitalClockSectionItem, _extends$1({
            onClick: () => !readOnly && onChange(option.value),
            selected: isSelected,
            disabled: disabled != null ? disabled : (_option$isDisabled2 = option.isDisabled) == null ? void 0 : _option$isDisabled2.call(option, option.value),
            disableRipple: readOnly,
            role: "option",
            "aria-disabled": readOnly,
            "aria-label": option.ariaLabel,
            "aria-selected": isSelected
          }, slotProps == null ? void 0 : slotProps.digitalClockSectionItem, {
            children: option.label
          }), option.label);
        })
      }));
    });
    const getHourSectionOptions = ({
      now: now2,
      value: value2,
      utils: utils2,
      ampm,
      isDisabled,
      resolveAriaLabel,
      timeStep
    }) => {
      const currentHours = value2 ? utils2.getHours(value2) : null;
      const result = [];
      const isSelected = (hour) => {
        if (currentHours === null) {
          return false;
        }
        if (ampm) {
          if (hour === 12) {
            return currentHours === 12 || currentHours === 0;
          }
          return currentHours === hour || currentHours - 12 === hour;
        }
        return currentHours === hour;
      };
      const endHour = ampm ? 11 : 23;
      for (let hour = 0; hour <= endHour; hour += timeStep) {
        let label = utils2.format(utils2.setHours(now2, hour), ampm ? "hours12h" : "hours24h");
        const ariaLabel = resolveAriaLabel(parseInt(label, 10).toString());
        label = utils2.formatNumber(label);
        result.push({
          value: hour,
          label,
          isSelected,
          isDisabled,
          ariaLabel
        });
      }
      return result;
    };
    const getTimeSectionOptions = ({
      value: value2,
      isDisabled,
      timeStep,
      resolveLabel,
      resolveAriaLabel,
      hasValue: hasValue2 = true
    }) => {
      const isSelected = (timeValue) => {
        if (value2 === null) {
          return false;
        }
        return hasValue2 && value2 === timeValue;
      };
      return [...Array.from({
        length: Math.ceil(60 / timeStep)
      }, (_2, index) => {
        const timeValue = timeStep * index;
        return {
          value: timeValue,
          label: resolveLabel(timeValue),
          isDisabled,
          isSelected,
          ariaLabel: resolveAriaLabel(timeValue.toString())
        };
      })];
    };
    const _excluded$j = ["ampm", "timeSteps", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "onChange", "defaultValue", "view", "views", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "skipDisabled"];
    const useUtilityClasses$b = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getMultiSectionDigitalClockUtilityClass, classes);
    };
    const MultiSectionDigitalClockRoot = styled$1(PickerViewRoot, {
      name: "MuiMultiSectionDigitalClock",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })(({
      theme
    }) => ({
      display: "flex",
      flexDirection: "row",
      width: "100%",
      borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
    }));
    const MultiSectionDigitalClock = /* @__PURE__ */ reactExports.forwardRef(function MultiSectionDigitalClock2(inProps, ref) {
      const now2 = useNow();
      const utils2 = useUtils();
      const localeText = useLocaleText();
      const props = useThemeProps({
        props: inProps,
        name: "MuiMultiSectionDigitalClock"
      });
      const {
        ampm = utils2.is12HourCycleInCurrentLocale(),
        timeSteps: inTimeSteps,
        autoFocus,
        components,
        componentsProps,
        slots,
        slotProps,
        value: valueProp,
        disableIgnoringDatePartForTimeValidation = false,
        maxTime,
        minTime,
        disableFuture,
        disablePast,
        minutesStep = 1,
        shouldDisableClock,
        shouldDisableTime,
        onChange,
        defaultValue: defaultValue2,
        view: inView,
        views: inViews = ["hours", "minutes"],
        openTo,
        onViewChange,
        focusedView: inFocusedView,
        onFocusedViewChange,
        className,
        disabled,
        readOnly,
        skipDisabled = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$j);
      const timeSteps = reactExports.useMemo(() => _extends$1({
        hours: 1,
        minutes: 5,
        seconds: 5
      }, inTimeSteps), [inTimeSteps]);
      const [value2, setValue2] = _default$8({
        name: "MultiSectionDigitalClock",
        state: "value",
        controlled: valueProp,
        default: defaultValue2 != null ? defaultValue2 : null
      });
      const handleValueChange = _default$a((newValue, selectionState, selectedView) => {
        setValue2(newValue);
        onChange == null ? void 0 : onChange(newValue, selectionState, selectedView);
      });
      const views = reactExports.useMemo(() => {
        if (!ampm || !inViews.includes("hours")) {
          return inViews;
        }
        return inViews.includes("meridiem") ? inViews : [...inViews, "meridiem"];
      }, [ampm, inViews]);
      const {
        view,
        setValueAndGoToView,
        focusedView
      } = useViews({
        view: inView,
        views,
        openTo,
        onViewChange,
        onChange: handleValueChange,
        focusedView: inFocusedView,
        onFocusedViewChange
      });
      const selectedTimeOrMidnight = reactExports.useMemo(() => value2 || utils2.setSeconds(utils2.setMinutes(utils2.setHours(now2, 0), 0), 0), [value2, now2, utils2]);
      const handleMeridiemValueChange = _default$a((newValue) => {
        setValueAndGoToView(newValue, null, "meridiem");
      });
      const {
        meridiemMode,
        handleMeridiemChange
      } = useMeridiemMode(selectedTimeOrMidnight, ampm, handleMeridiemValueChange, "finish");
      const isTimeDisabled = reactExports.useCallback((rawValue, viewType) => {
        const isAfter2 = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils2);
        const shouldCheckPastEnd = viewType === "hours" || viewType === "minutes" && views.includes("seconds");
        const containsValidTime = ({
          start: start2,
          end: end2
        }) => {
          if (minTime && isAfter2(minTime, end2)) {
            return false;
          }
          if (maxTime && isAfter2(start2, maxTime)) {
            return false;
          }
          if (disableFuture && isAfter2(start2, now2)) {
            return false;
          }
          if (disablePast && isAfter2(now2, shouldCheckPastEnd ? end2 : start2)) {
            return false;
          }
          return true;
        };
        const isValidValue = (timeValue, step = 1) => {
          if (timeValue % step !== 0) {
            return false;
          }
          if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {
            return false;
          }
          if (shouldDisableTime) {
            switch (viewType) {
              case "hours":
                return !shouldDisableTime(utils2.setHours(selectedTimeOrMidnight, timeValue), "hours");
              case "minutes":
                return !shouldDisableTime(utils2.setMinutes(selectedTimeOrMidnight, timeValue), "minutes");
              case "seconds":
                return !shouldDisableTime(utils2.setSeconds(selectedTimeOrMidnight, timeValue), "seconds");
              default:
                return false;
            }
          }
          return true;
        };
        switch (viewType) {
          case "hours": {
            const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);
            const dateWithNewHours = utils2.setHours(selectedTimeOrMidnight, valueWithMeridiem);
            const start2 = utils2.setSeconds(utils2.setMinutes(dateWithNewHours, 0), 0);
            const end2 = utils2.setSeconds(utils2.setMinutes(dateWithNewHours, 59), 59);
            return !containsValidTime({
              start: start2,
              end: end2
            }) || !isValidValue(valueWithMeridiem);
          }
          case "minutes": {
            const dateWithNewMinutes = utils2.setMinutes(selectedTimeOrMidnight, rawValue);
            const start2 = utils2.setSeconds(dateWithNewMinutes, 0);
            const end2 = utils2.setSeconds(dateWithNewMinutes, 59);
            return !containsValidTime({
              start: start2,
              end: end2
            }) || !isValidValue(rawValue, minutesStep);
          }
          case "seconds": {
            const dateWithNewSeconds = utils2.setSeconds(selectedTimeOrMidnight, rawValue);
            const start2 = dateWithNewSeconds;
            const end2 = dateWithNewSeconds;
            return !containsValidTime({
              start: start2,
              end: end2
            }) || !isValidValue(rawValue);
          }
          default:
            throw new Error("not supported");
        }
      }, [ampm, selectedTimeOrMidnight, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils2, disableFuture, disablePast, now2, views]);
      const handleSectionChange = _default$a((sectionView, newValue) => {
        const viewIndex = views.indexOf(sectionView);
        const nextView = views[viewIndex + 1];
        setValueAndGoToView(newValue, nextView, sectionView);
      });
      const buildViewProps = reactExports.useCallback((viewToBuild) => {
        switch (viewToBuild) {
          case "hours": {
            return {
              onChange: (hours2) => {
                const valueWithMeridiem = convertValueToMeridiem(hours2, meridiemMode, ampm);
                handleSectionChange("hours", utils2.setHours(selectedTimeOrMidnight, valueWithMeridiem));
              },
              items: getHourSectionOptions({
                now: now2,
                value: value2,
                ampm,
                utils: utils2,
                isDisabled: (hours2) => disabled || isTimeDisabled(hours2, "hours"),
                timeStep: timeSteps.hours,
                resolveAriaLabel: localeText.hoursClockNumberText
              })
            };
          }
          case "minutes": {
            return {
              onChange: (minutes2) => {
                handleSectionChange("minutes", utils2.setMinutes(selectedTimeOrMidnight, minutes2));
              },
              items: getTimeSectionOptions({
                value: utils2.getMinutes(selectedTimeOrMidnight),
                isDisabled: (minutes2) => disabled || isTimeDisabled(minutes2, "minutes"),
                resolveLabel: (minutes2) => utils2.format(utils2.setMinutes(now2, minutes2), "minutes"),
                timeStep: timeSteps.minutes,
                hasValue: !!value2,
                resolveAriaLabel: localeText.minutesClockNumberText
              })
            };
          }
          case "seconds": {
            return {
              onChange: (seconds2) => {
                handleSectionChange("seconds", utils2.setSeconds(selectedTimeOrMidnight, seconds2));
              },
              items: getTimeSectionOptions({
                value: utils2.getSeconds(selectedTimeOrMidnight),
                isDisabled: (seconds2) => disabled || isTimeDisabled(seconds2, "seconds"),
                resolveLabel: (seconds2) => utils2.format(utils2.setSeconds(now2, seconds2), "seconds"),
                timeStep: timeSteps.seconds,
                hasValue: !!value2,
                resolveAriaLabel: localeText.secondsClockNumberText
              })
            };
          }
          case "meridiem": {
            const amLabel = utils2.getMeridiemText("am");
            const pmLabel = utils2.getMeridiemText("pm");
            return {
              onChange: handleMeridiemChange,
              items: [{
                value: "am",
                label: amLabel,
                isSelected: () => !!value2 && meridiemMode === "am",
                ariaLabel: amLabel
              }, {
                value: "pm",
                label: pmLabel,
                isSelected: () => !!value2 && meridiemMode === "pm",
                ariaLabel: pmLabel
              }]
            };
          }
          default:
            throw new Error(`Unknown view: ${viewToBuild} found.`);
        }
      }, [now2, value2, ampm, utils2, timeSteps.hours, timeSteps.minutes, timeSteps.seconds, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, handleSectionChange, selectedTimeOrMidnight, disabled, isTimeDisabled, handleMeridiemChange]);
      const viewTimeOptions = reactExports.useMemo(() => {
        return views.reduce((result, currentView) => {
          return _extends$1({}, result, {
            [currentView]: buildViewProps(currentView)
          });
        }, {});
      }, [views, buildViewProps]);
      const ownerState = props;
      const classes = useUtilityClasses$b(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(MultiSectionDigitalClockRoot, _extends$1({
        ref,
        className: clsx(classes.root, className),
        ownerState,
        role: "group"
      }, other, {
        children: Object.entries(viewTimeOptions).map(([timeView, viewOptions]) => /* @__PURE__ */ jsxRuntimeExports.jsx(MultiSectionDigitalClockSection, {
          items: viewOptions.items,
          onChange: viewOptions.onChange,
          active: view === timeView,
          autoFocus: autoFocus != null ? autoFocus : focusedView === timeView,
          disabled,
          readOnly,
          slots: slots != null ? slots : components,
          slotProps: slotProps != null ? slotProps : componentsProps,
          skipDisabled,
          "aria-label": localeText.selectViewText(timeView)
        }, timeView))
      }));
    });
    const renderTimeViewClock = ({
      view,
      onViewChange,
      focusedView,
      onFocusedViewChange,
      views,
      value: value2,
      defaultValue: defaultValue2,
      onChange,
      className,
      classes,
      disableFuture,
      disablePast,
      minTime,
      maxTime,
      shouldDisableTime,
      shouldDisableClock,
      minutesStep,
      ampm,
      ampmInClock,
      components,
      componentsProps,
      slots,
      slotProps,
      readOnly,
      disabled,
      sx,
      autoFocus,
      showViewSwitcher,
      disableIgnoringDatePartForTimeValidation
    }) => /* @__PURE__ */ jsxRuntimeExports.jsx(TimeClock, {
      view,
      onViewChange,
      focusedView,
      onFocusedViewChange,
      views: views.filter(isTimeView),
      value: value2,
      defaultValue: defaultValue2,
      onChange,
      className,
      classes,
      disableFuture,
      disablePast,
      minTime,
      maxTime,
      shouldDisableTime,
      shouldDisableClock,
      minutesStep,
      ampm,
      ampmInClock,
      components,
      componentsProps,
      slots,
      slotProps,
      readOnly,
      disabled,
      sx,
      autoFocus,
      showViewSwitcher,
      disableIgnoringDatePartForTimeValidation
    });
    const renderDigitalClockTimeView = ({
      view,
      onViewChange,
      focusedView,
      onFocusedViewChange,
      views,
      value: value2,
      defaultValue: defaultValue2,
      onChange,
      className,
      classes,
      disableFuture,
      disablePast,
      minTime,
      maxTime,
      shouldDisableTime,
      shouldDisableClock,
      minutesStep,
      ampm,
      components,
      componentsProps,
      slots,
      slotProps,
      readOnly,
      disabled,
      sx,
      autoFocus,
      disableIgnoringDatePartForTimeValidation,
      timeSteps,
      skipDisabled
    }) => /* @__PURE__ */ jsxRuntimeExports.jsx(DigitalClock, {
      view,
      onViewChange,
      focusedView,
      onFocusedViewChange,
      views: views.filter(isTimeView),
      value: value2,
      defaultValue: defaultValue2,
      onChange,
      className,
      classes,
      disableFuture,
      disablePast,
      minTime,
      maxTime,
      shouldDisableTime,
      shouldDisableClock,
      minutesStep,
      ampm,
      components,
      componentsProps,
      slots,
      slotProps,
      readOnly,
      disabled,
      sx,
      autoFocus,
      disableIgnoringDatePartForTimeValidation,
      timeStep: timeSteps == null ? void 0 : timeSteps.minutes,
      skipDisabled
    });
    const renderMultiSectionDigitalClockTimeView = ({
      view,
      onViewChange,
      focusedView,
      onFocusedViewChange,
      views,
      value: value2,
      defaultValue: defaultValue2,
      onChange,
      className,
      classes,
      disableFuture,
      disablePast,
      minTime,
      maxTime,
      shouldDisableTime,
      shouldDisableClock,
      minutesStep,
      ampm,
      components,
      componentsProps,
      slots,
      slotProps,
      readOnly,
      disabled,
      sx,
      autoFocus,
      disableIgnoringDatePartForTimeValidation,
      timeSteps,
      skipDisabled
    }) => /* @__PURE__ */ jsxRuntimeExports.jsx(MultiSectionDigitalClock, {
      view,
      onViewChange,
      focusedView,
      onFocusedViewChange,
      views: views.filter(isTimeView),
      value: value2,
      defaultValue: defaultValue2,
      onChange,
      className,
      classes,
      disableFuture,
      disablePast,
      minTime,
      maxTime,
      shouldDisableTime,
      shouldDisableClock,
      minutesStep,
      ampm,
      components,
      componentsProps,
      slots,
      slotProps,
      readOnly,
      disabled,
      sx,
      autoFocus,
      disableIgnoringDatePartForTimeValidation,
      timeSteps,
      skipDisabled
    });
    const MobileDateTimePicker = /* @__PURE__ */ reactExports.forwardRef(function MobileDateTimePicker2(inProps, ref) {
      var _defaultizedProps$amp, _defaultizedProps$slo2, _defaultizedProps$slo3;
      const localeText = useLocaleText();
      const defaultizedProps = useDateTimePickerDefaultizedProps(inProps, "MuiMobileDateTimePicker");
      const viewRenderers = _extends$1({
        day: renderDateViewCalendar,
        month: renderDateViewCalendar,
        year: renderDateViewCalendar,
        hours: renderTimeViewClock,
        minutes: renderTimeViewClock,
        seconds: renderTimeViewClock
      }, defaultizedProps.viewRenderers);
      const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : false;
      const props = _extends$1({}, defaultizedProps, {
        viewRenderers,
        ampmInClock,
        slots: _extends$1({
          field: DateTimeField
        }, defaultizedProps.slots),
        slotProps: _extends$1({}, defaultizedProps.slotProps, {
          field: (ownerState) => {
            var _defaultizedProps$slo;
            return _extends$1({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
              ref,
              ampm: defaultizedProps.ampm
            });
          },
          toolbar: _extends$1({
            hidden: false,
            ampmInClock
          }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),
          tabs: _extends$1({
            hidden: false
          }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.tabs)
        })
      });
      const {
        renderPicker
      } = useMobilePicker({
        props,
        valueManager: singleItemValueManager,
        valueType: "date-time",
        getOpenDialogAriaText: localeText.openDatePickerDialogue,
        validator: validateDateTime
      });
      return renderPicker();
    });
    MobileDateTimePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * 12h/24h view for hour selection clock.
       * @default `utils.is12HourCycleInCurrentLocale()`
       */
      ampm: PropTypes.bool,
      /**
       * Display ampm controls under the clock (instead of in the toolbar).
       * @default true on desktop, false on mobile
       */
      ampmInClock: PropTypes.bool,
      /**
       * If `true`, the main element is focused during the first mount.
       * This main element is:
       * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
       * - the `input` element if there is a field rendered.
       */
      autoFocus: PropTypes.bool,
      /**
       * Class name applied to the root element.
       */
      className: PropTypes.string,
      /**
       * If `true`, the popover or modal will close after submitting the full date.
       * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,
      /**
       * Overridable components.
       * @default {}
       * @deprecated Please use `slots`.
       */
      components: PropTypes.object,
      /**
       * The props used for each component slot.
       * @default {}
       * @deprecated Please use `slotProps`.
       */
      componentsProps: PropTypes.object,
      /**
       * Formats the day of week displayed in the calendar header.
       * @param {string} day The day of week provided by the adapter's method `getWeekdays`.
       * @returns {string} The name to display.
       * @default (day) => day.charAt(0).toUpperCase()
       */
      dayOfWeekFormatter: PropTypes.func,
      /**
       * Default calendar month displayed when `value={null}`.
       */
      defaultCalendarMonth: PropTypes.any,
      /**
       * The default value.
       * Used when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, disable values after the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disableFuture: PropTypes.bool,
      /**
       * If `true`, today's date is rendering without highlighting with circle.
       * @default false
       */
      disableHighlightToday: PropTypes.bool,
      /**
       * Do not ignore date part when validating min/max time.
       * @default false
       */
      disableIgnoringDatePartForTimeValidation: PropTypes.bool,
      /**
       * If `true`, the open picker button will not be rendered (renders only the field).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,
      /**
       * If `true`, disable values before the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disablePast: PropTypes.bool,
      /**
       * If `true`, the week number will be display in the calendar.
       */
      displayWeekNumber: PropTypes.bool,
      /**
       * Calendar will show more weeks in order to match this value.
       * Put it to 6 for having fix number of week in Gregorian calendars
       * @default undefined
       */
      fixedWeekNumber: PropTypes.number,
      /**
       * Format of the date when rendered in the input(s).
       * Defaults to localized format based on the used `views`.
       */
      format: PropTypes.string,
      /**
       * Density of the format when rendered in the input.
       * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
       * @default "dense"
       */
      formatDensity: PropTypes.oneOf(["dense", "spacious"]),
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      /**
       * The label content.
       */
      label: PropTypes.node,
      /**
       * If `true`, calls `renderLoading` instead of rendering the day calendar.
       * Can be used to preload information and show it in calendar.
       * @default false
       */
      loading: PropTypes.bool,
      /**
       * Locale for components texts.
       * Allows overriding texts coming from `LocalizationProvider` and `theme`.
       */
      localeText: PropTypes.object,
      /**
       * Maximal selectable date.
       */
      maxDate: PropTypes.any,
      /**
       * Maximal selectable moment of time with binding to date, to set max time in each day use `maxTime`.
       */
      maxDateTime: PropTypes.any,
      /**
       * Maximal selectable time.
       * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
       */
      maxTime: PropTypes.any,
      /**
       * Minimal selectable date.
       */
      minDate: PropTypes.any,
      /**
       * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.
       */
      minDateTime: PropTypes.any,
      /**
       * Minimal selectable time.
       * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
       */
      minTime: PropTypes.any,
      /**
       * Step over minutes.
       * @default 1
       */
      minutesStep: PropTypes.number,
      /**
       * Months rendered per row.
       * @default 3
       */
      monthsPerRow: PropTypes.oneOf([3, 4]),
      /**
       * Callback fired when the value is accepted.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,
      /**
       * Callback fired when the value changes.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The new value.
       * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
       */
      onChange: PropTypes.func,
      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see `open`).
       */
      onClose: PropTypes.func,
      /**
       * Callback fired when the error associated to the current value changes.
       * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
       *
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TError} error The new error describing why the current value is not valid.
       * @param {TValue} value The value associated to the error.
       */
      onError: PropTypes.func,
      /**
       * Callback fired on month change.
       * @template TDate
       * @param {TDate} month The new month.
       */
      onMonthChange: PropTypes.func,
      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see `open`).
       */
      onOpen: PropTypes.func,
      /**
       * Callback fired when the selected sections change.
       * @param {FieldSelectedSections} newValue The new selected sections.
       */
      onSelectedSectionsChange: PropTypes.func,
      /**
       * Callback fired on view change.
       * @template TView
       * @param {TView} view The new view.
       */
      onViewChange: PropTypes.func,
      /**
       * Callback fired on year change.
       * @template TDate
       * @param {TDate} year The new year.
       */
      onYearChange: PropTypes.func,
      /**
       * Control the popup or dialog open state.
       * @default false
       */
      open: PropTypes.bool,
      /**
       * The default visible view.
       * Used when the component view is not controlled.
       * Must be a valid option from `views` list.
       */
      openTo: PropTypes.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(["landscape", "portrait"]),
      readOnly: PropTypes.bool,
      /**
       * Disable heavy animations.
       * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)
       */
      reduceAnimations: PropTypes.bool,
      /**
       * Component displaying when passed `loading` true.
       * @returns {React.ReactNode} The node to render when loading.
       * @default () => <span data-mui-test="loading-progress">...</span>
       */
      renderLoading: PropTypes.func,
      /**
       * The currently selected sections.
       * This prop accept four formats:
       * 1. If a number is provided, the section at this index will be selected.
       * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.
       * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
       * 4. If `null` is provided, no section will be selected
       * If not provided, the selected sections will be handled internally.
       */
      selectedSections: PropTypes.oneOfType([PropTypes.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), PropTypes.number, PropTypes.shape({
        endIndex: PropTypes.number.isRequired,
        startIndex: PropTypes.number.isRequired
      })]),
      /**
       * Disable specific clock time.
       * @param {number} clockValue The value to check.
       * @param {TimeView} view The clock type of the timeValue.
       * @returns {boolean} If `true` the time will be disabled.
       * @deprecated Consider using `shouldDisableTime`.
       */
      shouldDisableClock: PropTypes.func,
      /**
       * Disable specific date.
       * @template TDate
       * @param {TDate} day The date to test.
       * @returns {boolean} If `true` the date will be disabled.
       */
      shouldDisableDate: PropTypes.func,
      /**
       * Disable specific month.
       * @template TDate
       * @param {TDate} month The month to test.
       * @returns {boolean} If `true`, the month will be disabled.
       */
      shouldDisableMonth: PropTypes.func,
      /**
       * Disable specific time.
       * @template TDate
       * @param {TDate} value The value to check.
       * @param {TimeView} view The clock type of the timeValue.
       * @returns {boolean} If `true` the time will be disabled.
       */
      shouldDisableTime: PropTypes.func,
      /**
       * Disable specific year.
       * @template TDate
       * @param {TDate} year The year to test.
       * @returns {boolean} If `true`, the year will be disabled.
       */
      shouldDisableYear: PropTypes.func,
      /**
       * If `true`, days outside the current month are rendered:
       *
       * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
       *
       * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
       *
       * - ignored if `calendars` equals more than `1` on range pickers.
       * @default false
       */
      showDaysOutsideCurrentMonth: PropTypes.bool,
      /**
       * The props used for each component slot.
       * @default {}
       */
      slotProps: PropTypes.object,
      /**
       * Overridable component slots.
       * @default {}
       */
      slots: PropTypes.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The selected value.
       * Used when the component is controlled.
       */
      value: PropTypes.any,
      /**
       * The visible view.
       * Used when the component view is controlled.
       * Must be a valid option from `views` list.
       */
      view: PropTypes.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
      /**
       * Define custom view renderers for each section.
       * If `null`, the section will only have field editing.
       * If `undefined`, internally defined view will be the used.
       */
      viewRenderers: PropTypes.shape({
        day: PropTypes.func,
        hours: PropTypes.func,
        minutes: PropTypes.func,
        month: PropTypes.func,
        seconds: PropTypes.func,
        year: PropTypes.func
      }),
      /**
       * Available views.
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired),
      /**
       * Years rendered per row.
       * @default 3
       */
      yearsPerRow: PropTypes.oneOf([3, 4])
    };
    const _excluded$i = ["desktopModeMediaQuery"];
    const DateTimePicker = /* @__PURE__ */ reactExports.forwardRef(function DateTimePicker2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDateTimePicker"
      });
      const {
        desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$i);
      const isDesktop = useMediaQuery(desktopModeMediaQuery, {
        defaultMatches: true
      });
      if (isDesktop) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(DesktopDateTimePicker, _extends$1({
          ref
        }, other));
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(MobileDateTimePicker, _extends$1({
        ref
      }, other));
    });
    var moment$1 = Utils.moment;
    const MuiDateTimeWidget = function(props) {
      var _DateTimePicker$propT;
      var value2 = props.value, setValue2 = props.setValue, use12Hours = props.use12Hours, readonly = props.readonly, placeholder = props.placeholder, dateFormat = props.dateFormat, timeFormat = props.timeFormat, valueFormat = props.valueFormat, customProps = props.customProps;
      var isV62 = !!(DateTimePicker !== null && DateTimePicker !== void 0 && (_DateTimePicker$propT = DateTimePicker.propTypes) !== null && _DateTimePicker$propT !== void 0 && _DateTimePicker$propT.format);
      var formatSingleValue = function formatSingleValue2(value3) {
        return value3 && value3.isValid() ? value3.format(valueFormat) : void 0;
      };
      var handleChange = function handleChange2(value3) {
        setValue2(formatSingleValue(value3));
      };
      var dateTimeFormat = dateFormat + " " + timeFormat;
      var renderInput = function renderInput2(params) {
        return /* @__PURE__ */ React$4.createElement(TextField$1, _extends$1({
          size: "small",
          variant: "standard"
        }, params));
      };
      var desktopModeMediaQuery = "@media (pointer: fine), (pointer: none)";
      var pickerProps = isV62 ? {
        format: dateTimeFormat,
        slotProps: {
          textField: {
            size: "small",
            variant: "standard"
          },
          toolbar: {
            toolbarPlaceholder: !readonly ? placeholder : ""
          }
        }
      } : {
        inputFormat: dateTimeFormat,
        renderInput,
        toolbarPlaceholder: !readonly ? placeholder : ""
      };
      var aValue = value2 ? isV62 && typeof value2 === "string" ? moment$1(value2, valueFormat) : value2 : null;
      return /* @__PURE__ */ React$4.createElement(FormControl$1, null, /* @__PURE__ */ React$4.createElement(DateTimePicker, _extends$1({
        desktopModeMediaQuery,
        readOnly: readonly,
        disabled: readonly,
        ampm: !!use12Hours,
        value: aValue,
        onChange: handleChange
      }, pickerProps, customProps)));
    };
    const _excluded$h = ["value", "defaultValue", "format", "formatDensity", "shouldRespectLeadingZeros", "onChange", "readOnly", "onError", "disableFuture", "disablePast", "minTime", "maxTime", "minutesStep", "shouldDisableClock", "shouldDisableTime", "disableIgnoringDatePartForTimeValidation", "selectedSections", "onSelectedSectionsChange", "ampm", "unstableFieldRef"];
    const useDefaultizedTimeField = (props) => {
      var _props$ampm, _props$disablePast, _props$disableFuture, _props$format;
      const utils2 = useUtils();
      const ampm = (_props$ampm = props.ampm) != null ? _props$ampm : utils2.is12HourCycleInCurrentLocale();
      const defaultFormat = ampm ? utils2.formats.fullTime12h : utils2.formats.fullTime24h;
      return _extends$1({}, props, {
        disablePast: (_props$disablePast = props.disablePast) != null ? _props$disablePast : false,
        disableFuture: (_props$disableFuture = props.disableFuture) != null ? _props$disableFuture : false,
        format: (_props$format = props.format) != null ? _props$format : defaultFormat
      });
    };
    const useTimeField = ({
      props,
      inputRef
    }) => {
      const _useDefaultizedTimeFi = useDefaultizedTimeField(props), {
        value: value2,
        defaultValue: defaultValue2,
        format: format2,
        formatDensity,
        shouldRespectLeadingZeros,
        onChange,
        readOnly,
        onError,
        disableFuture,
        disablePast,
        minTime,
        maxTime,
        minutesStep,
        shouldDisableClock,
        shouldDisableTime,
        disableIgnoringDatePartForTimeValidation,
        selectedSections,
        onSelectedSectionsChange,
        ampm,
        unstableFieldRef
      } = _useDefaultizedTimeFi, other = _objectWithoutPropertiesLoose(_useDefaultizedTimeFi, _excluded$h);
      return useField({
        inputRef,
        forwardedProps: other,
        internalProps: {
          value: value2,
          defaultValue: defaultValue2,
          format: format2,
          formatDensity,
          shouldRespectLeadingZeros,
          onChange,
          readOnly,
          onError,
          disableFuture,
          disablePast,
          minTime,
          maxTime,
          minutesStep,
          shouldDisableClock,
          shouldDisableTime,
          disableIgnoringDatePartForTimeValidation,
          selectedSections,
          onSelectedSectionsChange,
          ampm,
          unstableFieldRef
        },
        valueManager: singleItemValueManager,
        fieldValueManager: singleItemFieldValueManager,
        validator: validateTime,
        valueType: "time"
      });
    };
    const _excluded$g = ["slots", "slotProps", "components", "componentsProps", "InputProps", "inputProps"], _excluded2 = ["inputRef"], _excluded3 = ["ref", "onPaste", "inputMode", "readOnly"];
    const TimeField = /* @__PURE__ */ reactExports.forwardRef(function TimeField2(inProps, ref) {
      var _ref, _slots$textField, _slotProps$textField;
      const themeProps = useThemeProps({
        props: inProps,
        name: "MuiTimeField"
      });
      const {
        slots,
        slotProps,
        components,
        componentsProps,
        InputProps,
        inputProps
      } = themeProps, other = _objectWithoutPropertiesLoose(themeProps, _excluded$g);
      const ownerState = themeProps;
      const TextField2 = (_ref = (_slots$textField = slots == null ? void 0 : slots.textField) != null ? _slots$textField : components == null ? void 0 : components.TextField) != null ? _ref : TextField$1;
      const _useSlotProps = useSlotProps({
        elementType: TextField2,
        externalSlotProps: (_slotProps$textField = slotProps == null ? void 0 : slotProps.textField) != null ? _slotProps$textField : componentsProps == null ? void 0 : componentsProps.textField,
        externalForwardedProps: other,
        ownerState
      }), {
        inputRef: externalInputRef
      } = _useSlotProps, textFieldProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2);
      textFieldProps.inputProps = _extends$1({}, textFieldProps.inputProps, inputProps);
      textFieldProps.InputProps = _extends$1({}, textFieldProps.InputProps, InputProps);
      const _useTimeField = useTimeField({
        props: textFieldProps,
        inputRef: externalInputRef
      }), {
        ref: inputRef,
        onPaste,
        inputMode,
        readOnly
      } = _useTimeField, fieldProps = _objectWithoutPropertiesLoose(_useTimeField, _excluded3);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(TextField2, _extends$1({
        ref
      }, fieldProps, {
        InputProps: _extends$1({}, fieldProps.InputProps, {
          readOnly
        }),
        inputProps: _extends$1({}, fieldProps.inputProps, {
          inputMode,
          onPaste,
          ref: inputRef
        })
      }));
    });
    function getTimePickerToolbarUtilityClass(slot) {
      return generateUtilityClass("MuiTimePickerToolbar", slot);
    }
    const timePickerToolbarClasses = generateUtilityClasses("MuiTimePickerToolbar", ["root", "separator", "hourMinuteLabel", "hourMinuteLabelLandscape", "hourMinuteLabelReverse", "ampmSelection", "ampmLandscape", "ampmLabel"]);
    const _excluded$f = ["ampm", "ampmInClock", "value", "isLandscape", "onChange", "view", "onViewChange", "views", "disabled", "readOnly"];
    const useUtilityClasses$a = (ownerState) => {
      const {
        theme,
        isLandscape,
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        separator: ["separator"],
        hourMinuteLabel: ["hourMinuteLabel", isLandscape && "hourMinuteLabelLandscape", theme.direction === "rtl" && "hourMinuteLabelReverse"],
        ampmSelection: ["ampmSelection", isLandscape && "ampmLandscape"],
        ampmLabel: ["ampmLabel"]
      };
      return composeClasses(slots, getTimePickerToolbarUtilityClass, classes);
    };
    const TimePickerToolbarRoot = styled$1(PickersToolbar, {
      name: "MuiTimePickerToolbar",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      [`& .${pickersToolbarClasses.penIconButtonLandscape}`]: {
        marginTop: "auto"
      }
    });
    const TimePickerToolbarSeparator = styled$1(PickersToolbarText, {
      name: "MuiTimePickerToolbar",
      slot: "Separator",
      overridesResolver: (props, styles2) => styles2.separator
    })({
      outline: 0,
      margin: "0 4px 0 2px",
      cursor: "default"
    });
    const TimePickerToolbarHourMinuteLabel = styled$1("div", {
      name: "MuiTimePickerToolbar",
      slot: "HourMinuteLabel",
      overridesResolver: (props, styles2) => [{
        [`&.${timePickerToolbarClasses.hourMinuteLabelLandscape}`]: styles2.hourMinuteLabelLandscape,
        [`&.${timePickerToolbarClasses.hourMinuteLabelReverse}`]: styles2.hourMinuteLabelReverse
      }, styles2.hourMinuteLabel]
    })(({
      theme,
      ownerState
    }) => _extends$1({
      display: "flex",
      justifyContent: "flex-end",
      alignItems: "flex-end"
    }, ownerState.isLandscape && {
      marginTop: "auto"
    }, theme.direction === "rtl" && {
      flexDirection: "row-reverse"
    }));
    TimePickerToolbarHourMinuteLabel.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      as: PropTypes.elementType,
      ownerState: PropTypes.object.isRequired,
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    };
    const TimePickerToolbarAmPmSelection = styled$1("div", {
      name: "MuiTimePickerToolbar",
      slot: "AmPmSelection",
      overridesResolver: (props, styles2) => [{
        [`.${timePickerToolbarClasses.ampmLabel}`]: styles2.ampmLabel
      }, {
        [`&.${timePickerToolbarClasses.ampmLandscape}`]: styles2.ampmLandscape
      }, styles2.ampmSelection]
    })(({
      ownerState
    }) => _extends$1({
      display: "flex",
      flexDirection: "column",
      marginRight: "auto",
      marginLeft: 12
    }, ownerState.isLandscape && {
      margin: "4px 0 auto",
      flexDirection: "row",
      justifyContent: "space-around",
      flexBasis: "100%"
    }, {
      [`& .${timePickerToolbarClasses.ampmLabel}`]: {
        fontSize: 17
      }
    }));
    TimePickerToolbarAmPmSelection.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      as: PropTypes.elementType,
      ownerState: PropTypes.object.isRequired,
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    };
    function TimePickerToolbar(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiTimePickerToolbar"
      });
      const {
        ampm,
        ampmInClock,
        value: value2,
        isLandscape,
        onChange,
        view,
        onViewChange,
        views,
        disabled,
        readOnly
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$f);
      const utils2 = useUtils();
      const localeText = useLocaleText();
      const theme = useTheme();
      const showAmPmControl = Boolean(ampm && !ampmInClock && views.includes("hours"));
      const {
        meridiemMode,
        handleMeridiemChange
      } = useMeridiemMode(value2, ampm, onChange);
      const formatHours = (time) => ampm ? utils2.format(time, "hours12h") : utils2.format(time, "hours24h");
      const ownerState = props;
      const classes = useUtilityClasses$a(_extends$1({}, ownerState, {
        theme
      }));
      const separator = /* @__PURE__ */ jsxRuntimeExports.jsx(TimePickerToolbarSeparator, {
        tabIndex: -1,
        value: ":",
        variant: "h3",
        selected: false,
        className: classes.separator
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(TimePickerToolbarRoot, _extends$1({
        landscapeDirection: "row",
        toolbarTitle: localeText.timePickerToolbarTitle,
        isLandscape,
        ownerState,
        className: classes.root
      }, other, {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsxs(TimePickerToolbarHourMinuteLabel, {
          className: classes.hourMinuteLabel,
          ownerState,
          children: [arrayIncludes(views, "hours") && /* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarButton, {
            tabIndex: -1,
            variant: "h3",
            onClick: () => onViewChange("hours"),
            selected: view === "hours",
            value: value2 ? formatHours(value2) : "--"
          }), arrayIncludes(views, ["hours", "minutes"]) && separator, arrayIncludes(views, "minutes") && /* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarButton, {
            tabIndex: -1,
            variant: "h3",
            onClick: () => onViewChange("minutes"),
            selected: view === "minutes",
            value: value2 ? utils2.format(value2, "minutes") : "--"
          }), arrayIncludes(views, ["minutes", "seconds"]) && separator, arrayIncludes(views, "seconds") && /* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarButton, {
            variant: "h3",
            onClick: () => onViewChange("seconds"),
            selected: view === "seconds",
            value: value2 ? utils2.format(value2, "seconds") : "--"
          })]
        }), showAmPmControl && /* @__PURE__ */ jsxRuntimeExports.jsxs(TimePickerToolbarAmPmSelection, {
          className: classes.ampmSelection,
          ownerState,
          children: [/* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarButton, {
            disableRipple: true,
            variant: "subtitle2",
            selected: meridiemMode === "am",
            typographyClassName: classes.ampmLabel,
            value: utils2.getMeridiemText("am"),
            onClick: readOnly ? void 0 : () => handleMeridiemChange("am"),
            disabled
          }), /* @__PURE__ */ jsxRuntimeExports.jsx(PickersToolbarButton, {
            disableRipple: true,
            variant: "subtitle2",
            selected: meridiemMode === "pm",
            typographyClassName: classes.ampmLabel,
            value: utils2.getMeridiemText("pm"),
            onClick: readOnly ? void 0 : () => handleMeridiemChange("pm"),
            disabled
          })]
        })]
      }));
    }
    function useTimePickerDefaultizedProps(props, name) {
      var _themeProps$ampm, _themeProps$slots, _themeProps$slotProps, _themeProps$disableFu, _themeProps$disablePa;
      const utils2 = useUtils();
      const themeProps = useThemeProps({
        props,
        name
      });
      const ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils2.is12HourCycleInCurrentLocale();
      const localeText = reactExports.useMemo(() => {
        var _themeProps$localeTex;
        if (((_themeProps$localeTex = themeProps.localeText) == null ? void 0 : _themeProps$localeTex.toolbarTitle) == null) {
          return themeProps.localeText;
        }
        return _extends$1({}, themeProps.localeText, {
          timePickerToolbarTitle: themeProps.localeText.toolbarTitle
        });
      }, [themeProps.localeText]);
      const slots = (_themeProps$slots = themeProps.slots) != null ? _themeProps$slots : uncapitalizeObjectKeys(themeProps.components);
      const slotProps = (_themeProps$slotProps = themeProps.slotProps) != null ? _themeProps$slotProps : themeProps.componentsProps;
      return _extends$1({}, themeProps, {
        ampm,
        localeText
      }, applyDefaultViewProps({
        views: themeProps.views,
        openTo: themeProps.openTo,
        defaultViews: ["hours", "minutes"],
        defaultOpenTo: "hours"
      }), {
        disableFuture: (_themeProps$disableFu = themeProps.disableFuture) != null ? _themeProps$disableFu : false,
        disablePast: (_themeProps$disablePa = themeProps.disablePast) != null ? _themeProps$disablePa : false,
        slots: _extends$1({
          toolbar: TimePickerToolbar
        }, slots),
        slotProps: _extends$1({}, slotProps, {
          toolbar: _extends$1({
            ampm,
            ampmInClock: themeProps.ampmInClock
          }, slotProps == null ? void 0 : slotProps.toolbar)
        })
      });
    }
    const DesktopTimePicker = /* @__PURE__ */ reactExports.forwardRef(function DesktopTimePicker2(inProps, ref) {
      var _defaultizedProps$thr, _defaultizedProps$amp, _viewRenderers$hours, _defaultizedProps$slo2, _defaultizedProps$slo3;
      const localeText = useLocaleText();
      const defaultizedProps = useTimePickerDefaultizedProps(inProps, "MuiDesktopTimePicker");
      const thresholdToRenderTimeInASingleColumn = (_defaultizedProps$thr = defaultizedProps.thresholdToRenderTimeInASingleColumn) != null ? _defaultizedProps$thr : 24;
      const timeSteps = _extends$1({
        hours: 1,
        minutes: 5,
        seconds: 5
      }, defaultizedProps.timeSteps);
      const shouldRenderTimeInASingleColumn = 24 * 60 / (timeSteps.hours * timeSteps.minutes) <= thresholdToRenderTimeInASingleColumn;
      const renderTimeView = shouldRenderTimeInASingleColumn ? renderDigitalClockTimeView : renderMultiSectionDigitalClockTimeView;
      const viewRenderers = _extends$1({
        hours: renderTimeView,
        minutes: renderTimeView,
        seconds: renderTimeView,
        meridiem: renderTimeView
      }, defaultizedProps.viewRenderers);
      const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;
      const actionBarActions = shouldRenderTimeInASingleColumn ? [] : ["accept"];
      const shouldHoursRendererContainMeridiemView = ((_viewRenderers$hours = viewRenderers.hours) == null ? void 0 : _viewRenderers$hours.name) === renderMultiSectionDigitalClockTimeView.name;
      const views = defaultizedProps.ampm && shouldHoursRendererContainMeridiemView ? [...defaultizedProps.views, "meridiem"] : defaultizedProps.views;
      const props = _extends$1({}, defaultizedProps, {
        ampmInClock,
        timeSteps,
        viewRenderers,
        // Setting only `hours` time view in case of single column time picker
        // Allows for easy view lifecycle management
        views: shouldRenderTimeInASingleColumn ? ["hours"] : views,
        slots: _extends$1({
          field: TimeField,
          openPickerIcon: Clock$1
        }, defaultizedProps.slots),
        slotProps: _extends$1({}, defaultizedProps.slotProps, {
          field: (ownerState) => {
            var _defaultizedProps$slo;
            return _extends$1({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
              ref,
              ampm: defaultizedProps.ampm
            });
          },
          toolbar: _extends$1({
            hidden: true,
            ampmInClock
          }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),
          actionBar: _extends$1({
            actions: actionBarActions
          }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.actionBar)
        })
      });
      const {
        renderPicker
      } = useDesktopPicker({
        props,
        valueManager: singleItemValueManager,
        valueType: "time",
        getOpenDialogAriaText: localeText.openTimePickerDialogue,
        validator: validateTime
      });
      return renderPicker();
    });
    DesktopTimePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * 12h/24h view for hour selection clock.
       * @default `utils.is12HourCycleInCurrentLocale()`
       */
      ampm: PropTypes.bool,
      /**
       * Display ampm controls under the clock (instead of in the toolbar).
       * @default true on desktop, false on mobile
       */
      ampmInClock: PropTypes.bool,
      /**
       * If `true`, the main element is focused during the first mount.
       * This main element is:
       * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
       * - the `input` element if there is a field rendered.
       */
      autoFocus: PropTypes.bool,
      /**
       * Class name applied to the root element.
       */
      className: PropTypes.string,
      /**
       * If `true`, the popover or modal will close after submitting the full date.
       * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,
      /**
       * Overridable components.
       * @default {}
       * @deprecated Please use `slots`.
       */
      components: PropTypes.object,
      /**
       * The props used for each component slot.
       * @default {}
       * @deprecated Please use `slotProps`.
       */
      componentsProps: PropTypes.object,
      /**
       * The default value.
       * Used when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, disable values after the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disableFuture: PropTypes.bool,
      /**
       * Do not ignore date part when validating min/max time.
       * @default false
       */
      disableIgnoringDatePartForTimeValidation: PropTypes.bool,
      /**
       * If `true`, the open picker button will not be rendered (renders only the field).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,
      /**
       * If `true`, disable values before the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disablePast: PropTypes.bool,
      /**
       * Format of the date when rendered in the input(s).
       * Defaults to localized format based on the used `views`.
       */
      format: PropTypes.string,
      /**
       * Density of the format when rendered in the input.
       * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
       * @default "dense"
       */
      formatDensity: PropTypes.oneOf(["dense", "spacious"]),
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      /**
       * The label content.
       */
      label: PropTypes.node,
      /**
       * Locale for components texts.
       * Allows overriding texts coming from `LocalizationProvider` and `theme`.
       */
      localeText: PropTypes.object,
      /**
       * Maximal selectable time.
       * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
       */
      maxTime: PropTypes.any,
      /**
       * Minimal selectable time.
       * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
       */
      minTime: PropTypes.any,
      /**
       * Step over minutes.
       * @default 1
       */
      minutesStep: PropTypes.number,
      /**
       * Callback fired when the value is accepted.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,
      /**
       * Callback fired when the value changes.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The new value.
       * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
       */
      onChange: PropTypes.func,
      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see `open`).
       */
      onClose: PropTypes.func,
      /**
       * Callback fired when the error associated to the current value changes.
       * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
       *
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TError} error The new error describing why the current value is not valid.
       * @param {TValue} value The value associated to the error.
       */
      onError: PropTypes.func,
      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see `open`).
       */
      onOpen: PropTypes.func,
      /**
       * Callback fired when the selected sections change.
       * @param {FieldSelectedSections} newValue The new selected sections.
       */
      onSelectedSectionsChange: PropTypes.func,
      /**
       * Callback fired on view change.
       * @template TView
       * @param {TView} view The new view.
       */
      onViewChange: PropTypes.func,
      /**
       * Control the popup or dialog open state.
       * @default false
       */
      open: PropTypes.bool,
      /**
       * The default visible view.
       * Used when the component view is not controlled.
       * Must be a valid option from `views` list.
       */
      openTo: PropTypes.oneOf(["hours", "meridiem", "minutes", "seconds"]),
      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(["landscape", "portrait"]),
      readOnly: PropTypes.bool,
      /**
       * The currently selected sections.
       * This prop accept four formats:
       * 1. If a number is provided, the section at this index will be selected.
       * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.
       * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
       * 4. If `null` is provided, no section will be selected
       * If not provided, the selected sections will be handled internally.
       */
      selectedSections: PropTypes.oneOfType([PropTypes.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), PropTypes.number, PropTypes.shape({
        endIndex: PropTypes.number.isRequired,
        startIndex: PropTypes.number.isRequired
      })]),
      /**
       * Disable specific clock time.
       * @param {number} clockValue The value to check.
       * @param {TimeView} view The clock type of the timeValue.
       * @returns {boolean} If `true` the time will be disabled.
       * @deprecated Consider using `shouldDisableTime`.
       */
      shouldDisableClock: PropTypes.func,
      /**
       * Disable specific time.
       * @template TDate
       * @param {TDate} value The value to check.
       * @param {TimeView} view The clock type of the timeValue.
       * @returns {boolean} If `true` the time will be disabled.
       */
      shouldDisableTime: PropTypes.func,
      /**
       * If `true`, disabled digital clock items will not be rendered.
       * @default false
       */
      skipDisabled: PropTypes.bool,
      /**
       * The props used for each component slot.
       * @default {}
       */
      slotProps: PropTypes.object,
      /**
       * Overridable component slots.
       * @default {}
       */
      slots: PropTypes.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Amount of time options below or at which the single column time renderer is used.
       * @default 24
       */
      thresholdToRenderTimeInASingleColumn: PropTypes.number,
      /**
       * The time steps between two time unit options.
       * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.
       * When single column time renderer is used, only `timeStep.minutes` will be used.
       * @default{ hours: 1, minutes: 5, seconds: 5 }
       */
      timeSteps: PropTypes.shape({
        hours: PropTypes.number,
        minutes: PropTypes.number,
        seconds: PropTypes.number
      }),
      /**
       * The selected value.
       * Used when the component is controlled.
       */
      value: PropTypes.any,
      /**
       * The visible view.
       * Used when the component view is controlled.
       * Must be a valid option from `views` list.
       */
      view: PropTypes.oneOf(["hours", "meridiem", "minutes", "seconds"]),
      /**
       * Define custom view renderers for each section.
       * If `null`, the section will only have field editing.
       * If `undefined`, internally defined view will be the used.
       */
      viewRenderers: PropTypes.shape({
        hours: PropTypes.func,
        meridiem: PropTypes.func,
        minutes: PropTypes.func,
        seconds: PropTypes.func
      }),
      /**
       * Available views.
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(["hours", "minutes", "seconds"]).isRequired)
    };
    const MobileTimePicker = /* @__PURE__ */ reactExports.forwardRef(function MobileTimePicker2(inProps, ref) {
      var _defaultizedProps$amp, _defaultizedProps$slo2;
      const localeText = useLocaleText();
      const defaultizedProps = useTimePickerDefaultizedProps(inProps, "MuiMobileTimePicker");
      const viewRenderers = _extends$1({
        hours: renderTimeViewClock,
        minutes: renderTimeViewClock,
        seconds: renderTimeViewClock
      }, defaultizedProps.viewRenderers);
      const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : false;
      const props = _extends$1({}, defaultizedProps, {
        ampmInClock,
        viewRenderers,
        slots: _extends$1({
          field: TimeField
        }, defaultizedProps.slots),
        slotProps: _extends$1({}, defaultizedProps.slotProps, {
          field: (ownerState) => {
            var _defaultizedProps$slo;
            return _extends$1({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
              ref,
              ampm: defaultizedProps.ampm
            });
          },
          toolbar: _extends$1({
            hidden: false,
            ampmInClock
          }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)
        })
      });
      const {
        renderPicker
      } = useMobilePicker({
        props,
        valueManager: singleItemValueManager,
        valueType: "time",
        getOpenDialogAriaText: localeText.openTimePickerDialogue,
        validator: validateTime
      });
      return renderPicker();
    });
    MobileTimePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * 12h/24h view for hour selection clock.
       * @default `utils.is12HourCycleInCurrentLocale()`
       */
      ampm: PropTypes.bool,
      /**
       * Display ampm controls under the clock (instead of in the toolbar).
       * @default true on desktop, false on mobile
       */
      ampmInClock: PropTypes.bool,
      /**
       * If `true`, the main element is focused during the first mount.
       * This main element is:
       * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
       * - the `input` element if there is a field rendered.
       */
      autoFocus: PropTypes.bool,
      /**
       * Class name applied to the root element.
       */
      className: PropTypes.string,
      /**
       * If `true`, the popover or modal will close after submitting the full date.
       * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,
      /**
       * Overridable components.
       * @default {}
       * @deprecated Please use `slots`.
       */
      components: PropTypes.object,
      /**
       * The props used for each component slot.
       * @default {}
       * @deprecated Please use `slotProps`.
       */
      componentsProps: PropTypes.object,
      /**
       * The default value.
       * Used when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, disable values after the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disableFuture: PropTypes.bool,
      /**
       * Do not ignore date part when validating min/max time.
       * @default false
       */
      disableIgnoringDatePartForTimeValidation: PropTypes.bool,
      /**
       * If `true`, the open picker button will not be rendered (renders only the field).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,
      /**
       * If `true`, disable values before the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disablePast: PropTypes.bool,
      /**
       * Format of the date when rendered in the input(s).
       * Defaults to localized format based on the used `views`.
       */
      format: PropTypes.string,
      /**
       * Density of the format when rendered in the input.
       * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
       * @default "dense"
       */
      formatDensity: PropTypes.oneOf(["dense", "spacious"]),
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        current: PropTypes.object
      })]),
      /**
       * The label content.
       */
      label: PropTypes.node,
      /**
       * Locale for components texts.
       * Allows overriding texts coming from `LocalizationProvider` and `theme`.
       */
      localeText: PropTypes.object,
      /**
       * Maximal selectable time.
       * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
       */
      maxTime: PropTypes.any,
      /**
       * Minimal selectable time.
       * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
       */
      minTime: PropTypes.any,
      /**
       * Step over minutes.
       * @default 1
       */
      minutesStep: PropTypes.number,
      /**
       * Callback fired when the value is accepted.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,
      /**
       * Callback fired when the value changes.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The new value.
       * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
       */
      onChange: PropTypes.func,
      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see `open`).
       */
      onClose: PropTypes.func,
      /**
       * Callback fired when the error associated to the current value changes.
       * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
       *
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TError} error The new error describing why the current value is not valid.
       * @param {TValue} value The value associated to the error.
       */
      onError: PropTypes.func,
      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see `open`).
       */
      onOpen: PropTypes.func,
      /**
       * Callback fired when the selected sections change.
       * @param {FieldSelectedSections} newValue The new selected sections.
       */
      onSelectedSectionsChange: PropTypes.func,
      /**
       * Callback fired on view change.
       * @template TView
       * @param {TView} view The new view.
       */
      onViewChange: PropTypes.func,
      /**
       * Control the popup or dialog open state.
       * @default false
       */
      open: PropTypes.bool,
      /**
       * The default visible view.
       * Used when the component view is not controlled.
       * Must be a valid option from `views` list.
       */
      openTo: PropTypes.oneOf(["hours", "minutes", "seconds"]),
      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(["landscape", "portrait"]),
      readOnly: PropTypes.bool,
      /**
       * The currently selected sections.
       * This prop accept four formats:
       * 1. If a number is provided, the section at this index will be selected.
       * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.
       * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
       * 4. If `null` is provided, no section will be selected
       * If not provided, the selected sections will be handled internally.
       */
      selectedSections: PropTypes.oneOfType([PropTypes.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), PropTypes.number, PropTypes.shape({
        endIndex: PropTypes.number.isRequired,
        startIndex: PropTypes.number.isRequired
      })]),
      /**
       * Disable specific clock time.
       * @param {number} clockValue The value to check.
       * @param {TimeView} view The clock type of the timeValue.
       * @returns {boolean} If `true` the time will be disabled.
       * @deprecated Consider using `shouldDisableTime`.
       */
      shouldDisableClock: PropTypes.func,
      /**
       * Disable specific time.
       * @template TDate
       * @param {TDate} value The value to check.
       * @param {TimeView} view The clock type of the timeValue.
       * @returns {boolean} If `true` the time will be disabled.
       */
      shouldDisableTime: PropTypes.func,
      /**
       * The props used for each component slot.
       * @default {}
       */
      slotProps: PropTypes.object,
      /**
       * Overridable component slots.
       * @default {}
       */
      slots: PropTypes.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * The selected value.
       * Used when the component is controlled.
       */
      value: PropTypes.any,
      /**
       * The visible view.
       * Used when the component view is controlled.
       * Must be a valid option from `views` list.
       */
      view: PropTypes.oneOf(["hours", "minutes", "seconds"]),
      /**
       * Define custom view renderers for each section.
       * If `null`, the section will only have field editing.
       * If `undefined`, internally defined view will be the used.
       */
      viewRenderers: PropTypes.shape({
        hours: PropTypes.func,
        minutes: PropTypes.func,
        seconds: PropTypes.func
      }),
      /**
       * Available views.
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(["hours", "minutes", "seconds"]).isRequired)
    };
    const _excluded$e = ["desktopModeMediaQuery"];
    const TimePicker = /* @__PURE__ */ reactExports.forwardRef(function TimePicker2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiTimePicker"
      });
      const {
        desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$e);
      const isDesktop = useMediaQuery(desktopModeMediaQuery, {
        defaultMatches: true
      });
      if (isDesktop) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(DesktopTimePicker, _extends$1({
          ref
        }, other));
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(MobileTimePicker, _extends$1({
        ref
      }, other));
    });
    var moment = Utils.moment;
    const MuiTimeWidget = function(props) {
      var _TimePicker$propTypes;
      var value2 = props.value, setValue2 = props.setValue, use12Hours = props.use12Hours, readonly = props.readonly, placeholder = props.placeholder, timeFormat = props.timeFormat, valueFormat = props.valueFormat, customProps = props.customProps;
      var isV62 = !!(TimePicker !== null && TimePicker !== void 0 && (_TimePicker$propTypes = TimePicker.propTypes) !== null && _TimePicker$propTypes !== void 0 && _TimePicker$propTypes.format);
      var formatSingleValue = function formatSingleValue2(value3) {
        return value3 && value3.isValid() ? value3.format(valueFormat) : void 0;
      };
      var handleChange = function handleChange2(value3) {
        setValue2(formatSingleValue(value3));
      };
      var hasSeconds = timeFormat.indexOf(":ss") != -1;
      var timeValue = value2 ? moment(value2, timeFormat) : null;
      var renderInput = function renderInput2(params) {
        return /* @__PURE__ */ React$4.createElement(TextField$1, _extends$1({
          size: "small",
          variant: "standard"
        }, params));
      };
      var desktopModeMediaQuery = "@media (pointer: fine), (pointer: none)";
      var pickerProps = isV62 ? {
        format: timeFormat,
        slotProps: {
          textField: {
            size: "small",
            variant: "standard"
          },
          toolbar: {
            toolbarPlaceholder: !readonly ? placeholder : ""
          }
        }
      } : {
        inputFormat: timeFormat,
        renderInput,
        toolbarPlaceholder: !readonly ? placeholder : ""
      };
      return /* @__PURE__ */ React$4.createElement(FormControl$1, null, /* @__PURE__ */ React$4.createElement(TimePicker, _extends$1({
        desktopModeMediaQuery,
        readOnly: readonly,
        disabled: readonly,
        ampm: !!use12Hours,
        value: timeValue,
        onChange: handleChange,
        views: hasSeconds ? ["hours", "minutes", "seconds"] : ["hours", "minutes"]
      }, pickerProps, customProps)));
    };
    var mapListValues$1 = Utils.ListUtils.mapListValues;
    const MuiSelectWidget = function(_ref) {
      var listValues2 = _ref.listValues, value2 = _ref.value, setValue2 = _ref.setValue;
      _ref.allowCustomValues;
      var readonly = _ref.readonly, placeholder = _ref.placeholder, customProps = _ref.customProps;
      var renderOptions = function renderOptions2() {
        return mapListValues$1(listValues2, function(_ref2) {
          var title = _ref2.title, value3 = _ref2.value;
          return /* @__PURE__ */ React$4.createElement(MenuItem$1, {
            key: value3,
            value: value3
          }, title);
        });
      };
      var onChange = function onChange2(e2) {
        if (e2.target.value === void 0)
          return;
        setValue2(e2.target.value);
      };
      var renderValue = function renderValue2(selectedValue) {
        if (!readonly && selectedValue == null)
          return placeholder;
        return getListValueTitle(selectedValue);
      };
      var getListValueTitle = function getListValueTitle2(selectedValue) {
        return mapListValues$1(listValues2, function(_ref3) {
          var title = _ref3.title, value3 = _ref3.value;
          return value3 === selectedValue ? title : null;
        }).filter(function(v2) {
          return v2 !== null;
        }).shift();
      };
      var hasValue2 = value2 != null;
      return /* @__PURE__ */ React$4.createElement(FormControl$1, null, /* @__PURE__ */ React$4.createElement(Select$1, _extends$1({
        variant: "standard",
        autoWidth: true,
        displayEmpty: true,
        placeholder: !readonly ? placeholder : "",
        onChange,
        value: hasValue2 ? value2 : "",
        disabled: readonly,
        readOnly: readonly,
        renderValue,
        size: "small"
      }, omit$1(customProps, ["showSearch", "input"])), renderOptions()));
    };
    const MuiNumberWidget = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, min2 = props.min, max2 = props.max, step = props.step, placeholder = props.placeholder, customProps = props.customProps;
      var onChange = function onChange2(e2) {
        var val = e2.target.value;
        if (val === "" || val === null)
          val = void 0;
        else
          val = Number(val);
        setValue2(val);
      };
      var numberValue = value2 == void 0 ? "" : value2;
      return /* @__PURE__ */ React$4.createElement(FormControl$1, null, /* @__PURE__ */ React$4.createElement(TextField$1, _extends$1({
        variant: "standard",
        type: "number",
        value: numberValue,
        placeholder: !readonly ? placeholder : "",
        InputProps: {
          readOnly: readonly
        },
        inputProps: {
          min: min2,
          max: max2,
          step
        },
        disabled: readonly,
        onChange,
        size: "small"
      }, customProps)));
    };
    const shouldSpreadAdditionalProps = (Slot) => {
      return !Slot || !isHostComponent$1(Slot);
    };
    const shouldSpreadAdditionalProps$1 = shouldSpreadAdditionalProps;
    function getSliderUtilityClass(slot) {
      return generateUtilityClass("MuiSlider", slot);
    }
    const sliderClasses = generateUtilityClasses("MuiSlider", ["root", "active", "colorPrimary", "colorSecondary", "disabled", "dragging", "focusVisible", "mark", "markActive", "marked", "markLabel", "markLabelActive", "rail", "sizeSmall", "thumb", "thumbColorPrimary", "thumbColorSecondary", "track", "trackInverted", "trackFalse", "thumbSizeSmall", "valueLabel", "valueLabelOpen", "valueLabelCircle", "valueLabelLabel", "vertical"]);
    const sliderClasses$1 = sliderClasses;
    const useValueLabelClasses = (props) => {
      const {
        open
      } = props;
      const utilityClasses = {
        offset: clsx(open && sliderClasses$1.valueLabelOpen),
        circle: sliderClasses$1.valueLabelCircle,
        label: sliderClasses$1.valueLabelLabel
      };
      return utilityClasses;
    };
    function SliderValueLabel(props) {
      const {
        children,
        className,
        value: value2
      } = props;
      const classes = useValueLabelClasses(props);
      if (!children) {
        return null;
      }
      return /* @__PURE__ */ reactExports.cloneElement(children, {
        className: clsx(children.props.className)
      }, /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
        children: [children.props.children, /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
          className: clsx(classes.offset, className),
          "aria-hidden": true,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
            className: classes.circle,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
              className: classes.label,
              children: value2
            })
          })
        })]
      }));
    }
    const _excluded$d = ["aria-label", "aria-valuetext", "aria-labelledby", "component", "components", "componentsProps", "color", "classes", "className", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "size", "step", "scale", "slotProps", "slots", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat"];
    function Identity(x2) {
      return x2;
    }
    const SliderRoot = styled$1("span", {
      name: "MuiSlider",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[`color${capitalize(ownerState.color)}`], ownerState.size !== "medium" && styles2[`size${capitalize(ownerState.size)}`], ownerState.marked && styles2.marked, ownerState.orientation === "vertical" && styles2.vertical, ownerState.track === "inverted" && styles2.trackInverted, ownerState.track === false && styles2.trackFalse];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      borderRadius: 12,
      boxSizing: "content-box",
      display: "inline-block",
      position: "relative",
      cursor: "pointer",
      touchAction: "none",
      color: (theme.vars || theme).palette[ownerState.color].main,
      WebkitTapHighlightColor: "transparent"
    }, ownerState.orientation === "horizontal" && _extends$1({
      height: 4,
      width: "100%",
      padding: "13px 0",
      // The primary input mechanism of the device includes a pointing device of limited accuracy.
      "@media (pointer: coarse)": {
        // Reach 42px touch target, about ~8mm on screen.
        padding: "20px 0"
      }
    }, ownerState.size === "small" && {
      height: 2
    }, ownerState.marked && {
      marginBottom: 20
    }), ownerState.orientation === "vertical" && _extends$1({
      height: "100%",
      width: 4,
      padding: "0 13px",
      // The primary input mechanism of the device includes a pointing device of limited accuracy.
      "@media (pointer: coarse)": {
        // Reach 42px touch target, about ~8mm on screen.
        padding: "0 20px"
      }
    }, ownerState.size === "small" && {
      width: 2
    }, ownerState.marked && {
      marginRight: 44
    }), {
      "@media print": {
        colorAdjust: "exact"
      },
      [`&.${sliderClasses$1.disabled}`]: {
        pointerEvents: "none",
        cursor: "default",
        color: (theme.vars || theme).palette.grey[400]
      },
      [`&.${sliderClasses$1.dragging}`]: {
        [`& .${sliderClasses$1.thumb}, & .${sliderClasses$1.track}`]: {
          transition: "none"
        }
      }
    }));
    const SliderRail = styled$1("span", {
      name: "MuiSlider",
      slot: "Rail",
      overridesResolver: (props, styles2) => styles2.rail
    })(({
      ownerState
    }) => _extends$1({
      display: "block",
      position: "absolute",
      borderRadius: "inherit",
      backgroundColor: "currentColor",
      opacity: 0.38
    }, ownerState.orientation === "horizontal" && {
      width: "100%",
      height: "inherit",
      top: "50%",
      transform: "translateY(-50%)"
    }, ownerState.orientation === "vertical" && {
      height: "100%",
      width: "inherit",
      left: "50%",
      transform: "translateX(-50%)"
    }, ownerState.track === "inverted" && {
      opacity: 1
    }));
    const SliderTrack = styled$1("span", {
      name: "MuiSlider",
      slot: "Track",
      overridesResolver: (props, styles2) => styles2.track
    })(({
      theme,
      ownerState
    }) => {
      const color2 = (
        // Same logic as the LinearProgress track color
        theme.palette.mode === "light" ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.5)
      );
      return _extends$1({
        display: "block",
        position: "absolute",
        borderRadius: "inherit",
        border: "1px solid currentColor",
        backgroundColor: "currentColor",
        transition: theme.transitions.create(["left", "width", "bottom", "height"], {
          duration: theme.transitions.duration.shortest
        })
      }, ownerState.size === "small" && {
        border: "none"
      }, ownerState.orientation === "horizontal" && {
        height: "inherit",
        top: "50%",
        transform: "translateY(-50%)"
      }, ownerState.orientation === "vertical" && {
        width: "inherit",
        left: "50%",
        transform: "translateX(-50%)"
      }, ownerState.track === false && {
        display: "none"
      }, ownerState.track === "inverted" && {
        backgroundColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color2,
        borderColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color2
      });
    });
    const SliderThumb = styled$1("span", {
      name: "MuiSlider",
      slot: "Thumb",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.thumb, styles2[`thumbColor${capitalize(ownerState.color)}`], ownerState.size !== "medium" && styles2[`thumbSize${capitalize(ownerState.size)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      position: "absolute",
      width: 20,
      height: 20,
      boxSizing: "border-box",
      borderRadius: "50%",
      outline: 0,
      backgroundColor: "currentColor",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      transition: theme.transitions.create(["box-shadow", "left", "bottom"], {
        duration: theme.transitions.duration.shortest
      })
    }, ownerState.size === "small" && {
      width: 12,
      height: 12
    }, ownerState.orientation === "horizontal" && {
      top: "50%",
      transform: "translate(-50%, -50%)"
    }, ownerState.orientation === "vertical" && {
      left: "50%",
      transform: "translate(-50%, 50%)"
    }, {
      "&:before": _extends$1({
        position: "absolute",
        content: '""',
        borderRadius: "inherit",
        width: "100%",
        height: "100%",
        boxShadow: (theme.vars || theme).shadows[2]
      }, ownerState.size === "small" && {
        boxShadow: "none"
      }),
      "&::after": {
        position: "absolute",
        content: '""',
        borderRadius: "50%",
        // 42px is the hit target
        width: 42,
        height: 42,
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)"
      },
      [`&:hover, &.${sliderClasses$1.focusVisible}`]: {
        boxShadow: `0px 0px 0px 8px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : alpha(theme.palette[ownerState.color].main, 0.16)}`,
        "@media (hover: none)": {
          boxShadow: "none"
        }
      },
      [`&.${sliderClasses$1.active}`]: {
        boxShadow: `0px 0px 0px 14px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : alpha(theme.palette[ownerState.color].main, 0.16)}`
      },
      [`&.${sliderClasses$1.disabled}`]: {
        "&:hover": {
          boxShadow: "none"
        }
      }
    }));
    const StyledSliderValueLabel = styled$1(SliderValueLabel, {
      name: "MuiSlider",
      slot: "ValueLabel",
      overridesResolver: (props, styles2) => styles2.valueLabel
    })(({
      theme,
      ownerState
    }) => _extends$1({
      [`&.${sliderClasses$1.valueLabelOpen}`]: {
        transform: `${ownerState.orientation === "vertical" ? "translateY(-50%)" : "translateY(-100%)"} scale(1)`
      },
      zIndex: 1,
      whiteSpace: "nowrap"
    }, theme.typography.body2, {
      fontWeight: 500,
      transition: theme.transitions.create(["transform"], {
        duration: theme.transitions.duration.shortest
      }),
      transform: `${ownerState.orientation === "vertical" ? "translateY(-50%)" : "translateY(-100%)"} scale(0)`,
      position: "absolute",
      backgroundColor: (theme.vars || theme).palette.grey[600],
      borderRadius: 2,
      color: (theme.vars || theme).palette.common.white,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      padding: "0.25rem 0.75rem"
    }, ownerState.orientation === "horizontal" && {
      top: "-10px",
      transformOrigin: "bottom center",
      "&:before": {
        position: "absolute",
        content: '""',
        width: 8,
        height: 8,
        transform: "translate(-50%, 50%) rotate(45deg)",
        backgroundColor: "inherit",
        bottom: 0,
        left: "50%"
      }
    }, ownerState.orientation === "vertical" && {
      right: ownerState.size === "small" ? "20px" : "30px",
      top: "50%",
      transformOrigin: "right center",
      "&:before": {
        position: "absolute",
        content: '""',
        width: 8,
        height: 8,
        transform: "translate(-50%, -50%) rotate(45deg)",
        backgroundColor: "inherit",
        right: "-20%",
        top: "50%"
      }
    }, ownerState.size === "small" && {
      fontSize: theme.typography.pxToRem(12),
      padding: "0.25rem 0.5rem"
    }));
    const SliderMark = styled$1("span", {
      name: "MuiSlider",
      slot: "Mark",
      shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "markActive",
      overridesResolver: (props, styles2) => {
        const {
          markActive
        } = props;
        return [styles2.mark, markActive && styles2.markActive];
      }
    })(({
      theme,
      ownerState,
      markActive
    }) => _extends$1({
      position: "absolute",
      width: 2,
      height: 2,
      borderRadius: 1,
      backgroundColor: "currentColor"
    }, ownerState.orientation === "horizontal" && {
      top: "50%",
      transform: "translate(-1px, -50%)"
    }, ownerState.orientation === "vertical" && {
      left: "50%",
      transform: "translate(-50%, 1px)"
    }, markActive && {
      backgroundColor: (theme.vars || theme).palette.background.paper,
      opacity: 0.8
    }));
    const SliderMarkLabel = styled$1("span", {
      name: "MuiSlider",
      slot: "MarkLabel",
      shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "markLabelActive",
      overridesResolver: (props, styles2) => styles2.markLabel
    })(({
      theme,
      ownerState,
      markLabelActive
    }) => _extends$1({}, theme.typography.body2, {
      color: (theme.vars || theme).palette.text.secondary,
      position: "absolute",
      whiteSpace: "nowrap"
    }, ownerState.orientation === "horizontal" && {
      top: 30,
      transform: "translateX(-50%)",
      "@media (pointer: coarse)": {
        top: 40
      }
    }, ownerState.orientation === "vertical" && {
      left: 36,
      transform: "translateY(50%)",
      "@media (pointer: coarse)": {
        left: 44
      }
    }, markLabelActive && {
      color: (theme.vars || theme).palette.text.primary
    }));
    const useUtilityClasses$9 = (ownerState) => {
      const {
        disabled,
        dragging,
        marked,
        orientation,
        track,
        classes,
        color: color2,
        size
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse", color2 && `color${capitalize(color2)}`, size && `size${capitalize(size)}`],
        rail: ["rail"],
        track: ["track"],
        mark: ["mark"],
        markActive: ["markActive"],
        markLabel: ["markLabel"],
        markLabelActive: ["markLabelActive"],
        valueLabel: ["valueLabel"],
        thumb: ["thumb", disabled && "disabled", size && `thumbSize${capitalize(size)}`, color2 && `thumbColor${capitalize(color2)}`],
        active: ["active"],
        disabled: ["disabled"],
        focusVisible: ["focusVisible"]
      };
      return composeClasses(slots, getSliderUtilityClass, classes);
    };
    const Forward = ({
      children
    }) => children;
    const Slider = /* @__PURE__ */ reactExports.forwardRef(function Slider2(inputProps, ref) {
      var _ref, _slots$root, _ref2, _slots$rail, _ref3, _slots$track, _ref4, _slots$thumb, _ref5, _slots$valueLabel, _ref6, _slots$mark, _ref7, _slots$markLabel, _ref8, _slots$input, _slotProps$root, _slotProps$rail, _slotProps$track, _slotProps$thumb, _slotProps$valueLabel, _slotProps$mark, _slotProps$markLabel, _slotProps$input;
      const props = useThemeProps({
        props: inputProps,
        name: "MuiSlider"
      });
      const theme = useTheme();
      const isRtl = theme.direction === "rtl";
      const {
        "aria-label": ariaLabel,
        "aria-valuetext": ariaValuetext,
        "aria-labelledby": ariaLabelledby,
        // eslint-disable-next-line react/prop-types
        component = "span",
        components = {},
        componentsProps = {},
        color: color2 = "primary",
        classes: classesProp,
        className,
        disableSwap = false,
        disabled = false,
        getAriaLabel,
        getAriaValueText,
        marks: marksProp = false,
        max: max2 = 100,
        min: min2 = 0,
        orientation = "horizontal",
        size = "medium",
        step = 1,
        scale = Identity,
        slotProps,
        slots,
        track = "normal",
        valueLabelDisplay = "off",
        valueLabelFormat = Identity
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$d);
      const ownerState = _extends$1({}, props, {
        isRtl,
        max: max2,
        min: min2,
        classes: classesProp,
        disabled,
        disableSwap,
        orientation,
        marks: marksProp,
        color: color2,
        size,
        step,
        scale,
        track,
        valueLabelDisplay,
        valueLabelFormat
      });
      const {
        axisProps: axisProps2,
        getRootProps,
        getHiddenInputProps,
        getThumbProps,
        open,
        active,
        axis,
        focusedThumbIndex,
        range: range2,
        dragging,
        marks,
        values: values2,
        trackOffset,
        trackLeap
      } = useSlider(_extends$1({}, ownerState, {
        rootRef: ref
      }));
      ownerState.marked = marks.length > 0 && marks.some((mark) => mark.label);
      ownerState.dragging = dragging;
      ownerState.focusedThumbIndex = focusedThumbIndex;
      const classes = useUtilityClasses$9(ownerState);
      const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : SliderRoot;
      const RailSlot = (_ref2 = (_slots$rail = slots == null ? void 0 : slots.rail) != null ? _slots$rail : components.Rail) != null ? _ref2 : SliderRail;
      const TrackSlot = (_ref3 = (_slots$track = slots == null ? void 0 : slots.track) != null ? _slots$track : components.Track) != null ? _ref3 : SliderTrack;
      const ThumbSlot = (_ref4 = (_slots$thumb = slots == null ? void 0 : slots.thumb) != null ? _slots$thumb : components.Thumb) != null ? _ref4 : SliderThumb;
      const ValueLabelSlot = (_ref5 = (_slots$valueLabel = slots == null ? void 0 : slots.valueLabel) != null ? _slots$valueLabel : components.ValueLabel) != null ? _ref5 : StyledSliderValueLabel;
      const MarkSlot = (_ref6 = (_slots$mark = slots == null ? void 0 : slots.mark) != null ? _slots$mark : components.Mark) != null ? _ref6 : SliderMark;
      const MarkLabelSlot = (_ref7 = (_slots$markLabel = slots == null ? void 0 : slots.markLabel) != null ? _slots$markLabel : components.MarkLabel) != null ? _ref7 : SliderMarkLabel;
      const InputSlot = (_ref8 = (_slots$input = slots == null ? void 0 : slots.input) != null ? _slots$input : components.Input) != null ? _ref8 : "input";
      const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
      const railSlotProps = (_slotProps$rail = slotProps == null ? void 0 : slotProps.rail) != null ? _slotProps$rail : componentsProps.rail;
      const trackSlotProps = (_slotProps$track = slotProps == null ? void 0 : slotProps.track) != null ? _slotProps$track : componentsProps.track;
      const thumbSlotProps = (_slotProps$thumb = slotProps == null ? void 0 : slotProps.thumb) != null ? _slotProps$thumb : componentsProps.thumb;
      const valueLabelSlotProps = (_slotProps$valueLabel = slotProps == null ? void 0 : slotProps.valueLabel) != null ? _slotProps$valueLabel : componentsProps.valueLabel;
      const markSlotProps = (_slotProps$mark = slotProps == null ? void 0 : slotProps.mark) != null ? _slotProps$mark : componentsProps.mark;
      const markLabelSlotProps = (_slotProps$markLabel = slotProps == null ? void 0 : slotProps.markLabel) != null ? _slotProps$markLabel : componentsProps.markLabel;
      const inputSlotProps = (_slotProps$input = slotProps == null ? void 0 : slotProps.input) != null ? _slotProps$input : componentsProps.input;
      const rootProps = useSlotProps$1({
        elementType: RootSlot,
        getSlotProps: getRootProps,
        externalSlotProps: rootSlotProps,
        externalForwardedProps: other,
        additionalProps: _extends$1({}, shouldSpreadAdditionalProps$1(RootSlot) && {
          as: component
        }),
        ownerState: _extends$1({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
        className: [classes.root, className]
      });
      const railProps = useSlotProps$1({
        elementType: RailSlot,
        externalSlotProps: railSlotProps,
        ownerState,
        className: classes.rail
      });
      const trackProps = useSlotProps$1({
        elementType: TrackSlot,
        externalSlotProps: trackSlotProps,
        additionalProps: {
          style: _extends$1({}, axisProps2[axis].offset(trackOffset), axisProps2[axis].leap(trackLeap))
        },
        ownerState: _extends$1({}, ownerState, trackSlotProps == null ? void 0 : trackSlotProps.ownerState),
        className: classes.track
      });
      const thumbProps = useSlotProps$1({
        elementType: ThumbSlot,
        getSlotProps: getThumbProps,
        externalSlotProps: thumbSlotProps,
        ownerState: _extends$1({}, ownerState, thumbSlotProps == null ? void 0 : thumbSlotProps.ownerState),
        className: classes.thumb
      });
      const valueLabelProps = useSlotProps$1({
        elementType: ValueLabelSlot,
        externalSlotProps: valueLabelSlotProps,
        ownerState: _extends$1({}, ownerState, valueLabelSlotProps == null ? void 0 : valueLabelSlotProps.ownerState),
        className: classes.valueLabel
      });
      const markProps = useSlotProps$1({
        elementType: MarkSlot,
        externalSlotProps: markSlotProps,
        ownerState,
        className: classes.mark
      });
      const markLabelProps = useSlotProps$1({
        elementType: MarkLabelSlot,
        externalSlotProps: markLabelSlotProps,
        ownerState,
        className: classes.markLabel
      });
      const inputSliderProps = useSlotProps$1({
        elementType: InputSlot,
        getSlotProps: getHiddenInputProps,
        externalSlotProps: inputSlotProps,
        ownerState
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(RootSlot, _extends$1({}, rootProps, {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(RailSlot, _extends$1({}, railProps)), /* @__PURE__ */ jsxRuntimeExports.jsx(TrackSlot, _extends$1({}, trackProps)), marks.filter((mark) => mark.value >= min2 && mark.value <= max2).map((mark, index) => {
          const percent = valueToPercent(mark.value, min2, max2);
          const style2 = axisProps2[axis].offset(percent);
          let markActive;
          if (track === false) {
            markActive = values2.indexOf(mark.value) !== -1;
          } else {
            markActive = track === "normal" && (range2 ? mark.value >= values2[0] && mark.value <= values2[values2.length - 1] : mark.value <= values2[0]) || track === "inverted" && (range2 ? mark.value <= values2[0] || mark.value >= values2[values2.length - 1] : mark.value >= values2[0]);
          }
          return /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
            children: [/* @__PURE__ */ jsxRuntimeExports.jsx(MarkSlot, _extends$1({
              "data-index": index
            }, markProps, !isHostComponent$1(MarkSlot) && {
              markActive
            }, {
              style: _extends$1({}, style2, markProps.style),
              className: clsx(markProps.className, markActive && classes.markActive)
            })), mark.label != null ? /* @__PURE__ */ jsxRuntimeExports.jsx(MarkLabelSlot, _extends$1({
              "aria-hidden": true,
              "data-index": index
            }, markLabelProps, !isHostComponent$1(MarkLabelSlot) && {
              markLabelActive: markActive
            }, {
              style: _extends$1({}, style2, markLabelProps.style),
              className: clsx(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
              children: mark.label
            })) : null]
          }, index);
        }), values2.map((value2, index) => {
          const percent = valueToPercent(value2, min2, max2);
          const style2 = axisProps2[axis].offset(percent);
          const ValueLabelComponent = valueLabelDisplay === "off" ? Forward : ValueLabelSlot;
          return (
            /* TODO v6: Change component structure. It will help in avoiding the complicated React.cloneElement API added in SliderValueLabel component. Should be: Thumb -> Input, ValueLabel. Follow Joy UI's Slider structure. */
            /* @__PURE__ */ jsxRuntimeExports.jsx(ValueLabelComponent, _extends$1({}, !isHostComponent$1(ValueLabelComponent) && {
              valueLabelFormat,
              valueLabelDisplay,
              value: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value2), index) : valueLabelFormat,
              index,
              open: open === index || active === index || valueLabelDisplay === "on",
              disabled
            }, valueLabelProps, {
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(ThumbSlot, _extends$1({
                "data-index": index
              }, thumbProps, {
                className: clsx(classes.thumb, thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),
                style: _extends$1({}, style2, {
                  pointerEvents: disableSwap && active !== index ? "none" : void 0
                }, thumbProps.style),
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(InputSlot, _extends$1({
                  "data-index": index,
                  "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
                  "aria-valuenow": scale(value2),
                  "aria-labelledby": ariaLabelledby,
                  "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value2), index) : ariaValuetext,
                  value: values2[index]
                }, inputSliderProps))
              }))
            }), index)
          );
        })]
      }));
    });
    const Slider$1 = Slider;
    var _excluded$c = ["width"];
    const MuiSliderWidget = function(props) {
      var config2 = props.config, placeholder = props.placeholder, customProps = props.customProps, value2 = props.value, setValue2 = props.setValue, min2 = props.min, max2 = props.max, step = props.step, marks = props.marks, readonly = props.readonly;
      var defaultSliderWidth = config2.settings.defaultSliderWidth;
      var handleSliderChange = reactExports.useCallback(function(_e, newValue) {
        setValue2(newValue);
      }, []);
      var handleInputChange = function handleInputChange2(e2) {
        var val = e2.target.value;
        if (val === "" || val === null)
          val = void 0;
        else
          val = Number(val);
        setValue2(val);
      };
      var handleInputBlur = function handleInputBlur2() {
        if (value2 < min2) {
          setValue2(min2);
        } else if (value2 > max2) {
          setValue2(max2);
        }
      };
      var _ref = customProps || {}, width2 = _ref.width, rest = _objectWithoutProperties(_ref, _excluded$c);
      var customInputProps = rest.input || {};
      var customSliderProps = rest.slider || rest;
      var inputValue = typeof value2 === "number" ? value2 : "";
      var sliderValue = typeof value2 === "number" ? value2 : null;
      var muiMarks = reactExports.useMemo(function() {
        return marks ? Object.keys(marks).map(function(v2) {
          return {
            value: Number(v2),
            label: _typeof$1(marks[v2]) === "object" || typeof marks[v2] === "undefined" ? marks[v2] : /* @__PURE__ */ React$4.createElement("p", null, marks[v2])
          };
        }) : false;
      }, [marks]);
      var InputCmp = /* @__PURE__ */ React$4.createElement(TextField$1, _extends$1({
        variant: "standard",
        type: "number",
        value: inputValue,
        placeholder,
        InputProps: {
          readOnly: readonly
        },
        inputProps: {
          min: min2,
          max: max2,
          step
        },
        disabled: readonly,
        onChange: handleInputChange,
        onBlur: handleInputBlur,
        size: "small"
      }, customInputProps));
      var SliderCmp = /* @__PURE__ */ React$4.createElement(Slider$1, _extends$1({
        value: sliderValue,
        onChange: handleSliderChange,
        disabled: readonly,
        min: min2,
        max: max2,
        step,
        marks: muiMarks,
        valueLabelDisplay: "auto",
        size: "small"
      }, customSliderProps));
      var stylesWrapper = {
        display: "inline-flex",
        alignItems: "center",
        flexWrap: "wrap"
      };
      var stylesInputWrapper = {
        marginLeft: "5px"
      };
      var stylesSliderWrapper = {
        marginLeft: "5px",
        paddingLeft: "12px",
        marginBottom: muiMarks && "-16px",
        width: width2 || defaultSliderWidth
      };
      return /* @__PURE__ */ React$4.createElement(FormControl$1, null, /* @__PURE__ */ React$4.createElement("div", {
        style: stylesWrapper
      }, /* @__PURE__ */ React$4.createElement("div", {
        style: stylesInputWrapper
      }, InputCmp), /* @__PURE__ */ React$4.createElement("div", {
        style: stylesSliderWrapper
      }, SliderCmp)));
    };
    var _excluded$b = ["width"];
    const MuiRangeWidget = function(props) {
      var config2 = props.config, placeholders = props.placeholders, customProps = props.customProps, value2 = props.value, setValue2 = props.setValue, min2 = props.min, max2 = props.max, step = props.step, marks = props.marks, readonly = props.readonly, textSeparators = props.textSeparators;
      var defaultSliderWidth = config2.settings.defaultSliderWidth;
      reactExports.useEffect(function() {
        var _ref = props.value || [void 0, void 0], _ref2 = _slicedToArray(_ref, 2), valueFrom2 = _ref2[0], valueTo2 = _ref2[1];
        if (props.value && (valueFrom2 == void 0 || valueTo2 == void 0)) {
          setTimeout(function() {
            var oneValue = valueFrom2 || valueTo2;
            var value3 = [oneValue, oneValue];
            setValue2(value3);
          }, 1);
        }
      }, []);
      var handleSliderChange = function handleSliderChange2(_e, newValues) {
        setValue2(newValues);
      };
      var handleInputChangeFrom = function handleInputChangeFrom2(e2) {
        var valueFrom2 = e2.target.value;
        if (valueFrom2 === "" || valueFrom2 == null)
          valueFrom2 = void 0;
        else
          valueFrom2 = Number(valueFrom2);
        var value3 = props.value ? _toConsumableArray(props.value) : [void 0, void 0];
        value3[0] = valueFrom2;
        setValue2(value3);
      };
      var handleInputChangeTo = function handleInputChangeTo2(e2) {
        var valueTo2 = e2.target.value;
        if (valueTo2 === "" || valueTo2 == null)
          valueTo2 = void 0;
        else
          valueTo2 = Number(valueTo2);
        var value3 = props.value ? _toConsumableArray(props.value) : [void 0, void 0];
        value3[1] = valueTo2;
        setValue2(value3);
      };
      var handleInputBlur = function handleInputBlur2() {
        if (!value2)
          return;
        if (value2[0] < min2) {
          setValue2([min2, value2[1]]);
        } else if (value2[1] > max2) {
          setValue2([value2[0], max2]);
        }
      };
      var _ref3 = customProps || {}, width2 = _ref3.width, rest = _objectWithoutProperties(_ref3, _excluded$b);
      var customInputProps = rest.input || {};
      var customSliderProps = rest.slider || rest;
      var muiMarks = marks ? Object.keys(marks).map(function(v2) {
        return {
          value: Number(v2),
          label: _typeof$1(marks[v2]) === "object" || typeof marks[v2] === "undefined" ? marks[v2] : /* @__PURE__ */ React$4.createElement("p", null, marks[v2])
        };
      }) : false;
      var sliderValue = value2 ? _toConsumableArray(value2) : [void 0, void 0];
      var _sliderValue = _slicedToArray(sliderValue, 2), valueFrom = _sliderValue[0], valueTo = _sliderValue[1];
      if (valueFrom == void 0) {
        valueFrom = "";
        sliderValue[0] = 0;
      }
      if (valueTo == void 0) {
        valueTo = "";
        sliderValue[1] = 0;
      }
      var FromInputCmp = /* @__PURE__ */ React$4.createElement(TextField$1, _extends$1({
        variant: "standard",
        type: "number",
        value: valueFrom,
        placeholder: placeholders[0],
        InputProps: {
          readOnly: readonly
        },
        inputProps: {
          min: min2,
          max: max2,
          step
        },
        disabled: readonly,
        onChange: handleInputChangeFrom,
        onBlur: handleInputBlur,
        size: "small"
      }, customInputProps));
      var ToInputCmp = /* @__PURE__ */ React$4.createElement(TextField$1, _extends$1({
        variant: "standard",
        type: "number",
        value: valueTo,
        placeholder: placeholders[1],
        InputProps: {
          readOnly: readonly
        },
        inputProps: {
          min: min2,
          max: max2,
          step
        },
        disabled: readonly,
        onChange: handleInputChangeTo,
        onBlur: handleInputBlur,
        size: "small"
      }, customInputProps));
      var SliderCmp = /* @__PURE__ */ React$4.createElement(Slider$1, _extends$1({
        value: sliderValue,
        onChange: handleSliderChange,
        disabled: readonly,
        min: min2,
        max: max2,
        step,
        marks: muiMarks,
        valueLabelDisplay: "auto",
        size: "small"
      }, customSliderProps));
      var stylesWrapper = {
        display: "inline-flex",
        flexWrap: "wrap"
      };
      var stylesInputWrapper = {
        marginLeft: "5px"
      };
      var stylesSliderWrapper = {
        marginLeft: "5px",
        paddingLeft: "12px",
        marginBottom: muiMarks && "-16px",
        width: width2 || defaultSliderWidth
      };
      return /* @__PURE__ */ React$4.createElement(FormControl$1, null, /* @__PURE__ */ React$4.createElement("div", {
        style: stylesWrapper
      }, /* @__PURE__ */ React$4.createElement("div", {
        style: stylesInputWrapper
      }, FromInputCmp), /* @__PURE__ */ React$4.createElement("div", {
        className: "widget--sep"
      }, /* @__PURE__ */ React$4.createElement("span", null, textSeparators[1])), /* @__PURE__ */ React$4.createElement("div", {
        style: stylesInputWrapper
      }, ToInputCmp), /* @__PURE__ */ React$4.createElement("div", {
        style: stylesSliderWrapper
      }, SliderCmp)));
    };
    function getSwitchBaseUtilityClass(slot) {
      return generateUtilityClass("PrivateSwitchBase", slot);
    }
    generateUtilityClasses("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);
    const _excluded$a = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
    const useUtilityClasses$8 = (ownerState) => {
      const {
        classes,
        checked,
        disabled,
        edge
      } = ownerState;
      const slots = {
        root: ["root", checked && "checked", disabled && "disabled", edge && `edge${capitalize(edge)}`],
        input: ["input"]
      };
      return composeClasses(slots, getSwitchBaseUtilityClass, classes);
    };
    const SwitchBaseRoot = styled$1(ButtonBase$1)(({
      ownerState
    }) => _extends$1({
      padding: 9,
      borderRadius: "50%"
    }, ownerState.edge === "start" && {
      marginLeft: ownerState.size === "small" ? -3 : -12
    }, ownerState.edge === "end" && {
      marginRight: ownerState.size === "small" ? -3 : -12
    }));
    const SwitchBaseInput = styled$1("input")({
      cursor: "inherit",
      position: "absolute",
      opacity: 0,
      width: "100%",
      height: "100%",
      top: 0,
      left: 0,
      margin: 0,
      padding: 0,
      zIndex: 1
    });
    const SwitchBase = /* @__PURE__ */ reactExports.forwardRef(function SwitchBase2(props, ref) {
      const {
        autoFocus,
        checked: checkedProp,
        checkedIcon,
        className,
        defaultChecked,
        disabled: disabledProp,
        disableFocusRipple = false,
        edge = false,
        icon,
        id: id2,
        inputProps,
        inputRef,
        name,
        onBlur,
        onChange,
        onFocus,
        readOnly,
        required = false,
        tabIndex,
        type,
        value: value2
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$a);
      const [checked, setCheckedState] = useControlled$2({
        controlled: checkedProp,
        default: Boolean(defaultChecked),
        name: "SwitchBase",
        state: "checked"
      });
      const muiFormControl = useFormControl();
      const handleFocus = (event) => {
        if (onFocus) {
          onFocus(event);
        }
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        }
      };
      const handleBlur = (event) => {
        if (onBlur) {
          onBlur(event);
        }
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        }
      };
      const handleInputChange = (event) => {
        if (event.nativeEvent.defaultPrevented) {
          return;
        }
        const newChecked = event.target.checked;
        setCheckedState(newChecked);
        if (onChange) {
          onChange(event, newChecked);
        }
      };
      let disabled = disabledProp;
      if (muiFormControl) {
        if (typeof disabled === "undefined") {
          disabled = muiFormControl.disabled;
        }
      }
      const hasLabelFor = type === "checkbox" || type === "radio";
      const ownerState = _extends$1({}, props, {
        checked,
        disabled,
        disableFocusRipple,
        edge
      });
      const classes = useUtilityClasses$8(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(SwitchBaseRoot, _extends$1({
        component: "span",
        className: clsx(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled,
        tabIndex: null,
        role: void 0,
        onFocus: handleFocus,
        onBlur: handleBlur,
        ownerState,
        ref
      }, other, {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(SwitchBaseInput, _extends$1({
          autoFocus,
          checked: checkedProp,
          defaultChecked,
          className: classes.input,
          disabled,
          id: hasLabelFor ? id2 : void 0,
          name,
          onChange: handleInputChange,
          readOnly,
          ref: inputRef,
          required,
          ownerState,
          tabIndex,
          type
        }, type === "checkbox" && value2 === void 0 ? {} : {
          value: value2
        }, inputProps)), checked ? checkedIcon : icon]
      }));
    });
    const SwitchBase$1 = SwitchBase;
    function getSwitchUtilityClass(slot) {
      return generateUtilityClass("MuiSwitch", slot);
    }
    const switchClasses = generateUtilityClasses("MuiSwitch", ["root", "edgeStart", "edgeEnd", "switchBase", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium", "checked", "disabled", "input", "thumb", "track"]);
    const switchClasses$1 = switchClasses;
    const _excluded$9 = ["className", "color", "edge", "size", "sx"];
    const useUtilityClasses$7 = (ownerState) => {
      const {
        classes,
        edge,
        size,
        color: color2,
        checked,
        disabled
      } = ownerState;
      const slots = {
        root: ["root", edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`],
        switchBase: ["switchBase", `color${capitalize(color2)}`, checked && "checked", disabled && "disabled"],
        thumb: ["thumb"],
        track: ["track"],
        input: ["input"]
      };
      const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const SwitchRoot = styled$1("span", {
      name: "MuiSwitch",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.edge && styles2[`edge${capitalize(ownerState.edge)}`], styles2[`size${capitalize(ownerState.size)}`]];
      }
    })(({
      ownerState
    }) => _extends$1({
      display: "inline-flex",
      width: 34 + 12 * 2,
      height: 14 + 12 * 2,
      overflow: "hidden",
      padding: 12,
      boxSizing: "border-box",
      position: "relative",
      flexShrink: 0,
      zIndex: 0,
      // Reset the stacking context.
      verticalAlign: "middle",
      // For correct alignment with the text.
      "@media print": {
        colorAdjust: "exact"
      }
    }, ownerState.edge === "start" && {
      marginLeft: -8
    }, ownerState.edge === "end" && {
      marginRight: -8
    }, ownerState.size === "small" && {
      width: 40,
      height: 24,
      padding: 7,
      [`& .${switchClasses$1.thumb}`]: {
        width: 16,
        height: 16
      },
      [`& .${switchClasses$1.switchBase}`]: {
        padding: 4,
        [`&.${switchClasses$1.checked}`]: {
          transform: "translateX(16px)"
        }
      }
    }));
    const SwitchSwitchBase = styled$1(SwitchBase$1, {
      name: "MuiSwitch",
      slot: "SwitchBase",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.switchBase, {
          [`& .${switchClasses$1.input}`]: styles2.input
        }, ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`]];
      }
    })(({
      theme
    }) => ({
      position: "absolute",
      top: 0,
      left: 0,
      zIndex: 1,
      // Render above the focus ripple.
      color: theme.vars ? theme.vars.palette.Switch.defaultColor : `${theme.palette.mode === "light" ? theme.palette.common.white : theme.palette.grey[300]}`,
      transition: theme.transitions.create(["left", "transform"], {
        duration: theme.transitions.duration.shortest
      }),
      [`&.${switchClasses$1.checked}`]: {
        transform: "translateX(20px)"
      },
      [`&.${switchClasses$1.disabled}`]: {
        color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : `${theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[600]}`
      },
      [`&.${switchClasses$1.checked} + .${switchClasses$1.track}`]: {
        opacity: 0.5
      },
      [`&.${switchClasses$1.disabled} + .${switchClasses$1.track}`]: {
        opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : `${theme.palette.mode === "light" ? 0.12 : 0.2}`
      },
      [`& .${switchClasses$1.input}`]: {
        left: "-100%",
        width: "300%"
      }
    }), ({
      theme,
      ownerState
    }) => _extends$1({
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }, ownerState.color !== "default" && {
      [`&.${switchClasses$1.checked}`]: {
        color: (theme.vars || theme).palette[ownerState.color].main,
        "&:hover": {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        [`&.${switchClasses$1.disabled}`]: {
          color: theme.vars ? theme.vars.palette.Switch[`${ownerState.color}DisabledColor`] : `${theme.palette.mode === "light" ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.55)}`
        }
      },
      [`&.${switchClasses$1.checked} + .${switchClasses$1.track}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
      }
    }));
    const SwitchTrack = styled$1("span", {
      name: "MuiSwitch",
      slot: "Track",
      overridesResolver: (props, styles2) => styles2.track
    })(({
      theme
    }) => ({
      height: "100%",
      width: "100%",
      borderRadius: 14 / 2,
      zIndex: -1,
      transition: theme.transitions.create(["opacity", "background-color"], {
        duration: theme.transitions.duration.shortest
      }),
      backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : `${theme.palette.mode === "light" ? theme.palette.common.black : theme.palette.common.white}`,
      opacity: theme.vars ? theme.vars.opacity.switchTrack : `${theme.palette.mode === "light" ? 0.38 : 0.3}`
    }));
    const SwitchThumb = styled$1("span", {
      name: "MuiSwitch",
      slot: "Thumb",
      overridesResolver: (props, styles2) => styles2.thumb
    })(({
      theme
    }) => ({
      boxShadow: (theme.vars || theme).shadows[1],
      backgroundColor: "currentColor",
      width: 20,
      height: 20,
      borderRadius: "50%"
    }));
    const Switch = /* @__PURE__ */ reactExports.forwardRef(function Switch2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiSwitch"
      });
      const {
        className,
        color: color2 = "primary",
        edge = false,
        size = "medium",
        sx
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$9);
      const ownerState = _extends$1({}, props, {
        color: color2,
        edge,
        size
      });
      const classes = useUtilityClasses$7(ownerState);
      const icon = /* @__PURE__ */ jsxRuntimeExports.jsx(SwitchThumb, {
        className: classes.thumb,
        ownerState
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(SwitchRoot, {
        className: clsx(classes.root, className),
        sx,
        ownerState,
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(SwitchSwitchBase, _extends$1({
          type: "checkbox",
          icon,
          checkedIcon: icon,
          ref,
          ownerState
        }, other, {
          classes: _extends$1({}, classes, {
            root: classes.switchBase
          })
        })), /* @__PURE__ */ jsxRuntimeExports.jsx(SwitchTrack, {
          className: classes.track,
          ownerState
        })]
      });
    });
    const Switch$1 = Switch;
    const MuiBooleanWidget = function(props) {
      var customProps = props.customProps, value2 = props.value, setValue2 = props.setValue, labelYes = props.labelYes, labelNo = props.labelNo, readonly = props.readonly;
      var onChange = function onChange2() {
        setValue2(!value2);
      };
      return /* @__PURE__ */ React$4.createElement(FormControl$1, null, /* @__PURE__ */ React$4.createElement(Typography$1, {
        component: "div"
      }, /* @__PURE__ */ React$4.createElement(Grid$1, {
        component: "label",
        container: true,
        alignItems: "center",
        spacing: 0
      }, /* @__PURE__ */ React$4.createElement(Grid$1, {
        item: true,
        component: "span"
      }, labelNo), /* @__PURE__ */ React$4.createElement(Grid$1, {
        item: true,
        component: "span"
      }, /* @__PURE__ */ React$4.createElement(Switch$1, _extends$1({
        checked: !!value2,
        onChange,
        disabled: readonly
      }, customProps))), /* @__PURE__ */ React$4.createElement(Grid$1, {
        item: true,
        component: "span"
      }, labelYes))));
    };
    const CheckBoxOutlineBlankIcon = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
      d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
    }), "CheckBoxOutlineBlank");
    const CheckBoxIcon = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
      d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
    }), "CheckBox");
    const IndeterminateCheckBoxIcon = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
      d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
    }), "IndeterminateCheckBox");
    function getCheckboxUtilityClass(slot) {
      return generateUtilityClass("MuiCheckbox", slot);
    }
    const checkboxClasses = generateUtilityClasses("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary"]);
    const checkboxClasses$1 = checkboxClasses;
    const _excluded$8 = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size", "className"];
    const useUtilityClasses$6 = (ownerState) => {
      const {
        classes,
        indeterminate,
        color: color2
      } = ownerState;
      const slots = {
        root: ["root", indeterminate && "indeterminate", `color${capitalize(color2)}`]
      };
      const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const CheckboxRoot = styled$1(SwitchBase$1, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiCheckbox",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.indeterminate && styles2.indeterminate, ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      color: (theme.vars || theme).palette.text.secondary
    }, !ownerState.disableRipple && {
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }, ownerState.color !== "default" && {
      [`&.${checkboxClasses$1.checked}, &.${checkboxClasses$1.indeterminate}`]: {
        color: (theme.vars || theme).palette[ownerState.color].main
      },
      [`&.${checkboxClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled
      }
    }));
    const defaultCheckedIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(CheckBoxIcon, {});
    const defaultIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(CheckBoxOutlineBlankIcon, {});
    const defaultIndeterminateIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(IndeterminateCheckBoxIcon, {});
    const Checkbox = /* @__PURE__ */ reactExports.forwardRef(function Checkbox2(inProps, ref) {
      var _icon$props$fontSize, _indeterminateIcon$pr;
      const props = useThemeProps({
        props: inProps,
        name: "MuiCheckbox"
      });
      const {
        checkedIcon = defaultCheckedIcon,
        color: color2 = "primary",
        icon: iconProp = defaultIcon,
        indeterminate = false,
        indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
        inputProps,
        size = "medium",
        className
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$8);
      const icon = indeterminate ? indeterminateIconProp : iconProp;
      const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
      const ownerState = _extends$1({}, props, {
        color: color2,
        indeterminate,
        size
      });
      const classes = useUtilityClasses$6(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(CheckboxRoot, _extends$1({
        type: "checkbox",
        inputProps: _extends$1({
          "data-indeterminate": indeterminate
        }, inputProps),
        icon: /* @__PURE__ */ reactExports.cloneElement(icon, {
          fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
        }),
        checkedIcon: /* @__PURE__ */ reactExports.cloneElement(indeterminateIcon, {
          fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
        }),
        ownerState,
        ref,
        className: clsx(classes.root, className)
      }, other, {
        classes
      }));
    });
    const Checkbox$1 = Checkbox;
    var mapListValues = Utils.ListUtils.mapListValues;
    const MuiMultiSelectWidget = function(_ref) {
      var listValues2 = _ref.listValues, value2 = _ref.value, setValue2 = _ref.setValue;
      _ref.allowCustomValues;
      var readonly = _ref.readonly, placeholder = _ref.placeholder, customProps = _ref.customProps;
      var renderOptions = function renderOptions2(selectedValues) {
        return mapListValues(listValues2, function(_ref2) {
          var title = _ref2.title, value3 = _ref2.value;
          return /* @__PURE__ */ React$4.createElement(MenuItem$1, {
            key: value3,
            value: value3
          }, /* @__PURE__ */ React$4.createElement(Checkbox$1, {
            checked: selectedValues.indexOf(value3) > -1
          }), /* @__PURE__ */ React$4.createElement(ListItemText$1, {
            primary: title
          }));
        });
      };
      var renderValue = function renderValue2(selectedValues) {
        if (!readonly && !selectedValues.length)
          return placeholder;
        var selectedTitles = mapListValues(listValues2, function(_ref3) {
          var title = _ref3.title, value3 = _ref3.value;
          return selectedValues.indexOf(value3) > -1 ? title : null;
        }).filter(function(v2) {
          return v2 !== null;
        });
        return selectedTitles.join(", ");
      };
      var hasValue2 = value2 != null && value2.length > 0;
      var onChange = function onChange2(e2) {
        if (e2.target.value === void 0)
          return;
        setValue2(e2.target.value);
      };
      return /* @__PURE__ */ React$4.createElement(FormControl$1, null, /* @__PURE__ */ React$4.createElement(Select$1, _extends$1({
        multiple: true,
        variant: "standard",
        autoWidth: true,
        displayEmpty: true,
        label: !readonly ? placeholder : "",
        onChange,
        value: hasValue2 ? value2 : [],
        disabled: readonly,
        readOnly: readonly,
        renderValue,
        size: "small"
      }, omit$1(customProps, ["showSearch", "input", "showCheckboxes"])), renderOptions(hasValue2 ? value2 : [])));
    };
    function getListSubheaderUtilityClass(slot) {
      return generateUtilityClass("MuiListSubheader", slot);
    }
    generateUtilityClasses("MuiListSubheader", ["root", "colorPrimary", "colorInherit", "gutters", "inset", "sticky"]);
    const _excluded$7 = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];
    const useUtilityClasses$5 = (ownerState) => {
      const {
        classes,
        color: color2,
        disableGutters,
        inset,
        disableSticky
      } = ownerState;
      const slots = {
        root: ["root", color2 !== "default" && `color${capitalize(color2)}`, !disableGutters && "gutters", inset && "inset", !disableSticky && "sticky"]
      };
      return composeClasses(slots, getListSubheaderUtilityClass, classes);
    };
    const ListSubheaderRoot = styled$1("li", {
      name: "MuiListSubheader",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`], !ownerState.disableGutters && styles2.gutters, ownerState.inset && styles2.inset, !ownerState.disableSticky && styles2.sticky];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      boxSizing: "border-box",
      lineHeight: "48px",
      listStyle: "none",
      color: (theme.vars || theme).palette.text.secondary,
      fontFamily: theme.typography.fontFamily,
      fontWeight: theme.typography.fontWeightMedium,
      fontSize: theme.typography.pxToRem(14)
    }, ownerState.color === "primary" && {
      color: (theme.vars || theme).palette.primary.main
    }, ownerState.color === "inherit" && {
      color: "inherit"
    }, !ownerState.disableGutters && {
      paddingLeft: 16,
      paddingRight: 16
    }, ownerState.inset && {
      paddingLeft: 72
    }, !ownerState.disableSticky && {
      position: "sticky",
      top: 0,
      zIndex: 1,
      backgroundColor: (theme.vars || theme).palette.background.paper
    }));
    const ListSubheader = /* @__PURE__ */ reactExports.forwardRef(function ListSubheader2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiListSubheader"
      });
      const {
        className,
        color: color2 = "default",
        component = "li",
        disableGutters = false,
        disableSticky = false,
        inset = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$7);
      const ownerState = _extends$1({}, props, {
        color: color2,
        component,
        disableGutters,
        disableSticky,
        inset
      });
      const classes = useUtilityClasses$5(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ListSubheaderRoot, _extends$1({
        as: component,
        className: clsx(classes.root, className),
        ref,
        ownerState
      }, other));
    });
    ListSubheader.muiSkipListHighlight = true;
    const ListSubheader$1 = ListSubheader;
    const ClearIcon = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
      d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
    }), "Close");
    function getAutocompleteUtilityClass(slot) {
      return generateUtilityClass("MuiAutocomplete", slot);
    }
    const autocompleteClasses = generateUtilityClasses("MuiAutocomplete", ["root", "expanded", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]);
    const autocompleteClasses$1 = autocompleteClasses;
    var _ClearIcon, _ArrowDropDownIcon;
    const _excluded$6 = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "readOnly", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "slotProps", "value"];
    const useUtilityClasses$4 = (ownerState) => {
      const {
        classes,
        disablePortal,
        expanded,
        focused,
        fullWidth,
        hasClearIcon,
        hasPopupIcon,
        inputFocused,
        popupOpen,
        size
      } = ownerState;
      const slots = {
        root: ["root", expanded && "expanded", focused && "focused", fullWidth && "fullWidth", hasClearIcon && "hasClearIcon", hasPopupIcon && "hasPopupIcon"],
        inputRoot: ["inputRoot"],
        input: ["input", inputFocused && "inputFocused"],
        tag: ["tag", `tagSize${capitalize(size)}`],
        endAdornment: ["endAdornment"],
        clearIndicator: ["clearIndicator"],
        popupIndicator: ["popupIndicator", popupOpen && "popupIndicatorOpen"],
        popper: ["popper", disablePortal && "popperDisablePortal"],
        paper: ["paper"],
        listbox: ["listbox"],
        loading: ["loading"],
        noOptions: ["noOptions"],
        option: ["option"],
        groupLabel: ["groupLabel"],
        groupUl: ["groupUl"]
      };
      return composeClasses(slots, getAutocompleteUtilityClass, classes);
    };
    const AutocompleteRoot = styled$1("div", {
      name: "MuiAutocomplete",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        const {
          fullWidth,
          hasClearIcon,
          hasPopupIcon,
          inputFocused,
          size
        } = ownerState;
        return [{
          [`& .${autocompleteClasses$1.tag}`]: styles2.tag
        }, {
          [`& .${autocompleteClasses$1.tag}`]: styles2[`tagSize${capitalize(size)}`]
        }, {
          [`& .${autocompleteClasses$1.inputRoot}`]: styles2.inputRoot
        }, {
          [`& .${autocompleteClasses$1.input}`]: styles2.input
        }, {
          [`& .${autocompleteClasses$1.input}`]: inputFocused && styles2.inputFocused
        }, styles2.root, fullWidth && styles2.fullWidth, hasPopupIcon && styles2.hasPopupIcon, hasClearIcon && styles2.hasClearIcon];
      }
    })(({
      ownerState
    }) => _extends$1({
      [`&.${autocompleteClasses$1.focused} .${autocompleteClasses$1.clearIndicator}`]: {
        visibility: "visible"
      },
      /* Avoid double tap issue on iOS */
      "@media (pointer: fine)": {
        [`&:hover .${autocompleteClasses$1.clearIndicator}`]: {
          visibility: "visible"
        }
      }
    }, ownerState.fullWidth && {
      width: "100%"
    }, {
      [`& .${autocompleteClasses$1.tag}`]: _extends$1({
        margin: 3,
        maxWidth: "calc(100% - 6px)"
      }, ownerState.size === "small" && {
        margin: 2,
        maxWidth: "calc(100% - 4px)"
      }),
      [`& .${autocompleteClasses$1.inputRoot}`]: {
        flexWrap: "wrap",
        [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 26 + 4
        },
        [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 52 + 4
        },
        [`& .${autocompleteClasses$1.input}`]: {
          width: 0,
          minWidth: 30
        }
      },
      [`& .${inputClasses$1.root}`]: {
        paddingBottom: 1,
        "& .MuiInput-input": {
          padding: "4px 4px 4px 0px"
        }
      },
      [`& .${inputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
        [`& .${inputClasses$1.input}`]: {
          padding: "2px 4px 3px 0"
        }
      },
      [`& .${outlinedInputClasses$1.root}`]: {
        padding: 9,
        [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 26 + 4 + 9
        },
        [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 52 + 4 + 9
        },
        [`& .${autocompleteClasses$1.input}`]: {
          padding: "7.5px 4px 7.5px 5px"
        },
        [`& .${autocompleteClasses$1.endAdornment}`]: {
          right: 9
        }
      },
      [`& .${outlinedInputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
        // Don't specify paddingRight, as it overrides the default value set when there is only
        // one of the popup or clear icon as the specificity is equal so the latter one wins
        paddingTop: 6,
        paddingBottom: 6,
        paddingLeft: 6,
        [`& .${autocompleteClasses$1.input}`]: {
          padding: "2.5px 4px 2.5px 8px"
        }
      },
      [`& .${filledInputClasses$1.root}`]: {
        paddingTop: 19,
        paddingLeft: 8,
        [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 26 + 4 + 9
        },
        [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 52 + 4 + 9
        },
        [`& .${filledInputClasses$1.input}`]: {
          padding: "7px 4px"
        },
        [`& .${autocompleteClasses$1.endAdornment}`]: {
          right: 9
        }
      },
      [`& .${filledInputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
        paddingBottom: 1,
        [`& .${filledInputClasses$1.input}`]: {
          padding: "2.5px 4px"
        }
      },
      [`& .${inputBaseClasses$1.hiddenLabel}`]: {
        paddingTop: 8
      },
      [`& .${filledInputClasses$1.root}.${inputBaseClasses$1.hiddenLabel}`]: {
        paddingTop: 0,
        paddingBottom: 0,
        [`& .${autocompleteClasses$1.input}`]: {
          paddingTop: 16,
          paddingBottom: 17
        }
      },
      [`& .${filledInputClasses$1.root}.${inputBaseClasses$1.hiddenLabel}.${inputBaseClasses$1.sizeSmall}`]: {
        [`& .${autocompleteClasses$1.input}`]: {
          paddingTop: 8,
          paddingBottom: 9
        }
      },
      [`& .${autocompleteClasses$1.input}`]: _extends$1({
        flexGrow: 1,
        textOverflow: "ellipsis",
        opacity: 0
      }, ownerState.inputFocused && {
        opacity: 1
      })
    }));
    const AutocompleteEndAdornment = styled$1("div", {
      name: "MuiAutocomplete",
      slot: "EndAdornment",
      overridesResolver: (props, styles2) => styles2.endAdornment
    })({
      // We use a position absolute to support wrapping tags.
      position: "absolute",
      right: 0,
      top: "calc(50% - 14px)"
      // Center vertically
    });
    const AutocompleteClearIndicator = styled$1(IconButton$1, {
      name: "MuiAutocomplete",
      slot: "ClearIndicator",
      overridesResolver: (props, styles2) => styles2.clearIndicator
    })({
      marginRight: -2,
      padding: 4,
      visibility: "hidden"
    });
    const AutocompletePopupIndicator = styled$1(IconButton$1, {
      name: "MuiAutocomplete",
      slot: "PopupIndicator",
      overridesResolver: ({
        ownerState
      }, styles2) => _extends$1({}, styles2.popupIndicator, ownerState.popupOpen && styles2.popupIndicatorOpen)
    })(({
      ownerState
    }) => _extends$1({
      padding: 2,
      marginRight: -2
    }, ownerState.popupOpen && {
      transform: "rotate(180deg)"
    }));
    const AutocompletePopper = styled$1(Popper$1, {
      name: "MuiAutocomplete",
      slot: "Popper",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${autocompleteClasses$1.option}`]: styles2.option
        }, styles2.popper, ownerState.disablePortal && styles2.popperDisablePortal];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      zIndex: (theme.vars || theme).zIndex.modal
    }, ownerState.disablePortal && {
      position: "absolute"
    }));
    const AutocompletePaper = styled$1(Paper$1, {
      name: "MuiAutocomplete",
      slot: "Paper",
      overridesResolver: (props, styles2) => styles2.paper
    })(({
      theme
    }) => _extends$1({}, theme.typography.body1, {
      overflow: "auto"
    }));
    const AutocompleteLoading = styled$1("div", {
      name: "MuiAutocomplete",
      slot: "Loading",
      overridesResolver: (props, styles2) => styles2.loading
    })(({
      theme
    }) => ({
      color: (theme.vars || theme).palette.text.secondary,
      padding: "14px 16px"
    }));
    const AutocompleteNoOptions = styled$1("div", {
      name: "MuiAutocomplete",
      slot: "NoOptions",
      overridesResolver: (props, styles2) => styles2.noOptions
    })(({
      theme
    }) => ({
      color: (theme.vars || theme).palette.text.secondary,
      padding: "14px 16px"
    }));
    const AutocompleteListbox = styled$1("div", {
      name: "MuiAutocomplete",
      slot: "Listbox",
      overridesResolver: (props, styles2) => styles2.listbox
    })(({
      theme
    }) => ({
      listStyle: "none",
      margin: 0,
      padding: "8px 0",
      maxHeight: "40vh",
      overflow: "auto",
      position: "relative",
      [`& .${autocompleteClasses$1.option}`]: {
        minHeight: 48,
        display: "flex",
        overflow: "hidden",
        justifyContent: "flex-start",
        alignItems: "center",
        cursor: "pointer",
        paddingTop: 6,
        boxSizing: "border-box",
        outline: "0",
        WebkitTapHighlightColor: "transparent",
        paddingBottom: 6,
        paddingLeft: 16,
        paddingRight: 16,
        [theme.breakpoints.up("sm")]: {
          minHeight: "auto"
        },
        [`&.${autocompleteClasses$1.focused}`]: {
          backgroundColor: (theme.vars || theme).palette.action.hover,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        '&[aria-disabled="true"]': {
          opacity: (theme.vars || theme).palette.action.disabledOpacity,
          pointerEvents: "none"
        },
        [`&.${autocompleteClasses$1.focusVisible}`]: {
          backgroundColor: (theme.vars || theme).palette.action.focus
        },
        '&[aria-selected="true"]': {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
          [`&.${autocompleteClasses$1.focused}`]: {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              backgroundColor: (theme.vars || theme).palette.action.selected
            }
          },
          [`&.${autocompleteClasses$1.focusVisible}`]: {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
          }
        }
      }
    }));
    const AutocompleteGroupLabel = styled$1(ListSubheader$1, {
      name: "MuiAutocomplete",
      slot: "GroupLabel",
      overridesResolver: (props, styles2) => styles2.groupLabel
    })(({
      theme
    }) => ({
      backgroundColor: (theme.vars || theme).palette.background.paper,
      top: -8
    }));
    const AutocompleteGroupUl = styled$1("ul", {
      name: "MuiAutocomplete",
      slot: "GroupUl",
      overridesResolver: (props, styles2) => styles2.groupUl
    })({
      padding: 0,
      [`& .${autocompleteClasses$1.option}`]: {
        paddingLeft: 24
      }
    });
    const Autocomplete = /* @__PURE__ */ reactExports.forwardRef(function Autocomplete2(inProps, ref) {
      var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;
      const props = useThemeProps({
        props: inProps,
        name: "MuiAutocomplete"
      });
      const {
        autoComplete = false,
        autoHighlight = false,
        autoSelect = false,
        blurOnSelect = false,
        ChipProps,
        className,
        clearIcon = _ClearIcon || (_ClearIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(ClearIcon, {
          fontSize: "small"
        })),
        clearOnBlur = !props.freeSolo,
        clearOnEscape = false,
        clearText = "Clear",
        closeText = "Close",
        componentsProps = {},
        defaultValue: defaultValue2 = props.multiple ? [] : null,
        disableClearable = false,
        disableCloseOnSelect = false,
        disabled = false,
        disabledItemsFocusable = false,
        disableListWrap = false,
        disablePortal = false,
        filterSelectedOptions = false,
        forcePopupIcon = "auto",
        freeSolo = false,
        fullWidth = false,
        getLimitTagsText = (more) => `+${more}`,
        getOptionLabel = (option) => {
          var _option$label;
          return (_option$label = option.label) != null ? _option$label : option;
        },
        groupBy,
        handleHomeEndKeys = !props.freeSolo,
        includeInputInList = false,
        limitTags = -1,
        ListboxComponent = "ul",
        ListboxProps,
        loading = false,
        loadingText = "Loading…",
        multiple = false,
        noOptionsText = "No options",
        openOnFocus = false,
        openText = "Open",
        PaperComponent = Paper$1,
        PopperComponent = Popper$1,
        popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowDropDownIcon, {})),
        readOnly = false,
        renderGroup: renderGroupProp,
        renderInput,
        renderOption: renderOptionProp,
        renderTags,
        selectOnFocus = !props.freeSolo,
        size = "medium",
        slotProps = {}
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$6);
      const {
        getRootProps,
        getInputProps,
        getInputLabelProps,
        getPopupIndicatorProps,
        getClearProps,
        getTagProps,
        getListboxProps,
        getOptionProps,
        value: value2,
        dirty,
        expanded,
        id: id2,
        popupOpen,
        focused,
        focusedTag,
        anchorEl,
        setAnchorEl,
        inputValue,
        groupedOptions
      } = useAutocomplete(_extends$1({}, props, {
        componentName: "Autocomplete"
      }));
      const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
      const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
      const {
        onMouseDown: handleInputMouseDown
      } = getInputProps();
      const ownerState = _extends$1({}, props, {
        disablePortal,
        expanded,
        focused,
        fullWidth,
        hasClearIcon,
        hasPopupIcon,
        inputFocused: focusedTag === -1,
        popupOpen,
        size
      });
      const classes = useUtilityClasses$4(ownerState);
      let startAdornment;
      if (multiple && value2.length > 0) {
        const getCustomizedTagProps = (params) => _extends$1({
          className: classes.tag,
          disabled
        }, getTagProps(params));
        if (renderTags) {
          startAdornment = renderTags(value2, getCustomizedTagProps, ownerState);
        } else {
          startAdornment = value2.map((option, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(Chip$1, _extends$1({
            label: getOptionLabel(option),
            size
          }, getCustomizedTagProps({
            index
          }), ChipProps)));
        }
      }
      if (limitTags > -1 && Array.isArray(startAdornment)) {
        const more = startAdornment.length - limitTags;
        if (!focused && more > 0) {
          startAdornment = startAdornment.splice(0, limitTags);
          startAdornment.push(/* @__PURE__ */ jsxRuntimeExports.jsx("span", {
            className: classes.tag,
            children: getLimitTagsText(more)
          }, startAdornment.length));
        }
      }
      const defaultRenderGroup = (params) => /* @__PURE__ */ jsxRuntimeExports.jsxs("li", {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(AutocompleteGroupLabel, {
          className: classes.groupLabel,
          ownerState,
          component: "div",
          children: params.group
        }), /* @__PURE__ */ jsxRuntimeExports.jsx(AutocompleteGroupUl, {
          className: classes.groupUl,
          ownerState,
          children: params.children
        })]
      }, params.key);
      const renderGroup = renderGroupProp || defaultRenderGroup;
      const defaultRenderOption = (props2, option) => /* @__PURE__ */ jsxRuntimeExports.jsx("li", _extends$1({}, props2, {
        children: getOptionLabel(option)
      }));
      const renderOption = renderOptionProp || defaultRenderOption;
      const renderListOption = (option, index) => {
        const optionProps = getOptionProps({
          option,
          index
        });
        return renderOption(_extends$1({}, optionProps, {
          className: classes.option
        }), option, {
          selected: optionProps["aria-selected"],
          index,
          inputValue
        });
      };
      const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;
      const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;
      const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;
      const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(AutocompleteRoot, _extends$1({
          ref,
          className: clsx(classes.root, className),
          ownerState
        }, getRootProps(other), {
          children: renderInput({
            id: id2,
            disabled,
            fullWidth: true,
            size: size === "small" ? "small" : void 0,
            InputLabelProps: getInputLabelProps(),
            InputProps: _extends$1({
              ref: setAnchorEl,
              className: classes.inputRoot,
              startAdornment,
              onClick: (event) => {
                if (event.target === event.currentTarget) {
                  handleInputMouseDown(event);
                }
              }
            }, (hasClearIcon || hasPopupIcon) && {
              endAdornment: /* @__PURE__ */ jsxRuntimeExports.jsxs(AutocompleteEndAdornment, {
                className: classes.endAdornment,
                ownerState,
                children: [hasClearIcon ? /* @__PURE__ */ jsxRuntimeExports.jsx(AutocompleteClearIndicator, _extends$1({}, getClearProps(), {
                  "aria-label": clearText,
                  title: clearText,
                  ownerState
                }, clearIndicatorSlotProps, {
                  className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),
                  children: clearIcon
                })) : null, hasPopupIcon ? /* @__PURE__ */ jsxRuntimeExports.jsx(AutocompletePopupIndicator, _extends$1({}, getPopupIndicatorProps(), {
                  disabled,
                  "aria-label": popupOpen ? closeText : openText,
                  title: popupOpen ? closeText : openText,
                  ownerState
                }, popupIndicatorSlotProps, {
                  className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),
                  children: popupIcon
                })) : null]
              })
            }),
            inputProps: _extends$1({
              className: classes.input,
              disabled,
              readOnly
            }, getInputProps())
          })
        })), anchorEl ? /* @__PURE__ */ jsxRuntimeExports.jsx(AutocompletePopper, _extends$1({
          as: PopperComponent,
          disablePortal,
          style: {
            width: anchorEl ? anchorEl.clientWidth : null
          },
          ownerState,
          role: "presentation",
          anchorEl,
          open: popupOpen
        }, popperSlotProps, {
          className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs(AutocompletePaper, _extends$1({
            ownerState,
            as: PaperComponent
          }, paperSlotProps, {
            className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),
            children: [loading && groupedOptions.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx(AutocompleteLoading, {
              className: classes.loading,
              ownerState,
              children: loadingText
            }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /* @__PURE__ */ jsxRuntimeExports.jsx(AutocompleteNoOptions, {
              className: classes.noOptions,
              ownerState,
              role: "presentation",
              onMouseDown: (event) => {
                event.preventDefault();
              },
              children: noOptionsText
            }) : null, groupedOptions.length > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx(AutocompleteListbox, _extends$1({
              as: ListboxComponent,
              className: classes.listbox,
              ownerState
            }, getListboxProps(), ListboxProps, {
              children: groupedOptions.map((option, index) => {
                if (groupBy) {
                  return renderGroup({
                    key: option.key,
                    group: option.group,
                    children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))
                  });
                }
                return renderListOption(option, index);
              })
            })) : null]
          }))
        })) : null]
      });
    });
    const Autocomplete$1 = Autocomplete;
    function getCircularProgressUtilityClass(slot) {
      return generateUtilityClass("MuiCircularProgress", slot);
    }
    generateUtilityClasses("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);
    const _excluded$5 = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
    let _ = (t2) => t2, _t, _t2, _t3, _t4;
    const SIZE = 44;
    const circularRotateKeyframe = keyframes(_t || (_t = _`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
    const circularDashKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));
    const useUtilityClasses$3 = (ownerState) => {
      const {
        classes,
        variant,
        color: color2,
        disableShrink
      } = ownerState;
      const slots = {
        root: ["root", variant, `color${capitalize(color2)}`],
        svg: ["svg"],
        circle: ["circle", `circle${capitalize(variant)}`, disableShrink && "circleDisableShrink"]
      };
      return composeClasses(slots, getCircularProgressUtilityClass, classes);
    };
    const CircularProgressRoot = styled$1("span", {
      name: "MuiCircularProgress",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[ownerState.variant], styles2[`color${capitalize(ownerState.color)}`]];
      }
    })(({
      ownerState,
      theme
    }) => _extends$1({
      display: "inline-block"
    }, ownerState.variant === "determinate" && {
      transition: theme.transitions.create("transform")
    }, ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main
    }), ({
      ownerState
    }) => ownerState.variant === "indeterminate" && css(_t3 || (_t3 = _`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
    const CircularProgressSVG = styled$1("svg", {
      name: "MuiCircularProgress",
      slot: "Svg",
      overridesResolver: (props, styles2) => styles2.svg
    })({
      display: "block"
      // Keeps the progress centered
    });
    const CircularProgressCircle = styled$1("circle", {
      name: "MuiCircularProgress",
      slot: "Circle",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.circle, styles2[`circle${capitalize(ownerState.variant)}`], ownerState.disableShrink && styles2.circleDisableShrink];
      }
    })(({
      ownerState,
      theme
    }) => _extends$1({
      stroke: "currentColor"
    }, ownerState.variant === "determinate" && {
      transition: theme.transitions.create("stroke-dashoffset")
    }, ownerState.variant === "indeterminate" && {
      // Some default value that looks fine waiting for the animation to kicks in.
      strokeDasharray: "80px, 200px",
      strokeDashoffset: 0
      // Add the unit to fix a Edge 16 and below bug.
    }), ({
      ownerState
    }) => ownerState.variant === "indeterminate" && !ownerState.disableShrink && css(_t4 || (_t4 = _`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
    const CircularProgress = /* @__PURE__ */ reactExports.forwardRef(function CircularProgress2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiCircularProgress"
      });
      const {
        className,
        color: color2 = "primary",
        disableShrink = false,
        size = 40,
        style: style2,
        thickness = 3.6,
        value: value2 = 0,
        variant = "indeterminate"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$5);
      const ownerState = _extends$1({}, props, {
        color: color2,
        disableShrink,
        size,
        thickness,
        value: value2,
        variant
      });
      const classes = useUtilityClasses$3(ownerState);
      const circleStyle = {};
      const rootStyle = {};
      const rootProps = {};
      if (variant === "determinate") {
        const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
        circleStyle.strokeDasharray = circumference.toFixed(3);
        rootProps["aria-valuenow"] = Math.round(value2);
        circleStyle.strokeDashoffset = `${((100 - value2) / 100 * circumference).toFixed(3)}px`;
        rootStyle.transform = "rotate(-90deg)";
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgressRoot, _extends$1({
        className: clsx(classes.root, className),
        style: _extends$1({
          width: size,
          height: size
        }, rootStyle, style2),
        ownerState,
        ref,
        role: "progressbar"
      }, rootProps, other, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgressSVG, {
          className: classes.svg,
          ownerState,
          viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgressCircle, {
            className: classes.circle,
            style: circleStyle,
            ownerState,
            cx: SIZE,
            cy: SIZE,
            r: (SIZE - thickness) / 2,
            fill: "none",
            strokeWidth: thickness
          })
        })
      }));
    });
    const CircularProgress$1 = CircularProgress;
    var Check = {};
    var createSvgIcon = {};
    const require$$0 = /* @__PURE__ */ getAugmentedNamespace(utils);
    var hasRequiredCreateSvgIcon;
    function requireCreateSvgIcon() {
      if (hasRequiredCreateSvgIcon)
        return createSvgIcon;
      hasRequiredCreateSvgIcon = 1;
      (function(exports2) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        Object.defineProperty(exports2, "default", {
          enumerable: true,
          get: function() {
            return _utils.createSvgIcon;
          }
        });
        var _utils = require$$0;
      })(createSvgIcon);
      return createSvgIcon;
    }
    var _interopRequireDefault$6 = interopRequireDefaultExports;
    Object.defineProperty(Check, "__esModule", {
      value: true
    });
    var default_1$6 = Check.default = void 0;
    var _createSvgIcon$6 = _interopRequireDefault$6(requireCreateSvgIcon());
    var _jsxRuntime$6 = jsxRuntimeExports;
    var _default$6 = (0, _createSvgIcon$6.default)(/* @__PURE__ */ (0, _jsxRuntime$6.jsx)("path", {
      d: "M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"
    }), "Check");
    default_1$6 = Check.default = _default$6;
    var _excluded$4 = ["width"];
    function ownKeys$2(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$2(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var useListValuesAutocomplete = useListValuesAutocomplete$1;
    var emptyArray = [];
    const MuiAutocompleteWidget = function(props) {
      var allowCustomValues = props.allowCustomValues, multiple = props.multiple, disableClearable = props.disableClearable, selectedValue = props.value, customProps = props.customProps, readonly = props.readonly, config2 = props.config, filterOptionsConfig = props.filterOptionsConfig, errorText = props.errorText;
      var stringifyOption = reactExports.useCallback(function(option) {
        var keysForFilter = config2.settings.listKeysForSearch;
        var valueForFilter = keysForFilter.map(function(k2) {
          return typeof option[k2] == "string" ? option[k2] : "";
        }).join("\0");
        return valueForFilter;
      }, [config2]);
      var defaultFilterOptionsConfig = {
        stringify: stringifyOption
      };
      var filterOptionsFn = createFilterOptions(filterOptionsConfig || defaultFilterOptionsConfig);
      var _useListValuesAutocom = useListValuesAutocomplete(props, {
        debounceTimeout: 100,
        multiple,
        uif: "mui"
      }), open = _useListValuesAutocom.open, onOpen = _useListValuesAutocom.onOpen, onClose = _useListValuesAutocom.onClose, onChange = _useListValuesAutocom.onChange, onInputChange = _useListValuesAutocom.onInputChange, inputValue = _useListValuesAutocom.inputValue, options = _useListValuesAutocom.options, isInitialLoading = _useListValuesAutocom.isInitialLoading, isLoading = _useListValuesAutocom.isLoading, aPlaceholder = _useListValuesAutocom.aPlaceholder, extendOptions = _useListValuesAutocom.extendOptions, getOptionDisabled = _useListValuesAutocom.getOptionDisabled, getOptionIsCustom = _useListValuesAutocom.getOptionIsCustom, getOptionLabel = _useListValuesAutocom.getOptionLabel, selectedListValue = _useListValuesAutocom.selectedListValue;
      var _config$settings = config2.settings, defaultSelectWidth = _config$settings.defaultSelectWidth, defaultSearchWidth = _config$settings.defaultSearchWidth;
      var _ref = customProps || {}, width2 = _ref.width, rest = _objectWithoutProperties(_ref, _excluded$4);
      var customInputProps = rest.input || {};
      customInputProps.width || defaultSearchWidth;
      customInputProps = omit$1(customInputProps, ["width"]);
      var customAutocompleteProps = omit$1(rest, ["showSearch", "showCheckboxes"]);
      var fullWidth = false;
      var minWidth2 = width2 || defaultSelectWidth;
      var style2 = {
        width: multiple ? void 0 : minWidth2,
        minWidth: minWidth2
      };
      var placeholder = !readonly ? aPlaceholder : "";
      var hasValue2 = selectedValue != null;
      var value2 = hasValue2 ? selectedValue : multiple ? emptyArray : null;
      var filterOptions = function filterOptions2(options2, params) {
        var filtered = filterOptionsFn(options2, params);
        var extended = extendOptions(filtered);
        return extended;
      };
      var groupBy = function groupBy2(option) {
        return option === null || option === void 0 ? void 0 : option.groupTitle;
      };
      var renderInput = function renderInput2(params) {
        var _selectedListValue$ti;
        var shouldRenderSelected = !multiple && !open;
        var selectedTitle = (_selectedListValue$ti = selectedListValue === null || selectedListValue === void 0 ? void 0 : selectedListValue.title) !== null && _selectedListValue$ti !== void 0 ? _selectedListValue$ti : "";
        var shouldHide = multiple && !open;
        var value3 = shouldRenderSelected ? selectedTitle : shouldHide ? "" : inputValue !== null && inputValue !== void 0 ? inputValue : "";
        return /* @__PURE__ */ React$4.createElement(TextField$1, _extends$1({
          variant: "standard"
        }, params, {
          inputProps: _objectSpread$2(_objectSpread$2({}, params.inputProps), {}, {
            value: value3
          }),
          InputProps: _objectSpread$2(_objectSpread$2({}, params.InputProps), {}, {
            readOnly: readonly,
            endAdornment: /* @__PURE__ */ React$4.createElement(React$4.Fragment, null, isLoading ? /* @__PURE__ */ React$4.createElement(CircularProgress$1, {
              color: "inherit",
              size: 20
            }) : null, params.InputProps.endAdornment)
          }),
          disabled: readonly,
          placeholder,
          error: !!errorText
          //onChange={onInputChange}
        }, customInputProps));
      };
      var renderTags = function renderTags2(value3, getTagProps) {
        return value3.map(function(option, index) {
          return /* @__PURE__ */ React$4.createElement(Chip$1, _extends$1({
            key: option.value,
            label: getOptionLabel(option),
            size: "small",
            variant: getOptionIsCustom(option) ? "outlined" : "filled"
          }, getTagProps({
            index
          })));
        });
      };
      var isOptionEqualToValue = function isOptionEqualToValue2(option, value3) {
        return (option === null || option === void 0 ? void 0 : option.value) == value3;
      };
      var renderOption = function renderOption2(props2, option) {
        var title = option.title, renderTitle = option.renderTitle, value3 = option.value, isHidden = option.isHidden;
        var isSelected = multiple ? (selectedValue || []).includes(value3) : selectedValue == value3;
        var className = getOptionIsCustom(option) ? "customSelectOption" : void 0;
        var titleSpan = /* @__PURE__ */ React$4.createElement("span", {
          className
        }, renderTitle || title);
        if (isHidden)
          return null;
        if (option.specialValue) {
          return /* @__PURE__ */ React$4.createElement("div", props2, renderTitle || title);
        } else if (multiple) {
          return /* @__PURE__ */ React$4.createElement(MenuItem$1, _extends$1({}, props2, {
            size: "small",
            selected: isSelected
          }), !isSelected && /* @__PURE__ */ React$4.createElement(ListItemText$1, {
            inset: true
          }, titleSpan), isSelected && /* @__PURE__ */ React$4.createElement(React$4.Fragment, null, /* @__PURE__ */ React$4.createElement(ListItemIcon$1, null, /* @__PURE__ */ React$4.createElement(default_1$6, null)), titleSpan));
        } else {
          return /* @__PURE__ */ React$4.createElement("div", props2, titleSpan);
        }
      };
      return /* @__PURE__ */ React$4.createElement(FormControl$1, {
        fullWidth
      }, /* @__PURE__ */ React$4.createElement(Autocomplete$1, _extends$1({
        disableClearable,
        disableCloseOnSelect: multiple,
        fullWidth,
        multiple,
        style: style2,
        freeSolo: allowCustomValues,
        loading: isInitialLoading,
        open,
        onOpen,
        onClose,
        inputValue,
        onInputChange,
        label: placeholder,
        onChange,
        value: value2,
        disabled: readonly,
        readOnly: readonly,
        options,
        groupBy,
        getOptionLabel,
        getOptionDisabled,
        renderInput,
        renderTags,
        renderOption,
        filterOptions,
        isOptionEqualToValue,
        size: "small"
      }, customAutocompleteProps)));
    };
    const MuiFieldSelect = function(_ref) {
      var items = _ref.items, setField2 = _ref.setField, selectedKey = _ref.selectedKey, readonly = _ref.readonly, placeholder = _ref.placeholder, errorText = _ref.errorText;
      var renderOptions = function renderOptions2(fields) {
        var level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        return Object.keys(fields).map(function(fieldKey) {
          var field = fields[fieldKey];
          var items2 = field.items, path = field.path, label = field.label, disabled = field.disabled, matchesType = field.matchesType;
          var prefix2 = "  ".repeat(level);
          if (items2) {
            return [/* @__PURE__ */ React$4.createElement(ListSubheader$1, {
              disabled,
              key: path,
              disableSticky: true
            }, prefix2 && /* @__PURE__ */ React$4.createElement("span", null, prefix2), label), renderOptions2(items2, level + 1)];
          } else {
            return /* @__PURE__ */ React$4.createElement(MenuItem$1, {
              disabled,
              key: path,
              value: path
            }, prefix2 && /* @__PURE__ */ React$4.createElement("span", null, prefix2), matchesType ? /* @__PURE__ */ React$4.createElement("b", null, label) : label);
          }
        });
      };
      var onChange = function onChange2(e2) {
        if (e2.target.value === void 0)
          return;
        setField2(e2.target.value);
      };
      var renderValue = function renderValue2(selectedValue) {
        if (!readonly && !selectedValue)
          return placeholder;
        var findLabel = function findLabel2(fields) {
          return fields.map(function(field) {
            if (!field.items)
              return field.path === selectedValue ? field.label : null;
            return findLabel2(field.items);
          });
        };
        return findLabel(items).filter(function(v2) {
          if (Array.isArray(v2)) {
            return v2.some(function(value2) {
              return value2 !== null;
            });
          } else {
            return v2 !== null;
          }
        }).pop();
      };
      var hasValue2 = selectedKey != null;
      return /* @__PURE__ */ React$4.createElement(FormControl$1, null, /* @__PURE__ */ React$4.createElement(Select$1, {
        error: !!errorText,
        variant: "standard",
        autoWidth: true,
        displayEmpty: true,
        placeholder,
        onChange,
        value: hasValue2 ? selectedKey : "",
        disabled: readonly,
        renderValue,
        size: "small"
      }, renderOptions(items)));
    };
    var _excluded$3 = ["items", "selectedKey", "setField", "isValueField"];
    function ownKeys$1(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$1(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$1(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var mapFieldItemToOptionKeys = {
      key: "_value2",
      path: "value",
      label: "title",
      altLabel: "_altLabel",
      tooltip: "tooltip",
      grouplabel: "groupTitle"
    };
    var itemsToListValues = function itemsToListValues2(items) {
      var level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      return items.map(function(item) {
        var items2 = item.items, path = item.path, key = item.key, label = item.label, altLabel = item.altLabel, disabled = item.disabled, grouplabel = item.grouplabel, matchesType = item.matchesType, tooltip = item.tooltip;
        var prefix2 = "  ".repeat(level);
        if (items2) {
          return itemsToListValues2(items2, level + 1);
        } else {
          return {
            title: label,
            renderTitle: matchesType ? /* @__PURE__ */ React$4.createElement("b", null, prefix2 + label) : prefix2 + label,
            value: path,
            disabled,
            groupTitle: level > 0 ? prefix2 + grouplabel : null,
            tooltip,
            _value2: key,
            _altLabel: altLabel
          };
        }
      }).flat(Infinity);
    };
    var fieldAdapter = function fieldAdapter2(_ref, config2) {
      var items = _ref.items, selectedKey = _ref.selectedKey, setField2 = _ref.setField, isValueField = _ref.isValueField, rest = _objectWithoutProperties(_ref, _excluded$3);
      var listValues2 = itemsToListValues(items);
      var value2 = selectedKey;
      var setValue2 = function setValue3(value3, _asyncValues) {
        if (!value3 && !isValueField)
          return void 0;
        return setField2(value3);
      };
      var filterOptionsConfig = {
        stringify: reactExports.useCallback(function(option) {
          var keysForFilter = config2.settings.fieldItemKeysForSearch.map(function(k2) {
            return mapFieldItemToOptionKeys[k2];
          });
          var valueForFilter = keysForFilter.map(function(k2) {
            return typeof option[k2] == "string" ? option[k2] : "";
          }).join("\0");
          return valueForFilter;
        }, [config2])
      };
      return _objectSpread$1(_objectSpread$1({}, rest), {}, {
        listValues: listValues2,
        setValue: setValue2,
        filterOptionsConfig,
        allowCustomValues: false,
        multiple: false,
        disableClearable: !isValueField,
        value: value2
      });
    };
    const MuiFieldAutocomplete = function(props) {
      return /* @__PURE__ */ React$4.createElement(MuiAutocompleteWidget, fieldAdapter(props, props.config));
    };
    var DragHandle = {};
    var _interopRequireDefault$5 = interopRequireDefaultExports;
    Object.defineProperty(DragHandle, "__esModule", {
      value: true
    });
    var default_1$5 = DragHandle.default = void 0;
    var _createSvgIcon$5 = _interopRequireDefault$5(requireCreateSvgIcon());
    var _jsxRuntime$5 = jsxRuntimeExports;
    var _default$5 = (0, _createSvgIcon$5.default)(/* @__PURE__ */ (0, _jsxRuntime$5.jsx)("path", {
      d: "M20 9H4v2h16V9zM4 15h16v-2H4v2z"
    }), "DragHandle");
    default_1$5 = DragHandle.default = _default$5;
    var Delete = {};
    var _interopRequireDefault$4 = interopRequireDefaultExports;
    Object.defineProperty(Delete, "__esModule", {
      value: true
    });
    var default_1$4 = Delete.default = void 0;
    var _createSvgIcon$4 = _interopRequireDefault$4(requireCreateSvgIcon());
    var _jsxRuntime$4 = jsxRuntimeExports;
    var _default$4 = (0, _createSvgIcon$4.default)(/* @__PURE__ */ (0, _jsxRuntime$4.jsx)("path", {
      d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
    }), "Delete");
    default_1$4 = Delete.default = _default$4;
    var Add = {};
    var _interopRequireDefault$3 = interopRequireDefaultExports;
    Object.defineProperty(Add, "__esModule", {
      value: true
    });
    var default_1$3 = Add.default = void 0;
    var _createSvgIcon$3 = _interopRequireDefault$3(requireCreateSvgIcon());
    var _jsxRuntime$3 = jsxRuntimeExports;
    var _default$3 = (0, _createSvgIcon$3.default)(/* @__PURE__ */ (0, _jsxRuntime$3.jsx)("path", {
      d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
    }), "Add");
    default_1$3 = Add.default = _default$3;
    function getIconUtilityClass(slot) {
      return generateUtilityClass("MuiIcon", slot);
    }
    generateUtilityClasses("MuiIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
    const _excluded$2 = ["baseClassName", "className", "color", "component", "fontSize"];
    const useUtilityClasses$2 = (ownerState) => {
      const {
        color: color2,
        fontSize,
        classes
      } = ownerState;
      const slots = {
        root: ["root", color2 !== "inherit" && `color${capitalize(color2)}`, `fontSize${capitalize(fontSize)}`]
      };
      return composeClasses(slots, getIconUtilityClass, classes);
    };
    const IconRoot = styled$1("span", {
      name: "MuiIcon",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.color !== "inherit" && styles2[`color${capitalize(ownerState.color)}`], styles2[`fontSize${capitalize(ownerState.fontSize)}`]];
      }
    })(({
      theme,
      ownerState
    }) => ({
      userSelect: "none",
      width: "1em",
      height: "1em",
      // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541
      // To remove at some point.
      overflow: "hidden",
      display: "inline-block",
      // allow overflow hidden to take action
      textAlign: "center",
      // support non-square icon
      flexShrink: 0,
      fontSize: {
        inherit: "inherit",
        small: theme.typography.pxToRem(20),
        medium: theme.typography.pxToRem(24),
        large: theme.typography.pxToRem(36)
      }[ownerState.fontSize],
      // TODO v5 deprecate, v6 remove for sx
      color: {
        primary: (theme.vars || theme).palette.primary.main,
        secondary: (theme.vars || theme).palette.secondary.main,
        info: (theme.vars || theme).palette.info.main,
        success: (theme.vars || theme).palette.success.main,
        warning: (theme.vars || theme).palette.warning.main,
        action: (theme.vars || theme).palette.action.active,
        error: (theme.vars || theme).palette.error.main,
        disabled: (theme.vars || theme).palette.action.disabled,
        inherit: void 0
      }[ownerState.color]
    }));
    const Icon = /* @__PURE__ */ reactExports.forwardRef(function Icon2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiIcon"
      });
      const {
        baseClassName = "material-icons",
        className,
        color: color2 = "inherit",
        component: Component = "span",
        fontSize = "medium"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$2);
      const ownerState = _extends$1({}, props, {
        baseClassName,
        color: color2,
        component: Component,
        fontSize
      });
      const classes = useUtilityClasses$2(ownerState);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(IconRoot, _extends$1({
        as: Component,
        className: clsx(
          baseClassName,
          // Prevent the translation of the text content.
          // The font relies on the exact text content to render the icon.
          "notranslate",
          classes.root,
          className
        ),
        ownerState,
        "aria-hidden": true,
        ref
      }, other));
    });
    Icon.muiName = "Icon";
    const Icon$1 = Icon;
    var DragIcon = Utils.DragIcon;
    var typeToIcon = {
      "delGroup": /* @__PURE__ */ React$4.createElement(default_1$4, null),
      "delRuleGroup": /* @__PURE__ */ React$4.createElement(default_1$4, null),
      "delRule": /* @__PURE__ */ React$4.createElement(default_1$4, null),
      "addRuleGroup": /* @__PURE__ */ React$4.createElement(default_1$3, null),
      "addRuleGroupExt": /* @__PURE__ */ React$4.createElement(default_1$3, null),
      "addRule": /* @__PURE__ */ React$4.createElement(default_1$3, null),
      "addGroup": /* @__PURE__ */ React$4.createElement(default_1$3, null),
      "drag": /* @__PURE__ */ React$4.createElement(default_1$5, null)
    };
    var typeToColor$1 = {
      // "addRule": "default",
      // "addGroup": "primary",
      // "delGroup": "secondary",
      // "delRuleGroup": "secondary",
      // "delRule": "secondary",
      "drag": "default"
    };
    const MuiIcon = function(_ref) {
      var type = _ref.type, readonly = _ref.readonly;
      var icon = typeToIcon[type];
      if (!icon && type === "drag") {
        return /* @__PURE__ */ React$4.createElement(DragIcon, null);
      }
      if (type === "drag") {
        return /* @__PURE__ */ React$4.createElement(Icon$1, {
          size: "small",
          disabled: readonly,
          color: typeToColor$1[type]
        }, icon);
      } else {
        return icon;
      }
    };
    var hideLabelsFor = {
      "addRuleGroup": true,
      "addRuleGroupExt": true,
      "delGroup": true,
      "delRuleGroup": true,
      "delRule": true
    };
    var typeToColor = {
      "addRule": "neutral",
      "addGroup": "primary",
      "delGroup": "secondary",
      "delRuleGroup": "secondary",
      "delRule": "secondary"
    };
    const MuiButton = function(props) {
      var type = props.type, label = props.label, onClick = props.onClick, readonly = props.readonly, renderIcon = props.renderIcon;
      var iconProps = {
        type,
        readonly
      };
      var icon = renderIcon === null || renderIcon === void 0 ? void 0 : renderIcon(iconProps);
      if (!label || hideLabelsFor[type]) {
        return /* @__PURE__ */ React$4.createElement(IconButton$1, {
          size: "small",
          disabled: readonly,
          onClick,
          color: typeToColor[type]
        }, icon);
      } else {
        return /* @__PURE__ */ React$4.createElement(Button$1, {
          size: "small",
          disabled: readonly,
          onClick,
          color: typeToColor[type],
          startIcon: icon
        }, label);
      }
    };
    const MuiButtonGroup = function(_ref) {
      var children = _ref.children;
      _ref.config;
      return /* @__PURE__ */ React$4.createElement(React$4.Fragment, null, children);
    };
    function getButtonGroupUtilityClass(slot) {
      return generateUtilityClass("MuiButtonGroup", slot);
    }
    const buttonGroupClasses = generateUtilityClasses("MuiButtonGroup", ["root", "contained", "outlined", "text", "disableElevation", "disabled", "fullWidth", "vertical", "grouped", "groupedHorizontal", "groupedVertical", "groupedText", "groupedTextHorizontal", "groupedTextVertical", "groupedTextPrimary", "groupedTextSecondary", "groupedOutlined", "groupedOutlinedHorizontal", "groupedOutlinedVertical", "groupedOutlinedPrimary", "groupedOutlinedSecondary", "groupedContained", "groupedContainedHorizontal", "groupedContainedVertical", "groupedContainedPrimary", "groupedContainedSecondary"]);
    const buttonGroupClasses$1 = buttonGroupClasses;
    const _excluded$1 = ["children", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "disableRipple", "fullWidth", "orientation", "size", "variant"];
    const overridesResolver = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${buttonGroupClasses$1.grouped}`]: styles2.grouped
      }, {
        [`& .${buttonGroupClasses$1.grouped}`]: styles2[`grouped${capitalize(ownerState.orientation)}`]
      }, {
        [`& .${buttonGroupClasses$1.grouped}`]: styles2[`grouped${capitalize(ownerState.variant)}`]
      }, {
        [`& .${buttonGroupClasses$1.grouped}`]: styles2[`grouped${capitalize(ownerState.variant)}${capitalize(ownerState.orientation)}`]
      }, {
        [`& .${buttonGroupClasses$1.grouped}`]: styles2[`grouped${capitalize(ownerState.variant)}${capitalize(ownerState.color)}`]
      }, styles2.root, styles2[ownerState.variant], ownerState.disableElevation === true && styles2.disableElevation, ownerState.fullWidth && styles2.fullWidth, ownerState.orientation === "vertical" && styles2.vertical];
    };
    const useUtilityClasses$1 = (ownerState) => {
      const {
        classes,
        color: color2,
        disabled,
        disableElevation,
        fullWidth,
        orientation,
        variant
      } = ownerState;
      const slots = {
        root: ["root", variant, orientation === "vertical" && "vertical", fullWidth && "fullWidth", disableElevation && "disableElevation"],
        grouped: ["grouped", `grouped${capitalize(orientation)}`, `grouped${capitalize(variant)}`, `grouped${capitalize(variant)}${capitalize(orientation)}`, `grouped${capitalize(variant)}${capitalize(color2)}`, disabled && "disabled"]
      };
      return composeClasses(slots, getButtonGroupUtilityClass, classes);
    };
    const ButtonGroupRoot = styled$1("div", {
      name: "MuiButtonGroup",
      slot: "Root",
      overridesResolver
    })(({
      theme,
      ownerState
    }) => _extends$1({
      display: "inline-flex",
      borderRadius: (theme.vars || theme).shape.borderRadius
    }, ownerState.variant === "contained" && {
      boxShadow: (theme.vars || theme).shadows[2]
    }, ownerState.disableElevation && {
      boxShadow: "none"
    }, ownerState.fullWidth && {
      width: "100%"
    }, ownerState.orientation === "vertical" && {
      flexDirection: "column"
    }, {
      [`& .${buttonGroupClasses$1.grouped}`]: _extends$1({
        minWidth: 40,
        "&:not(:first-of-type)": _extends$1({}, ownerState.orientation === "horizontal" && {
          borderTopLeftRadius: 0,
          borderBottomLeftRadius: 0
        }, ownerState.orientation === "vertical" && {
          borderTopRightRadius: 0,
          borderTopLeftRadius: 0
        }, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
          marginLeft: -1
        }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
          marginTop: -1
        }),
        "&:not(:last-of-type)": _extends$1({}, ownerState.orientation === "horizontal" && {
          borderTopRightRadius: 0,
          borderBottomRightRadius: 0
        }, ownerState.orientation === "vertical" && {
          borderBottomRightRadius: 0,
          borderBottomLeftRadius: 0
        }, ownerState.variant === "text" && ownerState.orientation === "horizontal" && {
          borderRight: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
          [`&.${buttonGroupClasses$1.disabled}`]: {
            borderRight: `1px solid ${(theme.vars || theme).palette.action.disabled}`
          }
        }, ownerState.variant === "text" && ownerState.orientation === "vertical" && {
          borderBottom: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
          [`&.${buttonGroupClasses$1.disabled}`]: {
            borderBottom: `1px solid ${(theme.vars || theme).palette.action.disabled}`
          }
        }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
          borderColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : alpha(theme.palette[ownerState.color].main, 0.5)
        }, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
          borderRightColor: "transparent"
        }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
          borderBottomColor: "transparent"
        }, ownerState.variant === "contained" && ownerState.orientation === "horizontal" && {
          borderRight: `1px solid ${(theme.vars || theme).palette.grey[400]}`,
          [`&.${buttonGroupClasses$1.disabled}`]: {
            borderRight: `1px solid ${(theme.vars || theme).palette.action.disabled}`
          }
        }, ownerState.variant === "contained" && ownerState.orientation === "vertical" && {
          borderBottom: `1px solid ${(theme.vars || theme).palette.grey[400]}`,
          [`&.${buttonGroupClasses$1.disabled}`]: {
            borderBottom: `1px solid ${(theme.vars || theme).palette.action.disabled}`
          }
        }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
          borderColor: (theme.vars || theme).palette[ownerState.color].dark
        }, {
          "&:hover": _extends$1({}, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
            borderRightColor: "currentColor"
          }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
            borderBottomColor: "currentColor"
          })
        }),
        "&:hover": _extends$1({}, ownerState.variant === "contained" && {
          boxShadow: "none"
        })
      }, ownerState.variant === "contained" && {
        boxShadow: "none"
      })
    }));
    const ButtonGroup = /* @__PURE__ */ reactExports.forwardRef(function ButtonGroup2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiButtonGroup"
      });
      const {
        children,
        className,
        color: color2 = "primary",
        component = "div",
        disabled = false,
        disableElevation = false,
        disableFocusRipple = false,
        disableRipple = false,
        fullWidth = false,
        orientation = "horizontal",
        size = "medium",
        variant = "outlined"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1);
      const ownerState = _extends$1({}, props, {
        color: color2,
        component,
        disabled,
        disableElevation,
        disableFocusRipple,
        disableRipple,
        fullWidth,
        orientation,
        size,
        variant
      });
      const classes = useUtilityClasses$1(ownerState);
      const context2 = reactExports.useMemo(() => ({
        className: classes.grouped,
        color: color2,
        disabled,
        disableElevation,
        disableFocusRipple,
        disableRipple,
        fullWidth,
        size,
        variant
      }), [color2, disabled, disableElevation, disableFocusRipple, disableRipple, fullWidth, size, variant, classes.grouped]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonGroupRoot, _extends$1({
        as: component,
        role: "group",
        className: clsx(classes.root, className),
        ref,
        ownerState
      }, other, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonGroupContext$1.Provider, {
          value: context2,
          children
        })
      }));
    });
    const ButtonGroup$1 = ButtonGroup;
    const MuiConjs = function(_ref) {
      var id2 = _ref.id, not = _ref.not, setNot2 = _ref.setNot, conjunctionOptions = _ref.conjunctionOptions, setConjunction2 = _ref.setConjunction, disabled = _ref.disabled, readonly = _ref.readonly, config2 = _ref.config, showNot = _ref.showNot, notLabel = _ref.notLabel;
      var conjsCount = Object.keys(conjunctionOptions).length;
      var lessThenTwo = disabled;
      var forceShowConj = config2.settings.forceShowConj;
      var showConj = forceShowConj || conjsCount > 1 && !lessThenTwo;
      var renderOptions = function renderOptions2() {
        return Object.keys(conjunctionOptions).map(function(key) {
          var _conjunctionOptions$k = conjunctionOptions[key], id3 = _conjunctionOptions$k.id;
          _conjunctionOptions$k.name;
          var label = _conjunctionOptions$k.label, checked = _conjunctionOptions$k.checked;
          var postfix = setConjunction2.isDummyFn ? "__dummy" : "";
          if ((readonly || disabled) && !checked)
            return null;
          return /* @__PURE__ */ React$4.createElement(Button$1, {
            key: id3 + postfix,
            id: id3 + postfix,
            color: checked ? "primary" : "neutral",
            value: key,
            onClick: onClick.bind(null, key),
            disabled: readonly || disabled
          }, label);
        });
      };
      var renderNot = function renderNot2() {
        if (readonly && !not)
          return null;
        return /* @__PURE__ */ React$4.createElement(Button$1, {
          key: id2,
          id: id2 + "__not",
          color: not ? "secondary" : "neutral",
          onClick: onNotClick.bind(null, !not),
          disabled: readonly
        }, notLabel || "NOT");
      };
      var onClick = function onClick2(value2) {
        return setConjunction2(value2);
      };
      var onNotClick = function onNotClick2(checked) {
        return setNot2(checked);
      };
      return /* @__PURE__ */ React$4.createElement(FormControl$1, null, /* @__PURE__ */ React$4.createElement(ButtonGroup$1, {
        disableElevation: true,
        variant: "contained",
        size: "small",
        disabled: readonly
      }, showNot && renderNot(), showConj && renderOptions()));
    };
    function getFormControlLabelUtilityClasses(slot) {
      return generateUtilityClass("MuiFormControlLabel", slot);
    }
    const formControlLabelClasses = generateUtilityClasses("MuiFormControlLabel", ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label", "error", "required", "asterisk"]);
    const formControlLabelClasses$1 = formControlLabelClasses;
    const _excluded = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "required", "slotProps", "value"];
    const useUtilityClasses = (ownerState) => {
      const {
        classes,
        disabled,
        labelPlacement,
        error,
        required
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", `labelPlacement${capitalize(labelPlacement)}`, error && "error", required && "required"],
        label: ["label", disabled && "disabled"],
        asterisk: ["asterisk", error && "error"]
      };
      return composeClasses(slots, getFormControlLabelUtilityClasses, classes);
    };
    const FormControlLabelRoot = styled$1("label", {
      name: "MuiFormControlLabel",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${formControlLabelClasses$1.label}`]: styles2.label
        }, styles2.root, styles2[`labelPlacement${capitalize(ownerState.labelPlacement)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      display: "inline-flex",
      alignItems: "center",
      cursor: "pointer",
      // For correct alignment with the text.
      verticalAlign: "middle",
      WebkitTapHighlightColor: "transparent",
      marginLeft: -11,
      marginRight: 16,
      // used for row presentation of radio/checkbox
      [`&.${formControlLabelClasses$1.disabled}`]: {
        cursor: "default"
      }
    }, ownerState.labelPlacement === "start" && {
      flexDirection: "row-reverse",
      marginLeft: 16,
      // used for row presentation of radio/checkbox
      marginRight: -11
    }, ownerState.labelPlacement === "top" && {
      flexDirection: "column-reverse",
      marginLeft: 16
    }, ownerState.labelPlacement === "bottom" && {
      flexDirection: "column",
      marginLeft: 16
    }, {
      [`& .${formControlLabelClasses$1.label}`]: {
        [`&.${formControlLabelClasses$1.disabled}`]: {
          color: (theme.vars || theme).palette.text.disabled
        }
      }
    }));
    const AsteriskComponent = styled$1("span", {
      name: "MuiFormControlLabel",
      slot: "Asterisk",
      overridesResolver: (props, styles2) => styles2.asterisk
    })(({
      theme
    }) => ({
      [`&.${formControlLabelClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }));
    const FormControlLabel = /* @__PURE__ */ reactExports.forwardRef(function FormControlLabel2(inProps, ref) {
      var _ref, _slotProps$typography;
      const props = useThemeProps({
        props: inProps,
        name: "MuiFormControlLabel"
      });
      const {
        className,
        componentsProps = {},
        control,
        disabled: disabledProp,
        disableTypography,
        label: labelProp,
        labelPlacement = "end",
        required: requiredProp,
        slotProps = {}
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
      const muiFormControl = useFormControl();
      const disabled = (_ref = disabledProp != null ? disabledProp : control.props.disabled) != null ? _ref : muiFormControl == null ? void 0 : muiFormControl.disabled;
      const required = requiredProp != null ? requiredProp : control.props.required;
      const controlProps = {
        disabled,
        required
      };
      ["checked", "name", "onChange", "value", "inputRef"].forEach((key) => {
        if (typeof control.props[key] === "undefined" && typeof props[key] !== "undefined") {
          controlProps[key] = props[key];
        }
      });
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["error"]
      });
      const ownerState = _extends$1({}, props, {
        disabled,
        labelPlacement,
        required,
        error: fcs.error
      });
      const classes = useUtilityClasses(ownerState);
      const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;
      let label = labelProp;
      if (label != null && label.type !== Typography$1 && !disableTypography) {
        label = /* @__PURE__ */ jsxRuntimeExports.jsx(Typography$1, _extends$1({
          component: "span"
        }, typographySlotProps, {
          className: clsx(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),
          children: label
        }));
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControlLabelRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref
      }, other, {
        children: [/* @__PURE__ */ reactExports.cloneElement(control, controlProps), label, required && /* @__PURE__ */ jsxRuntimeExports.jsxs(AsteriskComponent, {
          ownerState,
          "aria-hidden": true,
          className: classes.asterisk,
          children: [" ", "*"]
        })]
      }));
    });
    const FormControlLabel$1 = FormControlLabel;
    var LockOpen = {};
    var _interopRequireDefault$2 = interopRequireDefaultExports;
    Object.defineProperty(LockOpen, "__esModule", {
      value: true
    });
    var default_1$2 = LockOpen.default = void 0;
    var _createSvgIcon$2 = _interopRequireDefault$2(requireCreateSvgIcon());
    var _jsxRuntime$2 = jsxRuntimeExports;
    var _default$2 = (0, _createSvgIcon$2.default)(/* @__PURE__ */ (0, _jsxRuntime$2.jsx)("path", {
      d: "M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h1.9c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10z"
    }), "LockOpen");
    default_1$2 = LockOpen.default = _default$2;
    var Lock = {};
    var _interopRequireDefault$1 = interopRequireDefaultExports;
    Object.defineProperty(Lock, "__esModule", {
      value: true
    });
    var default_1$1 = Lock.default = void 0;
    var _createSvgIcon$1 = _interopRequireDefault$1(requireCreateSvgIcon());
    var _jsxRuntime$1 = jsxRuntimeExports;
    var _default$1 = (0, _createSvgIcon$1.default)(/* @__PURE__ */ (0, _jsxRuntime$1.jsx)("path", {
      d: "M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"
    }), "Lock");
    default_1$1 = Lock.default = _default$1;
    const MuiSwitch = function(_ref) {
      var value2 = _ref.value, setValue2 = _ref.setValue, label = _ref.label, checkedLabel = _ref.checkedLabel, hideLabel = _ref.hideLabel, id2 = _ref.id, config2 = _ref.config, type = _ref.type;
      config2.settings.renderSize;
      var onChange = function onChange2(e2) {
        return setValue2(e2.target.checked);
      };
      var onClick = function onClick2() {
        return setValue2(!value2);
      };
      var postfix = type;
      var showLabel = value2 ? checkedLabel || label : label;
      var icon = value2 ? /* @__PURE__ */ React$4.createElement(default_1$1, null) : /* @__PURE__ */ React$4.createElement(default_1$2, null);
      if (type == "lock") {
        if (hideLabel) {
          return /* @__PURE__ */ React$4.createElement(IconButton$1, {
            key: id2 + postfix,
            onClick,
            size: "small"
          }, icon);
        } else {
          return /* @__PURE__ */ React$4.createElement(Button$1, {
            key: id2 + postfix,
            onClick,
            size: "small",
            startIcon: icon
          }, showLabel);
        }
      }
      return /* @__PURE__ */ React$4.createElement(FormControlLabel$1, {
        control: /* @__PURE__ */ React$4.createElement(Switch$1, {
          checked: !!value2,
          size: "small",
          onChange
        }),
        label: showLabel
      });
    };
    var ExpandMoreSharp = {};
    var _interopRequireDefault = interopRequireDefaultExports;
    Object.defineProperty(ExpandMoreSharp, "__esModule", {
      value: true
    });
    var default_1 = ExpandMoreSharp.default = void 0;
    var _createSvgIcon = _interopRequireDefault(requireCreateSvgIcon());
    var _jsxRuntime = jsxRuntimeExports;
    var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
      d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6-1.41-1.41z"
    }), "ExpandMoreSharp");
    default_1 = ExpandMoreSharp.default = _default;
    const MuiValueSources = function(_ref) {
      var valueSources = _ref.valueSources, valueSrc = _ref.valueSrc, title = _ref.title, setValueSrc2 = _ref.setValueSrc;
      _ref.readonly;
      var _React$useState = React$4.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), anchorEl = _React$useState2[0], setAnchorEl = _React$useState2[1];
      var handleOpen = function handleOpen2(event) {
        setAnchorEl(event.currentTarget);
      };
      var handleClose = function handleClose2() {
        setAnchorEl(null);
      };
      var toggleOpenClose = function toggleOpenClose2(event) {
        anchorEl ? handleClose() : handleOpen(event);
      };
      var handleChange = function handleChange2(_e, srcKey) {
        setValueSrc2(srcKey);
        handleClose();
      };
      var renderOptions = function renderOptions2(valueSources2) {
        return valueSources2.map(function(_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2), srcKey = _ref3[0], info = _ref3[1];
          var isSelected = valueSrc == srcKey || !valueSrc && srcKey == "value";
          var onClick = function onClick2(e2) {
            return handleChange(e2, srcKey);
          };
          return /* @__PURE__ */ React$4.createElement(MenuItem$1, {
            key: srcKey,
            value: srcKey,
            selected: isSelected,
            onClick
          }, !isSelected && /* @__PURE__ */ React$4.createElement(ListItemText$1, {
            inset: true
          }, info.label), isSelected && /* @__PURE__ */ React$4.createElement(React$4.Fragment, null, /* @__PURE__ */ React$4.createElement(ListItemIcon$1, null, /* @__PURE__ */ React$4.createElement(default_1$6, null)), info.label));
        });
      };
      var open = Boolean(anchorEl);
      return /* @__PURE__ */ React$4.createElement("div", null, /* @__PURE__ */ React$4.createElement(IconButton$1, {
        size: "small",
        onClick: toggleOpenClose
      }, /* @__PURE__ */ React$4.createElement(default_1, null)), /* @__PURE__ */ React$4.createElement(Menu$1, {
        anchorEl,
        open,
        onClose: handleClose
      }, /* @__PURE__ */ React$4.createElement(FormControl$1, {
        component: "fieldset",
        sx: {
          p: 0
        }
      }, /* @__PURE__ */ React$4.createElement(FormLabel$1, {
        component: "legend",
        sx: {
          p: 2,
          pt: 0,
          pb: 1
        }
      }, title), renderOptions(valueSources))));
    };
    const MuiConfirm = function(_ref) {
      var onOk = _ref.onOk, okText = _ref.okText, cancelText = _ref.cancelText, title = _ref.title, confirmFn = _ref.confirmFn;
      confirmFn({
        description: title || "Are you sure?",
        title: null,
        confirmationText: okText || "Ok",
        cancellationText: cancelText || "Cancel"
      }).then(onOk)["catch"](function() {
      });
    };
    var _DatePicker$propTypes;
    var isV6 = !!(DatePicker !== null && DatePicker !== void 0 && (_DatePicker$propTypes = DatePicker.propTypes) !== null && _DatePicker$propTypes !== void 0 && _DatePicker$propTypes.format);
    var MuiProvider = function MuiProvider2(_ref) {
      var config2 = _ref.config, children = _ref.children;
      var settingsTheme = config2.settings.theme || {};
      var settingsLocale = config2.settings.locale || {};
      var momentLocale = settingsLocale.moment;
      var themeConfig = settingsTheme.mui;
      var locale2 = settingsLocale.mui;
      var theme = createTheme(themeConfig, locale2, {
        palette: {
          neutral: {
            main: "#64748B",
            contrastText: "#fff"
          }
        }
      });
      var locProviderProps = isV6 ? {
        locale: momentLocale
      } : {
        adapterLocale: momentLocale
      };
      var base = /* @__PURE__ */ React$4.createElement("div", {
        className: "mui"
      }, children);
      var withProviders = /* @__PURE__ */ React$4.createElement(LocalizationProvider, _extends$1({
        dateAdapter: AdapterMoment
      }, locProviderProps), /* @__PURE__ */ React$4.createElement(ConfirmProvider, null, base));
      var withTheme = theme ? /* @__PURE__ */ React$4.createElement(ThemeProvider, {
        theme
      }, withProviders) : withProviders;
      return withTheme;
    };
    const MuiWidgets = {
      MuiTextWidget,
      MuiTextAreaWidget,
      MuiDateWidget,
      MuiDateTimeWidget,
      MuiTimeWidget,
      MuiSelectWidget,
      MuiNumberWidget,
      MuiSliderWidget,
      MuiRangeWidget,
      MuiBooleanWidget,
      MuiMultiSelectWidget,
      MuiAutocompleteWidget,
      MuiFieldSelect,
      MuiFieldAutocomplete,
      MuiIcon,
      MuiButton,
      MuiButtonGroup,
      MuiConjs,
      MuiSwitch,
      MuiValueSources,
      MuiConfirm,
      MuiUseConfirm: useConfirm,
      MuiProvider
    };
    function ownKeys(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var settings = _objectSpread(_objectSpread({}, BasicConfig.settings), {}, {
      renderField: function renderField(props, _ref) {
        var _props$customProps;
        var RCE = _ref.RCE, _ref$W = _ref.W, MuiFieldAutocomplete2 = _ref$W.MuiFieldAutocomplete, MuiFieldSelect2 = _ref$W.MuiFieldSelect;
        return props !== null && props !== void 0 && (_props$customProps = props.customProps) !== null && _props$customProps !== void 0 && _props$customProps.showSearch ? RCE(MuiFieldAutocomplete2, props) : RCE(MuiFieldSelect2, props);
      },
      renderOperator: function renderOperator(props, _ref2) {
        var RCE = _ref2.RCE, MuiFieldSelect2 = _ref2.W.MuiFieldSelect;
        return RCE(MuiFieldSelect2, props);
      },
      renderFunc: function renderFunc(props, _ref3) {
        var RCE = _ref3.RCE, MuiFieldSelect2 = _ref3.W.MuiFieldSelect;
        return RCE(MuiFieldSelect2, props);
      },
      renderConjs: function renderConjs(props, _ref4) {
        var RCE = _ref4.RCE, MuiConjs2 = _ref4.W.MuiConjs;
        return RCE(MuiConjs2, props);
      },
      renderSwitch: function renderSwitch(props, _ref5) {
        var RCE = _ref5.RCE, MuiSwitch2 = _ref5.W.MuiSwitch;
        return RCE(MuiSwitch2, props);
      },
      renderButton: function renderButton(props, _ref6) {
        var RCE = _ref6.RCE, MuiButton2 = _ref6.W.MuiButton;
        return RCE(MuiButton2, props);
      },
      renderIcon: function renderIcon(props, _ref7) {
        var RCE = _ref7.RCE, MuiIcon2 = _ref7.W.MuiIcon;
        return RCE(MuiIcon2, props);
      },
      renderButtonGroup: function renderButtonGroup(props, _ref8) {
        var RCE = _ref8.RCE, MuiButtonGroup2 = _ref8.W.MuiButtonGroup;
        return RCE(MuiButtonGroup2, props);
      },
      renderValueSources: function renderValueSources(props, _ref9) {
        var RCE = _ref9.RCE, MuiValueSources2 = _ref9.W.MuiValueSources;
        return RCE(MuiValueSources2, props);
      },
      renderFieldSources: function renderFieldSources(props, _ref10) {
        var RCE = _ref10.RCE, MuiValueSources2 = _ref10.W.MuiValueSources;
        return RCE(MuiValueSources2, props);
      },
      renderProvider: function renderProvider(props, _ref11) {
        var RCE = _ref11.RCE, MuiProvider2 = _ref11.W.MuiProvider;
        return RCE(MuiProvider2, props);
      },
      renderConfirm: function renderConfirm(props, _ref12) {
        var MuiConfirm2 = _ref12.W.MuiConfirm;
        return MuiConfirm2(props);
      },
      useConfirm: function useConfirm2(_ref13) {
        var MuiUseConfirm = _ref13.W.MuiUseConfirm;
        return MuiUseConfirm();
      }
    });
    var widgets = _objectSpread(_objectSpread({}, BasicConfig.widgets), {}, {
      text: _objectSpread(_objectSpread({}, BasicConfig.widgets.text), {}, {
        factory: function factory(props, _ref14) {
          var RCE = _ref14.RCE, MuiTextWidget2 = _ref14.W.MuiTextWidget;
          return RCE(MuiTextWidget2, props);
        }
      }),
      textarea: _objectSpread(_objectSpread({}, BasicConfig.widgets.textarea), {}, {
        factory: function factory(props, _ref15) {
          var RCE = _ref15.RCE, MuiTextAreaWidget2 = _ref15.W.MuiTextAreaWidget;
          return RCE(MuiTextAreaWidget2, props);
        }
      }),
      number: _objectSpread(_objectSpread({}, BasicConfig.widgets.number), {}, {
        factory: function factory(props, _ref16) {
          var RCE = _ref16.RCE, MuiNumberWidget2 = _ref16.W.MuiNumberWidget;
          return RCE(MuiNumberWidget2, props);
        }
      }),
      multiselect: _objectSpread(_objectSpread({}, BasicConfig.widgets.multiselect), {}, {
        factory: function factory(props, _ref17) {
          var RCE = _ref17.RCE, _ref17$W = _ref17.W, MuiAutocompleteWidget2 = _ref17$W.MuiAutocompleteWidget, MuiMultiSelectWidget2 = _ref17$W.MuiMultiSelectWidget;
          return props.asyncFetch || props.showSearch ? RCE(MuiAutocompleteWidget2, _objectSpread(_objectSpread({}, props), {}, {
            multiple: true
          })) : RCE(MuiMultiSelectWidget2, props);
        }
      }),
      select: _objectSpread(_objectSpread({}, BasicConfig.widgets.select), {}, {
        factory: function factory(props, _ref18) {
          var RCE = _ref18.RCE, _ref18$W = _ref18.W, MuiAutocompleteWidget2 = _ref18$W.MuiAutocompleteWidget, MuiSelectWidget2 = _ref18$W.MuiSelectWidget;
          return props.asyncFetch || props.showSearch ? RCE(MuiAutocompleteWidget2, props) : RCE(MuiSelectWidget2, props);
        }
      }),
      slider: _objectSpread(_objectSpread({}, BasicConfig.widgets.slider), {}, {
        factory: function factory(props, _ref19) {
          var RCE = _ref19.RCE, MuiSliderWidget2 = _ref19.W.MuiSliderWidget;
          return RCE(MuiSliderWidget2, props);
        }
      }),
      "boolean": _objectSpread(_objectSpread({}, BasicConfig.widgets["boolean"]), {}, {
        factory: function factory(props, _ref20) {
          var RCE = _ref20.RCE, MuiBooleanWidget2 = _ref20.W.MuiBooleanWidget;
          return RCE(MuiBooleanWidget2, props);
        }
      }),
      date: _objectSpread(_objectSpread({}, BasicConfig.widgets.date), {}, {
        factory: function factory(props, _ref21) {
          var RCE = _ref21.RCE, MuiDateWidget2 = _ref21.W.MuiDateWidget;
          return RCE(MuiDateWidget2, props);
        }
      }),
      time: _objectSpread(_objectSpread({}, BasicConfig.widgets.time), {}, {
        factory: function factory(props, _ref22) {
          var RCE = _ref22.RCE, MuiTimeWidget2 = _ref22.W.MuiTimeWidget;
          return RCE(MuiTimeWidget2, props);
        }
      }),
      datetime: _objectSpread(_objectSpread({}, BasicConfig.widgets.datetime), {}, {
        factory: function factory(props, _ref23) {
          var RCE = _ref23.RCE, MuiDateTimeWidget2 = _ref23.W.MuiDateTimeWidget;
          return RCE(MuiDateTimeWidget2, props);
        }
      }),
      rangeslider: _objectSpread(_objectSpread({}, BasicConfig.widgets.rangeslider), {}, {
        factory: function factory(props, _ref24) {
          var RCE = _ref24.RCE, MuiRangeWidget2 = _ref24.W.MuiRangeWidget;
          return RCE(MuiRangeWidget2, props);
        }
      })
    });
    var types = _objectSpread({}, BasicConfig.types);
    var ctx = _objectSpread(_objectSpread({}, BasicConfig.ctx), {}, {
      W: _objectSpread(_objectSpread({}, BasicConfig.ctx.W), MuiWidgets)
    });
    var config$1 = _objectSpread(_objectSpread({}, BasicConfig), {}, {
      ctx,
      types,
      widgets,
      settings
    });
    config$1 = Utils.ConfigMixins.addMixins(config$1, ["rangeslider"]);
    const MuiConfig = config$1;
    var debounce = debounce_1, isObject = isObject_1;
    var FUNC_ERROR_TEXT = "Expected a function";
    function throttle(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    var throttle_1 = throttle;
    const throttle$1 = /* @__PURE__ */ getDefaultExportFromCjs(throttle_1);
    const { simulateAsyncFetch } = Utils.Autocomplete;
    function createConfig(InitialConfig) {
      const demoListValues = [
        { title: "A", value: "a" },
        { title: "AA", value: "aa" },
        { title: "AAA1", value: "aaa1" },
        { title: "AAA2", value: "aaa2" },
        { title: "B", value: "b" },
        { title: "C", value: "c" },
        { title: "D", value: "d" },
        { title: "E", value: "e" },
        { title: "F", value: "f" },
        { title: "G", value: "g" },
        { title: "H", value: "h" },
        { title: "I", value: "i" },
        { title: "J", value: "j" }
      ];
      const simulatedAsyncFetch = simulateAsyncFetch(demoListValues, 3);
      const fields = {
        user: {
          label: "User",
          tooltip: "Group of fields",
          type: "!struct",
          subfields: {
            firstName: {
              label2: "Username",
              //only for menu's toggler
              type: "text",
              excludeOperators: ["proximity"],
              fieldSettings: {
                validateValue: (val, fieldSettings) => {
                  return val.length < 10;
                }
              },
              mainWidgetProps: {
                valueLabel: "Name",
                valuePlaceholder: "Enter name"
              }
            },
            login: {
              type: "text",
              tableName: "t1",
              // legacy: PR #18, PR #20
              excludeOperators: ["proximity"],
              fieldSettings: {
                validateValue: (val, fieldSettings) => {
                  return val.length < 10 && (val === "" || val.match(/^[A-Za-z0-9_-]+$/) !== null);
                }
              },
              mainWidgetProps: {
                valueLabel: "Login",
                valuePlaceholder: "Enter login"
              }
            }
          }
        },
        prox1: {
          label: "prox",
          tooltip: "Proximity search",
          type: "text",
          operators: ["proximity"]
        },
        num: {
          label: "Number",
          type: "number",
          preferWidgets: ["number"],
          fieldSettings: {
            min: -1,
            max: 5
          },
          funcs: ["LINEAR_REGRESSION"]
        },
        slider: {
          label: "Slider",
          type: "number",
          preferWidgets: ["slider", "rangeslider"],
          valueSources: ["value", "field"],
          fieldSettings: {
            min: 0,
            max: 100,
            step: 1,
            marks: {
              0: /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "0%" }),
              100: /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "100%" })
            }
          },
          //overrides
          widgets: {
            slider: {
              widgetProps: {
                valuePlaceholder: "..Slider"
              }
            }
          }
        },
        date: {
          label: "Date",
          type: "date",
          valueSources: ["value"]
        },
        time: {
          label: "Time",
          type: "time",
          valueSources: ["value"],
          operators: ["greater_or_equal", "less_or_equal", "between"],
          defaultOperator: "between"
        },
        datetime: {
          label: "DateTime",
          type: "datetime",
          valueSources: ["value"]
        },
        datetime2: {
          label: "DateTime2",
          type: "datetime",
          valueSources: ["field"]
        },
        color: {
          label: "Color",
          type: "select",
          valueSources: ["value"],
          fieldSettings: {
            // * old format:
            // listValues: {
            //     yellow: 'Yellow',
            //     green: 'Green',
            //     orange: 'Orange'
            // },
            // * new format:
            listValues: [
              { value: "yellow", title: "Yellow" },
              { value: "green", title: "Green" },
              { value: "orange", title: "Orange" }
            ]
          }
        },
        color2: {
          label: "Color2",
          type: "select",
          fieldSettings: {
            listValues: {
              yellow: "Yellow",
              green: "Green",
              orange: "Orange",
              purple: "Purple"
            }
          }
        },
        multicolor: {
          label: "Colors",
          type: "multiselect",
          fieldSettings: {
            listValues: {
              yellow: "Yellow",
              green: "Green",
              orange: "Orange"
            },
            allowCustomValues: true
          }
        },
        selecttree: {
          label: "Color (tree)",
          type: "treeselect",
          fieldSettings: {
            treeExpandAll: true,
            // * deep format (will be auto converted to flat format):
            // treeValues: [
            //     { value: "1", title: "Warm colors", children: [
            //         { value: "2", title: "Red" }, 
            //         { value: "3", title: "Orange" }
            //     ] },
            //     { value: "4", title: "Cool colors", children: [
            //         { value: "5", title: "Green" }, 
            //         { value: "6", title: "Blue", children: [
            //             { value: "7", title: "Sub blue", children: [
            //                 { value: "8", title: "Sub sub blue and a long text" }
            //             ] }
            //         ] }
            //     ] }
            // ],
            // * flat format:
            treeValues: [
              { value: "1", title: "Warm colors" },
              { value: "2", title: "Red", parent: "1" },
              { value: "3", title: "Orange", parent: "1" },
              { value: "4", title: "Cool colors" },
              { value: "5", title: "Green", parent: "4" },
              { value: "6", title: "Blue", parent: "4" },
              { value: "7", title: "Sub blue", parent: "6" },
              { value: "8", title: "Sub sub blue and a long text", parent: "7" }
            ]
          }
        },
        multiselecttree: {
          label: "Colors (tree)",
          type: "treemultiselect",
          fieldSettings: {
            treeExpandAll: true,
            treeValues: [
              {
                value: "1",
                title: "Warm colors",
                children: [
                  { value: "2", title: "Red" },
                  { value: "3", title: "Orange" }
                ]
              },
              {
                value: "4",
                title: "Cool colors",
                children: [
                  { value: "5", title: "Green" },
                  {
                    value: "6",
                    title: "Blue",
                    children: [
                      {
                        value: "7",
                        title: "Sub blue",
                        children: [
                          { value: "8", title: "Sub sub blue and a long text" }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        stock: {
          label: "In stock",
          type: "boolean",
          defaultValue: true,
          mainWidgetProps: {
            labelYes: "+",
            labelNo: "-"
          }
        },
        autocomplete: {
          label: "Autocomplete",
          type: "select",
          valueSources: ["value"],
          fieldSettings: {
            asyncFetch: simulatedAsyncFetch,
            useAsyncSearch: true,
            useLoadMore: true,
            forceAsyncSearch: false,
            allowCustomValues: false
          }
        },
        autocompleteMultiple: {
          label: "AutocompleteMultiple",
          type: "multiselect",
          valueSources: ["value"],
          fieldSettings: {
            asyncFetch: simulatedAsyncFetch,
            useAsyncSearch: true,
            useLoadMore: true,
            forceAsyncSearch: false,
            allowCustomValues: false
          }
        }
      };
      const conjunctions2 = {
        AND: InitialConfig.conjunctions.AND,
        OR: InitialConfig.conjunctions.OR
      };
      const proximity = {
        ...InitialConfig.operators.proximity,
        valueLabels: [
          { label: "Word 1", placeholder: "Enter first word" },
          { label: "Word 2", placeholder: "Enter second word" }
        ],
        textSeparators: [
          //'Word 1',
          //'Word 2'
        ],
        options: {
          ...InitialConfig.operators.proximity.options,
          optionLabel: "Near",
          // label on top of "near" selectbox (for config.settings.showLabels==true)
          optionTextBefore: "Near",
          // label before "near" selectbox (for config.settings.showLabels==false)
          optionPlaceholder: "Select words between",
          // placeholder for "near" selectbox
          minProximity: 2,
          maxProximity: 10,
          defaults: {
            proximity: 2
          },
          customProps: {}
        }
      };
      const operators2 = {
        ...InitialConfig.operators,
        // examples of  overriding
        between: {
          ...InitialConfig.operators.between,
          valueLabels: [
            "Value from",
            "Value to"
          ],
          textSeparators: [
            "from",
            "to"
          ]
        },
        proximity
      };
      const widgets2 = {
        ...InitialConfig.widgets,
        // examples of  overriding
        text: {
          ...InitialConfig.widgets.text
        },
        slider: {
          ...InitialConfig.widgets.slider,
          customProps: {
            width: "300px"
          }
        },
        rangeslider: {
          ...InitialConfig.widgets.rangeslider,
          customProps: {
            width: "300px"
          }
        },
        date: {
          ...InitialConfig.widgets.date,
          dateFormat: "DD.MM.YYYY",
          valueFormat: "YYYY-MM-DD"
        },
        time: {
          ...InitialConfig.widgets.time,
          timeFormat: "HH:mm",
          valueFormat: "HH:mm:ss"
        },
        datetime: {
          ...InitialConfig.widgets.datetime,
          timeFormat: "HH:mm",
          dateFormat: "DD.MM.YYYY",
          valueFormat: "YYYY-MM-DD HH:mm:ss"
        },
        func: {
          ...InitialConfig.widgets.func,
          customProps: {
            showSearch: true
          }
        },
        treeselect: {
          ...InitialConfig.widgets.treeselect,
          customProps: {
            showSearch: true
          }
        }
      };
      const types2 = {
        ...InitialConfig.types,
        // examples of  overriding
        boolean: merge$1({}, InitialConfig.types.boolean, {
          widgets: {
            boolean: {
              widgetProps: {
                hideOperator: true,
                operatorInlineLabel: "is"
              }
            }
          }
        })
      };
      const localeSettings = {
        locale: {
          moment: "ru"
        },
        valueLabel: "Value",
        valuePlaceholder: "Value",
        fieldLabel: "Field",
        operatorLabel: "Operator",
        fieldPlaceholder: "Select field",
        operatorPlaceholder: "Select operator",
        deleteLabel: void 0,
        addGroupLabel: "Add group",
        addRuleLabel: "Add rule",
        addSubRuleLabel: "Add sub rule",
        delGroupLabel: void 0,
        notLabel: "Not",
        fieldSourcesPopupTitle: "Select source",
        valueSourcesPopupTitle: "Select value source",
        removeRuleConfirmOptions: {
          title: "Are you sure delete this rule?",
          okText: "Yes",
          okType: "danger"
        },
        removeGroupConfirmOptions: {
          title: "Are you sure delete this group?",
          okText: "Yes",
          okType: "danger"
        }
      };
      const settings2 = {
        ...InitialConfig.settings,
        ...localeSettings,
        valueSourcesInfo: {
          value: {
            label: "Value"
          },
          field: {
            label: "Field",
            widget: "field"
          },
          func: {
            label: "Function",
            widget: "func"
          }
        },
        // canReorder: false,
        // canRegroup: false,
        // showNot: false,
        // showLabels: true,
        maxNesting: 3,
        canLeaveEmptyGroup: true
        //after deletion
      };
      const funcs = {
        LINEAR_REGRESSION,
        LOWER
      };
      const ctx2 = InitialConfig.ctx;
      const config2 = {
        ctx: ctx2,
        conjunctions: conjunctions2,
        operators: operators2,
        widgets: widgets2,
        types: types2,
        settings: settings2,
        fields,
        funcs
      };
      return config2;
    }
    const ruRU = {
      components: {
        MuiBreadcrumbs: {
          defaultProps: {
            expandText: "Показать полный путь"
          }
        },
        MuiTablePagination: {
          defaultProps: {
            getItemAriaLabel: (type) => {
              if (type === "first") {
                return "Перейти на первую страницу";
              }
              if (type === "last") {
                return "Перейти на последнюю страницу";
              }
              if (type === "next") {
                return "Перейти на следующую страницу";
              }
              return "Перейти на предыдущую страницу";
            },
            labelRowsPerPage: "Строк на странице:",
            labelDisplayedRows: ({
              from: from2,
              to: to2,
              count
            }) => `${from2}–${to2} из ${count !== -1 ? count : `более чем ${to2}`}`
          }
        },
        MuiRating: {
          defaultProps: {
            getLabelText: (value2) => {
              let pluralForm = "Звёзд";
              const lastDigit = value2 % 10;
              if (lastDigit > 1 && lastDigit < 5) {
                pluralForm = "Звезды";
              } else if (lastDigit === 1) {
                pluralForm = "Звезда";
              }
              return `${value2} ${pluralForm}`;
            },
            emptyLabelText: "Рейтинг отсутствует"
          }
        },
        MuiAutocomplete: {
          defaultProps: {
            clearText: "Очистить",
            closeText: "Закрыть",
            loadingText: "Загрузка…",
            noOptionsText: "Нет доступных вариантов",
            openText: "Открыть"
          }
        },
        MuiAlert: {
          defaultProps: {
            closeText: "Закрыть"
          }
        },
        MuiPagination: {
          defaultProps: {
            "aria-label": "Навигация по страницам",
            getItemAriaLabel: (type, page, selected) => {
              if (type === "page") {
                if (selected) {
                  return `${page} страница`;
                }
                return `Перейти на ${page} страницу`;
              }
              if (type === "first") {
                return "Перейти на первую страницу";
              }
              if (type === "last") {
                return "Перейти на последнюю страницу";
              }
              if (type === "next") {
                return "Перейти на следующую страницу";
              }
              return "Перейти на предыдущую страницу";
            }
          }
        }
      }
    };
    const styles = "";
    const configMixin = {
      settings: {
        locale: {
          mui: ruRU
        }
      }
    };
    const config = merge$1({}, createConfig(MuiConfig), configMixin);
    const value = {
      "type": "group",
      "id": "9a99988a-0123-4456-b89a-b1607f326fd8",
      "children1": {
        "a98ab9b9-cdef-4012-b456-71607f326fd9": {
          "type": "rule",
          "properties": {
            "field": "user.login",
            "operator": "equal",
            "value": [
              "batman"
            ],
            "valueSrc": [
              "value"
            ],
            "valueType": [
              "text"
            ]
          }
        },
        "98a8a9ba-0123-4456-b89a-b16e721c8cd0": {
          "type": "rule",
          "properties": {
            "field": "stock",
            "operator": "equal",
            "value": [
              false
            ],
            "valueSrc": [
              "value"
            ],
            "valueType": [
              "boolean"
            ]
          }
        },
        "aabbab8a-cdef-4012-b456-716e85c65e9c": {
          "type": "rule",
          "properties": {
            "field": "slider",
            "operator": "equal",
            "value": [
              35
            ],
            "valueSrc": [
              "value"
            ],
            "valueType": [
              "number"
            ]
          }
        }
      },
      "properties": {
        "conjunction": "AND",
        "not": false
      }
    };
    const stringify = JSON.stringify;
    const {
      queryBuilderFormat,
      jsonLogicFormat,
      queryString,
      mongodbFormat,
      sqlFormat,
      getTree,
      checkTree,
      loadTree,
      uuid,
      loadFromJsonLogic
    } = Utils;
    const preStyle = {
      backgroundColor: "darkgrey",
      margin: "10px",
      padding: "10px"
    };
    const preErrorStyle = {
      backgroundColor: "lightpink",
      margin: "10px",
      padding: "10px"
    };
    const emptyInitValue = { id: uuid(), type: "group" };
    const initValue = value && Object.keys(value).length > 0 ? value : emptyInitValue;
    const initTree = checkTree(loadTree(initValue), config);
    class DemoQueryBuilder extends reactExports.Component {
      constructor() {
        super(...arguments);
        this.state = {
          tree: initTree,
          config
        };
        this.render = () => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            QueryContainer,
            {
              ...config,
              value: this.state.tree,
              onChange: this.onChange,
              renderBuilder: this.renderBuilder
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("button", { onClick: this.resetValue, children: "reset" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("button", { onClick: this.clearValue, children: "clear" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "query-builder-result", children: this.renderResult(this.state) })
        ] });
        this.resetValue = () => {
          this.setState({
            tree: initTree
          });
        };
        this.clearValue = () => {
          this.setState({
            tree: loadTree(emptyInitValue)
          });
        };
        this.renderBuilder = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "query-builder-container", style: { padding: "10px" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "query-builder qb-lite", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Builder$1, { ...props }) }) });
        this.onChange = (immutableTree, config2) => {
          this.immutableTree = immutableTree;
          this.config = config2;
          this.updateResult();
          getTree(immutableTree);
          jsonLogicFormat(immutableTree, config2);
        };
        this.updateResult = throttle$1(() => {
          this.setState({
            tree: this.immutableTree,
            config: this.config
          });
        }, 100);
        this.renderResult = ({
          tree: immutableTree,
          config: config2
        }) => {
          const { logic: logic2, data, errors } = jsonLogicFormat(immutableTree, config2);
          return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              "stringFormat:",
              /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { style: preStyle, children: stringify(queryString(immutableTree, config2), void 0, 2) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("hr", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              "humanStringFormat:",
              /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { style: preStyle, children: stringify(queryString(immutableTree, config2, true), void 0, 2) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("hr", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              "sqlFormat:",
              /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { style: preStyle, children: stringify(sqlFormat(immutableTree, config2), void 0, 2) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("hr", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              "mongodbFormat:",
              /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { style: preStyle, children: stringify(mongodbFormat(immutableTree, config2), void 0, 2) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("hr", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "a",
                {
                  href: "http://jsonlogic.com/play.html",
                  target: "_blank",
                  rel: "noopener noreferrer",
                  children: "jsonLogicFormat"
                }
              ),
              ":",
              ((errors == null ? void 0 : errors.length) || 0) > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { style: preErrorStyle, children: stringify(errors, void 0, 2) }),
              !!logic2 && /* @__PURE__ */ jsxRuntimeExports.jsxs("pre", { style: preStyle, children: [
                "// Rule",
                ":",
                /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                stringify(logic2, void 0, 2),
                /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                /* @__PURE__ */ jsxRuntimeExports.jsx("hr", {}),
                "// Data",
                ":",
                /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                stringify(data, void 0, 2)
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("hr", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              "Tree:",
              /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { style: preStyle, children: stringify(getTree(immutableTree), void 0, 2) })
            ] })
          ] });
        };
      }
    }
    function App() {
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "App", children: /* @__PURE__ */ jsxRuntimeExports.jsx(DemoQueryBuilder, {}) });
    }
    const rootElement = document.getElementById("root");
    ReactDOM.render(/* @__PURE__ */ jsxRuntimeExports.jsx(App, {}), rootElement);
  }
});
export default require_index_001();
//# sourceMappingURL=index-16f2f499.js.map
